
6loWPAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000a22  00800200  0000787c  00007910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000787c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001a80  00800c22  00800c22  00008332  2**0
                  ALLOC
  3 .stab         000154e0  00000000  00000000  00008334  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001280d  00000000  00000000  0001d814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 96 24 	jmp	0x492c	; 0x492c <__vector_25>
      68:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      6c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      70:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      74:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      78:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      7c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      80:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__vector_32>
      84:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      88:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      8c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      90:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__vector_36>
      94:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__vector_37>
      98:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      9c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      ac:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      bc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      cc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      dc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      e0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      e4:	0c 94 95 0b 	jmp	0x172a	; 0x172a <__vector_57>
      e8:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_58>
      ec:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_59>
      f0:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_60>
      f4:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_61>
      f8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      fc:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_63>
     100:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_64>
     104:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     108:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     10c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     110:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     114:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     118:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     11c:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_71>

00000120 <__c.1988>:
     120:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d1 e4       	ldi	r29, 0x41	; 65
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <disable_wdt>:
     138:	14 be       	out	0x34, r1	; 52
     13a:	88 e1       	ldi	r24, 0x18	; 24
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	80 93 60 00 	sts	0x0060, r24
     144:	10 92 60 00 	sts	0x0060, r1
     148:	0f be       	out	0x3f, r0	; 63

0000014a <__do_copy_data>:
     14a:	1c e0       	ldi	r17, 0x0C	; 12
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b2 e0       	ldi	r27, 0x02	; 2
     150:	ec e7       	ldi	r30, 0x7C	; 124
     152:	f8 e7       	ldi	r31, 0x78	; 120
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	0b bf       	out	0x3b, r16	; 59
     158:	02 c0       	rjmp	.+4      	; 0x15e <__do_copy_data+0x14>
     15a:	07 90       	elpm	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	a2 32       	cpi	r26, 0x22	; 34
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <__do_copy_data+0x10>

00000164 <__do_clear_bss>:
     164:	16 e2       	ldi	r17, 0x26	; 38
     166:	a2 e2       	ldi	r26, 0x22	; 34
     168:	bc e0       	ldi	r27, 0x0C	; 12
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	a2 3a       	cpi	r26, 0xA2	; 162
     170:	b1 07       	cpc	r27, r17
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 ae 18 	call	0x315c	; 0x315c <main>
     178:	0c 94 3c 3c 	jmp	0x7878	; 0x7878 <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <sixlowpan_init>:
 *  Performs any needed setup of variables / functions.
 *  Call before using any 6lowpan stuff.
 */
void sixlowpan_init(void) {
	//UART_PRINT("sixlowpan_init\r\n");
	context_prefix[0].checksum = 0xfe80;
     180:	80 e8       	ldi	r24, 0x80	; 128
     182:	9e ef       	ldi	r25, 0xFE	; 254
     184:	90 93 31 1e 	sts	0x1E31, r25
     188:	80 93 30 1e 	sts	0x1E30, r24
	context_prefix[0].is_used = 1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 32 1e 	sts	0x1E32, r24

	//    sixlowpanSleep_init();
}
     192:	08 95       	ret

00000194 <sixlowpan_hc01_ping_setup_ipglobal>:
 *
 */
uint8_t * sixlowpan_hc01_ping_setup_ipglobal(uint8_t sequence) {
	//UART_PRINT("sixlowpan_hc01_ping_setup_ipglobal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     194:	24 e4       	ldi	r18, 0x44	; 68
     196:	3e e1       	ldi	r19, 0x1E	; 30
     198:	30 93 b6 1e 	sts	0x1EB6, r19
     19c:	20 93 b5 1e 	sts	0x1EB5, r18

	uint8_t * ipptr;

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	90 93 44 1e 	sts	0x1E44, r25
	IPHC_BUF->encoding[1] = 0;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     1a6:	9a e3       	ldi	r25, 0x3A	; 58
     1a8:	90 93 47 1e 	sts	0x1E47, r25
	hc01_ptr += 1;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     1ac:	90 ed       	ldi	r25, 0xD0	; 208
     1ae:	90 93 45 1e 	sts	0x1E45, r25
	IPHC_BUF->encoding[1] |= 1 << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is fancy-boy address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_I;
     1b2:	90 93 46 1e 	sts	0x1E46, r25

	ipptr = hc01_ptr;

	hc01_ptr += 16;
	mac_hdr_len = 20;
     1b6:	94 e1       	ldi	r25, 0x14	; 20
     1b8:	90 93 b7 1e 	sts	0x1EB7, r25

	/* Send echo reply */
	UIP_ICMP_BUF->type = ICMP6_ECHO_REQUEST;
     1bc:	f9 01       	movw	r30, r18
     1be:	74 96       	adiw	r30, 0x14	; 20
     1c0:	90 e8       	ldi	r25, 0x80	; 128
     1c2:	90 93 58 1e 	sts	0x1E58, r25
	UIP_ICMP_BUF->icmpchksum = 0;
     1c6:	13 82       	std	Z+3, r1	; 0x03
     1c8:	12 82       	std	Z+2, r1	; 0x02
	UIP_ICMP_BUF->icode = 0;
     1ca:	11 82       	std	Z+1, r1	; 0x01

	/* ICMP Header */
	hc01_ptr += 4;

	*hc01_ptr++ = 0; /* Identifier - not used */
     1cc:	10 92 5c 1e 	sts	0x1E5C, r1
	*hc01_ptr++ = 0;
     1d0:	10 92 5d 1e 	sts	0x1E5D, r1

	*hc01_ptr++ = 0; /* Sequence number */
     1d4:	10 92 5e 1e 	sts	0x1E5E, r1
	*hc01_ptr++ = sequence;
     1d8:	80 93 5f 1e 	sts	0x1E5F, r24
     1dc:	24 5e       	subi	r18, 0xE4	; 228
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	30 93 25 0c 	sts	0x0C25, r19
     1e4:	20 93 24 0c 	sts	0x0C24, r18

	/* Just send echo request, no data with it */
	mac_len = mac_hdr_len + 8;
     1e8:	8c e1       	ldi	r24, 0x1C	; 28
     1ea:	80 93 b8 1e 	sts	0x1EB8, r24

	return ipptr;
}
     1ee:	c9 01       	movw	r24, r18
     1f0:	48 97       	sbiw	r24, 0x18	; 24
     1f2:	08 95       	ret

000001f4 <sixlowpan_hc01_udp_setup_ipglobal>:
 *  @endcode
 */
uint8_t * sixlowpan_hc01_udp_setup_ipglobal(void) {
	//UART_PRINT("sixlowpan_hc01_udp_setup_ipglobal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     1f4:	84 e4       	ldi	r24, 0x44	; 68
     1f6:	9e e1       	ldi	r25, 0x1E	; 30
     1f8:	90 93 b6 1e 	sts	0x1EB6, r25
     1fc:	80 93 b5 1e 	sts	0x1EB5, r24

	uint8_t * ipptr;

	udpLocalAddr = DEFAULT_COORD_ADDR;
     200:	10 92 29 0c 	sts	0x0C29, r1
     204:	10 92 28 0c 	sts	0x0C28, r1

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	20 93 44 1e 	sts	0x1E44, r18
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_NH_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     20e:	20 ef       	ldi	r18, 0xF0	; 240
     210:	20 93 45 1e 	sts	0x1E45, r18
	IPHC_BUF->encoding[1] |= 1 << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is fancy-boy address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_I;
     214:	20 ed       	ldi	r18, 0xD0	; 208
     216:	20 93 46 1e 	sts	0x1E46, r18

	ipptr = hc01_ptr;

	hc01_ptr += 16;
     21a:	43 96       	adiw	r24, 0x13	; 19
     21c:	90 93 25 0c 	sts	0x0C25, r25
     220:	80 93 24 0c 	sts	0x0C24, r24
	mac_hdr_len = 19;
     224:	23 e1       	ldi	r18, 0x13	; 19
     226:	20 93 b7 1e 	sts	0x1EB7, r18
	mac_len = mac_hdr_len;
     22a:	20 93 b8 1e 	sts	0x1EB8, r18

	return ipptr;
}
     22e:	40 97       	sbiw	r24, 0x10	; 16
     230:	08 95       	ret

00000232 <sixlowpan_hc01_udp_setup_iplocal>:
 *
 */
void sixlowpan_hc01_udp_setup_iplocal(uint16_t addr) {
	//UART_PRINT("sixlowpan_hc01_udp_setup_iplocal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     232:	24 e4       	ldi	r18, 0x44	; 68
     234:	3e e1       	ldi	r19, 0x1E	; 30
     236:	30 93 b6 1e 	sts	0x1EB6, r19
     23a:	20 93 b5 1e 	sts	0x1EB5, r18

	udpLocalAddr = addr;
     23e:	90 93 29 0c 	sts	0x0C29, r25
     242:	80 93 28 0c 	sts	0x0C28, r24

	hc01_ptr = mac_ptr + 3;
     246:	2d 5f       	subi	r18, 0xFD	; 253
     248:	3f 4f       	sbci	r19, 0xFF	; 255
     24a:	30 93 25 0c 	sts	0x0C25, r19
     24e:	20 93 24 0c 	sts	0x0C24, r18

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     252:	93 e0       	ldi	r25, 0x03	; 3
     254:	90 93 44 1e 	sts	0x1E44, r25
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_NH_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     258:	80 ef       	ldi	r24, 0xF0	; 240
     25a:	80 93 45 1e 	sts	0x1E45, r24
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Source IP address: Global prefix */
	IPHC_BUF->encoding[1] |= 1;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_0;
     25e:	8d ed       	ldi	r24, 0xDD	; 221
     260:	80 93 46 1e 	sts	0x1E46, r24

	mac_hdr_len = 3;
     264:	90 93 b7 1e 	sts	0x1EB7, r25
	mac_len = mac_hdr_len;
     268:	90 93 b8 1e 	sts	0x1EB8, r25

	return;
}
     26c:	08 95       	ret

0000026e <sixlowpan_hc01_udp_setup_ports>:
 *  The UDP packet must already have been set up with
 *  a call to sixlowpan_hc01_setup_ipxxx(), or the hc01_ptr
 *  must be manually set to point to the proper point in the
 *  6lowpan buffer.
 */
void sixlowpan_hc01_udp_setup_ports(uint16_t srcport, uint16_t destport) {
     26e:	9c 01       	movw	r18, r24
	//UART_PRINT("sixlowpan_hc01_udp_setup_ports\r\n");
	/* UDP Port Calculations */
	if (srcport >= SIXLOWPAN_UDP_PORT_MIN && srcport < SIXLOWPAN_UDP_PORT_MAX
     270:	80 5b       	subi	r24, 0xB0	; 176
     272:	90 4f       	sbci	r25, 0xF0	; 240
     274:	0f 97       	sbiw	r24, 0x0f	; 15
     276:	f0 f4       	brcc	.+60     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
     278:	80 ef       	ldi	r24, 0xF0	; 240
     27a:	60 3b       	cpi	r22, 0xB0	; 176
     27c:	78 07       	cpc	r23, r24
     27e:	d0 f0       	brcs	.+52     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
     280:	80 ef       	ldi	r24, 0xF0	; 240
     282:	6f 3b       	cpi	r22, 0xBF	; 191
     284:	78 07       	cpc	r23, r24
     286:	b0 f4       	brcc	.+44     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
			&& destport >= SIXLOWPAN_UDP_PORT_MIN && destport
			< SIXLOWPAN_UDP_PORT_MAX) {
		/* we can compress. Copy compressed ports, full chcksum */
		*hc01_ptr = SIXLOWPAN_NHC_UDP_C;
     288:	e0 91 24 0c 	lds	r30, 0x0C24
     28c:	f0 91 25 0c 	lds	r31, 0x0C25
     290:	8b ef       	ldi	r24, 0xFB	; 251
     292:	80 83       	st	Z, r24
		*(hc01_ptr + 1) = (u8_t) ((srcport - SIXLOWPAN_UDP_PORT_MIN) << 4)
     294:	86 2f       	mov	r24, r22
     296:	80 5b       	subi	r24, 0xB0	; 176
     298:	92 2f       	mov	r25, r18
     29a:	92 95       	swap	r25
     29c:	90 7f       	andi	r25, 0xF0	; 240
     29e:	89 0f       	add	r24, r25
     2a0:	81 83       	std	Z+1, r24	; 0x01
				+ (u8_t) ((destport - SIXLOWPAN_UDP_PORT_MIN));

		hc01_ptr += 2;
     2a2:	32 96       	adiw	r30, 0x02	; 2
     2a4:	f0 93 25 0c 	sts	0x0C25, r31
     2a8:	e0 93 24 0c 	sts	0x0C24, r30
		mac_hdr_len += 2;
     2ac:	80 91 b7 1e 	lds	r24, 0x1EB7
     2b0:	8e 5f       	subi	r24, 0xFE	; 254
     2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <sixlowpan_hc01_udp_setup_ports+0x6a>
	} else {
		/* we cannot compress. Copy uncompressed ports, full chcksum */
		*hc01_ptr = SIXLOWPAN_NHC_UDP_I;
     2b4:	e0 91 24 0c 	lds	r30, 0x0C24
     2b8:	f0 91 25 0c 	lds	r31, 0x0C25
     2bc:	88 ef       	ldi	r24, 0xF8	; 248
     2be:	80 83       	st	Z, r24
		*((uint16_t *) (hc01_ptr + 1)) = HTONS(srcport);
     2c0:	31 83       	std	Z+1, r19	; 0x01
     2c2:	22 83       	std	Z+2, r18	; 0x02
		*((uint16_t *) (hc01_ptr + 3)) = HTONS(destport);
     2c4:	73 83       	std	Z+3, r23	; 0x03
     2c6:	64 83       	std	Z+4, r22	; 0x04

		hc01_ptr += 5;
     2c8:	35 96       	adiw	r30, 0x05	; 5
     2ca:	f0 93 25 0c 	sts	0x0C25, r31
     2ce:	e0 93 24 0c 	sts	0x0C24, r30
		mac_hdr_len += 5;
     2d2:	80 91 b7 1e 	lds	r24, 0x1EB7
     2d6:	8b 5f       	subi	r24, 0xFB	; 251
     2d8:	80 93 b7 1e 	sts	0x1EB7, r24
	}

	hc01_chksum_ptr = (uint16_t *) hc01_ptr;
     2dc:	e0 91 24 0c 	lds	r30, 0x0C24
     2e0:	f0 91 25 0c 	lds	r31, 0x0C25
     2e4:	f0 93 27 0c 	sts	0x0C27, r31
     2e8:	e0 93 26 0c 	sts	0x0C26, r30

	/* Add checksum of source and destination */
	*hc01_chksum_ptr = srcport + destport;
     2ec:	cb 01       	movw	r24, r22
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	91 83       	std	Z+1, r25	; 0x01
     2f4:	80 83       	st	Z, r24

	/* Check for overflow... */
	if ((*hc01_chksum_ptr < srcport) || (*hc01_chksum_ptr < destport)) {
     2f6:	82 17       	cp	r24, r18
     2f8:	93 07       	cpc	r25, r19
     2fa:	18 f0       	brcs	.+6      	; 0x302 <sixlowpan_hc01_udp_setup_ports+0x94>
     2fc:	86 17       	cp	r24, r22
     2fe:	97 07       	cpc	r25, r23
     300:	18 f4       	brcc	.+6      	; 0x308 <sixlowpan_hc01_udp_setup_ports+0x9a>
		(*hc01_chksum_ptr)++;
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	80 83       	st	Z, r24
	}

	hc01_ptr += 2;
     308:	32 96       	adiw	r30, 0x02	; 2
     30a:	f0 93 25 0c 	sts	0x0C25, r31
     30e:	e0 93 24 0c 	sts	0x0C24, r30
	mac_hdr_len += 2;
     312:	80 91 b7 1e 	lds	r24, 0x1EB7
     316:	8e 5f       	subi	r24, 0xFE	; 254
     318:	80 93 b7 1e 	sts	0x1EB7, r24

	mac_len = mac_hdr_len;
     31c:	80 93 b8 1e 	sts	0x1EB8, r24
}
     320:	08 95       	ret

00000322 <sixlowpan_hc01_udp_get_payloadptr>:
 *  The use can use this to load a payload into the sixlowpan
 *  buffer directly.
 */
uint8_t * sixlowpan_hc01_udp_get_payloadptr(void) {
	return hc01_ptr;
}
     322:	80 91 24 0c 	lds	r24, 0x0C24
     326:	90 91 25 0c 	lds	r25, 0x0C25
     32a:	08 95       	ret

0000032c <sixlowpan_hc01_udp_set_payloadsize>:

/** @brief Set amount of data user has loaded into payload section
 *
 */
void sixlowpan_hc01_udp_set_payloadsize(uint8_t size) {
	hc01_ptr += size;
     32c:	20 91 24 0c 	lds	r18, 0x0C24
     330:	30 91 25 0c 	lds	r19, 0x0C25
     334:	28 0f       	add	r18, r24
     336:	31 1d       	adc	r19, r1
     338:	30 93 25 0c 	sts	0x0C25, r19
     33c:	20 93 24 0c 	sts	0x0C24, r18
	mac_len += size;
     340:	90 91 b8 1e 	lds	r25, 0x1EB8
     344:	98 0f       	add	r25, r24
     346:	90 93 b8 1e 	sts	0x1EB8, r25
}
     34a:	08 95       	ret

0000034c <sixlowpan_hc01_pseudochksum>:
 * next-header field, and packet length. This
 * routine calculates what the checksum should be for
 * a HC01 packet, but without actually decompressing
 * the entire packet (which would waste space).
 */
uint16_t sixlowpan_hc01_pseudochksum(void) {
     34c:	7f 92       	push	r7
     34e:	8f 92       	push	r8
     350:	9f 92       	push	r9
     352:	af 92       	push	r10
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29

	uint8_t * hc01_ptr_temp;
	uint8_t mac_hdr_len_temp;

	/* This will be restored at the end */
	mac_hdr_len_temp = mac_hdr_len;
     366:	70 90 b7 1e 	lds	r7, 0x1EB7
	hc01_ptr_temp = hc01_ptr;
     36a:	80 90 24 0c 	lds	r8, 0x0C24
     36e:	90 90 25 0c 	lds	r9, 0x0C25

	hc01_ptr = mac_ptr + 3;
     372:	a0 91 b5 1e 	lds	r26, 0x1EB5
     376:	b0 91 b6 1e 	lds	r27, 0x1EB6
     37a:	13 96       	adiw	r26, 0x03	; 3
     37c:	b0 93 25 0c 	sts	0x0C25, r27
     380:	a0 93 24 0c 	sts	0x0C24, r26
     384:	13 97       	sbiw	r26, 0x03	; 3
	mac_hdr_len = 0;
     386:	10 92 b7 1e 	sts	0x1EB7, r1

	/* These don't affect checksum, just location */
	/* Version & Flow Uncompressed */
	if ((IPHC_BUF->encoding[0] & 0x40) == 0) {
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	8c 91       	ld	r24, X
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	68 2f       	mov	r22, r24
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	86 fd       	sbrc	r24, 6
     396:	10 c0       	rjmp	.+32     	; 0x3b8 <sixlowpan_hc01_pseudochksum+0x6c>
		if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     398:	87 fd       	sbrc	r24, 7
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <sixlowpan_hc01_pseudochksum+0x5e>
			/* Traffic class is carried inline */
			hc01_ptr += 4;
     39c:	17 96       	adiw	r26, 0x07	; 7
     39e:	b0 93 25 0c 	sts	0x0C25, r27
     3a2:	a0 93 24 0c 	sts	0x0C24, r26
     3a6:	17 97       	sbiw	r26, 0x07	; 7
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
		} else {
			/* Traffic class is compressed */
			hc01_ptr += 3;
     3aa:	16 96       	adiw	r26, 0x06	; 6
     3ac:	b0 93 25 0c 	sts	0x0C25, r27
     3b0:	a0 93 24 0c 	sts	0x0C24, r26
     3b4:	16 97       	sbiw	r26, 0x06	; 6
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
		}
	} else
	/* Version & Flow Compressed */
	{
		if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     3b8:	87 fd       	sbrc	r24, 7
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
			/* Traffic class is carried inline */
			hc01_ptr += 1;
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	b0 93 25 0c 	sts	0x0C25, r27
     3c2:	a0 93 24 0c 	sts	0x0C24, r26
     3c6:	14 97       	sbiw	r26, 0x04	; 4
			;
		}
	}

	/* Next-header field */
	if (IPHC_BUF->encoding[0] & SIXLOWPAN_IPHC_NH_C) {
     3c8:	65 ff       	sbrs	r22, 5
     3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <sixlowpan_hc01_pseudochksum+0x8a>
     3cc:	29 e1       	ldi	r18, 0x19	; 25
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <sixlowpan_hc01_pseudochksum+0xa4>
		checksum += UIP_PROTO_UDP; /* Currently only UDP compressed like that */
		checksum += 8; /* UDP has 8 bytes in UDP header, this will not be calculated
		 properly later when 'upper layer length' is found, so we
		 add them here */
	} else {
		checksum += *hc01_ptr;
     3d6:	e0 91 24 0c 	lds	r30, 0x0C24
     3da:	f0 91 25 0c 	lds	r31, 0x0C25
     3de:	81 91       	ld	r24, Z+
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
		hc01_ptr++;
     3e8:	f0 93 25 0c 	sts	0x0C25, r31
     3ec:	e0 93 24 0c 	sts	0x0C24, r30
	}

	/* Source address IID is ALWAYS based on MAC address */
	checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x30) >> 4].checksum;
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	8c 91       	ld	r24, X
     3f4:	c8 2f       	mov	r28, r24
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
	checksum += (macConfig.panId | (uint16_t) 0x0200);
     3f8:	80 91 c8 1f 	lds	r24, 0x1FC8
     3fc:	90 91 c9 1f 	lds	r25, 0x1FC9
     400:	92 60       	ori	r25, 0x02	; 2
     402:	5c 01       	movw	r10, r24
     404:	cc 24       	eor	r12, r12
     406:	dd 24       	eor	r13, r13
     408:	ce 01       	movw	r24, r28
     40a:	80 73       	andi	r24, 0x30	; 48
     40c:	90 70       	andi	r25, 0x00	; 0
     40e:	b4 e0       	ldi	r27, 0x04	; 4
     410:	95 95       	asr	r25
     412:	87 95       	ror	r24
     414:	ba 95       	dec	r27
     416:	e1 f7       	brne	.-8      	; 0x410 <sixlowpan_hc01_pseudochksum+0xc4>
     418:	fc 01       	movw	r30, r24
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	e8 0f       	add	r30, r24
     420:	f9 1f       	adc	r31, r25
     422:	e0 5d       	subi	r30, 0xD0	; 208
     424:	f1 4e       	sbci	r31, 0xE1	; 225
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	7c 01       	movw	r14, r24
     42c:	00 e0       	ldi	r16, 0x00	; 0
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	80 91 ca 1f 	lds	r24, 0x1FCA
     434:	90 91 cb 1f 	lds	r25, 0x1FCB
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	e8 0e       	add	r14, r24
     43e:	f9 1e       	adc	r15, r25
     440:	0a 1f       	adc	r16, r26
     442:	1b 1f       	adc	r17, r27
	checksum += 0xfe00;
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	9e ef       	ldi	r25, 0xFE	; 254
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e8 0e       	add	r14, r24
     44e:	f9 1e       	adc	r15, r25
     450:	0a 1f       	adc	r16, r26
     452:	1b 1f       	adc	r17, r27
	checksum += 0x00ff;
     454:	ea 0c       	add	r14, r10
     456:	fb 1c       	adc	r15, r11
     458:	0c 1d       	adc	r16, r12
     45a:	1d 1d       	adc	r17, r13
	checksum += macConfig.shortAddress;
     45c:	e2 0e       	add	r14, r18
     45e:	f3 1e       	adc	r15, r19
     460:	04 1f       	adc	r16, r20
     462:	15 1f       	adc	r17, r21

	/* Check if TTL is uncompressed... */
	if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     464:	68 71       	andi	r22, 0x18	; 24
     466:	70 70       	andi	r23, 0x00	; 0
     468:	67 2b       	or	r22, r23
     46a:	49 f4       	brne	.+18     	; 0x47e <sixlowpan_hc01_pseudochksum+0x132>
		hc01_ptr++;
     46c:	80 91 24 0c 	lds	r24, 0x0C24
     470:	90 91 25 0c 	lds	r25, 0x0C25
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	90 93 25 0c 	sts	0x0C25, r25
     47a:	80 93 24 0c 	sts	0x0C24, r24
	}

	/* Dest address could be anything... more complicated! */
	switch (IPHC_BUF->encoding[1] & 0x0C) {
     47e:	ce 01       	movw	r24, r28
     480:	8c 70       	andi	r24, 0x0C	; 12
     482:	90 70       	andi	r25, 0x00	; 0
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	91 05       	cpc	r25, r1
     488:	09 f4       	brne	.+2      	; 0x48c <sixlowpan_hc01_pseudochksum+0x140>
     48a:	5f c0       	rjmp	.+190    	; 0x54a <sixlowpan_hc01_pseudochksum+0x1fe>
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	91 05       	cpc	r25, r1
     490:	24 f4       	brge	.+8      	; 0x49a <sixlowpan_hc01_pseudochksum+0x14e>
     492:	89 2b       	or	r24, r25
     494:	09 f4       	brne	.+2      	; 0x498 <sixlowpan_hc01_pseudochksum+0x14c>
     496:	82 c0       	rjmp	.+260    	; 0x59c <sixlowpan_hc01_pseudochksum+0x250>
     498:	97 c0       	rjmp	.+302    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
     49a:	88 30       	cpi	r24, 0x08	; 8
     49c:	91 05       	cpc	r25, r1
     49e:	d1 f0       	breq	.+52     	; 0x4d4 <sixlowpan_hc01_pseudochksum+0x188>
     4a0:	0c 97       	sbiw	r24, 0x0c	; 12
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <sixlowpan_hc01_pseudochksum+0x15a>
     4a4:	91 c0       	rjmp	.+290    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
	case SIXLOWPAN_IPHC_DAM_0:

		/* IID Based on MAC Address */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
		checksum += (macConfig.panId | (uint16_t) 0x0200);
     4a6:	ce 01       	movw	r24, r28
     4a8:	83 70       	andi	r24, 0x03	; 3
     4aa:	90 70       	andi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e8 0f       	add	r30, r24
     4b4:	f9 1f       	adc	r31, r25
     4b6:	e0 5d       	subi	r30, 0xD0	; 208
     4b8:	f1 4e       	sbci	r31, 0xE1	; 225
     4ba:	80 81       	ld	r24, Z
     4bc:	91 81       	ldd	r25, Z+1	; 0x01
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	91 40       	sbci	r25, 0x01	; 1
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 4f       	sbci	r27, 0xFF	; 255
		checksum += 0xfe00;
     4ca:	8a 0d       	add	r24, r10
     4cc:	9b 1d       	adc	r25, r11
     4ce:	ac 1d       	adc	r26, r12
     4d0:	bd 1d       	adc	r27, r13
     4d2:	36 c0       	rjmp	.+108    	; 0x540 <sixlowpan_hc01_pseudochksum+0x1f4>
		checksum += 0x00ff;
		checksum += 0x0000; /* Router is always address 0 we assume!! */
		break;

	case SIXLOWPAN_IPHC_DAM_16:
		if ((*hc01_ptr & 0x80) == 0) {
     4d4:	e0 91 24 0c 	lds	r30, 0x0C24
     4d8:	f0 91 25 0c 	lds	r31, 0x0C25
     4dc:	40 81       	ld	r20, Z
     4de:	21 81       	ldd	r18, Z+1	; 0x01
     4e0:	47 fd       	sbrc	r20, 7
     4e2:	20 c0       	rjmp	.+64     	; 0x524 <sixlowpan_hc01_pseudochksum+0x1d8>
			/* unicast address */
			checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	94 2f       	mov	r25, r20
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	28 2b       	or	r18, r24
     4ec:	39 2b       	or	r19, r25
     4ee:	44 27       	eor	r20, r20
     4f0:	37 fd       	sbrc	r19, 7
     4f2:	40 95       	com	r20
     4f4:	54 2f       	mov	r21, r20
     4f6:	ce 01       	movw	r24, r28
     4f8:	83 70       	andi	r24, 0x03	; 3
     4fa:	90 70       	andi	r25, 0x00	; 0
     4fc:	fc 01       	movw	r30, r24
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	e8 0f       	add	r30, r24
     504:	f9 1f       	adc	r31, r25
     506:	e0 5d       	subi	r30, 0xD0	; 208
     508:	f1 4e       	sbci	r31, 0xE1	; 225
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	28 0f       	add	r18, r24
     514:	39 1f       	adc	r19, r25
     516:	4a 1f       	adc	r20, r26
     518:	5b 1f       	adc	r21, r27
			checksum += (*hc01_ptr << 8) | (*(hc01_ptr + 1));
     51a:	e2 0e       	add	r14, r18
     51c:	f3 1e       	adc	r15, r19
     51e:	04 1f       	adc	r16, r20
     520:	15 1f       	adc	r17, r21
     522:	52 c0       	rjmp	.+164    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
			hc01_ptr += 2;
		} else {
			/* Multicast address - we just assume we know the multicast group */
			checksum += 0xFF00;
     524:	82 2f       	mov	r24, r18
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a0 e0       	ldi	r26, 0x00	; 0
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	80 50       	subi	r24, 0x00	; 0
     52e:	91 40       	sbci	r25, 0x01	; 1
     530:	af 4f       	sbci	r26, 0xFF	; 255
     532:	bf 4f       	sbci	r27, 0xFF	; 255
			checksum += ((*hc01_ptr >> 1) & 0x0F);
     534:	46 95       	lsr	r20
     536:	4f 70       	andi	r20, 0x0F	; 15
     538:	84 0f       	add	r24, r20
     53a:	91 1d       	adc	r25, r1
     53c:	a1 1d       	adc	r26, r1
     53e:	b1 1d       	adc	r27, r1
			checksum += *(hc01_ptr + 1);
     540:	e8 0e       	add	r14, r24
     542:	f9 1e       	adc	r15, r25
     544:	0a 1f       	adc	r16, r26
     546:	1b 1f       	adc	r17, r27
     548:	3f c0       	rjmp	.+126    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
			hc01_ptr += 2;
		}
		break;
	case SIXLOWPAN_IPHC_DAM_64:
		/* Add lower 64-bits */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
     54a:	ce 01       	movw	r24, r28
     54c:	83 70       	andi	r24, 0x03	; 3
     54e:	90 70       	andi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	e8 0f       	add	r30, r24
     558:	f9 1f       	adc	r31, r25
     55a:	e0 5d       	subi	r30, 0xD0	; 208
     55c:	f1 4e       	sbci	r31, 0xE1	; 225
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e8 0e       	add	r14, r24
     568:	f9 1e       	adc	r15, r25
     56a:	0a 1f       	adc	r16, r26
     56c:	1b 1f       	adc	r17, r27
		for (i = 0; i < 8; i += 2) {
			checksum += (uint16_t) (*(hc01_ptr + i) << 8)
     56e:	e0 91 24 0c 	lds	r30, 0x0C24
     572:	f0 91 25 0c 	lds	r31, 0x0C25
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	30 81       	ld	r19, Z
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	81 81       	ldd	r24, Z+1	; 0x01
     57e:	d9 01       	movw	r26, r18
     580:	a8 0f       	add	r26, r24
     582:	b1 1d       	adc	r27, r1
     584:	cd 01       	movw	r24, r26
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e8 0e       	add	r14, r24
     58c:	f9 1e       	adc	r15, r25
     58e:	0a 1f       	adc	r16, r26
     590:	1b 1f       	adc	r17, r27
		}
		break;
	case SIXLOWPAN_IPHC_DAM_64:
		/* Add lower 64-bits */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
		for (i = 0; i < 8; i += 2) {
     592:	4e 5f       	subi	r20, 0xFE	; 254
     594:	32 96       	adiw	r30, 0x02	; 2
     596:	48 30       	cpi	r20, 0x08	; 8
     598:	79 f7       	brne	.-34     	; 0x578 <sixlowpan_hc01_pseudochksum+0x22c>
     59a:	16 c0       	rjmp	.+44     	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>

		hc01_ptr += 8;
		break;
	case SIXLOWPAN_IPHC_DAM_I:
		for (i = 0; i < 16; i += 2) {
			checksum += (uint16_t) (*(hc01_ptr + i) << 8)
     59c:	e0 91 24 0c 	lds	r30, 0x0C24
     5a0:	f0 91 25 0c 	lds	r31, 0x0C25
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	30 81       	ld	r19, Z
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	b9 01       	movw	r22, r18
     5ae:	68 0f       	add	r22, r24
     5b0:	71 1d       	adc	r23, r1
     5b2:	cb 01       	movw	r24, r22
     5b4:	a0 e0       	ldi	r26, 0x00	; 0
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e8 0e       	add	r14, r24
     5ba:	f9 1e       	adc	r15, r25
     5bc:	0a 1f       	adc	r16, r26
     5be:	1b 1f       	adc	r17, r27
		}

		hc01_ptr += 8;
		break;
	case SIXLOWPAN_IPHC_DAM_I:
		for (i = 0; i < 16; i += 2) {
     5c0:	4e 5f       	subi	r20, 0xFE	; 254
     5c2:	32 96       	adiw	r30, 0x02	; 2
     5c4:	40 31       	cpi	r20, 0x10	; 16
     5c6:	79 f7       	brne	.-34     	; 0x5a6 <sixlowpan_hc01_pseudochksum+0x25a>
		hc01_ptr += 16;
		break;
	}

	/* Restore pointer */
	hc01_ptr = hc01_ptr_temp;
     5c8:	90 92 25 0c 	sts	0x0C25, r9
     5cc:	80 92 24 0c 	sts	0x0C24, r8
	mac_hdr_len = mac_hdr_len_temp;
     5d0:	70 92 b7 1e 	sts	0x1EB7, r7

	/* Upper length packet length */
	checksum += mac_len - mac_hdr_len;
     5d4:	80 91 b8 1e 	lds	r24, 0x1EB8
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	87 19       	sub	r24, r7
     5dc:	91 09       	sbc	r25, r1
     5de:	9c 01       	movw	r18, r24
     5e0:	44 27       	eor	r20, r20
     5e2:	37 fd       	sbrc	r19, 7
     5e4:	40 95       	com	r20
     5e6:	54 2f       	mov	r21, r20
     5e8:	2e 0d       	add	r18, r14
     5ea:	3f 1d       	adc	r19, r15
     5ec:	40 1f       	adc	r20, r16
     5ee:	51 1f       	adc	r21, r17
     5f0:	08 c0       	rjmp	.+16     	; 0x602 <sixlowpan_hc01_pseudochksum+0x2b6>

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
     5f2:	ca 01       	movw	r24, r20
     5f4:	aa 27       	eor	r26, r26
     5f6:	bb 27       	eor	r27, r27
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	9c 01       	movw	r18, r24
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0

	/* Upper length packet length */
	checksum += mac_len - mac_hdr_len;

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
     602:	da 01       	movw	r26, r20
     604:	c9 01       	movw	r24, r18
     606:	80 70       	andi	r24, 0x00	; 0
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	a1 05       	cpc	r26, r1
     60e:	b1 05       	cpc	r27, r1
     610:	81 f7       	brne	.-32     	; 0x5f2 <sixlowpan_hc01_pseudochksum+0x2a6>
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
	}

	return (uint16_t) checksum;

}
     612:	c9 01       	movw	r24, r18
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	08 95       	ret

00000630 <chksum>:
 * @param len Length of data to checksum
 * @returns checksum
 *
 * Calculates 16-bit checksum for use in ICMPv6 etc.
 */
static u16_t chksum(u16_t sum, const u8_t *data, u16_t len) {
     630:	9c 01       	movw	r18, r24
	u16_t t;
	const u8_t *dataptr;
	const u8_t *last_byte;

	dataptr = data;
	last_byte = data + len - 1;
     632:	41 50       	subi	r20, 0x01	; 1
     634:	50 40       	sbci	r21, 0x00	; 0
     636:	46 0f       	add	r20, r22
     638:	57 1f       	adc	r21, r23
     63a:	fb 01       	movw	r30, r22
     63c:	0e c0       	rjmp	.+28     	; 0x65a <chksum+0x2a>

	while (dataptr < last_byte) { /* At least two more bytes */
		t = (dataptr[0] << 8) + dataptr[1];
     63e:	70 81       	ld	r23, Z
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	81 81       	ldd	r24, Z+1	; 0x01
     644:	db 01       	movw	r26, r22
     646:	a8 0f       	add	r26, r24
     648:	b1 1d       	adc	r27, r1
		sum += t;
     64a:	2a 0f       	add	r18, r26
     64c:	3b 1f       	adc	r19, r27

		if (sum < t) {
     64e:	2a 17       	cp	r18, r26
     650:	3b 07       	cpc	r19, r27
     652:	10 f4       	brcc	.+4      	; 0x658 <chksum+0x28>
			sum++; /* carry */
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		dataptr += 2;
     658:	32 96       	adiw	r30, 0x02	; 2
	const u8_t *last_byte;

	dataptr = data;
	last_byte = data + len - 1;

	while (dataptr < last_byte) { /* At least two more bytes */
     65a:	e4 17       	cp	r30, r20
     65c:	f5 07       	cpc	r31, r21
     65e:	78 f3       	brcs	.-34     	; 0x63e <chksum+0xe>
		}

		dataptr += 2;
	}

	if (dataptr == last_byte) {
     660:	e4 17       	cp	r30, r20
     662:	f5 07       	cpc	r31, r21
     664:	49 f4       	brne	.+18     	; 0x678 <chksum+0x48>
		t = (dataptr[0] << 8) + 0;
     666:	90 81       	ld	r25, Z
     668:	80 e0       	ldi	r24, 0x00	; 0
		sum += t;
     66a:	28 0f       	add	r18, r24
     66c:	39 1f       	adc	r19, r25

		if (sum < t) {
     66e:	28 17       	cp	r18, r24
     670:	39 07       	cpc	r19, r25
     672:	10 f4       	brcc	.+4      	; 0x678 <chksum+0x48>
			sum++; /* carry */
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}

	/* Return sum in host byte order. */
	return sum;
}
     678:	c9 01       	movw	r24, r18
     67a:	08 95       	ret

0000067c <sixlowpan_hc01_udp_send>:
 *  The UDP packet must already have been set up with
 *  a call to sixlowpan_hc01_setup_ipxxx() and
 *  sixlowpan_hc01_setup_ports(). This routine adds
 *  the checksum and sends out the MAC layer.
 */
void sixlowpan_hc01_udp_send(void) {
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
		//sixlowpan_hc01_gen_rs();
		//return;
	}

	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     68a:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* UDP Header */
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
     68e:	c0 91 26 0c 	lds	r28, 0x0C26
     692:	d0 91 27 0c 	lds	r29, 0x0C27
     696:	28 81       	ld	r18, Y
     698:	39 81       	ldd	r19, Y+1	; 0x01
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
	checksum += checksum16; /* IPv6 Pseudo Checksum */
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */
     69e:	d0 90 b7 1e 	lds	r13, 0x1EB7
     6a2:	60 91 b8 1e 	lds	r22, 0x1EB8
     6a6:	e6 2f       	mov	r30, r22
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ed 19       	sub	r30, r13
     6ac:	f1 09       	sbc	r31, r1
	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();

	/* UDP Header */
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
	checksum += checksum16; /* IPv6 Pseudo Checksum */
     6ae:	38 96       	adiw	r30, 0x08	; 8
     6b0:	7f 01       	movw	r14, r30
     6b2:	00 27       	eor	r16, r16
     6b4:	f7 fc       	sbrc	r15, 7
     6b6:	00 95       	com	r16
     6b8:	10 2f       	mov	r17, r16
     6ba:	38 97       	sbiw	r30, 0x08	; 8
     6bc:	e2 0e       	add	r14, r18
     6be:	f3 1e       	adc	r15, r19
     6c0:	04 1f       	adc	r16, r20
     6c2:	15 1f       	adc	r17, r21
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */
     6c4:	a0 e0       	ldi	r26, 0x00	; 0
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	e8 0e       	add	r14, r24
     6ca:	f9 1e       	adc	r15, r25
     6cc:	0a 1f       	adc	r16, r26
     6ce:	1b 1f       	adc	r17, r27
     6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <sixlowpan_hc01_udp_send+0x66>

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
     6d2:	c8 01       	movw	r24, r16
     6d4:	aa 27       	eor	r26, r26
     6d6:	bb 27       	eor	r27, r27
     6d8:	8e 0d       	add	r24, r14
     6da:	9f 1d       	adc	r25, r15
     6dc:	7c 01       	movw	r14, r24
     6de:	00 e0       	ldi	r16, 0x00	; 0
     6e0:	10 e0       	ldi	r17, 0x00	; 0
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
	checksum += checksum16; /* IPv6 Pseudo Checksum */
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
     6e2:	d8 01       	movw	r26, r16
     6e4:	c7 01       	movw	r24, r14
     6e6:	80 70       	andi	r24, 0x00	; 0
     6e8:	90 70       	andi	r25, 0x00	; 0
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	81 f7       	brne	.-32     	; 0x6d2 <sixlowpan_hc01_udp_send+0x56>
	}

	checksum16 = checksum;

	/* Sum all the UDP payload */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     6f2:	60 91 b5 1e 	lds	r22, 0x1EB5
     6f6:	70 91 b6 1e 	lds	r23, 0x1EB6
     6fa:	6d 0d       	add	r22, r13
     6fc:	71 1d       	adc	r23, r1
     6fe:	c7 01       	movw	r24, r14
     700:	af 01       	movw	r20, r30
     702:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);

	*hc01_chksum_ptr = ~HTONS(checksum16);
     706:	38 2f       	mov	r19, r24
     708:	29 2f       	mov	r18, r25
     70a:	20 95       	com	r18
     70c:	30 95       	com	r19
     70e:	39 83       	std	Y+1, r19	; 0x01
     710:	28 83       	st	Y, r18

	/* If result is zero, set to 0xffff */
	if (*hc01_chksum_ptr == 0x0000) {
     712:	23 2b       	or	r18, r19
     714:	21 f4       	brne	.+8      	; 0x71e <sixlowpan_hc01_udp_send+0xa2>
		*hc01_chksum_ptr = 0xFFFF;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	9f ef       	ldi	r25, 0xFF	; 255
     71a:	99 83       	std	Y+1, r25	; 0x01
     71c:	88 83       	st	Y, r24
	}

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(udpLocalAddr, mac_len, mac_ptr);
     71e:	40 91 b5 1e 	lds	r20, 0x1EB5
     722:	50 91 b6 1e 	lds	r21, 0x1EB6
     726:	80 91 28 0c 	lds	r24, 0x0C28
     72a:	90 91 29 0c 	lds	r25, 0x0C29
     72e:	60 91 b8 1e 	lds	r22, 0x1EB8
     732:	0e 94 5d 15 	call	0x2aba	; 0x2aba <macsixlowpanDataRequest>
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	08 95       	ret

00000746 <sixlowpan_hc01_ping_send>:
		//sixlowpan_hc01_gen_rs();
		//return;
	}

	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     746:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the payload */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     74a:	20 91 b7 1e 	lds	r18, 0x1EB7
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	60 91 b5 1e 	lds	r22, 0x1EB5
     754:	70 91 b6 1e 	lds	r23, 0x1EB6
     758:	62 0f       	add	r22, r18
     75a:	73 1f       	adc	r23, r19
     75c:	40 91 b8 1e 	lds	r20, 0x1EB8
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	42 1b       	sub	r20, r18
     764:	53 0b       	sbc	r21, r19
     766:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);

	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     76a:	40 91 b5 1e 	lds	r20, 0x1EB5
     76e:	50 91 b6 1e 	lds	r21, 0x1EB6
     772:	20 91 b7 1e 	lds	r18, 0x1EB7
     776:	fa 01       	movw	r30, r20
     778:	e2 0f       	add	r30, r18
     77a:	f1 1d       	adc	r31, r1
     77c:	38 2f       	mov	r19, r24
     77e:	29 2f       	mov	r18, r25
     780:	20 95       	com	r18
     782:	30 95       	com	r19
     784:	33 83       	std	Z+3, r19	; 0x03
     786:	22 83       	std	Z+2, r18	; 0x02

	/* If result is zero, set to 0xffff */
	if (UIP_ICMP_BUF->icmpchksum == 0x0000) {
     788:	23 2b       	or	r18, r19
     78a:	21 f4       	brne	.+8      	; 0x794 <sixlowpan_hc01_ping_send+0x4e>
		UIP_ICMP_BUF->icmpchksum = 0xFFFF;
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	9f ef       	ldi	r25, 0xFF	; 255
     790:	93 83       	std	Z+3, r25	; 0x03
     792:	82 83       	std	Z+2, r24	; 0x02
	}

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	60 91 b8 1e 	lds	r22, 0x1EB8
     79c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <macsixlowpanDataRequest>
}
     7a0:	08 95       	ret

000007a2 <sixlowpan_hc01_gen_rs>:
void sixlowpan_hc01_gen_rs(void) {

	//UART_PRINT("sixlowpan_hc01_gen_rs\r\n");

	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     7a2:	e4 e4       	ldi	r30, 0x44	; 68
     7a4:	fe e1       	ldi	r31, 0x1E	; 30
     7a6:	f0 93 b6 1e 	sts	0x1EB6, r31
     7aa:	e0 93 b5 1e 	sts	0x1EB5, r30

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 44 1e 	sts	0x1E44, r24
	IPHC_BUF->encoding[1] = 0;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     7b4:	8a e3       	ldi	r24, 0x3A	; 58
     7b6:	80 93 47 1e 	sts	0x1E47, r24
	hc01_ptr += 1;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_255;
     7ba:	88 ed       	ldi	r24, 0xD8	; 216
     7bc:	80 93 45 1e 	sts	0x1E45, r24
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_ADDR_CONTEXT_LL << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is all-routers multicast address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_16;
     7c0:	88 ec       	ldi	r24, 0xC8	; 200
     7c2:	80 93 46 1e 	sts	0x1E46, r24
	/* 3 first bits = 101 */
	*hc01_ptr = SIXLOWPAN_IPHC_MCAST_RANGE;
	/* bits 3-6 = scope = bits 8-11 in 128 bits address */
	*hc01_ptr |= (0x02) << 1;
     7c6:	84 ea       	ldi	r24, 0xA4	; 164
     7c8:	80 93 48 1e 	sts	0x1E48, r24
	/*
	 * bits 7 - 15 = 9-bit group
	 * All-routers group
	 */
	*(hc01_ptr + 1) = 0x02;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	80 93 49 1e 	sts	0x1E49, r24
	hc01_ptr += 2;
     7d2:	df 01       	movw	r26, r30
     7d4:	16 96       	adiw	r26, 0x06	; 6
     7d6:	b0 93 25 0c 	sts	0x0C25, r27
     7da:	a0 93 24 0c 	sts	0x0C24, r26

	mac_hdr_len = 6;
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	80 93 b7 1e 	sts	0x1EB7, r24

	/* Router solicitation */
	UIP_ICMP_BUF->type = ICMP6_RS;
     7e4:	85 e8       	ldi	r24, 0x85	; 133
     7e6:	80 93 4a 1e 	sts	0x1E4A, r24
	UIP_ICMP_BUF->icode = 0;
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	1c 92       	st	X, r1
     7ee:	11 97       	sbiw	r26, 0x01	; 1
	UIP_ND6_RS_BUF->reserved = 0;
     7f0:	10 92 4e 1e 	sts	0x1E4E, r1
     7f4:	10 92 4f 1e 	sts	0x1E4F, r1
     7f8:	10 92 50 1e 	sts	0x1E50, r1
     7fc:	10 92 51 1e 	sts	0x1E51, r1

	/* Source Link-Layer Address */
	mac_len = UIP_ICMPH_LEN + UIP_ND6_RS_LEN + UIP_ND6_OPT_LLAO_LEN
     800:	86 e1       	ldi	r24, 0x16	; 22
     802:	80 93 b8 1e 	sts	0x1EB8, r24
			+ mac_hdr_len;
	nd6_opt_llao = (struct uip_nd6_opt_llao *) &mac_ptr[UIP_ICMPH_LEN
     806:	3e 96       	adiw	r30, 0x0e	; 14
     808:	f0 93 23 0c 	sts	0x0C23, r31
     80c:	e0 93 22 0c 	sts	0x0C22, r30
			+ UIP_ND6_RS_LEN + mac_hdr_len];
	nd6_opt_llao->type = UIP_ND6_OPT_SLLAO; /* type of the option */
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 52 1e 	sts	0x1E52, r24
	nd6_opt_llao->len = 1; /* 8-bytes */
     816:	81 83       	std	Z+1, r24	; 0x01
	nd6_opt_llao->addr[0] = MSB(macConfig.shortAddress);
     818:	80 91 cb 1f 	lds	r24, 0x1FCB
     81c:	82 83       	std	Z+2, r24	; 0x02
	nd6_opt_llao->addr[1] = LSB(macConfig.shortAddress);
     81e:	80 91 ca 1f 	lds	r24, 0x1FCA
     822:	83 83       	std	Z+3, r24	; 0x03

	/* Pad with zeros */
	uint8_t i;
	for (i = 2; i < 6; i++) {
		nd6_opt_llao->addr[i] = 0x00;
     824:	14 82       	std	Z+4, r1	; 0x04
     826:	15 82       	std	Z+5, r1	; 0x05
     828:	16 82       	std	Z+6, r1	; 0x06
     82a:	17 82       	std	Z+7, r1	; 0x07
	 * type field, prepended with a "pseudo-header" of IPv6 header fields,
	 * as specified in [IPv6, section 8.1].
	 *
	 */

	UIP_ICMP_BUF->icmpchksum = 0;
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	1c 92       	st	X, r1
     830:	1e 92       	st	-X, r1
     832:	12 97       	sbiw	r26, 0x02	; 2
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     834:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the ICMP stuff */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     838:	20 91 b7 1e 	lds	r18, 0x1EB7
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	60 91 b5 1e 	lds	r22, 0x1EB5
     842:	70 91 b6 1e 	lds	r23, 0x1EB6
     846:	62 0f       	add	r22, r18
     848:	73 1f       	adc	r23, r19
     84a:	40 91 b8 1e 	lds	r20, 0x1EB8
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	42 1b       	sub	r20, r18
     852:	53 0b       	sbc	r21, r19
     854:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);
	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     858:	40 91 b5 1e 	lds	r20, 0x1EB5
     85c:	50 91 b6 1e 	lds	r21, 0x1EB6
     860:	20 91 b7 1e 	lds	r18, 0x1EB7
     864:	fa 01       	movw	r30, r20
     866:	e2 0f       	add	r30, r18
     868:	f1 1d       	adc	r31, r1
     86a:	38 2f       	mov	r19, r24
     86c:	29 2f       	mov	r18, r25
     86e:	20 95       	com	r18
     870:	30 95       	com	r19
     872:	33 83       	std	Z+3, r19	; 0x03
     874:	22 83       	std	Z+2, r18	; 0x02

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	60 91 b8 1e 	lds	r22, 0x1EB8
     87e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <macsixlowpanDataRequest>

}
     882:	08 95       	ret

00000884 <sixlowpan_hc01_gen_na>:
 *
 *  The destination should be set up by ipbuf->destcontext and
 *  ipbuf->destmode - any needed setup of the destination IP
 *  address should already be setup in the buffer.
 */
void sixlowpan_hc01_gen_na(ipbuf_t * ipbuf, uint8_t solicited) {
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	fc 01       	movw	r30, r24
	//UART_PRINT("sixlowpan_hc01_gen_na\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     88a:	84 e4       	ldi	r24, 0x44	; 68
     88c:	9e e1       	ldi	r25, 0x1E	; 30
     88e:	90 93 b6 1e 	sts	0x1EB6, r25
     892:	80 93 b5 1e 	sts	0x1EB5, r24

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     896:	23 e0       	ldi	r18, 0x03	; 3
     898:	20 93 44 1e 	sts	0x1E44, r18
	IPHC_BUF->encoding[0] = 0;
	IPHC_BUF->encoding[1] = 0;
     89c:	10 92 46 1e 	sts	0x1E46, r1

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     8a0:	2a e3       	ldi	r18, 0x3A	; 58
     8a2:	20 93 47 1e 	sts	0x1E47, r18
	hc01_ptr += 1;
     8a6:	04 96       	adiw	r24, 0x04	; 4
     8a8:	90 93 25 0c 	sts	0x0C25, r25
     8ac:	80 93 24 0c 	sts	0x0C24, r24

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_255;
     8b0:	88 ed       	ldi	r24, 0xD8	; 216
     8b2:	80 93 45 1e 	sts	0x1E45, r24

	/* Source IP address */
	IPHC_BUF->encoding[1] |= (ipbuf->srccontext) << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;
     8b6:	86 81       	ldd	r24, Z+6	; 0x06
     8b8:	82 95       	swap	r24
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	80 6c       	ori	r24, 0xC0	; 192
     8be:	80 93 46 1e 	sts	0x1E46, r24

	/* Destination is sender */
	IPHC_BUF->encoding[1] |= ipbuf->destcontext;
     8c2:	94 81       	ldd	r25, Z+4	; 0x04
     8c4:	98 2b       	or	r25, r24
     8c6:	90 93 46 1e 	sts	0x1E46, r25
	IPHC_BUF->encoding[1] |= ipbuf->destmode;
     8ca:	85 81       	ldd	r24, Z+5	; 0x05
     8cc:	98 2b       	or	r25, r24
     8ce:	90 93 46 1e 	sts	0x1E46, r25

	mac_hdr_len = ipbuf->mac_hdr_len;
     8d2:	92 85       	ldd	r25, Z+10	; 0x0a
     8d4:	90 93 b7 1e 	sts	0x1EB7, r25

	/* Neighbor Advertisement */
	UIP_ICMP_BUF->type = ICMP6_NA;
     8d8:	e9 2f       	mov	r30, r25
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ef 01       	movw	r28, r30
     8de:	cc 5b       	subi	r28, 0xBC	; 188
     8e0:	d1 4e       	sbci	r29, 0xE1	; 225
     8e2:	88 e8       	ldi	r24, 0x88	; 136
     8e4:	88 83       	st	Y, r24
	UIP_ICMP_BUF->icode = 0;
     8e6:	19 82       	std	Y+1, r1	; 0x01

	UIP_ND6_NA_BUF->reserved[0] = 0;
     8e8:	df 01       	movw	r26, r30
     8ea:	a8 5b       	subi	r26, 0xB8	; 184
     8ec:	b1 4e       	sbci	r27, 0xE1	; 225
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	1c 92       	st	X, r1
     8f2:	11 97       	sbiw	r26, 0x01	; 1
	UIP_ND6_NA_BUF->reserved[1] = 0;
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	1c 92       	st	X, r1
     8f8:	12 97       	sbiw	r26, 0x02	; 2
	UIP_ND6_NA_BUF->reserved[2] = 0;
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	1c 92       	st	X, r1
     8fe:	13 97       	sbiw	r26, 0x03	; 3

	/* This code sends solicited NA */
	if (solicited) {
     900:	66 23       	and	r22, r22
     902:	19 f0       	breq	.+6      	; 0x90a <sixlowpan_hc01_gen_na+0x86>
		UIP_ND6_NA_BUF->flagsreserved = UIP_ND6_NA_FLAG_SOLICITED;
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	8c 93       	st	X, r24
     908:	01 c0       	rjmp	.+2      	; 0x90c <sixlowpan_hc01_gen_na+0x88>
	} else {
		UIP_ND6_NA_BUF->flagsreserved = 0;
     90a:	1c 92       	st	X, r1
	 * solicitied responses, this is the same thing as in the NA. This lies at
	 * the same location in the NA too - we just don't do anything, and magically
	 * it is set up correctly */

	/* Target Link-Layer Address */
	mac_len = UIP_ICMPH_LEN + UIP_ND6_NA_LEN + UIP_ND6_OPT_LLAO_LEN
     90c:	90 5e       	subi	r25, 0xE0	; 224
     90e:	90 93 b8 1e 	sts	0x1EB8, r25
			+ mac_hdr_len;
	nd6_opt_llao = (struct uip_nd6_opt_llao *) &mac_ptr[UIP_ICMPH_LEN
     912:	e4 5a       	subi	r30, 0xA4	; 164
     914:	f1 4e       	sbci	r31, 0xE1	; 225
     916:	f0 93 23 0c 	sts	0x0C23, r31
     91a:	e0 93 22 0c 	sts	0x0C22, r30
			+ UIP_ND6_NA_LEN + mac_hdr_len];
	nd6_opt_llao->type = UIP_ND6_OPT_TLLAO; /* type of the option */
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	80 83       	st	Z, r24
	nd6_opt_llao->len = 1; /* 8-bytes */
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	81 83       	std	Z+1, r24	; 0x01
	nd6_opt_llao->addr[0] = MSB(macConfig.shortAddress);
     926:	80 91 cb 1f 	lds	r24, 0x1FCB
     92a:	82 83       	std	Z+2, r24	; 0x02
	nd6_opt_llao->addr[1] = LSB(macConfig.shortAddress);
     92c:	80 91 ca 1f 	lds	r24, 0x1FCA
     930:	83 83       	std	Z+3, r24	; 0x03

	/* Pad with zeros */
	uint8_t i;
	for (i = 2; i < 6; i++) {
		nd6_opt_llao->addr[i] = 0x00;
     932:	14 82       	std	Z+4, r1	; 0x04
     934:	15 82       	std	Z+5, r1	; 0x05
     936:	16 82       	std	Z+6, r1	; 0x06
     938:	17 82       	std	Z+7, r1	; 0x07
	 * sum of the entire ICMPv6 message starting with the ICMPv6 message
	 * type field, prepended with a "pseudo-header" of IPv6 header fields,
	 * as specified in [IPv6, section 8.1].
	 *
	 */
	UIP_ICMP_BUF->icmpchksum = 0;
     93a:	1b 82       	std	Y+3, r1	; 0x03
     93c:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     93e:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the ICMP stuff */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     942:	20 91 b7 1e 	lds	r18, 0x1EB7
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	60 91 b5 1e 	lds	r22, 0x1EB5
     94c:	70 91 b6 1e 	lds	r23, 0x1EB6
     950:	62 0f       	add	r22, r18
     952:	73 1f       	adc	r23, r19
     954:	40 91 b8 1e 	lds	r20, 0x1EB8
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	42 1b       	sub	r20, r18
     95c:	53 0b       	sbc	r21, r19
     95e:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);
	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     962:	40 91 b5 1e 	lds	r20, 0x1EB5
     966:	50 91 b6 1e 	lds	r21, 0x1EB6
     96a:	20 91 b7 1e 	lds	r18, 0x1EB7
     96e:	fa 01       	movw	r30, r20
     970:	e2 0f       	add	r30, r18
     972:	f1 1d       	adc	r31, r1
     974:	38 2f       	mov	r19, r24
     976:	29 2f       	mov	r18, r25
     978:	20 95       	com	r18
     97a:	30 95       	com	r19
     97c:	33 83       	std	Z+3, r19	; 0x03
     97e:	22 83       	std	Z+2, r18	; 0x02

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	60 91 b8 1e 	lds	r22, 0x1EB8
     988:	0e 94 5d 15 	call	0x2aba	; 0x2aba <macsixlowpanDataRequest>
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <sixlowpan_hc01_process_ra>:
 *  have 'context' for the 6lowpan network, which
 *  means we don't have a prefix, this routine
 *  will save it. Note the actual prefix is never
 *  stored, just the checksum of the prefix.
 */
void sixlowpan_hc01_process_ra(ipbuf_t * ipbuf) {
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	8c 01       	movw	r16, r24
	UART_PRINT("sixlowpan_hc01_process_ra\r\n");
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>

	struct uip_nd6_opt_prefix_info * nd6_opt_prefix_info;
	uint8_t nd6_opt_offset;

	/* Very basic sanity check */
	if (ipbuf->ttl != 255)
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	d1 f5       	brne	.+116    	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
		return;

	/* Find prefix option */
	nd6_opt_offset = UIP_ND6_RA_LEN;

	while ((mac_hdr_len + 4 + nd6_opt_offset) < mac_len) {
     9ac:	80 91 b7 1e 	lds	r24, 0x1EB7
     9b0:	28 2f       	mov	r18, r24
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	2c 5f       	subi	r18, 0xFC	; 252
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	80 91 b8 1e 	lds	r24, 0x1EB8
     9bc:	c8 2f       	mov	r28, r24
     9be:	d0 e0       	ldi	r29, 0x00	; 0
		if (UIP_ND6_OPT_HDR_BUF->len == 0) {
     9c0:	a0 91 b5 1e 	lds	r26, 0x1EB5
     9c4:	b0 91 b6 1e 	lds	r27, 0x1EB6
     9c8:	4c e0       	ldi	r20, 0x0C	; 12
     9ca:	24 c0       	rjmp	.+72     	; 0xa14 <sixlowpan_hc01_process_ra+0x82>
     9cc:	fd 01       	movw	r30, r26
     9ce:	e6 0f       	add	r30, r22
     9d0:	f7 1f       	adc	r31, r23
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	99 23       	and	r25, r25
     9d6:	21 f1       	breq	.+72     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
			return;
		}

		/* Is this option prefix option? */
		if (UIP_ND6_OPT_HDR_BUF->type == UIP_ND6_OPT_PREFIX_INFO) {
     9d8:	80 81       	ld	r24, Z
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	b9 f4       	brne	.+46     	; 0xa0c <sixlowpan_hc01_process_ra+0x7a>

			uint8_t i = 1;

			uint16_t prefixchecksum;

			prefixchecksum = chksum(0, nd6_opt_prefix_info->prefix, 16);
     9de:	70 96       	adiw	r30, 0x10	; 16
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	bf 01       	movw	r22, r30
     9e6:	40 e1       	ldi	r20, 0x10	; 16
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
     9ee:	9c 01       	movw	r18, r24

			/* We only ever need to store the checksum of the prefix - no need
			 * to ever know. We need the checksum for adding in the ICMP checksum */
			if (!context_prefix[i].is_used) {
     9f0:	80 91 35 1e 	lds	r24, 0x1E35
     9f4:	88 23       	and	r24, r24
     9f6:	a1 f4       	brne	.+40     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
				context_prefix[i].checksum = prefixchecksum;
     9f8:	30 93 34 1e 	sts	0x1E34, r19
     9fc:	20 93 33 1e 	sts	0x1E33, r18
				context_prefix[i].is_used = 1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 35 1e 	sts	0x1E35, r24

				use_context = i;
     a06:	80 93 2c 02 	sts	0x022C, r24
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>

			/* Only check first prefix we find... */
			break;
		}

		nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
     a0c:	99 0f       	add	r25, r25
     a0e:	99 0f       	add	r25, r25
     a10:	99 0f       	add	r25, r25
     a12:	49 0f       	add	r20, r25
		return;

	/* Find prefix option */
	nd6_opt_offset = UIP_ND6_RA_LEN;

	while ((mac_hdr_len + 4 + nd6_opt_offset) < mac_len) {
     a14:	b9 01       	movw	r22, r18
     a16:	64 0f       	add	r22, r20
     a18:	71 1d       	adc	r23, r1
     a1a:	6c 17       	cp	r22, r28
     a1c:	7d 07       	cpc	r23, r29
     a1e:	b4 f2       	brlt	.-84     	; 0x9cc <sixlowpan_hc01_process_ra+0x3a>
			break;
		}

		nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <sixlowpan_hc01_process>:
 *
 *  - This code only GENERATES valid IPv6 checksums. It does
 *    nothing to verify that incoming packets have valid checksums.
 */

void sixlowpan_hc01_process(ftData* rxFrame, uint8_t payloadlen) {
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	2b 97       	sbiw	r28, 0x0b	; 11
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	6c 01       	movw	r12, r24
     a4a:	06 2f       	mov	r16, r22
	//UART_PRINT("sixlowpan_hc01_process\r\n");

	ipbuf_t ipbuf;

	mac_ptr = rxFrame->payload;
     a4c:	7e e0       	ldi	r23, 0x0E	; 14
     a4e:	e7 2e       	mov	r14, r23
     a50:	f1 2c       	mov	r15, r1
     a52:	e8 0e       	add	r14, r24
     a54:	f9 1e       	adc	r15, r25
     a56:	f0 92 b6 1e 	sts	0x1EB6, r15
     a5a:	e0 92 b5 1e 	sts	0x1EB5, r14
	mac_len = payloadlen;
     a5e:	60 93 b8 1e 	sts	0x1EB8, r22
	mac_hdr_len = 0;
     a62:	10 92 b7 1e 	sts	0x1EB7, r1

	hc01_ptr = mac_ptr + 3;
     a66:	21 e1       	ldi	r18, 0x11	; 17
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	c2 0e       	add	r12, r18
     a6c:	d3 1e       	adc	r13, r19
     a6e:	d0 92 25 0c 	sts	0x0C25, r13
     a72:	c0 92 24 0c 	sts	0x0C24, r12
     a76:	4f ee       	ldi	r20, 0xEF	; 239
     a78:	5f ef       	ldi	r21, 0xFF	; 255
     a7a:	c4 0e       	add	r12, r20
     a7c:	d5 1e       	adc	r13, r21

	/* Dest address based on MAC address, Version, Flow, Traffic compressed */
	if ((IPHC_BUF->dispatch == SIXLOWPAN_DISPATCH_IPHC)
     a7e:	f6 01       	movw	r30, r12
     a80:	86 85       	ldd	r24, Z+14	; 0x0e
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	09 f0       	breq	.+2      	; 0xa88 <sixlowpan_hc01_process+0x5e>
     a86:	e9 c1       	rjmp	.+978    	; 0xe5a <sixlowpan_hc01_process+0x430>
     a88:	f7 01       	movw	r30, r14
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	8c 70       	andi	r24, 0x0C	; 12
     a8e:	8c 30       	cpi	r24, 0x0C	; 12
     a90:	09 f0       	breq	.+2      	; 0xa94 <sixlowpan_hc01_process+0x6a>
     a92:	e3 c1       	rjmp	.+966    	; 0xe5a <sixlowpan_hc01_process+0x430>
			&& ((IPHC_BUF->encoding[1] & 0x0C) == SIXLOWPAN_IPHC_DAM_0)) {
		//UART_PRINT("  -correct 6LoWPAN Message\r\n");

		/* Version & Flow Uncompressed */
		if ((IPHC_BUF->encoding[0] & 0x40) == 0) {
     a94:	81 81       	ldd	r24, Z+1	; 0x01
     a96:	86 fd       	sbrc	r24, 6
     a98:	1a c0       	rjmp	.+52     	; 0xace <sixlowpan_hc01_process+0xa4>
			if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     a9a:	87 fd       	sbrc	r24, 7
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <sixlowpan_hc01_process+0x8a>
				/* Traffic class is carried inline */
				hc01_ptr += 4;
     a9e:	25 e1       	ldi	r18, 0x15	; 21
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	c2 0e       	add	r12, r18
     aa4:	d3 1e       	adc	r13, r19
     aa6:	d0 92 25 0c 	sts	0x0C25, r13
     aaa:	c0 92 24 0c 	sts	0x0C24, r12
     aae:	4b ee       	ldi	r20, 0xEB	; 235
     ab0:	5f ef       	ldi	r21, 0xFF	; 255
     ab2:	19 c0       	rjmp	.+50     	; 0xae6 <sixlowpan_hc01_process+0xbc>
			} else {
				/* Traffic class is compressed */
				hc01_ptr += 3;
     ab4:	84 e1       	ldi	r24, 0x14	; 20
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	c8 0e       	add	r12, r24
     aba:	d9 1e       	adc	r13, r25
     abc:	d0 92 25 0c 	sts	0x0C25, r13
     ac0:	c0 92 24 0c 	sts	0x0C24, r12
     ac4:	ec ee       	ldi	r30, 0xEC	; 236
     ac6:	ff ef       	ldi	r31, 0xFF	; 255
     ac8:	ce 0e       	add	r12, r30
     aca:	df 1e       	adc	r13, r31
     acc:	0e c0       	rjmp	.+28     	; 0xaea <sixlowpan_hc01_process+0xc0>
			}

			/* Version & Flow Compressed */
		} else {
			if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     ace:	87 fd       	sbrc	r24, 7
     ad0:	0c c0       	rjmp	.+24     	; 0xaea <sixlowpan_hc01_process+0xc0>
				/* Traffic class is carried inline */
				hc01_ptr += 1;
     ad2:	22 e1       	ldi	r18, 0x12	; 18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	c2 0e       	add	r12, r18
     ad8:	d3 1e       	adc	r13, r19
     ada:	d0 92 25 0c 	sts	0x0C25, r13
     ade:	c0 92 24 0c 	sts	0x0C24, r12
     ae2:	4e ee       	ldi	r20, 0xEE	; 238
     ae4:	5f ef       	ldi	r21, 0xFF	; 255
     ae6:	c4 0e       	add	r12, r20
     ae8:	d5 1e       	adc	r13, r21
				;
			}
		}

		/* Next-header field */
		if (IPHC_BUF->encoding[0] & SIXLOWPAN_IPHC_NH_C) {
     aea:	f7 01       	movw	r30, r14
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	85 ff       	sbrs	r24, 5
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <sixlowpan_hc01_process+0xce>
			ipbuf.proto = UIP_PROTO_UDP; /* Currently only UDP compressed like that */
     af2:	81 e1       	ldi	r24, 0x11	; 17
     af4:	8c 83       	std	Y+4, r24	; 0x04
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <sixlowpan_hc01_process+0xe2>
		} else {
			ipbuf.proto = *hc01_ptr;
     af8:	e0 91 24 0c 	lds	r30, 0x0C24
     afc:	f0 91 25 0c 	lds	r31, 0x0C25
     b00:	81 91       	ld	r24, Z+
     b02:	8c 83       	std	Y+4, r24	; 0x04
			hc01_ptr++;
     b04:	f0 93 25 0c 	sts	0x0C25, r31
     b08:	e0 93 24 0c 	sts	0x0C24, r30
		}

		/* Remember location of TTL */
		ipbuf.ttlptr = hc01_ptr;
     b0c:	20 91 24 0c 	lds	r18, 0x0C24
     b10:	30 91 25 0c 	lds	r19, 0x0C25
     b14:	2a 83       	std	Y+2, r18	; 0x02
     b16:	3b 83       	std	Y+3, r19	; 0x03

		/* Check TTL */
		switch (IPHC_BUF->encoding[0] & 0x18) {
     b18:	f7 01       	movw	r30, r14
     b1a:	81 81       	ldd	r24, Z+1	; 0x01
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	88 71       	andi	r24, 0x18	; 24
     b20:	90 70       	andi	r25, 0x00	; 0
     b22:	88 30       	cpi	r24, 0x08	; 8
     b24:	91 05       	cpc	r25, r1
     b26:	61 f0       	breq	.+24     	; 0xb40 <sixlowpan_hc01_process+0x116>
     b28:	89 30       	cpi	r24, 0x09	; 9
     b2a:	91 05       	cpc	r25, r1
     b2c:	1c f4       	brge	.+6      	; 0xb34 <sixlowpan_hc01_process+0x10a>
     b2e:	89 2b       	or	r24, r25
     b30:	71 f0       	breq	.+28     	; 0xb4e <sixlowpan_hc01_process+0x124>
     b32:	14 c0       	rjmp	.+40     	; 0xb5c <sixlowpan_hc01_process+0x132>
     b34:	80 31       	cpi	r24, 0x10	; 16
     b36:	91 05       	cpc	r25, r1
     b38:	29 f0       	breq	.+10     	; 0xb44 <sixlowpan_hc01_process+0x11a>
     b3a:	48 97       	sbiw	r24, 0x18	; 24
     b3c:	79 f4       	brne	.+30     	; 0xb5c <sixlowpan_hc01_process+0x132>
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <sixlowpan_hc01_process+0x120>
		case SIXLOWPAN_IPHC_TTL_1:
			ipbuf.ttl = 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <sixlowpan_hc01_process+0x11c>
			break;
		case SIXLOWPAN_IPHC_TTL_64:
			ipbuf.ttl = 64;
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <sixlowpan_hc01_process+0x132>
			break;
		case SIXLOWPAN_IPHC_TTL_255:
			ipbuf.ttl = 255;
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <sixlowpan_hc01_process+0x11c>
			break;
		case SIXLOWPAN_IPHC_TTL_I:
			ipbuf.ttl = *hc01_ptr;
     b4e:	f9 01       	movw	r30, r18
     b50:	81 91       	ld	r24, Z+
     b52:	89 83       	std	Y+1, r24	; 0x01
			hc01_ptr += 1;
     b54:	f0 93 25 0c 	sts	0x0C25, r31
     b58:	e0 93 24 0c 	sts	0x0C24, r30
			break;
		}

		/* Destination address is context-based */
		ipbuf.destcontext = (IPHC_BUF->encoding[1] & 0x03);
     b5c:	f7 01       	movw	r30, r14
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	28 2f       	mov	r18, r24
     b62:	23 70       	andi	r18, 0x03	; 3
     b64:	2d 83       	std	Y+5, r18	; 0x05

		/* Source address could be anything (off-link even) */
		ipbuf.srcmode = (IPHC_BUF->encoding[1] & 0xC0) >> 4;
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9c 01       	movw	r18, r24
     b6a:	20 7c       	andi	r18, 0xC0	; 192
     b6c:	30 70       	andi	r19, 0x00	; 0
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	35 95       	asr	r19
     b72:	27 95       	ror	r18
     b74:	6a 95       	dec	r22
     b76:	e1 f7       	brne	.-8      	; 0xb70 <sixlowpan_hc01_process+0x146>
     b78:	28 87       	std	Y+8, r18	; 0x08
		ipbuf.srccontext = (IPHC_BUF->encoding[1] & 0x30) >> 4;
     b7a:	80 73       	andi	r24, 0x30	; 48
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	54 e0       	ldi	r21, 0x04	; 4
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
     b84:	5a 95       	dec	r21
     b86:	e1 f7       	brne	.-8      	; 0xb80 <sixlowpan_hc01_process+0x156>
     b88:	8f 83       	std	Y+7, r24	; 0x07

		/* We will just use source address as destination when sending
		 * anything back out, hence we never store the address. It will
		 * automatically be at the proper place in the packet. */
		ipbuf.srcptr = hc01_ptr;
     b8a:	e0 91 24 0c 	lds	r30, 0x0C24
     b8e:	f0 91 25 0c 	lds	r31, 0x0C25
     b92:	fa 87       	std	Y+10, r31	; 0x0a
     b94:	e9 87       	std	Y+9, r30	; 0x09

		switch (ipbuf.srcmode) {
     b96:	24 30       	cpi	r18, 0x04	; 4
     b98:	51 f0       	breq	.+20     	; 0xbae <sixlowpan_hc01_process+0x184>
     b9a:	28 30       	cpi	r18, 0x08	; 8
     b9c:	19 f0       	breq	.+6      	; 0xba4 <sixlowpan_hc01_process+0x17a>
     b9e:	22 23       	and	r18, r18
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <sixlowpan_hc01_process+0x188>
     ba2:	0c c0       	rjmp	.+24     	; 0xbbc <sixlowpan_hc01_process+0x192>
		case SIXLOWPAN_IPHC_DAM_0: /* Note: we use 'DAM' constants instead of 'SAM'
		 * since address mode is shifted right 4 in this var */
			break;
		case SIXLOWPAN_IPHC_DAM_16:
			if ((*hc01_ptr & 0x80) == 0) {
     ba4:	80 81       	ld	r24, Z
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	58 c1       	rjmp	.+688    	; 0xe5a <sixlowpan_hc01_process+0x430>
				/* unicast address */
				hc01_ptr += 2;
     baa:	32 96       	adiw	r30, 0x02	; 2
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <sixlowpan_hc01_process+0x18a>
				PRINTF("sixlowpan: Don't deal with multicast\n");
				return;
			}
			break;
		case SIXLOWPAN_IPHC_DAM_64:
			hc01_ptr += 8;
     bae:	38 96       	adiw	r30, 0x08	; 8
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <sixlowpan_hc01_process+0x18a>
			break;
		case SIXLOWPAN_IPHC_DAM_I:
			hc01_ptr += 16;
     bb2:	70 96       	adiw	r30, 0x10	; 16
     bb4:	f0 93 25 0c 	sts	0x0C25, r31
     bb8:	e0 93 24 0c 	sts	0x0C24, r30
			break;
		}

		mac_hdr_len = hc01_ptr - rxFrame->payload;
     bbc:	2e e0       	ldi	r18, 0x0E	; 14
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	c2 0e       	add	r12, r18
     bc2:	d3 1e       	adc	r13, r19
     bc4:	80 91 24 0c 	lds	r24, 0x0C24
     bc8:	8c 19       	sub	r24, r12
     bca:	42 ef       	ldi	r20, 0xF2	; 242
     bcc:	5f ef       	ldi	r21, 0xFF	; 255
     bce:	c4 0e       	add	r12, r20
     bd0:	d5 1e       	adc	r13, r21
     bd2:	80 93 b7 1e 	sts	0x1EB7, r24
		ipbuf.mac_hdr_len = mac_hdr_len;
     bd6:	8b 87       	std	Y+11, r24	; 0x0b

		/********** ICMP Message **********/
		if (ipbuf.proto == UIP_PROTO_ICMP6) {
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	8a 33       	cpi	r24, 0x3A	; 58
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <sixlowpan_hc01_process+0x1b6>
     bde:	7f c0       	rjmp	.+254    	; 0xcde <sixlowpan_hc01_process+0x2b4>
			//TODO delete later
			UART_PRINT("  -ICMP Message\r\n");
     be0:	8b e1       	ldi	r24, 0x1B	; 27
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
			if (UIP_ICMP_BUF->type == ICMP6_ECHO_REQUEST) {
     be8:	80 91 b7 1e 	lds	r24, 0x1EB7
     bec:	e0 91 b5 1e 	lds	r30, 0x1EB5
     bf0:	f0 91 b6 1e 	lds	r31, 0x1EB6
     bf4:	e8 0f       	add	r30, r24
     bf6:	f1 1d       	adc	r31, r1
     bf8:	80 81       	ld	r24, Z
     bfa:	80 38       	cpi	r24, 0x80	; 128
     bfc:	d9 f5       	brne	.+118    	; 0xc74 <sixlowpan_hc01_process+0x24a>
				//TODO delete later
				//UART_PRINT("  -ICMP ECHO REQUEST Message\r\n");
				LED_ON(1);
     bfe:	71 98       	cbi	0x0e, 1	; 14
     c00:	69 9a       	sbi	0x0d, 1	; 13
				macSetAlarm(LED_DELAY, ledoff1);
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	65 e6       	ldi	r22, 0x65	; 101
     c08:	7c e1       	ldi	r23, 0x1C	; 28
     c0a:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

				mac_hdr_len = 0;
     c0e:	10 92 b7 1e 	sts	0x1EB7, r1

				/* Check if TTL is carried inline, we reset it to 64 if so... */
				if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     c12:	e0 91 b5 1e 	lds	r30, 0x1EB5
     c16:	f0 91 b6 1e 	lds	r31, 0x1EB6
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	88 71       	andi	r24, 0x18	; 24
     c1e:	11 f4       	brne	.+4      	; 0xc24 <sixlowpan_hc01_process+0x1fa>
					*(mac_ptr + 4) = 64;
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	84 83       	std	Z+4, r24	; 0x04
				}

				/* Send packet back to source */
				IPHC_BUF->encoding[1] = SIXLOWPAN_IPHC_SAM_0
     c24:	e0 91 b5 1e 	lds	r30, 0x1EB5
     c28:	f0 91 b6 1e 	lds	r31, 0x1EB6
     c2c:	80 91 b7 1e 	lds	r24, 0x1EB7
     c30:	df 01       	movw	r26, r30
     c32:	a8 0f       	add	r26, r24
     c34:	b1 1d       	adc	r27, r1
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	92 95       	swap	r25
     c3a:	90 7f       	andi	r25, 0xF0	; 240
     c3c:	90 6c       	ori	r25, 0xC0	; 192
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	9c 93       	st	X, r25
     c42:	12 97       	sbiw	r26, 0x02	; 2
						| (ipbuf.destcontext << 4);
				IPHC_BUF->encoding[1] |= ipbuf.srcmode | ipbuf.srccontext;
     c44:	8f 81       	ldd	r24, Y+7	; 0x07
     c46:	28 85       	ldd	r18, Y+8	; 0x08
     c48:	82 2b       	or	r24, r18
     c4a:	89 2b       	or	r24, r25
     c4c:	12 96       	adiw	r26, 0x02	; 2
     c4e:	8c 93       	st	X, r24

				mac_hdr_len = ipbuf.mac_hdr_len;
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	80 93 b7 1e 	sts	0x1EB7, r24

				/* Send echo reply */
				UIP_ICMP_BUF->type = ICMP6_ECHO_REPLY;
     c56:	e8 0f       	add	r30, r24
     c58:	f1 1d       	adc	r31, r1
     c5a:	81 e8       	ldi	r24, 0x81	; 129
     c5c:	80 83       	st	Z, r24

				/* We cheat the checksum since we just changed echo request to echo reply... */
				UIP_ICMP_BUF->icmpchksum = UIP_ICMP_BUF->icmpchksum
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	93 83       	std	Z+3, r25	; 0x03
     c66:	82 83       	std	Z+2, r24	; 0x02
						+ ~(HTONS(0x0000));

				//                sixlowpanSleep_activity();
				macsixlowpanDataRequest(DEFAULT_COORD_ADDR, payloadlen,
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	60 2f       	mov	r22, r16
     c6e:	a7 01       	movw	r20, r14
     c70:	0e 94 5d 15 	call	0x2aba	; 0x2aba <macsixlowpanDataRequest>
						rxFrame->payload);
			}

			if (UIP_ICMP_BUF->type == ICMP6_ECHO_REPLY) {
     c74:	80 91 b7 1e 	lds	r24, 0x1EB7
     c78:	e0 91 b5 1e 	lds	r30, 0x1EB5
     c7c:	f0 91 b6 1e 	lds	r31, 0x1EB6
     c80:	e8 0f       	add	r30, r24
     c82:	f1 1d       	adc	r31, r1
     c84:	80 81       	ld	r24, Z
     c86:	81 38       	cpi	r24, 0x81	; 129
     c88:	39 f4       	brne	.+14     	; 0xc98 <sixlowpan_hc01_process+0x26e>
				sixlowpan_ping_usercall(*(hc01_ptr + 7));
     c8a:	e0 91 24 0c 	lds	r30, 0x0C24
     c8e:	f0 91 25 0c 	lds	r31, 0x0C25
     c92:	87 81       	ldd	r24, Z+7	; 0x07
     c94:	0e 94 da 08 	call	0x11b4	; 0x11b4 <sixlowpan_ping_usercall>
			}

			if (UIP_ICMP_BUF->type == ICMP6_RA) {
     c98:	80 91 b7 1e 	lds	r24, 0x1EB7
     c9c:	e0 91 b5 1e 	lds	r30, 0x1EB5
     ca0:	f0 91 b6 1e 	lds	r31, 0x1EB6
     ca4:	e8 0f       	add	r30, r24
     ca6:	f1 1d       	adc	r31, r1
     ca8:	80 81       	ld	r24, Z
     caa:	86 38       	cpi	r24, 0x86	; 134
     cac:	21 f4       	brne	.+8      	; 0xcb6 <sixlowpan_hc01_process+0x28c>
				sixlowpan_hc01_process_ra(&ipbuf);
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 c9 04 	call	0x992	; 0x992 <sixlowpan_hc01_process_ra>
			}

			if (UIP_ICMP_BUF->type == ICMP6_NS) {
     cb6:	80 91 b7 1e 	lds	r24, 0x1EB7
     cba:	e0 91 b5 1e 	lds	r30, 0x1EB5
     cbe:	f0 91 b6 1e 	lds	r31, 0x1EB6
     cc2:	e8 0f       	add	r30, r24
     cc4:	f1 1d       	adc	r31, r1
     cc6:	80 81       	ld	r24, Z
     cc8:	87 38       	cpi	r24, 0x87	; 135
     cca:	49 f4       	brne	.+18     	; 0xcde <sixlowpan_hc01_process+0x2b4>
				/* Destination is sender */
				ipbuf.destcontext = ipbuf.srccontext;
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	8d 83       	std	Y+5, r24	; 0x05
				ipbuf.destmode = ipbuf.srcmode;
     cd0:	88 85       	ldd	r24, Y+8	; 0x08
     cd2:	8e 83       	std	Y+6, r24	; 0x06

				/* Source context will be same */
				sixlowpan_hc01_gen_na(&ipbuf, 1);
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	0e 94 42 04 	call	0x884	; 0x884 <sixlowpan_hc01_gen_na>
			}
		}

		/********** UDP Message **********/
		if (ipbuf.proto == UIP_PROTO_UDP) {
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	81 31       	cpi	r24, 0x11	; 17
     ce2:	09 f0       	breq	.+2      	; 0xce6 <sixlowpan_hc01_process+0x2bc>
     ce4:	ba c0       	rjmp	.+372    	; 0xe5a <sixlowpan_hc01_process+0x430>
			/* Figure out port, while swapping src/dest */
			uint16_t srcport, destport;

			if (*hc01_ptr == SIXLOWPAN_NHC_UDP_C) {
     ce6:	a0 91 24 0c 	lds	r26, 0x0C24
     cea:	b0 91 25 0c 	lds	r27, 0x0C25
     cee:	8c 91       	ld	r24, X
     cf0:	8b 3f       	cpi	r24, 0xFB	; 251
     cf2:	69 f5       	brne	.+90     	; 0xd4e <sixlowpan_hc01_process+0x324>
				hc01_ptr++;
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	b0 93 25 0c 	sts	0x0C25, r27
     cfa:	a0 93 24 0c 	sts	0x0C24, r26
     cfe:	11 97       	sbiw	r26, 0x01	; 1

				srcport = (*hc01_ptr >> 4) + SIXLOWPAN_UDP_PORT_MIN;
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	8c 91       	ld	r24, X
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	28 2f       	mov	r18, r24
     d08:	22 95       	swap	r18
     d0a:	2f 70       	andi	r18, 0x0F	; 15
     d0c:	e2 2e       	mov	r14, r18
     d0e:	ff 24       	eor	r15, r15
     d10:	e0 eb       	ldi	r30, 0xB0	; 176
     d12:	f0 ef       	ldi	r31, 0xF0	; 240
     d14:	ee 0e       	add	r14, r30
     d16:	ff 1e       	adc	r15, r31
				destport = (*hc01_ptr & 0x0f) + SIXLOWPAN_UDP_PORT_MIN;
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	6f 70       	andi	r22, 0x0F	; 15
     d1e:	70 70       	andi	r23, 0x00	; 0
     d20:	60 55       	subi	r22, 0x50	; 80
     d22:	7f 40       	sbci	r23, 0x0F	; 15
				uint8_t temp;
				temp = *hc01_ptr >> 4;
				temp |= ((*hc01_ptr) & 0x0f) << 4;

				/* Store swapped dest/src */
				*hc01_ptr = temp;
     d24:	34 e0       	ldi	r19, 0x04	; 4
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	3a 95       	dec	r19
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <sixlowpan_hc01_process+0x2fc>
     d2e:	28 2b       	or	r18, r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	2c 93       	st	X, r18

				hc01_ptr++;
     d34:	80 91 24 0c 	lds	r24, 0x0C24
     d38:	90 91 25 0c 	lds	r25, 0x0C25
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	90 93 25 0c 	sts	0x0C25, r25
     d42:	80 93 24 0c 	sts	0x0C24, r24

				mac_hdr_len += 2;
     d46:	80 91 b7 1e 	lds	r24, 0x1EB7
     d4a:	8e 5f       	subi	r24, 0xFE	; 254
     d4c:	21 c0       	rjmp	.+66     	; 0xd90 <sixlowpan_hc01_process+0x366>

			} else if (*hc01_ptr == SIXLOWPAN_NHC_UDP_I) {
     d4e:	88 3f       	cpi	r24, 0xF8	; 248
     d50:	09 f0       	breq	.+2      	; 0xd54 <sixlowpan_hc01_process+0x32a>
     d52:	83 c0       	rjmp	.+262    	; 0xe5a <sixlowpan_hc01_process+0x430>
				srcport = HTONS(*((uint16_t *)(hc01_ptr + 1)));
     d54:	fd 01       	movw	r30, r26
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	fc 90       	ld	r15, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	e1 80       	ldd	r14, Z+1	; 0x01
				destport = HTONS(*((uint16_t *)(hc01_ptr + 3)));
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	7c 91       	ld	r23, X
     d64:	13 97       	sbiw	r26, 0x03	; 3
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	6c 91       	ld	r22, X
     d6a:	14 97       	sbiw	r26, 0x04	; 4

				/* Store swapped dest/src ports */
				*((uint16_t *) (hc01_ptr + 1)) = HTONS(destport);
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	7c 93       	st	X, r23
     d70:	11 97       	sbiw	r26, 0x01	; 1
     d72:	61 83       	std	Z+1, r22	; 0x01
				*((uint16_t *) (hc01_ptr + 3)) = HTONS(srcport);
     d74:	13 96       	adiw	r26, 0x03	; 3
     d76:	fc 92       	st	X, r15
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	ec 92       	st	X, r14
     d7e:	14 97       	sbiw	r26, 0x04	; 4

				hc01_ptr += 5;
     d80:	15 96       	adiw	r26, 0x05	; 5
     d82:	b0 93 25 0c 	sts	0x0C25, r27
     d86:	a0 93 24 0c 	sts	0x0C24, r26
				mac_hdr_len += 5;
     d8a:	80 91 b7 1e 	lds	r24, 0x1EB7
     d8e:	8b 5f       	subi	r24, 0xFB	; 251
     d90:	80 93 b7 1e 	sts	0x1EB7, r24

			} else {
				return;
			}

			hc01_chksum_ptr = (uint16_t *) hc01_ptr;
     d94:	e0 91 24 0c 	lds	r30, 0x0C24
     d98:	f0 91 25 0c 	lds	r31, 0x0C25
     d9c:	f0 93 27 0c 	sts	0x0C27, r31
     da0:	e0 93 26 0c 	sts	0x0C26, r30

			/* Add checksum of source and destination */
			*hc01_chksum_ptr = srcport + destport;
     da4:	cb 01       	movw	r24, r22
     da6:	8e 0d       	add	r24, r14
     da8:	9f 1d       	adc	r25, r15
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24

			/* Check for overflow... */
			if ((*hc01_chksum_ptr < srcport) || (*hc01_chksum_ptr < destport)) {
     dae:	8e 15       	cp	r24, r14
     db0:	9f 05       	cpc	r25, r15
     db2:	18 f0       	brcs	.+6      	; 0xdba <sixlowpan_hc01_process+0x390>
     db4:	86 17       	cp	r24, r22
     db6:	97 07       	cpc	r25, r23
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <sixlowpan_hc01_process+0x396>
				(*hc01_chksum_ptr)++;
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
			}

			hc01_ptr += 2;
     dc0:	40 91 24 0c 	lds	r20, 0x0C24
     dc4:	50 91 25 0c 	lds	r21, 0x0C25
     dc8:	4e 5f       	subi	r20, 0xFE	; 254
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	50 93 25 0c 	sts	0x0C25, r21
     dd0:	40 93 24 0c 	sts	0x0C24, r20
			mac_hdr_len += 2;
     dd4:	80 91 b7 1e 	lds	r24, 0x1EB7
     dd8:	8e 5f       	subi	r24, 0xFE	; 254
     dda:	80 93 b7 1e 	sts	0x1EB7, r24
			uint8_t maxPayload;
			maxPayload = 113 - mac_hdr_len; /* RUM allows 113 byte payloads */

			/* Call user program */
			uint8_t userdata;
			userdata = sixlowpan_udp_usercall(srcport, destport, hc01_ptr,
     dde:	20 91 b8 1e 	lds	r18, 0x1EB8
     de2:	28 1b       	sub	r18, r24
     de4:	01 e7       	ldi	r16, 0x71	; 113
     de6:	08 1b       	sub	r16, r24
     de8:	c7 01       	movw	r24, r14
     dea:	7e 01       	movw	r14, r28
     dec:	08 94       	sec
     dee:	e1 1c       	adc	r14, r1
     df0:	f1 1c       	adc	r15, r1
     df2:	0e 94 ac 07 	call	0xf58	; 0xf58 <sixlowpan_udp_usercall>
     df6:	38 2f       	mov	r19, r24
					mac_len - mac_hdr_len, maxPayload, &ipbuf, rxFrame); // added to get access to originAddr

			/* If user wants to send data out, do so */
			if (userdata) {
     df8:	88 23       	and	r24, r24
     dfa:	79 f1       	breq	.+94     	; 0xe5a <sixlowpan_hc01_process+0x430>
				//TODO delete later
				//UART_PRINT("  UDP packet to send\r\n");

				ipbuf.mac_hdr_len = mac_hdr_len;
     dfc:	80 91 b7 1e 	lds	r24, 0x1EB7
     e00:	8b 87       	std	Y+11, r24	; 0x0b
				mac_hdr_len = 0;
     e02:	10 92 b7 1e 	sts	0x1EB7, r1

				/* Reset TTL */
				if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     e06:	e0 91 b5 1e 	lds	r30, 0x1EB5
     e0a:	f0 91 b6 1e 	lds	r31, 0x1EB6
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	89 2f       	mov	r24, r25
     e12:	88 71       	andi	r24, 0x18	; 24
     e14:	29 f4       	brne	.+10     	; 0xe20 <sixlowpan_hc01_process+0x3f6>
					*(ipbuf.ttlptr) = 64;
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	80 83       	st	Z, r24
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <sixlowpan_hc01_process+0x3fc>
				} else {
					IPHC_BUF->encoding[0] = (IPHC_BUF->encoding[0] & ~(0x18))
     e20:	97 7e       	andi	r25, 0xE7	; 231
     e22:	90 61       	ori	r25, 0x10	; 16
     e24:	91 83       	std	Z+1, r25	; 0x01
							| SIXLOWPAN_IPHC_TTL_64;
				}

				/* Send packet back to source */
				IPHC_BUF->encoding[1] = SIXLOWPAN_IPHC_SAM_0
     e26:	80 91 b7 1e 	lds	r24, 0x1EB7
     e2a:	e0 91 b5 1e 	lds	r30, 0x1EB5
     e2e:	f0 91 b6 1e 	lds	r31, 0x1EB6
     e32:	e8 0f       	add	r30, r24
     e34:	f1 1d       	adc	r31, r1
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	92 95       	swap	r25
     e3a:	90 7f       	andi	r25, 0xF0	; 240
     e3c:	90 6c       	ori	r25, 0xC0	; 192
     e3e:	92 83       	std	Z+2, r25	; 0x02
						| (ipbuf.destcontext << 4); //New Source
				IPHC_BUF->encoding[1] |= ipbuf.srcmode | ipbuf.srccontext; //New Dest
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	28 85       	ldd	r18, Y+8	; 0x08
     e44:	82 2b       	or	r24, r18
     e46:	89 2b       	or	r24, r25
     e48:	82 83       	std	Z+2, r24	; 0x02

				mac_hdr_len = ipbuf.mac_hdr_len;
     e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4c:	80 93 b7 1e 	sts	0x1EB7, r24

				/* Figure out new UDP packet length */
				mac_len = userdata + mac_hdr_len;
     e50:	83 0f       	add	r24, r19
     e52:	80 93 b8 1e 	sts	0x1EB8, r24

				/* Send over radio */
				sixlowpan_hc01_udp_send();
     e56:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
			}
		}
	}

}
     e5a:	2b 96       	adiw	r28, 0x0b	; 11
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <sixlowpan_DataIndication>:
	//UART_PRINT("sixlowpan_DataIndication\r\n");

	//memcpy(mac_buf, frame->payload, payloadlen);

	//mac_len = payloadlen;
	sixlowpan_hc01_process(frame, payloadlen);
     e76:	0e 94 15 05 	call	0xa2a	; 0xa2a <sixlowpan_hc01_process>

	return;
}
     e7a:	08 95       	ret

00000e7c <sixlowpan_tftpData>:
 *
 * This function writes the data to the proper place in
 * flash memory.
 */
void sixlowpan_tftpData(uint8_t * data, uint8_t len)
{
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	fc 01       	movw	r30, r24
   static uint8_t  spmBuf[SPM_PAGESIZE];
   uint8_t         lastPacket = 0;
   uint8_t         haveRoom = 0;


   if (data == NULL)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	29 f4       	brne	.+10     	; 0xe94 <sixlowpan_tftpData+0x18>
   {
      address = BOOTLOADER_INITIAL_ADDR;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a1 e0       	ldi	r26, 0x01	; 1
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	35 c0       	rjmp	.+106    	; 0xefe <sixlowpan_tftpData+0x82>
      byteCnt = 0;
      return;
   }

   //Check we have room
   if ((address + SPM_PAGESIZE) > MAX_BOOTSIZE)
     e94:	e0 90 32 0d 	lds	r14, 0x0D32
     e98:	f0 90 33 0d 	lds	r15, 0x0D33
     e9c:	00 91 34 0d 	lds	r16, 0x0D34
     ea0:	10 91 35 0d 	lds	r17, 0x0D35
     ea4:	40 91 30 0d 	lds	r20, 0x0D30
     ea8:	50 91 31 0d 	lds	r21, 0x0D31
     eac:	da 01       	movw	r26, r20
     eae:	a0 5d       	subi	r26, 0xD0	; 208
     eb0:	b3 4f       	sbci	r27, 0xF3	; 243
     eb2:	26 2f       	mov	r18, r22
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <sixlowpan_tftpData+0x40>
   }

   //Copy data over
   while(len)
   {
      spmBuf[byteCnt] = *data;
     eb6:	81 91       	ld	r24, Z+
     eb8:	8d 93       	st	X+, r24
      data++;
      len--;
     eba:	21 50       	subi	r18, 0x01	; 1
   {
      lastPacket = 1;
   }

   //Copy data over
   while(len)
     ebc:	22 23       	and	r18, r18
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <sixlowpan_tftpData+0x3a>
     ec0:	9a 01       	movw	r18, r20
     ec2:	26 0f       	add	r18, r22
     ec4:	31 1d       	adc	r19, r1
     ec6:	30 93 31 0d 	sts	0x0D31, r19
     eca:	20 93 30 0d 	sts	0x0D30, r18
      len--;
      byteCnt++;
   }

   //Check for full
   if (((byteCnt >= SPM_PAGESIZE) || (lastPacket)) && haveRoom)
     ece:	2f 3f       	cpi	r18, 0xFF	; 255
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <sixlowpan_tftpData+0x5a>
     ed4:	10 f4       	brcc	.+4      	; 0xeda <sixlowpan_tftpData+0x5e>
     ed6:	60 34       	cpi	r22, 0x40	; 64
     ed8:	f1 f0       	breq	.+60     	; 0xf16 <sixlowpan_tftpData+0x9a>
     eda:	d8 01       	movw	r26, r16
     edc:	c7 01       	movw	r24, r14
     ede:	80 50       	subi	r24, 0x00	; 0
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	af 4f       	sbci	r26, 0xFF	; 255
     ee4:	bf 4f       	sbci	r27, 0xFF	; 255
     ee6:	80 50       	subi	r24, 0x00	; 0
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	a1 40       	sbci	r26, 0x01	; 1
     eec:	b0 40       	sbci	r27, 0x00	; 0
     eee:	98 f4       	brcc	.+38     	; 0xf16 <sixlowpan_tftpData+0x9a>
   {
      //        boot_program_page(address, spmBuf);
      address += byteCnt;
     ef0:	c9 01       	movw	r24, r18
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	8e 0d       	add	r24, r14
     ef8:	9f 1d       	adc	r25, r15
     efa:	a0 1f       	adc	r26, r16
     efc:	b1 1f       	adc	r27, r17
     efe:	80 93 32 0d 	sts	0x0D32, r24
     f02:	90 93 33 0d 	sts	0x0D33, r25
     f06:	a0 93 34 0d 	sts	0x0D34, r26
     f0a:	b0 93 35 0d 	sts	0x0D35, r27
      byteCnt = 0;
     f0e:	10 92 31 0d 	sts	0x0D31, r1
     f12:	10 92 30 0d 	sts	0x0D30, r1
      //Give time for us to ACK last packet
      //        bootloaderEndAddress = address;
      //        macSetAlarm(100, boot_copy_program);
   }

}
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	08 95       	ret

00000f20 <sixlowpan_application_periodic>:
      sixlowpan_hc01_udp_set_payloadsize(strlength);
      sixlowpan_hc01_udp_send();
   }

#endif
}
     f20:	08 95       	ret

00000f22 <sixlowpan_application_init>:
#elif ((APP == IPSO) && (SENSOR_TYPE == SENSOR_RANDOM_IPSO))
   SIXLOWPAN_PERIODIC_APP_TIME = 1;
#endif

   return;
}
     f22:	08 95       	ret

00000f24 <sixlowpan_button>:
void sixlowpan_button(void)
{
   uint8_t * addr_ptr;

   /* Reset response */
   remoteCommandResponseLen = 0;
     f24:	10 92 2b 0c 	sts	0x0C2B, r1

   if (remoteAction == COMMAND_UDP)
   {
      addr_ptr = sixlowpan_hc01_udp_setup_ipglobal();
     f28:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <sixlowpan_hc01_udp_setup_ipglobal>
   else
   {
      addr_ptr = sixlowpan_hc01_ping_setup_ipglobal(++pingSequence);
   }

   memcpy(addr_ptr, destipAddr, 16);
     f2c:	dc 01       	movw	r26, r24
     f2e:	ee e6       	ldi	r30, 0x6E	; 110
     f30:	f2 e0       	ldi	r31, 0x02	; 2
     f32:	80 e1       	ldi	r24, 0x10	; 16
     f34:	01 90       	ld	r0, Z+
     f36:	0d 92       	st	X+, r0
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <sixlowpan_button+0x10>

   if (remoteAction == COMMAND_UDP)
   {
      sixlowpan_hc01_udp_setup_ports(UDP_PORT_RESPONSE, UDP_PORT_COMMANDS);
     f3c:	81 eb       	ldi	r24, 0xB1	; 177
     f3e:	90 ef       	ldi	r25, 0xF0	; 240
     f40:	60 eb       	ldi	r22, 0xB0	; 176
     f42:	70 ef       	ldi	r23, 0xF0	; 240
     f44:	0e 94 37 01 	call	0x26e	; 0x26e <sixlowpan_hc01_udp_setup_ports>
      memcpy( sixlowpan_hc01_udp_get_payloadptr(), remoteCommand, remoteCommandLen);
     f48:	0e 94 91 01 	call	0x322	; 0x322 <sixlowpan_hc01_udp_get_payloadptr>
      sixlowpan_hc01_udp_set_payloadsize(remoteCommandLen);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 96 01 	call	0x32c	; 0x32c <sixlowpan_hc01_udp_set_payloadsize>
      sixlowpan_hc01_udp_send();
     f52:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
      PingSendTime = macGetTime();
      sixlowpan_hc01_ping_send();
   }


}
     f56:	08 95       	ret

00000f58 <sixlowpan_udp_usercall>:
 */
uint8_t sixlowpan_udp_usercall(uint16_t sourceport, uint16_t destport,
      uint8_t * payload, uint8_t payloadlen,
      uint8_t payloadmax, ipbuf_t * ipbuf,
      ftData* rxFrame) // added to get access to originAddr
      {
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	da 01       	movw	r26, r20
     f64:	e2 2f       	mov	r30, r18
     f66:	e6 01       	movw	r28, r12
   /* Commands to the sensor are accepted on port 0xF0B0 */
   if (destport == UDP_PORT_COMMANDS)
     f68:	40 ef       	ldi	r20, 0xF0	; 240
     f6a:	60 3b       	cpi	r22, 0xB0	; 176
     f6c:	74 07       	cpc	r23, r20
     f6e:	39 f4       	brne	.+14     	; 0xf7e <sixlowpan_udp_usercall+0x26>
      }

      strcpy((char *)payload, "OK\r\n");
      return 4;
#else
      strcpy((char *)payload, "IPSO app disabled\r\n");
     f70:	cd 01       	movw	r24, r26
     f72:	6d e2       	ldi	r22, 0x2D	; 45
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <strcpy>
     f7a:	e3 e1       	ldi	r30, 0x13	; 19
     f7c:	14 c1       	rjmp	.+552    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 19;
#endif

   }
   /* SENSOR Application */
   else if (destport == UDP_PORT_SENSOR)
     f7e:	50 ef       	ldi	r21, 0xF0	; 240
     f80:	63 3b       	cpi	r22, 0xB3	; 179
     f82:	75 07       	cpc	r23, r21
     f84:	39 f4       	brne	.+14     	; 0xf94 <sixlowpan_udp_usercall+0x3c>
         strcpy((char *)payload, "OK\r\n");
         return 4;
      }
      else
      {
         strcpy((char *)payload, "Disabled.\r\n");
     f86:	cd 01       	movw	r24, r26
     f88:	61 e4       	ldi	r22, 0x41	; 65
     f8a:	72 e0       	ldi	r23, 0x02	; 2
     f8c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <strcpy>
     f90:	eb e0       	ldi	r30, 0x0B	; 11
     f92:	09 c1       	rjmp	.+530    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
#endif

   }

   /* DSK001 Demo Application */
   else if (destport == UDP_PORT_DSKDEMO)
     f94:	80 ef       	ldi	r24, 0xF0	; 240
     f96:	64 3b       	cpi	r22, 0xB4	; 180
     f98:	78 07       	cpc	r23, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <sixlowpan_udp_usercall+0x46>
     f9c:	04 c1       	rjmp	.+520    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>

#endif

   }
   /* TFTP Port */
   else if (destport == UDP_PORT_TFTP)
     f9e:	65 34       	cpi	r22, 0x45	; 69
     fa0:	71 05       	cpc	r23, r1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <sixlowpan_udp_usercall+0x4e>
     fa4:	cf c0       	rjmp	.+414    	; 0x1144 <sixlowpan_udp_usercall+0x1ec>
         macConfig.sleeping = false;
      }
#endif

      /* Only support write request in binary: Opcode = 2 */
      if ((*(tftpPayload + 0) == 0x00) &&
     fa6:	8c 91       	ld	r24, X
     fa8:	88 23       	and	r24, r24
     faa:	09 f0       	breq	.+2      	; 0xfae <sixlowpan_udp_usercall+0x56>
     fac:	fb c0       	rjmp	.+502    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	8c 91       	ld	r24, X
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <sixlowpan_udp_usercall+0x62>
     fb8:	89 c0       	rjmp	.+274    	; 0x10cc <sixlowpan_udp_usercall+0x174>
            (*(tftpPayload + 1) == 0x02))
      {
         //Point to filename
         tftpPayload += 2;
     fba:	9d 01       	movw	r18, r26
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	e9 01       	movw	r28, r18
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <sixlowpan_udp_usercall+0x6e>

         //Find end of filename
         while (*tftpPayload)
            tftpPayload++;
     fc4:	ef 01       	movw	r28, r30
      {
         //Point to filename
         tftpPayload += 2;

         //Find end of filename
         while (*tftpPayload)
     fc6:	fe 01       	movw	r30, r28
     fc8:	81 91       	ld	r24, Z+
     fca:	88 23       	and	r24, r24
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <sixlowpan_udp_usercall+0x6c>

         //Point to file transfer mode
         tftpPayload++;

         //Check we are using binary file transfer mode
         if ((*(tftpPayload + 0) == 'o') &&
     fce:	80 81       	ld	r24, Z
     fd0:	8f 36       	cpi	r24, 0x6F	; 111
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <sixlowpan_udp_usercall+0x7e>
     fd4:	e7 c0       	rjmp	.+462    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	83 36       	cpi	r24, 0x63	; 99
     fda:	09 f0       	breq	.+2      	; 0xfde <sixlowpan_udp_usercall+0x86>
     fdc:	e3 c0       	rjmp	.+454    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	84 37       	cpi	r24, 0x74	; 116
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <sixlowpan_udp_usercall+0x8e>
     fe4:	df c0       	rjmp	.+446    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fe6:	83 81       	ldd	r24, Z+3	; 0x03
     fe8:	85 36       	cpi	r24, 0x65	; 101
     fea:	09 f0       	breq	.+2      	; 0xfee <sixlowpan_udp_usercall+0x96>
     fec:	db c0       	rjmp	.+438    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	84 37       	cpi	r24, 0x74	; 116
     ff2:	09 f0       	breq	.+2      	; 0xff6 <sixlowpan_udp_usercall+0x9e>
     ff4:	d7 c0       	rjmp	.+430    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     ff6:	85 81       	ldd	r24, Z+5	; 0x05
     ff8:	88 23       	and	r24, r24
     ffa:	09 f0       	breq	.+2      	; 0xffe <sixlowpan_udp_usercall+0xa6>
     ffc:	d3 c0       	rjmp	.+422    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
               (*(tftpPayload + 4) == 't') &&
               (*(tftpPayload + 5) == 0x00))
         {

            //Point to options
            tftpPayload += 6;
     ffe:	fe 01       	movw	r30, r28
    1000:	37 96       	adiw	r30, 0x07	; 7

            //We only accept requests with a size of
            //64 bytes per data node!
            if ((*(tftpPayload + 0) == 'b') &&
    1002:	8f 81       	ldd	r24, Y+7	; 0x07
    1004:	82 36       	cpi	r24, 0x62	; 98
    1006:	09 f0       	breq	.+2      	; 0x100a <sixlowpan_udp_usercall+0xb2>
    1008:	cd c0       	rjmp	.+410    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	8c 36       	cpi	r24, 0x6C	; 108
    100e:	09 f0       	breq	.+2      	; 0x1012 <sixlowpan_udp_usercall+0xba>
    1010:	c9 c0       	rjmp	.+402    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	8b 36       	cpi	r24, 0x6B	; 107
    1016:	09 f0       	breq	.+2      	; 0x101a <sixlowpan_udp_usercall+0xc2>
    1018:	c5 c0       	rjmp	.+394    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    101a:	13 81       	ldd	r17, Z+3	; 0x03
    101c:	13 37       	cpi	r17, 0x73	; 115
    101e:	09 f0       	breq	.+2      	; 0x1022 <sixlowpan_udp_usercall+0xca>
    1020:	c1 c0       	rjmp	.+386    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1022:	74 81       	ldd	r23, Z+4	; 0x04
    1024:	79 36       	cpi	r23, 0x69	; 105
    1026:	09 f0       	breq	.+2      	; 0x102a <sixlowpan_udp_usercall+0xd2>
    1028:	bd c0       	rjmp	.+378    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    102a:	65 81       	ldd	r22, Z+5	; 0x05
    102c:	6a 37       	cpi	r22, 0x7A	; 122
    102e:	09 f0       	breq	.+2      	; 0x1032 <sixlowpan_udp_usercall+0xda>
    1030:	b9 c0       	rjmp	.+370    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1032:	56 81       	ldd	r21, Z+6	; 0x06
    1034:	55 36       	cpi	r21, 0x65	; 101
    1036:	09 f0       	breq	.+2      	; 0x103a <sixlowpan_udp_usercall+0xe2>
    1038:	b5 c0       	rjmp	.+362    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    103a:	87 81       	ldd	r24, Z+7	; 0x07
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <sixlowpan_udp_usercall+0xea>
    1040:	b1 c0       	rjmp	.+354    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1042:	40 85       	ldd	r20, Z+8	; 0x08
    1044:	46 33       	cpi	r20, 0x36	; 54
    1046:	09 f0       	breq	.+2      	; 0x104a <sixlowpan_udp_usercall+0xf2>
    1048:	ad c0       	rjmp	.+346    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    104a:	91 85       	ldd	r25, Z+9	; 0x09
    104c:	94 33       	cpi	r25, 0x34	; 52
    104e:	09 f0       	breq	.+2      	; 0x1052 <sixlowpan_udp_usercall+0xfa>
    1050:	a9 c0       	rjmp	.+338    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1052:	82 85       	ldd	r24, Z+10	; 0x0a
    1054:	88 23       	and	r24, r24
    1056:	09 f0       	breq	.+2      	; 0x105a <sixlowpan_udp_usercall+0x102>
    1058:	a5 c0       	rjmp	.+330    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
                  (*(tftpPayload + 10) == 0x00))
            {
               //Reset payload
               tftpPayload = payload;

               *tftpPayload++ = 0x00;
    105a:	1c 92       	st	X, r1
               *tftpPayload++ = 0x06;
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	8c 93       	st	X, r24
    1062:	11 97       	sbiw	r26, 0x01	; 1
               *tftpPayload++ = 'b';
    1064:	82 e6       	ldi	r24, 0x62	; 98
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	8c 93       	st	X, r24
    106a:	f9 01       	movw	r30, r18
    106c:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 'l';
    106e:	8c e6       	ldi	r24, 0x6C	; 108
    1070:	d9 01       	movw	r26, r18
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	8c 93       	st	X, r24
    1076:	df 01       	movw	r26, r30
    1078:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'k';
    107a:	8b e6       	ldi	r24, 0x6B	; 107
    107c:	81 83       	std	Z+1, r24	; 0x01
    107e:	fd 01       	movw	r30, r26
    1080:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 's';
    1082:	11 96       	adiw	r26, 0x01	; 1
    1084:	1c 93       	st	X, r17
    1086:	df 01       	movw	r26, r30
    1088:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'i';
    108a:	71 83       	std	Z+1, r23	; 0x01
    108c:	fd 01       	movw	r30, r26
    108e:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 'z';
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	6c 93       	st	X, r22
    1094:	df 01       	movw	r26, r30
    1096:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'e';
    1098:	51 83       	std	Z+1, r21	; 0x01
    109a:	fd 01       	movw	r30, r26
    109c:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 0x00;
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	1c 92       	st	X, r1
    10a2:	df 01       	movw	r26, r30
    10a4:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = '6';
    10a6:	41 83       	std	Z+1, r20	; 0x01
               *tftpPayload++ = '4';
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	9c 93       	st	X, r25
    10ac:	11 97       	sbiw	r26, 0x01	; 1
               *tftpPayload++ = 0x00;
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	1c 92       	st	X, r1

               //Reset this
               sixlowpan_tftpData(NULL, 0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <sixlowpan_tftpData>

               expectedBlock = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	90 93 37 0d 	sts	0x0D37, r25
    10c4:	80 93 36 0d 	sts	0x0D36, r24
    10c8:	ed e0       	ldi	r30, 0x0D	; 13
    10ca:	6d c0       	rjmp	.+218    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
               return 13;
            }
         }
      }
      /* Data Packet: Opcode = 3 */
      else if ((*(tftpPayload + 0) == 0x00) &&
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <sixlowpan_udp_usercall+0x17a>
    10d0:	69 c0       	rjmp	.+210    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
            (*(tftpPayload + 1) == 0x03))
      {
         uint16_t actualBlock;

         actualBlock =  *(tftpPayload + 3);
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	2c 91       	ld	r18, X
    10d6:	13 97       	sbiw	r26, 0x03	; 3
         actualBlock += (*(tftpPayload + 2) << 8);
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	9c 91       	ld	r25, X
    10dc:	12 97       	sbiw	r26, 0x02	; 2
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	ac 01       	movw	r20, r24
    10e2:	42 0f       	add	r20, r18
    10e4:	51 1d       	adc	r21, r1
    10e6:	9a 01       	movw	r18, r20

         //Received the proper data block
         if (actualBlock == expectedBlock)
    10e8:	80 91 36 0d 	lds	r24, 0x0D36
    10ec:	90 91 37 0d 	lds	r25, 0x0D37
    10f0:	48 17       	cp	r20, r24
    10f2:	59 07       	cpc	r21, r25
    10f4:	89 f4       	brne	.+34     	; 0x1118 <sixlowpan_udp_usercall+0x1c0>
         {
            *(tftpPayload + 1) = 4; //Opcode 4 = ACK
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	11 96       	adiw	r26, 0x01	; 1
    10fa:	8c 93       	st	X, r24
    10fc:	11 97       	sbiw	r26, 0x01	; 1
            expectedBlock++;
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	30 93 37 0d 	sts	0x0D37, r19
    1106:	20 93 36 0d 	sts	0x0D36, r18

            //Check if we are done
            sixlowpan_tftpData(tftpPayload + 4, payloadlen - 4);
    110a:	e4 50       	subi	r30, 0x04	; 4
    110c:	cd 01       	movw	r24, r26
    110e:	04 96       	adiw	r24, 0x04	; 4
    1110:	6e 2f       	mov	r22, r30
    1112:	0e 94 3e 07 	call	0xe7c	; 0xe7c <sixlowpan_tftpData>
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <sixlowpan_udp_usercall+0x1cc>
            return 4;
         }
         //Our ACK must have got lost?
         else if (actualBlock < expectedBlock)
    1118:	48 17       	cp	r20, r24
    111a:	59 07       	cpc	r21, r25
    111c:	28 f4       	brcc	.+10     	; 0x1128 <sixlowpan_udp_usercall+0x1d0>
         {
            *(tftpPayload + 1) = 4; //Opcode 4 = ACK
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	8c 93       	st	X, r24
    1124:	e4 e0       	ldi	r30, 0x04	; 4
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
            return 4;
         }
         //Block from the future... something bad happened
         else
         {
            *(tftpPayload + 1) = 5; //OpCode 5 = error
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	8c 93       	st	X, r24
    112e:	11 97       	sbiw	r26, 0x01	; 1
            *(tftpPayload + 2) = 0; //Error code = 0 (undefined)
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	1c 92       	st	X, r1
    1134:	12 97       	sbiw	r26, 0x02	; 2
            *(tftpPayload + 3) = 0;
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	1c 92       	st	X, r1
    113a:	13 97       	sbiw	r26, 0x03	; 3
            *(tftpPayload + 4) = 0; //No string sorry
    113c:	14 96       	adiw	r26, 0x04	; 4
    113e:	1c 92       	st	X, r1
    1140:	e5 e0       	ldi	r30, 0x05	; 5
    1142:	31 c0       	rjmp	.+98     	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 0;

   }
   //TODO added by Dresden Elektronik to implement own user application
   // End Node/Router Node Port address
   else if(destport == UDP_PORT_END_ROUTER)
    1144:	50 ef       	ldi	r21, 0xF0	; 240
    1146:	6b 3b       	cpi	r22, 0xBB	; 187
    1148:	75 07       	cpc	r23, r21
    114a:	31 f4       	brne	.+12     	; 0x1158 <sixlowpan_udp_usercall+0x200>
   {
      process_endnode_udp_packet(payload, rxFrame->originAddr);
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 28 29 	call	0x5250	; 0x5250 <process_endnode_udp_packet>
    1156:	26 c0       	rjmp	.+76     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
      return 0; //send nothing back
   }

   //TODO added by Dresden Elektronik to implement own user application
   // Coordinator Node Port address
   else if(destport == UDP_PORT_COORD)
    1158:	80 ef       	ldi	r24, 0xF0	; 240
    115a:	6c 3b       	cpi	r22, 0xBC	; 188
    115c:	78 07       	cpc	r23, r24
    115e:	31 f4       	brne	.+12     	; 0x116c <sixlowpan_udp_usercall+0x214>

   {
      process_coord_udp_packet(payload, rxFrame->originAddr);
    1160:	6b 85       	ldd	r22, Y+11	; 0x0b
    1162:	7c 85       	ldd	r23, Y+12	; 0x0c
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <process_coord_udp_packet>
    116a:	1c c0       	rjmp	.+56     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
      return 0; //send nothing back
   }

   // TODO Implemented by Simon to implement own behaviour on incoming Messages on specified UDP PORT
   else if(destport == UDP_PORT_SENSN_COORD)
    116c:	40 ef       	ldi	r20, 0xF0	; 240
    116e:	6d 3b       	cpi	r22, 0xBD	; 189
    1170:	74 07       	cpc	r23, r20
    1172:	39 f4       	brne	.+14     	; 0x1182 <sixlowpan_udp_usercall+0x22a>
     {
        process_coord_udp_packet_SN(payload, payloadlen, rxFrame->originAddr);
    1174:	4b 85       	ldd	r20, Y+11	; 0x0b
    1176:	5c 85       	ldd	r21, Y+12	; 0x0c
    1178:	cd 01       	movw	r24, r26
    117a:	62 2f       	mov	r22, r18
    117c:	0e 94 e9 25 	call	0x4bd2	; 0x4bd2 <process_coord_udp_packet_SN>
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
        return 0; //send nothing back
     }
   else if(destport == UDP_PORT_SENSN_END_ROUTER)
    1182:	6e 5b       	subi	r22, 0xBE	; 190
    1184:	70 4f       	sbci	r23, 0xF0	; 240
    1186:	39 f4       	brne	.+14     	; 0x1196 <sixlowpan_udp_usercall+0x23e>
        {
           process_endnode_udp_packet_SN(payload, payloadlen, rxFrame->originAddr);
    1188:	4b 85       	ldd	r20, Y+11	; 0x0b
    118a:	5c 85       	ldd	r21, Y+12	; 0x0c
    118c:	cd 01       	movw	r24, r26
    118e:	62 2f       	mov	r22, r18
    1190:	0e 94 93 25 	call	0x4b26	; 0x4b26 <process_endnode_udp_packet_SN>
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
        }

   /* Unknown port */
   else
   {
      strcpy((char *)payload, "Unknown port\r\n");
    1196:	cd 01       	movw	r24, r26
    1198:	6d e4       	ldi	r22, 0x4D	; 77
    119a:	72 e0       	ldi	r23, 0x02	; 2
    119c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <strcpy>
    11a0:	ee e0       	ldi	r30, 0x0E	; 14
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 14;
    11a4:	e0 e0       	ldi	r30, 0x00	; 0
   }

   return payloadlen;
      }
    11a6:	8e 2f       	mov	r24, r30
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	08 95       	ret

000011b4 <sixlowpan_ping_usercall>:
 * received after sending out a ping request. Can be used to verify
 * node connectivity.
 *
 */
void sixlowpan_ping_usercall(uint8_t sequence)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
   remoteCommandResponseTime = macGetTime();
    11b8:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	80 93 38 0d 	sts	0x0D38, r24
    11c4:	90 93 39 0d 	sts	0x0D39, r25
    11c8:	a0 93 3a 0d 	sts	0x0D3A, r26
    11cc:	b0 93 3b 0d 	sts	0x0D3B, r27

   uint32_t timeDiff;

   timeDiff = remoteCommandResponseTime - PingSendTime;

   remoteCommandResponseLen =
    11d0:	2d b7       	in	r18, 0x3d	; 61
    11d2:	3e b7       	in	r19, 0x3e	; 62
    11d4:	28 50       	subi	r18, 0x08	; 8
    11d6:	30 40       	sbci	r19, 0x00	; 0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	3e bf       	out	0x3e, r19	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	2d bf       	out	0x3d, r18	; 61
    11e2:	ed b7       	in	r30, 0x3d	; 61
    11e4:	fe b7       	in	r31, 0x3e	; 62
    11e6:	31 96       	adiw	r30, 0x01	; 1
    11e8:	2c e3       	ldi	r18, 0x3C	; 60
    11ea:	3d e0       	ldi	r19, 0x0D	; 13
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	3a 83       	std	Y+2, r19	; 0x02
    11f2:	29 83       	std	Y+1, r18	; 0x01
    11f4:	2c e5       	ldi	r18, 0x5C	; 92
    11f6:	32 e0       	ldi	r19, 0x02	; 2
    11f8:	33 83       	std	Z+3, r19	; 0x03
    11fa:	22 83       	std	Z+2, r18	; 0x02
    11fc:	20 91 2c 0c 	lds	r18, 0x0C2C
    1200:	30 91 2d 0c 	lds	r19, 0x0C2D
    1204:	40 91 2e 0c 	lds	r20, 0x0C2E
    1208:	50 91 2f 0c 	lds	r21, 0x0C2F
    120c:	82 1b       	sub	r24, r18
    120e:	93 0b       	sbc	r25, r19
    1210:	a4 0b       	sbc	r26, r20
    1212:	b5 0b       	sbc	r27, r21
    1214:	84 83       	std	Z+4, r24	; 0x04
    1216:	95 83       	std	Z+5, r25	; 0x05
    1218:	a6 83       	std	Z+6, r26	; 0x06
    121a:	b7 83       	std	Z+7, r27	; 0x07
    121c:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    1220:	80 93 2b 0c 	sts	0x0C2B, r24
         sprintf(remoteCommandResponse, "Ping took %ld mS\n",
               timeDiff);

   // Alert the application
   appSixlowpanPingResponse();
    1224:	2d b7       	in	r18, 0x3d	; 61
    1226:	3e b7       	in	r19, 0x3e	; 62
    1228:	28 5f       	subi	r18, 0xF8	; 248
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	3e bf       	out	0x3e, r19	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	2d bf       	out	0x3d, r18	; 61
    1236:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <appSixlowpanPingResponse>
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <macGetTime>:

#define TICKS_PER_MS (u16)(1.0/((float)MS_PER_TICK))

volatile static u16 tickTimer;
u16 macGetTime(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    u16 localtime;

    AVR_ENTER_CRITICAL_REGION();
    124a:	8f b7       	in	r24, 0x3f	; 63
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	f8 94       	cli
    localtime = tickTimer;
    1250:	20 91 98 0d 	lds	r18, 0x0D98
    1254:	30 91 99 0d 	lds	r19, 0x0D99
    AVR_LEAVE_CRITICAL_REGION();
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8f bf       	out	0x3f, r24	; 63

    return localtime;
}
    125c:	c9 01       	movw	r24, r18
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <getUniqueID>:
static u8 getUniqueID(void)
{
    static u8 currentTimerID;
    u8 i,goodID;

    currentTimerID++;
    1266:	90 91 55 0d 	lds	r25, 0x0D55
    126a:	9f 5f       	subi	r25, 0xFF	; 255
    for(;;)
    {
        // don't return zero as an ID, macSetAlarm return zero on error
        if (!currentTimerID)
    126c:	09 f4       	brne	.+2      	; 0x1270 <getUniqueID+0xa>
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	e9 e5       	ldi	r30, 0x59	; 89
    1272:	fd e0       	ldi	r31, 0x0D	; 13
    1274:	21 e0       	ldi	r18, 0x01	; 1
            currentTimerID++;

        // See if this ID is used by any active timer
        goodID = 1;
        for (i=0;i<TIMER_EVENTS_MAX;i++)
            if (timerEvents[i].timerID == currentTimerID)
    1276:	80 81       	ld	r24, Z
    1278:	89 17       	cp	r24, r25
    127a:	09 f4       	brne	.+2      	; 0x127e <getUniqueID+0x18>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	35 96       	adiw	r30, 0x05	; 5
        if (!currentTimerID)
            currentTimerID++;

        // See if this ID is used by any active timer
        goodID = 1;
        for (i=0;i<TIMER_EVENTS_MAX;i++)
    1280:	8d e0       	ldi	r24, 0x0D	; 13
    1282:	eb 38       	cpi	r30, 0x8B	; 139
    1284:	f8 07       	cpc	r31, r24
    1286:	b9 f7       	brne	.-18     	; 0x1276 <getUniqueID+0x10>
            if (timerEvents[i].timerID == currentTimerID)
                goodID = 0;
        if (APP || IPV6LOWPAN)
        {
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
                if (longTimerEvents[i].timerID == currentTimerID)
    1288:	80 91 8b 0d 	lds	r24, 0x0D8B
    128c:	89 17       	cp	r24, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <getUniqueID+0x2c>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	80 91 90 0d 	lds	r24, 0x0D90
    1296:	89 17       	cp	r24, r25
    1298:	09 f4       	brne	.+2      	; 0x129c <getUniqueID+0x36>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	80 91 95 0d 	lds	r24, 0x0D95
    12a0:	89 17       	cp	r24, r25
    12a2:	19 f3       	breq	.-58     	; 0x126a <getUniqueID+0x4>
                    goodID = 0;
        }
        if (goodID)
    12a4:	22 23       	and	r18, r18
    12a6:	09 f3       	breq	.-62     	; 0x126a <getUniqueID+0x4>
    12a8:	90 93 55 0d 	sts	0x0D55, r25
            // unused ID, use this one
            return currentTimerID;
        // ID already exists, try again skippy
        currentTimerID++;
    }
}
    12ac:	89 2f       	mov	r24, r25
    12ae:	08 95       	ret

000012b0 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9c 01       	movw	r18, r24
    12c0:	fb 01       	movw	r30, r22
    if (APP || IPV6LOWPAN)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	11 f4       	brne	.+4      	; 0x12ca <macSetLongAlarm+0x1a>
        {
            // Just go right now
            callback();
    12c6:	09 95       	icall
    12c8:	16 c0       	rjmp	.+44     	; 0x12f6 <macSetLongAlarm+0x46>
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    12ca:	80 91 89 0d 	lds	r24, 0x0D89
    12ce:	90 91 8a 0d 	lds	r25, 0x0D8A
    12d2:	89 2b       	or	r24, r25
    12d4:	11 f4       	brne	.+4      	; 0x12da <macSetLongAlarm+0x2a>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	11 c0       	rjmp	.+34     	; 0x12fc <macSetLongAlarm+0x4c>
    12da:	80 91 8e 0d 	lds	r24, 0x0D8E
    12de:	90 91 8f 0d 	lds	r25, 0x0D8F
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f4       	brne	.+4      	; 0x12ea <macSetLongAlarm+0x3a>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <macSetLongAlarm+0x4c>
    12ea:	80 91 93 0d 	lds	r24, 0x0D93
    12ee:	90 91 94 0d 	lds	r25, 0x0D94
    12f2:	89 2b       	or	r24, r25
    12f4:	11 f0       	breq	.+4      	; 0x12fa <macSetLongAlarm+0x4a>
                // free, use this one
                break;
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2b c0       	rjmp	.+86     	; 0x1350 <macSetLongAlarm+0xa0>
    12fa:	82 e0       	ldi	r24, 0x02	; 2
        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	8c 01       	movw	r16, r24
    1300:	00 0f       	add	r16, r16
    1302:	11 1f       	adc	r17, r17
    1304:	00 0f       	add	r16, r16
    1306:	11 1f       	adc	r17, r17
    1308:	08 0f       	add	r16, r24
    130a:	19 1f       	adc	r17, r25
    130c:	07 57       	subi	r16, 0x77	; 119
    130e:	12 4f       	sbci	r17, 0xF2	; 242
    1310:	d8 01       	movw	r26, r16
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	3c 93       	st	X, r19
    1316:	2e 93       	st	-X, r18
        longTimerEvents[i].callback = callback;
    1318:	14 96       	adiw	r26, 0x04	; 4
    131a:	fc 93       	st	X, r31
    131c:	ee 93       	st	-X, r30
    131e:	13 97       	sbiw	r26, 0x03	; 3
        longTimerEvents[i].timerID = getUniqueID();
    1320:	0e 94 33 09 	call	0x1266	; 0x1266 <getUniqueID>
    1324:	98 2f       	mov	r25, r24
    1326:	f8 01       	movw	r30, r16
    1328:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    132a:	8f b7       	in	r24, 0x3f	; 63
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	f8 94       	cli
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    1330:	80 91 56 0d 	lds	r24, 0x0D56
    1334:	88 23       	and	r24, r24
    1336:	51 f4       	brne	.+20     	; 0x134c <macSetLongAlarm+0x9c>
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    1338:	10 92 95 00 	sts	0x0095, r1
    133c:	10 92 94 00 	sts	0x0094, r1

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 71 00 	sts	0x0071, r24
        timerRunning = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 56 0d 	sts	0x0D56, r24
        longTimerEvents[i].timerID = getUniqueID();
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
        timerStart();
        AVR_LEAVE_CRITICAL_REGION();
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    }
    return 0;
}
    1350:	89 2f       	mov	r24, r25
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	ac 01       	movw	r20, r24
    u8 i;
    u16 ticks;

    if (!time)
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	19 f4       	brne	.+6      	; 0x1378 <macSetAlarm+0x1a>
    {
        // Don't delay, just call it
        callback();
    1372:	fb 01       	movw	r30, r22
    1374:	09 95       	icall
    1376:	37 c0       	rjmp	.+110    	; 0x13e6 <macSetAlarm+0x88>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    1378:	8f b7       	in	r24, 0x3f	; 63
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	f8 94       	cli
    137e:	e7 e5       	ldi	r30, 0x57	; 87
    1380:	fd e0       	ldi	r31, 0x0D	; 13
    1382:	00 e0       	ldi	r16, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	89 2b       	or	r24, r25
    138a:	49 f5       	brne	.+82     	; 0x13de <macSetAlarm+0x80>

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    138c:	20 2f       	mov	r18, r16
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	f9 01       	movw	r30, r18
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e2 0f       	add	r30, r18
    139c:	f3 1f       	adc	r31, r19
    139e:	e9 5a       	subi	r30, 0xA9	; 169
    13a0:	f2 4f       	sbci	r31, 0xF2	; 242
    13a2:	ca 01       	movw	r24, r20
    13a4:	41 15       	cp	r20, r1
    13a6:	51 05       	cpc	r21, r1
    13a8:	11 f4       	brne	.+4      	; 0x13ae <macSetAlarm+0x50>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    timerEvents[i].callback = callback;
    13b2:	89 01       	movw	r16, r18
    13b4:	00 0f       	add	r16, r16
    13b6:	11 1f       	adc	r17, r17
    13b8:	00 0f       	add	r16, r16
    13ba:	11 1f       	adc	r17, r17
    13bc:	02 0f       	add	r16, r18
    13be:	13 1f       	adc	r17, r19
    13c0:	09 5a       	subi	r16, 0xA9	; 169
    13c2:	12 4f       	sbci	r17, 0xF2	; 242
    13c4:	f8 01       	movw	r30, r16
    13c6:	74 83       	std	Z+4, r23	; 0x04
    13c8:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    13ca:	0e 94 33 09 	call	0x1266	; 0x1266 <getUniqueID>
    13ce:	98 2f       	mov	r25, r24
    13d0:	f8 01       	movw	r30, r16
    13d2:	82 83       	std	Z+2, r24	; 0x02
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    13d4:	80 91 56 0d 	lds	r24, 0x0D56
    13d8:	88 23       	and	r24, r24
    13da:	39 f0       	breq	.+14     	; 0x13ea <macSetAlarm+0x8c>
    13dc:	10 c0       	rjmp	.+32     	; 0x13fe <macSetAlarm+0xa0>
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    13de:	0f 5f       	subi	r16, 0xFF	; 255
    13e0:	35 96       	adiw	r30, 0x05	; 5
    13e2:	0a 30       	cpi	r16, 0x0A	; 10
    13e4:	79 f6       	brne	.-98     	; 0x1384 <macSetAlarm+0x26>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <macSetAlarm+0xa4>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    13ea:	10 92 95 00 	sts	0x0095, r1
    13ee:	10 92 94 00 	sts	0x0094, r1

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	80 93 71 00 	sts	0x0071, r24
        timerRunning = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	80 93 56 0d 	sts	0x0D56, r24
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();

    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
}
    1402:	89 2f       	mov	r24, r25
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    1410:	98 2f       	mov	r25, r24
    1412:	e9 e5       	ldi	r30, 0x59	; 89
    1414:	fd e0       	ldi	r31, 0x0D	; 13
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    141a:	80 81       	ld	r24, Z
    141c:	89 17       	cp	r24, r25
    141e:	69 f4       	brne	.+26     	; 0x143a <macTimerEnd+0x2a>
        {
            // kill this timer
            timerEvents[i].time = 0;
    1420:	f9 01       	movw	r30, r18
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	e2 0f       	add	r30, r18
    142c:	f3 1f       	adc	r31, r19
    142e:	e9 5a       	subi	r30, 0xA9	; 169
    1430:	f2 4f       	sbci	r31, 0xF2	; 242
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
            timerEvents[i].timerID = 0;
    1436:	12 82       	std	Z+2, r1	; 0x02
    1438:	08 95       	ret
            return;
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	31 05       	cpc	r19, r1
    1444:	51 f7       	brne	.-44     	; 0x141a <macTimerEnd+0xa>

    // search for long timer with timerID
    if (APP || IPV6LOWPAN)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    1446:	80 91 8b 0d 	lds	r24, 0x0D8B
    144a:	89 17       	cp	r24, r25
    144c:	19 f4       	brne	.+6      	; 0x1454 <macTimerEnd+0x44>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0d c0       	rjmp	.+26     	; 0x146e <macTimerEnd+0x5e>
    1454:	80 91 90 0d 	lds	r24, 0x0D90
    1458:	89 17       	cp	r24, r25
    145a:	19 f4       	brne	.+6      	; 0x1462 <macTimerEnd+0x52>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	06 c0       	rjmp	.+12     	; 0x146e <macTimerEnd+0x5e>
    1462:	80 91 95 0d 	lds	r24, 0x0D95
    1466:	89 17       	cp	r24, r25
    1468:	71 f4       	brne	.+28     	; 0x1486 <macTimerEnd+0x76>
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	90 e0       	ldi	r25, 0x00	; 0
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    146e:	fc 01       	movw	r30, r24
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e8 0f       	add	r30, r24
    147a:	f9 1f       	adc	r31, r25
    147c:	e7 57       	subi	r30, 0x77	; 119
    147e:	f2 4f       	sbci	r31, 0xF2	; 242
    1480:	11 82       	std	Z+1, r1	; 0x01
    1482:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    1484:	12 82       	std	Z+2, r1	; 0x02
    1486:	08 95       	ret

00001488 <__vector_32>:

/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    1488:	1f 92       	push	r1
    148a:	0f 92       	push	r0
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	0f 92       	push	r0
    1490:	0b b6       	in	r0, 0x3b	; 59
    1492:	0f 92       	push	r0
    1494:	11 24       	eor	r1, r1
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	2f 93       	push	r18
    14a2:	3f 93       	push	r19
    14a4:	4f 93       	push	r20
    14a6:	5f 93       	push	r21
    14a8:	6f 93       	push	r22
    14aa:	7f 93       	push	r23
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	af 93       	push	r26
    14b2:	bf 93       	push	r27
    14b4:	ef 93       	push	r30
    14b6:	ff 93       	push	r31
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <__vector_32+0x36>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <__vector_32+0x38>
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    14c6:	80 91 98 0d 	lds	r24, 0x0D98
    14ca:	90 91 99 0d 	lds	r25, 0x0D99
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	90 93 99 0d 	sts	0x0D99, r25
    14d4:	80 93 98 0d 	sts	0x0D98, r24
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN)
    {
        if (!--secondTimer)
    14d8:	80 91 9e 02 	lds	r24, 0x029E
    14dc:	90 91 9f 02 	lds	r25, 0x029F
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	90 93 9f 02 	sts	0x029F, r25
    14e6:	80 93 9e 02 	sts	0x029E, r24
    14ea:	89 2b       	or	r24, r25
    14ec:	49 f0       	breq	.+18     	; 0x1500 <__vector_32+0x78>
    14ee:	07 e5       	ldi	r16, 0x57	; 87
    14f0:	1d e0       	ldi	r17, 0x0D	; 13
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    14f2:	26 e1       	ldi	r18, 0x16	; 22
    14f4:	d2 2e       	mov	r13, r18
                event.data = (u8*)timerEvents[i].callback;
                mac_put_event(&event);
    14f6:	7e 01       	movw	r14, r28
    14f8:	08 94       	sec
    14fa:	e1 1c       	adc	r14, r1
    14fc:	f1 1c       	adc	r15, r1
    14fe:	27 c0       	rjmp	.+78     	; 0x154e <__vector_32+0xc6>
    if (APP || IPV6LOWPAN)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    1500:	88 ee       	ldi	r24, 0xE8	; 232
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	90 93 9f 02 	sts	0x029F, r25
    1508:	80 93 9e 02 	sts	0x029E, r24
    150c:	09 e8       	ldi	r16, 0x89	; 137
    150e:	1d e0       	ldi	r17, 0x0D	; 13
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    1510:	96 e1       	ldi	r25, 0x16	; 22
    1512:	d9 2e       	mov	r13, r25
                        event.data = (u8*)longTimerEvents[i].callback;
                        mac_put_event(&event);
    1514:	7e 01       	movw	r14, r28
    1516:	08 94       	sec
    1518:	e1 1c       	adc	r14, r1
    151a:	f1 1c       	adc	r15, r1
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    151c:	f8 01       	movw	r30, r16
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f0       	breq	.+26     	; 0x1540 <__vector_32+0xb8>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	89 2b       	or	r24, r25
    152e:	41 f4       	brne	.+16     	; 0x1540 <__vector_32+0xb8>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    1530:	d9 82       	std	Y+1, r13	; 0x01
                        event.data = (u8*)longTimerEvents[i].callback;
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	94 81       	ldd	r25, Z+4	; 0x04
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    153a:	c7 01       	movw	r24, r14
    153c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    1540:	0b 5f       	subi	r16, 0xFB	; 251
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    1544:	fd e0       	ldi	r31, 0x0D	; 13
    1546:	08 39       	cpi	r16, 0x98	; 152
    1548:	1f 07       	cpc	r17, r31
    154a:	41 f7       	brne	.-48     	; 0x151c <__vector_32+0x94>
    154c:	d0 cf       	rjmp	.-96     	; 0x14ee <__vector_32+0x66>


    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    154e:	f8 01       	movw	r30, r16
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	69 f0       	breq	.+26     	; 0x1572 <__vector_32+0xea>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
    155e:	89 2b       	or	r24, r25
    1560:	41 f4       	brne	.+16     	; 0x1572 <__vector_32+0xea>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    1562:	d9 82       	std	Y+1, r13	; 0x01
                event.data = (u8*)timerEvents[i].callback;
    1564:	83 81       	ldd	r24, Z+3	; 0x03
    1566:	94 81       	ldd	r25, Z+4	; 0x04
    1568:	9b 83       	std	Y+3, r25	; 0x03
    156a:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    156c:	c7 01       	movw	r24, r14
    156e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    1572:	0b 5f       	subi	r16, 0xFB	; 251
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    }



    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    1576:	fd e0       	ldi	r31, 0x0D	; 13
    1578:	09 38       	cpi	r16, 0x89	; 137
    157a:	1f 07       	cpc	r17, r31
    157c:	41 f7       	brne	.-48     	; 0x154e <__vector_32+0xc6>
                event.data = (u8*)timerEvents[i].callback;
                mac_put_event(&event);
            }
        }
    }
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	0f 90       	pop	r0
    15b0:	0b be       	out	0x3b, r0	; 59
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0
    15b8:	1f 90       	pop	r1
    15ba:	18 95       	reti

000015bc <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    15bc:	e1 e9       	ldi	r30, 0x91	; 145
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8a 60       	ori	r24, 0x0A	; 10
    15c4:	80 83       	st	Z, r24
    15c6:	88 ee       	ldi	r24, 0xE8	; 232
    15c8:	93 e0       	ldi	r25, 0x03	; 3
    15ca:	90 93 99 00 	sts	0x0099, r25
    15ce:	80 93 98 00 	sts	0x0098, r24

    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    15d2:	80 91 94 00 	lds	r24, 0x0094
    15d6:	90 91 95 00 	lds	r25, 0x0095
    15da:	0e 94 b2 34 	call	0x6964	; 0x6964 <srand>
}
    15de:	08 95       	ret

000015e0 <hal_spi_init>:
   //Enable SPI module and master operation.
   SPCR         = (1 << SPE) | (1 << MSTR);
   //Enable doubled SPI speed in master mode.
   SPSR         = (1 << SPI2X);
#endif // SINGLE_CHIP
}
    15e0:	08 95       	ret

000015e2 <hal_init>:
 */
void hal_init(void)
{
#ifdef SINGLE_CHIP
   // do nothing -> there is no external transceiver
   DRTRAM0 = _BV(ENDRT);
    15e2:	80 e1       	ldi	r24, 0x10	; 16
    15e4:	80 93 35 01 	sts	0x0135, r24
   DRTRAM1 = _BV(ENDRT);
    15e8:	80 93 34 01 	sts	0x0134, r24
   DRTRAM2 = _BV(ENDRT);
    15ec:	80 93 33 01 	sts	0x0133, r24
   DRTRAM3 = _BV(ENDRT);
    15f0:	80 93 32 01 	sts	0x0132, r24
   DDR_SLP_TR |= (1 << SLP_TR); //Enable SLP_TR as output.
   DDR_RST    |= (1 << RST);    //Enable RST as output.
#endif // do nothing

   hal_spi_init();
   hal_enable_trx_interrupt();    //Enable interrupts from the radio transceiver.
    15f4:	ee e4       	ldi	r30, 0x4E	; 78
    15f6:	f1 e0       	ldi	r31, 0x01	; 1
    15f8:	80 81       	ld	r24, Z
    15fa:	84 60       	ori	r24, 0x04	; 4
    15fc:	80 83       	st	Z, r24
    15fe:	80 81       	ld	r24, Z
    1600:	88 60       	ori	r24, 0x08	; 8
    1602:	80 83       	st	Z, r24
    1604:	80 81       	ld	r24, Z
    1606:	80 64       	ori	r24, 0x40	; 64
    1608:	80 83       	st	Z, r24
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	80 83       	st	Z, r24
    1610:	a1 e5       	ldi	r26, 0x51	; 81
    1612:	b1 e0       	ldi	r27, 0x01	; 1
    1614:	8c 91       	ld	r24, X
    1616:	80 64       	ori	r24, 0x40	; 64
    1618:	8c 93       	st	X, r24
    161a:	80 81       	ld	r24, Z
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	80 83       	st	Z, r24
    1620:	80 81       	ld	r24, Z
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	80 83       	st	Z, r24
    1626:	80 81       	ld	r24, Z
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	80 83       	st	Z, r24
}
    162c:	08 95       	ret

0000162e <hal_register_read>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
   AVR_LEAVE_CRITICAL_REGION();

   return register_value;
#endif
   //return 0;
}
    1632:	08 95       	ret

00001634 <hal_register_write>:
 *
 */
void hal_register_write(u16 address, u8 value)
{
#ifdef SINGLE_CHIP
   (*(volatile uint8_t *)(address)) = (value);
    1634:	fc 01       	movw	r30, r24
    1636:	60 83       	st	Z, r22
         rx_mode = true;
      else
         rx_mode = false;
   }
#endif
}
    1638:	08 95       	ret

0000163a <hal_subregister_read>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    163a:	fc 01       	movw	r30, r24
    163c:	80 81       	ld	r24, Z
u8 hal_subregister_read(u16 address, u8 mask, u8 position)
{
   //Read current register value and mask out subregister.
   u8 register_value = hal_register_read(address);
   register_value &= mask;
   register_value >>= position; //Align subregister value.
    163e:	86 23       	and	r24, r22
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <hal_subregister_read+0xe>
    1644:	95 95       	asr	r25
    1646:	87 95       	ror	r24
    1648:	4a 95       	dec	r20
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <hal_subregister_read+0xa>

   return register_value;
}
    164c:	08 95       	ret

0000164e <hal_subregister_write>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    164e:	fc 01       	movw	r30, r24
    1650:	90 81       	ld	r25, Z
void hal_subregister_write(u16 address, u8 mask, u8 position,
      u8 value)
{
   //Read current register value and mask area outside the subregister.
   u8 register_value = hal_register_read(address);
   register_value &= ~mask;
    1652:	86 2f       	mov	r24, r22
    1654:	80 95       	com	r24
    1656:	89 23       	and	r24, r25

   //Start preparing the new subregister value. shift in place and mask.
   value <<= position;
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <hal_subregister_write+0x12>
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	4a 95       	dec	r20
    1662:	e2 f7       	brpl	.-8      	; 0x165c <hal_subregister_write+0xe>
   value &= mask;
    1664:	62 23       	and	r22, r18

   value |= register_value; //Set the new subregister value.
    1666:	86 2b       	or	r24, r22
 *
 */
void hal_register_write(u16 address, u8 value)
{
#ifdef SINGLE_CHIP
   (*(volatile uint8_t *)(address)) = (value);
    1668:	80 83       	st	Z, r24

   value |= register_value; //Set the new subregister value.

   //Write the modified register value.
   hal_register_write(address, value);
}
    166a:	08 95       	ret

0000166c <hal_sram_read>:
 * \param length Length of the read burst
 * \param data Pointer to buffer where data is stored.
 *
 */
void hal_sram_read(u8 address, u8 length, u8 *data)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	98 2f       	mov	r25, r24
    1678:	fa 01       	movw	r30, r20
   AVR_ENTER_CRITICAL_REGION();
    167a:	8f b7       	in	r24, 0x3f	; 63
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	f8 94       	cli

   HAL_SS_LOW(); //Initiate the SPI transaction.
    1680:	28 98       	cbi	0x05, 0	; 5

   /*Send SRAM read command.*/
   SPDR = HAL_TRX_CMD_SR;
    1682:	1e bc       	out	0x2e, r1	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    1684:	0d b4       	in	r0, 0x2d	; 45
    1686:	07 fe       	sbrs	r0, 7
    1688:	fd cf       	rjmp	.-6      	; 0x1684 <hal_sram_read+0x18>
      ;
   SPDR;  // Dummy read of SPDR
    168a:	8e b5       	in	r24, 0x2e	; 46

   /*Send address where to start reading.*/
   SPDR = address;
    168c:	9e bd       	out	0x2e, r25	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    168e:	0d b4       	in	r0, 0x2d	; 45
    1690:	07 fe       	sbrs	r0, 7
    1692:	fd cf       	rjmp	.-6      	; 0x168e <hal_sram_read+0x22>
      ;
   SPDR;  // Dummy read of SPDR
    1694:	8e b5       	in	r24, 0x2e	; 46

   /*Upload the chosen memory area.*/
   do
   {
      SPDR = HAL_DUMMY_READ;
    1696:	1e bc       	out	0x2e, r1	; 46
      while ((SPSR & (1 << SPIF)) == 0) {;}
    1698:	0d b4       	in	r0, 0x2d	; 45
    169a:	07 fe       	sbrs	r0, 7
    169c:	fd cf       	rjmp	.-6      	; 0x1698 <hal_sram_read+0x2c>
      *data++ = SPDR;
    169e:	8e b5       	in	r24, 0x2e	; 46
    16a0:	80 83       	st	Z, r24
   } while (--length > 0);
    16a2:	61 50       	subi	r22, 0x01	; 1
    16a4:	11 f0       	breq	.+4      	; 0x16aa <hal_sram_read+0x3e>
   /*Upload the chosen memory area.*/
   do
   {
      SPDR = HAL_DUMMY_READ;
      while ((SPSR & (1 << SPIF)) == 0) {;}
      *data++ = SPDR;
    16a6:	31 96       	adiw	r30, 0x01	; 1
    16a8:	f6 cf       	rjmp	.-20     	; 0x1696 <hal_sram_read+0x2a>
   } while (--length > 0);

   HAL_SS_HIGH();
    16aa:	28 9a       	sbi	0x05, 0	; 5

   AVR_LEAVE_CRITICAL_REGION();
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	8f bf       	out	0x3f, r24	; 63
}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <hal_sram_write>:
 * \param length  Length of the write burst
 * \param data    Pointer to an array of bytes that should be written
 *
 */
void hal_sram_write(u8 address, u8 length, u8 *data)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	0f 92       	push	r0
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	98 2f       	mov	r25, r24
    16c4:	fa 01       	movw	r30, r20
   AVR_ENTER_CRITICAL_REGION();
    16c6:	8f b7       	in	r24, 0x3f	; 63
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	f8 94       	cli

   HAL_SS_LOW();
    16cc:	28 98       	cbi	0x05, 0	; 5

   /*Send SRAM write command.*/
   SPDR = HAL_TRX_CMD_SW;
    16ce:	80 e4       	ldi	r24, 0x40	; 64
    16d0:	8e bd       	out	0x2e, r24	; 46
   while ((SPSR & (1 << SPIF)) == 0) {;}
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <hal_sram_write+0x1a>
   SPDR;  // Dummy read of SPDR
    16d8:	8e b5       	in	r24, 0x2e	; 46

   /*Send address where to start writing to.*/
   SPDR = address;
    16da:	9e bd       	out	0x2e, r25	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <hal_sram_write+0x24>
      ;
   SPDR;  // Dummy read of SPDR
    16e2:	8e b5       	in	r24, 0x2e	; 46

   /*Upload the chosen memory area.*/
   do
   {
      SPDR = *data++;
    16e4:	81 91       	ld	r24, Z+
    16e6:	8e bd       	out	0x2e, r24	; 46
      while ((SPSR & (1 << SPIF)) == 0)
    16e8:	0d b4       	in	r0, 0x2d	; 45
    16ea:	07 fe       	sbrs	r0, 7
    16ec:	fd cf       	rjmp	.-6      	; 0x16e8 <hal_sram_write+0x30>
         ;
      SPDR;  // Dummy read of SPDR
    16ee:	8e b5       	in	r24, 0x2e	; 46
   } while (--length > 0);
    16f0:	61 50       	subi	r22, 0x01	; 1
    16f2:	c1 f7       	brne	.-16     	; 0x16e4 <hal_sram_write+0x2c>

   HAL_SS_HIGH();
    16f4:	28 9a       	sbi	0x05, 0	; 5

   AVR_LEAVE_CRITICAL_REGION();
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	8f bf       	out	0x3f, r24	; 63
}
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <__vector_71>:
   macEdCallback();
}

// BAT_LOW_vect
ISR(RADIO_VECT5)
{
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
   //user defined voltage threshold.

   //u8 trx_isr_mask = hal_register_read(RG_IRQ_MASK);
   //trx_isr_mask &= ~HAL_BAT_LOW_MASK;
   //hal_register_write(RG_IRQ_MASK, trx_isr_mask);
}
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <__vector_58>:

// PLL_UNLOCK_vect
ISR(RADIO_VECT6)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
   //UART_PRINT("PLL UNLOCK IRQ\r\n");
}
    1720:	0f 90       	pop	r0
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	0f 90       	pop	r0
    1726:	1f 90       	pop	r1
    1728:	18 95       	reti

0000172a <__vector_57>:

// PLL_LOCK_vect
ISR(RADIO_VECT7)
{
    172a:	1f 92       	push	r1
    172c:	0f 92       	push	r0
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	0f 92       	push	r0
    1732:	11 24       	eor	r1, r1
   //UART_PRINT("PLL LOCK IRQ\r\n");
}
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	0f 90       	pop	r0
    173a:	1f 90       	pop	r1
    173c:	18 95       	reti

0000173e <__vector_64>:

// AWAKE_vect
ISR(RADIO_VECT8)
{
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
   //UART_PRINT("AWAKE IRQ\r\n");
}
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <halSetupClock>:
      CLKPR = 1 << CLKPCE;  // Set the change-enable flag
      CLKPR = 3;            // Set for divide-by-eight, or 1MHz
      AVR_LEAVE_CRITICAL_REGION();
   }

}
    1752:	08 95       	ret

00001754 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
 */
void halPutEeprom(u8 *addr, u8 length, u8 *src)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	fc 01       	movw	r30, r24
    1760:	36 2f       	mov	r19, r22
    1762:	ca 01       	movw	r24, r20
   AVR_ENTER_CRITICAL_REGION();
    1764:	2f b7       	in	r18, 0x3f	; 63
    1766:	29 83       	std	Y+1, r18	; 0x01
    1768:	f8 94       	cli
   eeprom_write_block (src, addr, length);
    176a:	bf 01       	movw	r22, r30
    176c:	43 2f       	mov	r20, r19
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <__eewr_block_m128rfa1>
   AVR_LEAVE_CRITICAL_REGION();
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	8f bf       	out	0x3f, r24	; 63
}
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
 */
void halGetEeprom(u8 *addr, u8 length, u8 *dest)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	fc 01       	movw	r30, r24
    178c:	36 2f       	mov	r19, r22
    178e:	ca 01       	movw	r24, r20
   AVR_ENTER_CRITICAL_REGION();
    1790:	2f b7       	in	r18, 0x3f	; 63
    1792:	29 83       	std	Y+1, r18	; 0x01
    1794:	f8 94       	cli
   eeprom_read_block (dest, addr, length);
    1796:	bf 01       	movw	r22, r30
    1798:	43 2f       	mov	r20, r19
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__eerd_block_m128rfa1>
   AVR_LEAVE_CRITICAL_REGION();
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f bf       	out	0x3f, r24	; 63
}
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
 */
bool calibrate_rc_osc(void)
{
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <calibrate_rc_osc+0x10>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
   if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
   {
      bool success = false;
      static bool once=0;

      if (once)
    17c0:	80 91 9a 0d 	lds	r24, 0x0D9A
    17c4:	88 23       	and	r24, r24
    17c6:	11 f0       	breq	.+4      	; 0x17cc <calibrate_rc_osc+0x20>
    17c8:	11 e0       	ldi	r17, 0x01	; 1
    17ca:	5c c0       	rjmp	.+184    	; 0x1884 <calibrate_rc_osc+0xd8>
         // Only calibrate once
         return true;

      once = true;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 9a 0d 	sts	0x0D9A, r24
      //   timer2 to overflow
      // Timer 2 (8-bit) is run from the main CPU clock divided by
      //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
      //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

      osccal_saved = OSCCAL;
    17d2:	d0 90 66 00 	lds	r13, 0x0066
      cli();
    17d6:	f8 94       	cli

      radioSetClockSpeed(true, CLKM_1MHz);
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	0e 94 f5 18 	call	0x31ea	; 0x31ea <radioSetClockSpeed>

      // Save current values of timer status.
      tccr2b = TCCR2B;
    17de:	e0 90 b1 00 	lds	r14, 0x00B1
      tccr1b = TCCR1B;
    17e2:	f0 90 81 00 	lds	r15, 0x0081
      tccr1a = TCCR1A;
    17e6:	00 91 80 00 	lds	r16, 0x0080

      // Stop timers 1 and 2.
      // Set timer 1 to normal mode (no CTC, no PWM, just count).
      TCCR2B = 0;
    17ea:	10 92 b1 00 	sts	0x00B1, r1
      TCCR1B = 0;
    17ee:	10 92 81 00 	sts	0x0081, r1
      TCCR1A = 0;
    17f2:	10 92 80 00 	sts	0x0080, r1
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0

      for (counter = 0; counter < 1000;  counter++)
      {
         // Timer 2 driven from clock divided by 32
         TCCR2B = (1 << CS21) | (1 << CS20);
    17fa:	63 e0       	ldi	r22, 0x03	; 3
         // Timer 1 driven with external clock
         TCCR1B = (1 << CS12) | (1 << CS11);
    17fc:	56 e0       	ldi	r21, 0x06	; 6

         // Clear pending timer 1 and 2 interrupts, and clear the
         // counters.
         TCNT2 = 0;
         TCNT1 = 0;
         TIFR1 = 0xFF;
    17fe:	4f ef       	ldi	r20, 0xFF	; 255
      TCCR1A = 0;

      for (counter = 0; counter < 1000;  counter++)
      {
         // Timer 2 driven from clock divided by 32
         TCCR2B = (1 << CS21) | (1 << CS20);
    1800:	60 93 b1 00 	sts	0x00B1, r22
         // Timer 1 driven with external clock
         TCCR1B = (1 << CS12) | (1 << CS11);
    1804:	50 93 81 00 	sts	0x0081, r21

         // Clear pending timer 1 and 2 interrupts, and clear the
         // counters.
         TCNT2 = 0;
    1808:	10 92 b2 00 	sts	0x00B2, r1
         TCNT1 = 0;
    180c:	10 92 85 00 	sts	0x0085, r1
    1810:	10 92 84 00 	sts	0x0084, r1
         TIFR1 = 0xFF;
    1814:	46 bb       	out	0x16, r20	; 22
         TIFR2 = 0xFF;
    1816:	47 bb       	out	0x17, r20	; 23

         // Wait for timer 2 to overflow.
         while (!(TIFR2 & (1 << TOV2)))
    1818:	b8 9b       	sbis	0x17, 0	; 23
    181a:	fe cf       	rjmp	.-4      	; 0x1818 <calibrate_rc_osc+0x6c>
            ;

         temp = TCNT1;
    181c:	80 91 84 00 	lds	r24, 0x0084
    1820:	90 91 85 00 	lds	r25, 0x0085
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01


         // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
         // counted while timer 2 was counting CPU cycles
         TCCR1B = 0;
    1828:	10 92 81 00 	sts	0x0081, r1
         TCCR2B = 0;
    182c:	10 92 b1 00 	sts	0x00B1, r1

         if (temp < (u16)(0.995 * TARGETVAL))
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	8a 5f       	subi	r24, 0xFA	; 250
    1836:	93 40       	sbci	r25, 0x03	; 3
    1838:	20 f4       	brcc	.+8      	; 0x1842 <calibrate_rc_osc+0x96>
         {
            // Too fast, slow down
            OSCCAL--;
    183a:	80 91 66 00 	lds	r24, 0x0066
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <calibrate_rc_osc+0xaa>
         }
         else if (temp > (u16)(1.005 * TARGETVAL))
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	86 50       	subi	r24, 0x06	; 6
    1848:	94 40       	sbci	r25, 0x04	; 4
    184a:	10 f4       	brcc	.+4      	; 0x1850 <calibrate_rc_osc+0xa4>
    184c:	11 e0       	ldi	r17, 0x01	; 1
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <calibrate_rc_osc+0xbc>
         {
            // Too slow, speed up
            OSCCAL++;
    1850:	80 91 66 00 	lds	r24, 0x0066
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 66 00 	sts	0x0066, r24
      // Set timer 1 to normal mode (no CTC, no PWM, just count).
      TCCR2B = 0;
      TCCR1B = 0;
      TCCR1A = 0;

      for (counter = 0; counter < 1000;  counter++)
    185a:	2f 5f       	subi	r18, 0xFF	; 255
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	28 3e       	cpi	r18, 0xE8	; 232
    1862:	38 07       	cpc	r19, r24
    1864:	69 f6       	brne	.-102    	; 0x1800 <calibrate_rc_osc+0x54>
    1866:	10 e0       	ldi	r17, 0x00	; 0
            success = true;
            break;
         }
      }

      radioSetClockSpeed(true, CLKM_DISABLED);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <radioSetClockSpeed>

      // restore timer status regs
      TCCR2B = tccr2b;
    1870:	e0 92 b1 00 	sts	0x00B1, r14
      TCCR1B = tccr1b;
    1874:	f0 92 81 00 	sts	0x0081, r15
      TCCR1A = tccr1a;
    1878:	00 93 80 00 	sts	0x0080, r16
      if (!success)
    187c:	11 23       	and	r17, r17
    187e:	11 f4       	brne	.+4      	; 0x1884 <calibrate_rc_osc+0xd8>
      {
         // We failed, therefore restore previous OSCCAL value.
         OSCCAL = osccal_saved;
    1880:	d0 92 66 00 	sts	0x0066, r13

      return success;
   }
   else
      return 0;
}
    1884:	81 2f       	mov	r24, r17
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	df 90       	pop	r13
    1898:	08 95       	ret

0000189a <__vector_61>:
   radioTrxEndEvent();
}

// TRX24_CCA_ED_DONE_vect
ISR(RADIO_VECT4)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	0b b6       	in	r0, 0x3b	; 59
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
   //UART_PRINT("ED_DONE IRQ\r\n");
   macEdCallback();
    18c0:	0e 94 98 17 	call	0x2f30	; 0x2f30 <macEdCallback>
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0b be       	out	0x3b, r0	; 59
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_63>:
   radioRxEndEvent();
}

// TRX24_TX_END_vect
ISR(RADIO_VECT3)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	0b b6       	in	r0, 0x3b	; 59
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
   //UART_PRINT("TX_END IRQ\r\n");
   radioTrxEndEvent();
    1910:	0e 94 03 1c 	call	0x3806	; 0x3806 <radioTrxEndEvent>
}
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0b be       	out	0x3b, r0	; 59
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <__vector_60>:
   radioRxStartEvent(frame_length);
}

// TRX24_RX_END_vect
ISR(RADIO_VECT2)
{
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	0b b6       	in	r0, 0x3b	; 59
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	2f 93       	push	r18
    194a:	3f 93       	push	r19
    194c:	4f 93       	push	r20
    194e:	5f 93       	push	r21
    1950:	6f 93       	push	r22
    1952:	7f 93       	push	r23
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
   //UART_PRINT("RX_END IRQ\r\n");
   //radioTrxEndEvent();
   radioRxEndEvent();
    1960:	0e 94 65 1b 	call	0x36ca	; 0x36ca <radioRxEndEvent>
}
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_59>:
#endif

#ifdef SINGLE_CHIP
// TRX24_RX_START_vect
ISR(RADIO_VECT1)
{
    198a:	1f 92       	push	r1
    198c:	0f 92       	push	r0
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	0f 92       	push	r0
    1992:	0b b6       	in	r0, 0x3b	; 59
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    19b0:	80 91 7b 01 	lds	r24, 0x017B
// TRX24_RX_START_vect
ISR(RADIO_VECT1)
{
   //UART_PRINT("RX_START IRQ\r\n");
   uint8_t frame_length = hal_register_read(RG_TST_RX_LENGTH);
   radioRxStartEvent(frame_length);
    19b4:	0e 94 92 19 	call	0x3324	; 0x3324 <radioRxStartEvent>
}
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0b be       	out	0x3b, r0	; 59
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <hal_frame_write>:
 *  \param  write_buffer    Pointer to data that is to be written to frame buffer.
 *  \param  length          Length of data. The maximum length is 127 bytes.
 *
 */
void hal_frame_write(u8 *write_buffer, u8 length)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	28 2f       	mov	r18, r24
    19ea:	79 2f       	mov	r23, r25
    19ec:	46 2f       	mov	r20, r22
#ifdef SINGLE_CHIP
   volatile uint8_t *pDst = (volatile uint8_t *)0x180;

   AVR_ENTER_CRITICAL_REGION();
    19ee:	8f b7       	in	r24, 0x3f	; 63
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	f8 94       	cli

   //Toggle the SLP_TR pin to initiate the frame transmission.
   hal_set_slptr_high();
    19f4:	e9 e3       	ldi	r30, 0x39	; 57
    19f6:	f1 e0       	ldi	r31, 0x01	; 1
    19f8:	80 81       	ld	r24, Z
    19fa:	82 60       	ori	r24, 0x02	; 2
    19fc:	80 83       	st	Z, r24
   hal_set_slptr_low();
    19fe:	80 81       	ld	r24, Z
    1a00:	8d 7f       	andi	r24, 0xFD	; 253
    1a02:	80 83       	st	Z, r24

   *pDst = length;
    1a04:	60 93 80 01 	sts	0x0180, r22
   pDst++;
   memcpy((void *)pDst, write_buffer, length);
    1a08:	81 e8       	ldi	r24, 0x81	; 129
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	62 2f       	mov	r22, r18
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	0e 94 db 34 	call	0x69b6	; 0x69b6 <memcpy>

   AVR_LEAVE_CRITICAL_REGION();
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	8f bf       	out	0x3f, r24	; 63
   HAL_SS_HIGH(); //Terminate SPI transaction.

   AVR_LEAVE_CRITICAL_REGION();

#endif //SINGLE_CHIP
}
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <hal_frame_read>:
 *          is out of the defined bounds. Then the frame length, lqi value and crc
 *          be set to zero. This is done to indicate an error.
 *
 */
uint8_t* hal_frame_read(void)
{
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
   uint8_t* pFrame = bmm_buffer_alloc();
    1a36:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    1a3a:	7c 01       	movw	r14, r24

   if(pFrame != NULL)
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	b1 f1       	breq	.+108    	; 0x1aac <hal_frame_read+0x8c>
   {
      rx_frame_t *rx_frame = (rx_frame_t*)pFrame;

#ifdef SINGLE_CHIP
      AVR_ENTER_CRITICAL_REGION();
    1a40:	8f b7       	in	r24, 0x3f	; 63
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	f8 94       	cli
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    1a46:	00 91 7b 01 	lds	r16, 0x017B
#ifdef SINGLE_CHIP
      AVR_ENTER_CRITICAL_REGION();

      volatile uint8_t *pSrc = (volatile uint8_t *)0x180;
      uint8_t frame_length = hal_register_read(RG_TST_RX_LENGTH);
      if ((frame_length >= HAL_MIN_FRAME_LENGTH) && (frame_length <= HAL_MAX_FRAME_LENGTH))
    1a4a:	80 2f       	mov	r24, r16
    1a4c:	83 50       	subi	r24, 0x03	; 3
    1a4e:	90 e8       	ldi	r25, 0x80	; 128
    1a50:	c9 2e       	mov	r12, r25
    1a52:	d1 2c       	mov	r13, r1
    1a54:	ce 0c       	add	r12, r14
    1a56:	df 1c       	adc	r13, r15
    1a58:	8d 37       	cpi	r24, 0x7D	; 125
    1a5a:	98 f4       	brcc	.+38     	; 0x1a82 <hal_frame_read+0x62>
      {
         // read length and save frame content -> lqi is NOT included in frame length byte
         rx_frame->length = frame_length;
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	01 93       	st	Z+, r16
         //memcpy(rx_data, (void *)pSrc, frame_length);
         memcpy(rx_frame->data, (void *)pSrc, frame_length-1);
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	98 01       	movw	r18, r16
    1a64:	21 50       	subi	r18, 0x01	; 1
    1a66:	30 40       	sbci	r19, 0x00	; 0
    1a68:	cf 01       	movw	r24, r30
    1a6a:	60 e8       	ldi	r22, 0x80	; 128
    1a6c:	71 e0       	ldi	r23, 0x01	; 1
    1a6e:	a9 01       	movw	r20, r18
    1a70:	0e 94 db 34 	call	0x69b6	; 0x69b6 <memcpy>
         // save LQI /
         //rx_frame->lqi = *(pSrc + (frame_length + 1));
         rx_frame->lqi = *(pSrc + frame_length);
    1a74:	00 58       	subi	r16, 0x80	; 128
    1a76:	1e 4f       	sbci	r17, 0xFE	; 254
    1a78:	f8 01       	movw	r30, r16
    1a7a:	80 81       	ld	r24, Z
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	80 83       	st	Z, r24
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <hal_frame_read+0x88>
      }
      else
      {
         rx_frame->length = 0;
    1a82:	f7 01       	movw	r30, r14
    1a84:	10 82       	st	Z, r1
         rx_frame->lqi    = 0;
    1a86:	f6 01       	movw	r30, r12
    1a88:	10 82       	st	Z, r1
         rx_frame->crc    = false;
    1a8a:	81 e8       	ldi	r24, 0x81	; 129
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	e8 0e       	add	r14, r24
    1a90:	f9 1e       	adc	r15, r25
    1a92:	f7 01       	movw	r30, r14
    1a94:	10 82       	st	Z, r1
    1a96:	8f e7       	ldi	r24, 0x7F	; 127
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
    1a9a:	e8 0e       	add	r14, r24
    1a9c:	f9 1e       	adc	r15, r25
         bmm_buffer_free(pFrame); // free allcoated buffer
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
    1aa4:	ee 24       	eor	r14, r14
    1aa6:	ff 24       	eor	r15, r15
         pFrame = NULL; // set buffer pointer to NULL, that next app do not use it
      }
      AVR_LEAVE_CRITICAL_REGION();
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	8f bf       	out	0x3f, r24	; 63
      AVR_LEAVE_CRITICAL_REGION();

#endif // SINGLE_CHIP
   }
   return pFrame;
}
    1aac:	c7 01       	movw	r24, r14
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	08 95       	ret

00001ac2 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    1ac2:	80 93 d1 1f 	sts	0x1FD1, r24
    radioSetOperatingChannel(channel);
    1ac6:	0e 94 4b 1a 	call	0x3496	; 0x3496 <radioSetOperatingChannel>
}
    1aca:	08 95       	ret

00001acc <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    1acc:	1f 93       	push	r17
    1ace:	18 2f       	mov	r17, r24
    macConfig.panId = BROADCASTPANID;
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	90 93 c9 1f 	sts	0x1FC9, r25
    1ad8:	80 93 c8 1f 	sts	0x1FC8, r24
    macConfig.shortAddress = BROADCASTADDR;
    1adc:	90 93 cb 1f 	sts	0x1FCB, r25
    1ae0:	80 93 ca 1f 	sts	0x1FCA, r24
    macConfig.associated = false;
    1ae4:	10 92 c5 1f 	sts	0x1FC5, r1

    macConfig.parentShortAddress = BROADCASTADDR;
    1ae8:	90 93 cd 1f 	sts	0x1FCD, r25
    1aec:	80 93 cc 1f 	sts	0x1FCC, r24
    macConfig.lastRoute = BROADCASTADDR;
    1af0:	90 93 cf 1f 	sts	0x1FCF, r25
    1af4:	80 93 ce 1f 	sts	0x1FCE, r24
    macConfig.hopsToCoord = 0;
    1af8:	10 92 d0 1f 	sts	0x1FD0, r1
    macConfig.busy = 0;
    1afc:	10 92 d4 1f 	sts	0x1FD4, r1
    macConfig.sleeping = 1; // Assume sleeping state initially
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	80 93 d5 1f 	sts	0x1FD5, r24

    // Init radio
    radioInit(SERIAL ? true : false);
    1b06:	0e 94 39 1c 	call	0x3872	; 0x3872 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    1b0a:	10 93 d1 1f 	sts	0x1FD1, r17
    if (Channel != 0xff)
    1b0e:	1f 3f       	cpi	r17, 0xFF	; 255
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <macInit+0x4c>
        radioSetOperatingChannel(Channel);
    1b12:	81 2f       	mov	r24, r17
    1b14:	0e 94 4b 1a 	call	0x3496	; 0x3496 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    1b1e:	88 e0       	ldi	r24, 0x08	; 8
    1b20:	0e 94 ca 1a 	call	0x3594	; 0x3594 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    1b24:	0e 94 09 19 	call	0x3212	; 0x3212 <radioSetup900>

    // Set ack times shorter
    hal_subregister_write(SR_AACK_ACK_TIME, 1);
    1b28:	87 e5       	ldi	r24, 0x57	; 87
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	64 e0       	ldi	r22, 0x04	; 4
    1b2e:	42 e0       	ldi	r20, 0x02	; 2
    1b30:	21 e0       	ldi	r18, 0x01	; 1
    1b32:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>

    radioSetTrxState(RX_AACK_ON);
    1b36:	86 e1       	ldi	r24, 0x16	; 22
    1b38:	0e 94 ca 1a 	call	0x3594	; 0x3594 <radioSetTrxState>

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&macConfig.longAddr);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	68 e0       	ldi	r22, 0x08	; 8
    1b42:	4d eb       	ldi	r20, 0xBD	; 189
    1b44:	5f e1       	ldi	r21, 0x1F	; 31
    1b46:	0e 94 c0 0b 	call	0x1780	; 0x1780 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	9f ef       	ldi	r25, 0xFF	; 255
    1b54:	0e 94 b4 19 	call	0x3368	; 0x3368 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	9f ef       	ldi	r25, 0xFF	; 255
    1b5c:	0e 94 c2 19 	call	0x3384	; 0x3384 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    1b60:	8c e6       	ldi	r24, 0x6C	; 108
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	60 ef       	ldi	r22, 0xF0	; 240
    1b66:	44 e0       	ldi	r20, 0x04	; 4
    1b68:	22 e0       	ldi	r18, 0x02	; 2
    1b6a:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>

    // Load the long address into the radio. Needed for auto modes.
    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    1b6e:	8d eb       	ldi	r24, 0xBD	; 189
    1b70:	9f e1       	ldi	r25, 0x1F	; 31
    1b72:	0e 94 9d 19 	call	0x333a	; 0x333a <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    1b76:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <macInitNodes>

    UART_PRINT("macInit completed\r\n");
    1b7a:	80 ea       	ldi	r24, 0xA0	; 160
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
}
    1b82:	1f 91       	pop	r17
    1b84:	08 95       	ret

00001b86 <macAssociate>:

         // save Event
         mac_put_event(&event);
      }
   }
}
    1b86:	08 95       	ret

00001b88 <macAssociationConfirm>:
   response frame.  This function stops the association timeout timer,
   and call the callback function @ref appAssociateConfirm.
 */
void macAssociationConfirm(void)
{
   LED_ON(1);
    1b88:	71 98       	cbi	0x0e, 1	; 14
    1b8a:	69 9a       	sbi	0x0d, 1	; 13
      macTimerEnd(associationTimer);

      // Let app know that we got an associate packet
      appAssociateConfirm(!macConfig.associated);
   }
}
    1b8c:	08 95       	ret

00001b8e <addNode>:
   @param parentAddr Short address of the parent of the new node.

   @return The short address for the new node.
 */
u16 addNode(u8 type, u64 *macAddr, u16 parentAddr)
{
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	e8 2e       	mov	r14, r24
    1b9c:	eb 01       	movw	r28, r22
    1b9e:	8a 01       	movw	r16, r20
   // Find the node in the table, return it or find new one
   if (NODETYPE == COORD)
   {
      u16 i=0xffff;

      nodes[0].nodeType = COORD;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	80 93 a0 0d 	sts	0x0DA0, r24

      // Check to see if the node was previously stored in the table.
      for (i=1;i<MAXNODES;i++)
      {
         if(nodes[i].nodeLongAddress == *macAddr)
    1ba6:	f8 80       	ld	r15, Y
    1ba8:	b9 81       	ldd	r27, Y+1	; 0x01
    1baa:	aa 81       	ldd	r26, Y+2	; 0x02
    1bac:	7b 81       	ldd	r23, Y+3	; 0x03
    1bae:	6c 81       	ldd	r22, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	e1 eb       	ldi	r30, 0xB1	; 177
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 15       	cp	r24, r15
    1bc2:	a9 f4       	brne	.+42     	; 0x1bee <addNode+0x60>
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	8b 17       	cp	r24, r27
    1bc8:	91 f4       	brne	.+36     	; 0x1bee <addNode+0x60>
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	8a 17       	cp	r24, r26
    1bce:	79 f4       	brne	.+30     	; 0x1bee <addNode+0x60>
    1bd0:	83 81       	ldd	r24, Z+3	; 0x03
    1bd2:	87 17       	cp	r24, r23
    1bd4:	61 f4       	brne	.+24     	; 0x1bee <addNode+0x60>
    1bd6:	84 81       	ldd	r24, Z+4	; 0x04
    1bd8:	86 17       	cp	r24, r22
    1bda:	49 f4       	brne	.+18     	; 0x1bee <addNode+0x60>
    1bdc:	85 81       	ldd	r24, Z+5	; 0x05
    1bde:	83 17       	cp	r24, r19
    1be0:	31 f4       	brne	.+12     	; 0x1bee <addNode+0x60>
    1be2:	86 81       	ldd	r24, Z+6	; 0x06
    1be4:	82 17       	cp	r24, r18
    1be6:	19 f4       	brne	.+6      	; 0x1bee <addNode+0x60>
    1be8:	87 81       	ldd	r24, Z+7	; 0x07
    1bea:	89 17       	cp	r24, r25
    1bec:	a1 f0       	breq	.+40     	; 0x1c16 <addNode+0x88>
      u16 i=0xffff;

      nodes[0].nodeType = COORD;

      // Check to see if the node was previously stored in the table.
      for (i=1;i<MAXNODES;i++)
    1bee:	4f 5f       	subi	r20, 0xFF	; 255
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	70 96       	adiw	r30, 0x10	; 16
    1bf4:	44 36       	cpi	r20, 0x64	; 100
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	11 f7       	brne	.-60     	; 0x1bbe <addNode+0x30>
    1bfa:	e0 eb       	ldi	r30, 0xB0	; 176
    1bfc:	fd e0       	ldi	r31, 0x0D	; 13
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	50 e0       	ldi	r21, 0x00	; 0

      // If node was not found, pick first empty spot
      if (i >= MAXNODES)
      {
         for (i=1;i<MAXNODES;i++)
            if (!nodes[i].nodeType)
    1c02:	80 81       	ld	r24, Z
    1c04:	88 23       	and	r24, r24
    1c06:	51 f0       	breq	.+20     	; 0x1c1c <addNode+0x8e>
      }

      // If node was not found, pick first empty spot
      if (i >= MAXNODES)
      {
         for (i=1;i<MAXNODES;i++)
    1c08:	4f 5f       	subi	r20, 0xFF	; 255
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	70 96       	adiw	r30, 0x10	; 16
    1c0e:	44 36       	cpi	r20, 0x64	; 100
    1c10:	51 05       	cpc	r21, r1
    1c12:	b9 f7       	brne	.-18     	; 0x1c02 <addNode+0x74>
    1c14:	2f c0       	rjmp	.+94     	; 0x1c74 <addNode+0xe6>
            if (!nodes[i].nodeType)
               break;
      }
      if (i >= MAXNODES)
    1c16:	44 36       	cpi	r20, 0x64	; 100
    1c18:	51 05       	cpc	r21, r1
    1c1a:	60 f5       	brcc	.+88     	; 0x1c74 <addNode+0xe6>
         // Table is full, sorry
         return 0xffff;

      // Node address not found. index "i" is still set to last empty
      // element in the array. Index "i" becomes the node short address.
      nodes[i].nodeType = type;
    1c1c:	9a 01       	movw	r18, r20
    1c1e:	84 e0       	ldi	r24, 0x04	; 4
    1c20:	22 0f       	add	r18, r18
    1c22:	33 1f       	adc	r19, r19
    1c24:	8a 95       	dec	r24
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <addNode+0x92>
    1c28:	d9 01       	movw	r26, r18
    1c2a:	a0 56       	subi	r26, 0x60	; 96
    1c2c:	b2 4f       	sbci	r27, 0xF2	; 242
    1c2e:	fd 01       	movw	r30, r26
    1c30:	e1 92       	st	Z+, r14
      nodes[i].nodeLongAddress = *macAddr;
    1c32:	88 81       	ld	r24, Y
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	8c 93       	st	X, r24
    1c38:	11 97       	sbiw	r26, 0x01	; 1
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	81 83       	std	Z+1, r24	; 0x01
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	82 83       	std	Z+2, r24	; 0x02
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	83 83       	std	Z+3, r24	; 0x03
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	84 83       	std	Z+4, r24	; 0x04
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	85 83       	std	Z+5, r24	; 0x05
    1c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c50:	86 83       	std	Z+6, r24	; 0x06
    1c52:	8f 81       	ldd	r24, Y+7	; 0x07
    1c54:	87 83       	std	Z+7, r24	; 0x07
      nodes[i].parentShortAddress = parentAddr;
    1c56:	1a 96       	adiw	r26, 0x0a	; 10
    1c58:	1c 93       	st	X, r17
    1c5a:	0e 93       	st	-X, r16
    1c5c:	19 97       	sbiw	r26, 0x09	; 9
      nodes[i].lastRoutedAddress = 0;
    1c5e:	1c 96       	adiw	r26, 0x0c	; 12
    1c60:	1c 92       	st	X, r1
    1c62:	1e 92       	st	-X, r1
    1c64:	1b 97       	sbiw	r26, 0x0b	; 11
      nodes[i].wakeup = 0;
    1c66:	21 55       	subi	r18, 0x51	; 81
    1c68:	32 4f       	sbci	r19, 0xF2	; 242
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	80 83       	st	Z, r24
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <addNode+0xea>
                fnDebugMsg("\r\nAssociation buffer problem");
        }
#endif
       */

      return i;
    1c74:	4f ef       	ldi	r20, 0xFF	; 255
    1c76:	5f ef       	ldi	r21, 0xFF	; 255
   }
   return 0;
}
    1c78:	ca 01       	movw	r24, r20
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	08 95       	ret

00001c88 <macGetNodeAddr>:

   @return The short address of the node, or @ref BROADCASTADDR on
   error.
 */
u16 macGetNodeAddr(u64 *macAddr)
{
    1c88:	dc 01       	movw	r26, r24
    1c8a:	e0 eb       	ldi	r30, 0xB0	; 176
    1c8c:	fd e0       	ldi	r31, 0x0D	; 13
    1c8e:	21 e0       	ldi	r18, 0x01	; 1
    1c90:	30 e0       	ldi	r19, 0x00	; 0
   if (NODETYPE == COORD)
   {
      u16 i;

      for (i=1;i<MAXNODES;i++)
         if (nodes[i].nodeType &&
    1c92:	80 81       	ld	r24, Z
    1c94:	88 23       	and	r24, r24
    1c96:	71 f1       	breq	.+92     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	8c 91       	ld	r24, X
    1c9c:	98 17       	cp	r25, r24
    1c9e:	51 f5       	brne	.+84     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1ca0:	92 81       	ldd	r25, Z+2	; 0x02
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	8c 91       	ld	r24, X
    1ca6:	11 97       	sbiw	r26, 0x01	; 1
    1ca8:	98 17       	cp	r25, r24
    1caa:	21 f5       	brne	.+72     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	8c 91       	ld	r24, X
    1cb2:	12 97       	sbiw	r26, 0x02	; 2
    1cb4:	98 17       	cp	r25, r24
    1cb6:	f1 f4       	brne	.+60     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1cb8:	94 81       	ldd	r25, Z+4	; 0x04
    1cba:	13 96       	adiw	r26, 0x03	; 3
    1cbc:	8c 91       	ld	r24, X
    1cbe:	13 97       	sbiw	r26, 0x03	; 3
    1cc0:	98 17       	cp	r25, r24
    1cc2:	c1 f4       	brne	.+48     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1cc4:	95 81       	ldd	r25, Z+5	; 0x05
    1cc6:	14 96       	adiw	r26, 0x04	; 4
    1cc8:	8c 91       	ld	r24, X
    1cca:	14 97       	sbiw	r26, 0x04	; 4
    1ccc:	98 17       	cp	r25, r24
    1cce:	91 f4       	brne	.+36     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1cd0:	96 81       	ldd	r25, Z+6	; 0x06
    1cd2:	15 96       	adiw	r26, 0x05	; 5
    1cd4:	8c 91       	ld	r24, X
    1cd6:	15 97       	sbiw	r26, 0x05	; 5
    1cd8:	98 17       	cp	r25, r24
    1cda:	61 f4       	brne	.+24     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1cdc:	97 81       	ldd	r25, Z+7	; 0x07
    1cde:	16 96       	adiw	r26, 0x06	; 6
    1ce0:	8c 91       	ld	r24, X
    1ce2:	16 97       	sbiw	r26, 0x06	; 6
    1ce4:	98 17       	cp	r25, r24
    1ce6:	31 f4       	brne	.+12     	; 0x1cf4 <macGetNodeAddr+0x6c>
    1ce8:	90 85       	ldd	r25, Z+8	; 0x08
    1cea:	17 96       	adiw	r26, 0x07	; 7
    1cec:	8c 91       	ld	r24, X
    1cee:	17 97       	sbiw	r26, 0x07	; 7
    1cf0:	98 17       	cp	r25, r24
    1cf2:	41 f0       	breq	.+16     	; 0x1d04 <macGetNodeAddr+0x7c>
{
   if (NODETYPE == COORD)
   {
      u16 i;

      for (i=1;i<MAXNODES;i++)
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	70 96       	adiw	r30, 0x10	; 16
    1cfa:	24 36       	cpi	r18, 0x64	; 100
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	49 f6       	brne	.-110    	; 0x1c92 <macGetNodeAddr+0xa>
    1d00:	2f ef       	ldi	r18, 0xFF	; 255
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
               nodes[i].nodeLongAddress == *macAddr)
            return i;
   }
   // Not found, return nonsense address
   return BROADCASTADDR;
}
    1d04:	c9 01       	movw	r24, r18
    1d06:	08 95       	ret

00001d08 <macIsChild>:
   //returns true if the node with shortAddr is a child of this node

   if (NODETYPE == COORD)
   {
      // Check to see if the node was previously stored in the table.
      if (shortAddr >= MAXNODES)
    1d08:	84 36       	cpi	r24, 0x64	; 100
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	90 f4       	brcc	.+36     	; 0x1d32 <macIsChild+0x2a>
         return 0;
      if(nodes[shortAddr].nodeType &&
    1d0e:	fc 01       	movw	r30, r24
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	ee 0f       	add	r30, r30
    1d14:	ff 1f       	adc	r31, r31
    1d16:	9a 95       	dec	r25
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <macIsChild+0xa>
    1d1a:	e0 56       	subi	r30, 0x60	; 96
    1d1c:	f2 4f       	sbci	r31, 0xF2	; 242
    1d1e:	80 81       	ld	r24, Z
    1d20:	88 23       	and	r24, r24
    1d22:	39 f0       	breq	.+14     	; 0x1d32 <macIsChild+0x2a>
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	81 85       	ldd	r24, Z+9	; 0x09
    1d28:	92 85       	ldd	r25, Z+10	; 0x0a
    1d2a:	89 2b       	or	r24, r25
    1d2c:	19 f4       	brne	.+6      	; 0x1d34 <macIsChild+0x2c>
    1d2e:	21 e0       	ldi	r18, 0x01	; 1
    1d30:	01 c0       	rjmp	.+2      	; 0x1d34 <macIsChild+0x2c>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
            // This node already exists, return true
            return true;
   }
   return false;

}
    1d34:	82 2f       	mov	r24, r18
    1d36:	08 95       	ret

00001d38 <macIsChildSleeping>:
               childNodes[i].sleeping)
            return true;
   }
   return false;

}
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	08 95       	ret

00001d3c <macAddChild>:
            appChildAssociated(i);

            return;
         }
   }
}
    1d3c:	08 95       	ret

00001d3e <macRemoveChild>:
void macRemoveChild(u16 shortAddr)
{
   if (NODETYPE == COORD)
   {
      // remove from coord table, clear data
      if (shortAddr >= MAXNODES)
    1d3e:	84 36       	cpi	r24, 0x64	; 100
    1d40:	91 05       	cpc	r25, r1
    1d42:	68 f4       	brcc	.+26     	; 0x1d5e <macRemoveChild+0x20>
         return;
      nodes[shortAddr].nodeType = 0;
    1d44:	fc 01       	movw	r30, r24
    1d46:	24 e0       	ldi	r18, 0x04	; 4
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	2a 95       	dec	r18
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <macRemoveChild+0xa>
    1d50:	e0 56       	subi	r30, 0x60	; 96
    1d52:	f2 4f       	sbci	r31, 0xF2	; 242
    1d54:	10 82       	st	Z, r1
      nodes[shortAddr].parentShortAddress = 0;
    1d56:	12 86       	std	Z+10, r1	; 0x0a
    1d58:	11 86       	std	Z+9, r1	; 0x09
      nodes[shortAddr].lastRoutedAddress =0;
    1d5a:	14 86       	std	Z+12, r1	; 0x0c
    1d5c:	13 86       	std	Z+11, r1	; 0x0b
    1d5e:	08 95       	ret

00001d60 <macGetParent>:
   @param shortAddr The short address of the child node.

   @return The short address of the parent of the given node.
 */
u16 macGetParent(u16 shortAddr)
{
    1d60:	fc 01       	movw	r30, r24
   // Coord only, return short address of the node's parent
   if (NODETYPE == COORD)
   {
      if (shortAddr >= MAXNODES)
    1d62:	84 36       	cpi	r24, 0x64	; 100
    1d64:	91 05       	cpc	r25, r1
    1d66:	18 f0       	brcs	.+6      	; 0x1d6e <macGetParent+0xe>
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	09 c0       	rjmp	.+18     	; 0x1d80 <macGetParent+0x20>
         return 0;
      return nodes[shortAddr].parentShortAddress;
    1d6e:	34 e0       	ldi	r19, 0x04	; 4
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	3a 95       	dec	r19
    1d76:	e1 f7       	brne	.-8      	; 0x1d70 <macGetParent+0x10>
    1d78:	e0 56       	subi	r30, 0x60	; 96
    1d7a:	f2 4f       	sbci	r31, 0xF2	; 242
    1d7c:	21 85       	ldd	r18, Z+9	; 0x09
    1d7e:	32 85       	ldd	r19, Z+10	; 0x0a
   }
   return 0;
}
    1d80:	c9 01       	movw	r24, r18
    1d82:	08 95       	ret

00001d84 <macGetTopParent>:

   @return The short address of the node's top parent.  This node is
   the first hop from coordinator to addr.
 */
u16 macGetTopParent(u16 addr)
{
    1d84:	fc 01       	movw	r30, r24
   if (NODETYPE == COORD)
   {
      if (addr >= MAXNODES)
    1d86:	84 36       	cpi	r24, 0x64	; 100
    1d88:	91 05       	cpc	r25, r1
    1d8a:	f8 f4       	brcc	.+62     	; 0x1dca <macGetTopParent+0x46>
         return 0;
      for(;;)
      {
         if (!nodes[addr].nodeType)
    1d8c:	df 01       	movw	r26, r30
    1d8e:	54 e0       	ldi	r21, 0x04	; 4
    1d90:	aa 0f       	add	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	5a 95       	dec	r21
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <macGetTopParent+0xc>
    1d98:	a0 56       	subi	r26, 0x60	; 96
    1d9a:	b2 4f       	sbci	r27, 0xF2	; 242
    1d9c:	8c 91       	ld	r24, X
    1d9e:	88 23       	and	r24, r24
    1da0:	a1 f0       	breq	.+40     	; 0x1dca <macGetTopParent+0x46>
   //returns true if the node with shortAddr is a child of this node

   if (NODETYPE == COORD)
   {
      // Check to see if the node was previously stored in the table.
      if (shortAddr >= MAXNODES)
    1da2:	e4 36       	cpi	r30, 0x64	; 100
    1da4:	f1 05       	cpc	r31, r1
    1da6:	30 f4       	brcc	.+12     	; 0x1db4 <macGetTopParent+0x30>
         return 0;
      if(nodes[shortAddr].nodeType &&
    1da8:	19 96       	adiw	r26, 0x09	; 9
    1daa:	8d 91       	ld	r24, X+
    1dac:	9c 91       	ld	r25, X
    1dae:	1a 97       	sbiw	r26, 0x0a	; 10
    1db0:	89 2b       	or	r24, r25
    1db2:	69 f0       	breq	.+26     	; 0x1dce <macGetTopParent+0x4a>
            // This is a bad node, get out
            return 0;
         if (macIsChild(addr))
            return addr;
         // jump up the chain one step.
         addr = nodes[addr].parentShortAddress;
    1db4:	44 e0       	ldi	r20, 0x04	; 4
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	4a 95       	dec	r20
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <macGetTopParent+0x32>
    1dbe:	e0 56       	subi	r30, 0x60	; 96
    1dc0:	f2 4f       	sbci	r31, 0xF2	; 242
    1dc2:	01 84       	ldd	r0, Z+9	; 0x09
    1dc4:	f2 85       	ldd	r31, Z+10	; 0x0a
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	e1 cf       	rjmp	.-62     	; 0x1d8c <macGetTopParent+0x8>
      }
    1dca:	e0 e0       	ldi	r30, 0x00	; 0
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
   }
   return 0;
}
    1dce:	cf 01       	movw	r24, r30
    1dd0:	08 95       	ret

00001dd2 <findFirstChild>:
   network table.

   @return Zero if no child was found.
 */
u16 findFirstChild(u16 addr)
{
    1dd2:	ac 01       	movw	r20, r24
    1dd4:	e0 eb       	ldi	r30, 0xB0	; 176
    1dd6:	fd e0       	ldi	r31, 0x0D	; 13
    1dd8:	21 e0       	ldi	r18, 0x01	; 1
    1dda:	30 e0       	ldi	r19, 0x00	; 0
   if (NODETYPE == COORD)
   {
      u16 i;
      for (i=1;i<MAXNODES;i++)
      {
         if (nodes[i].nodeType &&
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	29 f0       	breq	.+10     	; 0x1dec <findFirstChild+0x1a>
    1de2:	81 85       	ldd	r24, Z+9	; 0x09
    1de4:	92 85       	ldd	r25, Z+10	; 0x0a
    1de6:	84 17       	cp	r24, r20
    1de8:	95 07       	cpc	r25, r21
    1dea:	41 f0       	breq	.+16     	; 0x1dfc <findFirstChild+0x2a>
   // Return first child of node addr, or 0x0 if none found

   if (NODETYPE == COORD)
   {
      u16 i;
      for (i=1;i<MAXNODES;i++)
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	70 96       	adiw	r30, 0x10	; 16
    1df2:	24 36       	cpi	r18, 0x64	; 100
    1df4:	31 05       	cpc	r19, r1
    1df6:	91 f7       	brne	.-28     	; 0x1ddc <findFirstChild+0xa>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
         }
      }
      // none found, return zero
   }
   return 0;
}
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	08 95       	ret

00001e00 <findNextSibling>:
 */
u16 findNextSibling(u16 addr)
{
   if (NODETYPE == COORD)
   {
      if (addr >= MAXNODES)
    1e00:	84 36       	cpi	r24, 0x64	; 100
    1e02:	91 05       	cpc	r25, r1
    1e04:	20 f5       	brcc	.+72     	; 0x1e4e <findNextSibling+0x4e>
         return 0;

      // find the next sibling of node addr
      u16 parent = nodes[addr].parentShortAddress;
    1e06:	fc 01       	movw	r30, r24
    1e08:	74 e0       	ldi	r23, 0x04	; 4
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	7a 95       	dec	r23
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <findNextSibling+0xa>
    1e12:	e0 56       	subi	r30, 0x60	; 96
    1e14:	f2 4f       	sbci	r31, 0xF2	; 242
    1e16:	21 85       	ldd	r18, Z+9	; 0x09
    1e18:	32 85       	ldd	r19, Z+10	; 0x0a
      u16 i;

      for (i=addr+1;i<MAXNODES;i++)
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	31 96       	adiw	r30, 0x01	; 1
    1e1e:	df 01       	movw	r26, r30
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	aa 0f       	add	r26, r26
    1e24:	bb 1f       	adc	r27, r27
    1e26:	6a 95       	dec	r22
    1e28:	e1 f7       	brne	.-8      	; 0x1e22 <findNextSibling+0x22>
    1e2a:	a0 56       	subi	r26, 0x60	; 96
    1e2c:	b2 4f       	sbci	r27, 0xF2	; 242
    1e2e:	0c c0       	rjmp	.+24     	; 0x1e48 <findNextSibling+0x48>
      {
         if (nodes[i].nodeType &&
    1e30:	8c 91       	ld	r24, X
    1e32:	88 23       	and	r24, r24
    1e34:	39 f0       	breq	.+14     	; 0x1e44 <findNextSibling+0x44>
    1e36:	19 96       	adiw	r26, 0x09	; 9
    1e38:	8d 91       	ld	r24, X+
    1e3a:	9c 91       	ld	r25, X
    1e3c:	1a 97       	sbiw	r26, 0x0a	; 10
    1e3e:	82 17       	cp	r24, r18
    1e40:	93 07       	cpc	r25, r19
    1e42:	39 f0       	breq	.+14     	; 0x1e52 <findNextSibling+0x52>

      // find the next sibling of node addr
      u16 parent = nodes[addr].parentShortAddress;
      u16 i;

      for (i=addr+1;i<MAXNODES;i++)
    1e44:	31 96       	adiw	r30, 0x01	; 1
    1e46:	50 96       	adiw	r26, 0x10	; 16
    1e48:	e4 36       	cpi	r30, 0x64	; 100
    1e4a:	f1 05       	cpc	r31, r1
    1e4c:	89 f7       	brne	.-30     	; 0x1e30 <findNextSibling+0x30>
    1e4e:	e0 e0       	ldi	r30, 0x00	; 0
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
            return i;
      }
   }
   // none found, return zero
   return 0;
}
    1e52:	cf 01       	movw	r24, r30
    1e54:	08 95       	ret

00001e56 <getChildTable>:
   return (uint8_t*)&nodes;
#elif (NODETYPE == ROUTER)
   return (uint8_t*)&childNodes;
#endif
   return 0;
                        }
    1e56:	80 ea       	ldi	r24, 0xA0	; 160
    1e58:	9d e0       	ldi	r25, 0x0D	; 13
    1e5a:	08 95       	ret

00001e5c <macGetLastRoute>:

   @return The short address of the last route address for the router
   (parent).
 */
u16 macGetLastRoute(u16 parent)
{
    1e5c:	fc 01       	movw	r30, r24
   if (NODETYPE == COORD && parent < MAXNODES)
    1e5e:	84 36       	cpi	r24, 0x64	; 100
    1e60:	91 05       	cpc	r25, r1
    1e62:	18 f0       	brcs	.+6      	; 0x1e6a <macGetLastRoute+0xe>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	09 c0       	rjmp	.+18     	; 0x1e7c <macGetLastRoute+0x20>
      return nodes[parent].lastRoutedAddress;
    1e6a:	a4 e0       	ldi	r26, 0x04	; 4
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	aa 95       	dec	r26
    1e72:	e1 f7       	brne	.-8      	; 0x1e6c <macGetLastRoute+0x10>
    1e74:	e0 56       	subi	r30, 0x60	; 96
    1e76:	f2 4f       	sbci	r31, 0xF2	; 242
    1e78:	23 85       	ldd	r18, Z+11	; 0x0b
    1e7a:	34 85       	ldd	r19, Z+12	; 0x0c
   return 0;
}
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	08 95       	ret

00001e80 <macSetLastRoute>:
   @param parent Short address of the router node.

   @param addr Short address of the last routed address for a node.
 */
void macSetLastRoute(u16 parent, u16 addr)
{
    1e80:	fc 01       	movw	r30, r24
   if (NODETYPE == COORD && parent < MAXNODES)
    1e82:	84 36       	cpi	r24, 0x64	; 100
    1e84:	91 05       	cpc	r25, r1
    1e86:	48 f4       	brcc	.+18     	; 0x1e9a <macSetLastRoute+0x1a>
      nodes[parent].lastRoutedAddress = addr;
    1e88:	b4 e0       	ldi	r27, 0x04	; 4
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	ba 95       	dec	r27
    1e90:	e1 f7       	brne	.-8      	; 0x1e8a <macSetLastRoute+0xa>
    1e92:	e0 56       	subi	r30, 0x60	; 96
    1e94:	f2 4f       	sbci	r31, 0xF2	; 242
    1e96:	74 87       	std	Z+12, r23	; 0x0c
    1e98:	63 87       	std	Z+11, r22	; 0x0b
    1e9a:	08 95       	ret

00001e9c <macGetNode>:
   given node.
 */
associatedNodes_t *macGetNode(u16 index)
{
   // return pointer to node data.
   if (NODETYPE == COORD && index < MAXNODES)
    1e9c:	84 36       	cpi	r24, 0x64	; 100
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	18 f0       	brcs	.+6      	; 0x1ea8 <macGetNode+0xc>
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	08 c0       	rjmp	.+16     	; 0x1eb8 <macGetNode+0x1c>
      return &nodes[index];
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	84 e0       	ldi	r24, 0x04	; 4
    1eac:	22 0f       	add	r18, r18
    1eae:	33 1f       	adc	r19, r19
    1eb0:	8a 95       	dec	r24
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <macGetNode+0x10>
    1eb4:	20 56       	subi	r18, 0x60	; 96
    1eb6:	32 4f       	sbci	r19, 0xF2	; 242
   return NULL;
}
    1eb8:	c9 01       	movw	r24, r18
    1eba:	08 95       	ret

00001ebc <macWakeChildNode>:
            }
         }
         // Not found, too bad.
      }
   }
}
    1ebc:	08 95       	ret

00001ebe <macClearChildWakeFlag>:
         if (addr >= MAXNODES)
            return;
         nodes[addr].wakeup = 0;
      }
   }
}
    1ebe:	08 95       	ret

00001ec0 <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
 */
void macChildIsAwake(ftData *frame)
{
    1ec0:	fc 01       	movw	r30, r24
         if (RUMSLEEP)
            macSendStoredFrame(addr);
      }
   }
   // Reset the sleeping bit in the frame.
   frame->type &= ~0x80;
    1ec2:	85 85       	ldd	r24, Z+13	; 0x0d
    1ec4:	8f 77       	andi	r24, 0x7F	; 127
    1ec6:	85 87       	std	Z+13, r24	; 0x0d
}
    1ec8:	08 95       	ret

00001eca <macFirstChild>:
         if (childNodes[childNodeNdx].childAddr)
            return childNodeNdx;
   }

   return 0;
}
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	08 95       	ret

00001ed0 <macNextChild>:
         if (childNodes[childNodeNdx].childAddr)
            return childNodeNdx;
   }

   return 0;
}
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	08 95       	ret

00001ed6 <macGetHopCount>:
    @brief This will return the hop count for the associated node requested.

    @param node_short Short address of node the search for hop count.
 */
u8 macGetHopCount(u16 node_short)
{
    1ed6:	21 e0       	ldi	r18, 0x01	; 1
   u8 hops = 1;

   for(;;)
   {
      if (!nodes[node_short].nodeType)
    1ed8:	fc 01       	movw	r30, r24
    1eda:	94 e0       	ldi	r25, 0x04	; 4
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	9a 95       	dec	r25
    1ee2:	e1 f7       	brne	.-8      	; 0x1edc <macGetHopCount+0x6>
    1ee4:	e0 56       	subi	r30, 0x60	; 96
    1ee6:	f2 4f       	sbci	r31, 0xF2	; 242
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	31 f0       	breq	.+12     	; 0x1efa <macGetHopCount+0x24>
         // bad short address, quit
         return 0;

      // see if we're just one hop away
      if (nodes[node_short].parentShortAddress == DEFAULT_COORD_ADDR)
    1eee:	81 85       	ldd	r24, Z+9	; 0x09
    1ef0:	92 85       	ldd	r25, Z+10	; 0x0a
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <macGetHopCount+0x26>

      // find node's parent, the new node for next cycle
      node_short = nodes[node_short].parentShortAddress;

      // Go for another hop
      hops++;
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	ef cf       	rjmp	.-34     	; 0x1ed8 <macGetHopCount+0x2>
   }
    1efa:	20 e0       	ldi	r18, 0x00	; 0
}
    1efc:	82 2f       	mov	r24, r18
    1efe:	08 95       	ret

00001f00 <macInitNodes>:
void macInitNodes(void)
{
   if (NODETYPE == COORD)
   {
      // Init nodes array - wipe out all of the table
      memset(&nodes, 0, sizeof(nodes));
    1f00:	80 e4       	ldi	r24, 0x40	; 64
    1f02:	96 e0       	ldi	r25, 0x06	; 6
    1f04:	e0 ea       	ldi	r30, 0xA0	; 160
    1f06:	fd e0       	ldi	r31, 0x0D	; 13
    1f08:	df 01       	movw	r26, r30
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	1d 92       	st	X+, r1
    1f0e:	21 50       	subi	r18, 0x01	; 1
    1f10:	30 40       	sbci	r19, 0x00	; 0
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <macInitNodes+0xc>
   }
}
    1f14:	08 95       	ret

00001f16 <macNotifyDrop>:

   @param child Short address the of the child node to drop from the
   parent's node table.
 */
void macNotifyDrop(u16 parent, u16 child)
{
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <macNotifyDrop+0x12>
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <macNotifyDrop+0x14>
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
   if (NODETYPE == COORD)
   {
      // Save params for final drop packet.
      dropParent = parent;
    1f30:	90 93 9d 0d 	sts	0x0D9D, r25
    1f34:	80 93 9c 0d 	sts	0x0D9C, r24
      dropChild = child;
    1f38:	70 93 9f 0d 	sts	0x0D9F, r23
    1f3c:	60 93 9e 0d 	sts	0x0D9E, r22

      macConfig.busy = true;
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	20 93 d4 1f 	sts	0x1FD4, r18

      // Send a routing packet and then the drop packet
      macSendRoutingPacket(dropParent);
    1f46:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <macSendRoutingPacket>

      uint8_t* pFrame = bmm_buffer_alloc();
    1f4a:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    1f4e:	6c 01       	movw	r12, r24

      if(pFrame != NULL)
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	e9 f1       	breq	.+122    	; 0x1fce <macNotifyDrop+0xb8>
      {
         // send the packet
         ftDropChild *frame = (ftDropChild*)(((rx_frame_t*)pFrame)->data);
    1f54:	8c 01       	movw	r16, r24
    1f56:	0f 5f       	subi	r16, 0xFF	; 255
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255

         frame->fcf =           FCF_DATA;
    1f5a:	81 e6       	ldi	r24, 0x61	; 97
    1f5c:	98 e8       	ldi	r25, 0x88	; 136
    1f5e:	f6 01       	movw	r30, r12
    1f60:	92 83       	std	Z+2, r25	; 0x02
    1f62:	81 83       	std	Z+1, r24	; 0x01
         frame->seq =           macConfig.dsn++;
    1f64:	80 91 c7 1f 	lds	r24, 0x1FC7
    1f68:	f8 01       	movw	r30, r16
    1f6a:	82 83       	std	Z+2, r24	; 0x02
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 c7 1f 	sts	0x1FC7, r24
         frame->panid =         macConfig.panId;
    1f72:	80 91 c8 1f 	lds	r24, 0x1FC8
    1f76:	90 91 c9 1f 	lds	r25, 0x1FC9
    1f7a:	94 83       	std	Z+4, r25	; 0x04
    1f7c:	83 83       	std	Z+3, r24	; 0x03
         frame->destAddr =      macGetTopParent(dropParent);
    1f7e:	e0 90 9c 0d 	lds	r14, 0x0D9C
    1f82:	f0 90 9d 0d 	lds	r15, 0x0D9D
    1f86:	c7 01       	movw	r24, r14
    1f88:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <macGetTopParent>
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	96 83       	std	Z+6, r25	; 0x06
    1f90:	85 83       	std	Z+5, r24	; 0x05
         frame->srcAddr =       DEFAULT_COORD_ADDR;
    1f92:	10 86       	std	Z+8, r1	; 0x08
    1f94:	17 82       	std	Z+7, r1	; 0x07
         frame->finalDestAddr = dropParent;
    1f96:	f2 86       	std	Z+10, r15	; 0x0a
    1f98:	e1 86       	std	Z+9, r14	; 0x09
         frame->originAddr =    DEFAULT_COORD_ADDR;
    1f9a:	14 86       	std	Z+12, r1	; 0x0c
    1f9c:	13 86       	std	Z+11, r1	; 0x0b
         frame->type =          DROP_CHILD_FRAME;
    1f9e:	24 e0       	ldi	r18, 0x04	; 4
    1fa0:	25 87       	std	Z+13, r18	; 0x0d
         // pass child address to drop
         frame->childAddr =     dropChild;
    1fa2:	20 91 9e 0d 	lds	r18, 0x0D9E
    1fa6:	30 91 9f 0d 	lds	r19, 0x0D9F
    1faa:	37 87       	std	Z+15, r19	; 0x0f
    1fac:	26 87       	std	Z+14, r18	; 0x0e

         // Send frame over the radio
         if (frame->destAddr != DEFAULT_COORD_ADDR)
    1fae:	89 2b       	or	r24, r25
    1fb0:	59 f0       	breq	.+22     	; 0x1fc8 <macNotifyDrop+0xb2>
         {
            // don't send a message to ourself
            event_object_t event;
            event.event = MAC_EVENT_SEND;
    1fb2:	8a e1       	ldi	r24, 0x1A	; 26
    1fb4:	89 83       	std	Y+1, r24	; 0x01
            event.data = pFrame;
    1fb6:	db 82       	std	Y+3, r13	; 0x03
    1fb8:	ca 82       	std	Y+2, r12	; 0x02
            event.callback = 0;
    1fba:	1d 82       	std	Y+5, r1	; 0x05
    1fbc:	1c 82       	std	Y+4, r1	; 0x04

            // save Event and send later
            mac_put_event(&event);
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <macNotifyDrop+0xb8>
         }
         else
         {
            bmm_buffer_free(pFrame);
    1fc8:	c6 01       	movw	r24, r12
    1fca:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
         }
      }
   }
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	ff 90       	pop	r15
    1fe2:	ef 90       	pop	r14
    1fe4:	df 90       	pop	r13
    1fe6:	cf 90       	pop	r12
    1fe8:	08 95       	ret

00001fea <macCreateRoute>:
   frame is NULL, then the routing frame is not used.

   @return The number of hops from the coordinator to the node.
 */
u8 macCreateRoute(u16 shortAddr, ftRouting *frame)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	0f 92       	push	r0
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	9c 01       	movw	r18, r24
    1ff6:	ab 01       	movw	r20, r22
   if (NODETYPE == COORD)
   {
      u16 node=shortAddr;

      if (shortAddr >= MAXNODES)
    1ff8:	84 36       	cpi	r24, 0x64	; 100
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <macCreateRoute+0x16>
    1ffe:	58 c0       	rjmp	.+176    	; 0x20b0 <macCreateRoute+0xc6>
         return 1;

      // Is this a valid address?
      if  (!nodes[shortAddr].nodeType)
    2000:	fc 01       	movw	r30, r24
    2002:	a4 e0       	ldi	r26, 0x04	; 4
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	aa 95       	dec	r26
    200a:	e1 f7       	brne	.-8      	; 0x2004 <macCreateRoute+0x1a>
    200c:	e0 56       	subi	r30, 0x60	; 96
    200e:	f2 4f       	sbci	r31, 0xF2	; 242
    2010:	80 81       	ld	r24, Z
    2012:	88 23       	and	r24, r24
    2014:	51 f4       	brne	.+20     	; 0x202a <macCreateRoute+0x40>
      {
         debugMsgStr("\r\nBad dest node (RP)");
    2016:	60 91 a0 26 	lds	r22, 0x26A0
    201a:	70 91 a1 26 	lds	r23, 0x26A1
    201e:	83 eb       	ldi	r24, 0xB3	; 179
    2020:	92 e0       	ldi	r25, 0x02	; 2
    2022:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	44 c0       	rjmp	.+136    	; 0x20b2 <macCreateRoute+0xc8>
         // Bad node, don't bother sending anything
         return 0;
      }

      // Is this node a direct child node?
      if (node == DEFAULT_COORD_ADDR ||
    202a:	23 2b       	or	r18, r19
    202c:	09 f4       	brne	.+2      	; 0x2030 <macCreateRoute+0x46>
    202e:	40 c0       	rjmp	.+128    	; 0x20b0 <macCreateRoute+0xc6>
    2030:	01 84       	ldd	r0, Z+9	; 0x09
    2032:	f2 85       	ldd	r31, Z+10	; 0x0a
    2034:	e0 2d       	mov	r30, r0
    2036:	30 97       	sbiw	r30, 0x00	; 0
    2038:	d9 f1       	breq	.+118    	; 0x20b0 <macCreateRoute+0xc6>
      // Erase first hop (from dest end) because it should not end up in
      // the payload table of hops.
      node = nodes[node].parentShortAddress;

      // Count the hops to node
      volatile u8 hops=1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	89 83       	std	Y+1, r24	; 0x01
      u16 *payload=NULL;

      if (frame)
    203e:	61 15       	cp	r22, r1
    2040:	71 05       	cpc	r23, r1
    2042:	19 f4       	brne	.+6      	; 0x204a <macCreateRoute+0x60>
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <macCreateRoute+0x66>
         payload = &frame->shortAddr;
    204a:	9b 01       	movw	r18, r22
    204c:	26 5f       	subi	r18, 0xF6	; 246
    204e:	3f 4f       	sbci	r19, 0xFF	; 255

      for(;;)
      {
         if (!nodes[node].nodeType)
    2050:	df 01       	movw	r26, r30
    2052:	74 e0       	ldi	r23, 0x04	; 4
    2054:	aa 0f       	add	r26, r26
    2056:	bb 1f       	adc	r27, r27
    2058:	7a 95       	dec	r23
    205a:	e1 f7       	brne	.-8      	; 0x2054 <macCreateRoute+0x6a>
    205c:	a0 56       	subi	r26, 0x60	; 96
    205e:	b2 4f       	sbci	r27, 0xF2	; 242
    2060:	8c 91       	ld	r24, X
    2062:	88 23       	and	r24, r24
    2064:	31 f1       	breq	.+76     	; 0x20b2 <macCreateRoute+0xc8>
            // bad short address, quit
            return 0;

         // Go for another hop
         hops++;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	89 83       	std	Y+1, r24	; 0x01

         // see if we're just one hop away
         if (nodes[node].parentShortAddress == DEFAULT_COORD_ADDR)
    206c:	19 96       	adiw	r26, 0x09	; 9
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	1a 97       	sbiw	r26, 0x0a	; 10
    2074:	89 2b       	or	r24, r25
    2076:	51 f4       	brne	.+20     	; 0x208c <macCreateRoute+0xa2>
         {
            // Save highest parent to frame
            if (frame)
    2078:	41 15       	cp	r20, r1
    207a:	51 05       	cpc	r21, r1
    207c:	29 f0       	breq	.+10     	; 0x2088 <macCreateRoute+0x9e>
               frame->destAddr = node;
    207e:	da 01       	movw	r26, r20
    2080:	16 96       	adiw	r26, 0x06	; 6
    2082:	fc 93       	st	X, r31
    2084:	ee 93       	st	-X, r30
    2086:	15 97       	sbiw	r26, 0x05	; 5
            return hops;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	13 c0       	rjmp	.+38     	; 0x20b2 <macCreateRoute+0xc8>
         }

         // store node address in payload
         if (payload)
    208c:	21 15       	cp	r18, r1
    208e:	31 05       	cpc	r19, r1
    2090:	21 f0       	breq	.+8      	; 0x209a <macCreateRoute+0xb0>
            *payload++ = node;
    2092:	d9 01       	movw	r26, r18
    2094:	ed 93       	st	X+, r30
    2096:	fd 93       	st	X+, r31
    2098:	9d 01       	movw	r18, r26

         // find node's parent, the new node for next cycle
         node = nodes[node].parentShortAddress;
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	6a 95       	dec	r22
    20a2:	e1 f7       	brne	.-8      	; 0x209c <macCreateRoute+0xb2>
    20a4:	e0 56       	subi	r30, 0x60	; 96
    20a6:	f2 4f       	sbci	r31, 0xF2	; 242
    20a8:	01 84       	ldd	r0, Z+9	; 0x09
    20aa:	f2 85       	ldd	r31, Z+10	; 0x0a
    20ac:	e0 2d       	mov	r30, r0
    20ae:	d0 cf       	rjmp	.-96     	; 0x2050 <macCreateRoute+0x66>
      }
    20b0:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
}
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <macPrintTree>:
   Print the network tree in a semi-graphical format, to be viewed on
   a terminal screen.  This code only applies if the @ref DEBUG flag
   has been turned on.
 */
void macPrintTree(void)
{
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	e6 97       	sbiw	r28, 0x36	; 54
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
         u16 newNdx;
         //            u16 *p;
         u8 level=0;
         u8 i;
         associatedNodes_t *node;
         char nodeTypeStr[4] = "CCRE"; // Coord, Router, End
    20ec:	80 91 1b 03 	lds	r24, 0x031B
    20f0:	90 91 1c 03 	lds	r25, 0x031C
    20f4:	a0 91 1d 03 	lds	r26, 0x031D
    20f8:	b0 91 1e 03 	lds	r27, 0x031E
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	ab 83       	std	Y+3, r26	; 0x03
    2102:	bc 83       	std	Y+4, r27	; 0x04


         debugMsgStr("\r\nTable Data:\r\n");
    2104:	60 91 a0 26 	lds	r22, 0x26A0
    2108:	70 91 a1 26 	lds	r23, 0x26A1
    210c:	88 ec       	ldi	r24, 0xC8	; 200
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
    2114:	60 eb       	ldi	r22, 0xB0	; 176
    2116:	86 2e       	mov	r8, r22
    2118:	6d e0       	ldi	r22, 0x0D	; 13
    211a:	96 2e       	mov	r9, r22
    211c:	51 e0       	ldi	r21, 0x01	; 1
    211e:	65 2e       	mov	r6, r21
    2120:	71 2c       	mov	r7, r1
               continue;

            // Print addresses
            u32 low = node->nodeLongAddress & 0xffffffff;
            u32 high = node->nodeLongAddress >> 32;
            sprintf(str,"%c%02X %c%02X %02X 0x%08lX%08lX\r\n",
    2122:	45 e0       	ldi	r20, 0x05	; 5
    2124:	24 2e       	mov	r2, r20
    2126:	31 2c       	mov	r3, r1
    2128:	2c 0e       	add	r2, r28
    212a:	3d 1e       	adc	r3, r29
    212c:	2e 01       	movw	r4, r28
    212e:	08 94       	sec
    2130:	41 1c       	adc	r4, r1
    2132:	51 1c       	adc	r5, r1
         debugMsgStr("\r\nTable Data:\r\n");
         for(i=1;i<MAXNODES;i++)
         {
            node = &nodes[i];
            // see if this node is used
            if (!node->nodeType)
    2134:	d4 01       	movw	r26, r8
    2136:	2c 91       	ld	r18, X
    2138:	22 23       	and	r18, r18
    213a:	09 f4       	brne	.+2      	; 0x213e <macPrintTree+0x84>
    213c:	94 c0       	rjmp	.+296    	; 0x2266 <macPrintTree+0x1ac>
               continue;

            // Print addresses
            u32 low = node->nodeLongAddress & 0xffffffff;
    213e:	11 96       	adiw	r26, 0x01	; 1
    2140:	1c 91       	ld	r17, X
    2142:	11 97       	sbiw	r26, 0x01	; 1
    2144:	12 96       	adiw	r26, 0x02	; 2
    2146:	dc 90       	ld	r13, X
    2148:	12 97       	sbiw	r26, 0x02	; 2
    214a:	13 96       	adiw	r26, 0x03	; 3
    214c:	cc 90       	ld	r12, X
    214e:	13 97       	sbiw	r26, 0x03	; 3
    2150:	14 96       	adiw	r26, 0x04	; 4
    2152:	bc 90       	ld	r11, X
    2154:	14 97       	sbiw	r26, 0x04	; 4
    2156:	15 96       	adiw	r26, 0x05	; 5
    2158:	6c 91       	ld	r22, X
    215a:	15 97       	sbiw	r26, 0x05	; 5
    215c:	16 96       	adiw	r26, 0x06	; 6
    215e:	7c 91       	ld	r23, X
    2160:	16 97       	sbiw	r26, 0x06	; 6
    2162:	17 96       	adiw	r26, 0x07	; 7
    2164:	8c 91       	ld	r24, X
    2166:	17 97       	sbiw	r26, 0x07	; 7
    2168:	18 96       	adiw	r26, 0x08	; 8
    216a:	9c 91       	ld	r25, X
            u32 high = node->nodeLongAddress >> 32;
            sprintf(str,"%c%02X %c%02X %02X 0x%08lX%08lX\r\n",
    216c:	ed b7       	in	r30, 0x3d	; 61
    216e:	fe b7       	in	r31, 0x3e	; 62
    2170:	76 97       	sbiw	r30, 0x16	; 22
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	fe bf       	out	0x3e, r31	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	ed bf       	out	0x3d, r30	; 61
    217c:	ed b6       	in	r14, 0x3d	; 61
    217e:	fe b6       	in	r15, 0x3e	; 62
    2180:	08 94       	sec
    2182:	e1 1c       	adc	r14, r1
    2184:	f1 1c       	adc	r15, r1
    2186:	32 82       	std	Z+2, r3	; 0x02
    2188:	21 82       	std	Z+1, r2	; 0x01
    218a:	e8 ed       	ldi	r30, 0xD8	; 216
    218c:	f2 e0       	ldi	r31, 0x02	; 2
    218e:	d7 01       	movw	r26, r14
    2190:	13 96       	adiw	r26, 0x03	; 3
    2192:	fc 93       	st	X, r31
    2194:	ee 93       	st	-X, r30
    2196:	12 97       	sbiw	r26, 0x02	; 2
    2198:	f2 01       	movw	r30, r4
    219a:	e2 0f       	add	r30, r18
    219c:	f1 1d       	adc	r31, r1
    219e:	20 81       	ld	r18, Z
    21a0:	14 96       	adiw	r26, 0x04	; 4
    21a2:	2c 93       	st	X, r18
    21a4:	14 97       	sbiw	r26, 0x04	; 4
    21a6:	15 96       	adiw	r26, 0x05	; 5
    21a8:	1c 92       	st	X, r1
    21aa:	15 97       	sbiw	r26, 0x05	; 5
    21ac:	17 96       	adiw	r26, 0x07	; 7
    21ae:	7c 92       	st	X, r7
    21b0:	6e 92       	st	-X, r6
    21b2:	16 97       	sbiw	r26, 0x06	; 6
    21b4:	d4 01       	movw	r26, r8
    21b6:	19 96       	adiw	r26, 0x09	; 9
    21b8:	ed 91       	ld	r30, X+
    21ba:	fc 91       	ld	r31, X
    21bc:	1a 97       	sbiw	r26, 0x0a	; 10
    21be:	34 e0       	ldi	r19, 0x04	; 4
    21c0:	ee 0f       	add	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	3a 95       	dec	r19
    21c6:	e1 f7       	brne	.-8      	; 0x21c0 <macPrintTree+0x106>
    21c8:	e0 56       	subi	r30, 0x60	; 96
    21ca:	f2 4f       	sbci	r31, 0xF2	; 242
    21cc:	20 81       	ld	r18, Z
    21ce:	f2 01       	movw	r30, r4
    21d0:	e2 0f       	add	r30, r18
    21d2:	f1 1d       	adc	r31, r1
    21d4:	20 81       	ld	r18, Z
    21d6:	f7 01       	movw	r30, r14
    21d8:	20 87       	std	Z+8, r18	; 0x08
    21da:	11 86       	std	Z+9, r1	; 0x09
    21dc:	19 96       	adiw	r26, 0x09	; 9
    21de:	2d 91       	ld	r18, X+
    21e0:	3c 91       	ld	r19, X
    21e2:	1a 97       	sbiw	r26, 0x0a	; 10
    21e4:	33 87       	std	Z+11, r19	; 0x0b
    21e6:	22 87       	std	Z+10, r18	; 0x0a
    21e8:	1b 96       	adiw	r26, 0x0b	; 11
    21ea:	2d 91       	ld	r18, X+
    21ec:	3c 91       	ld	r19, X
    21ee:	1c 97       	sbiw	r26, 0x0c	; 12
    21f0:	35 87       	std	Z+13, r19	; 0x0d
    21f2:	24 87       	std	Z+12, r18	; 0x0c
    21f4:	21 2f       	mov	r18, r17
    21f6:	3d 2d       	mov	r19, r13
    21f8:	4c 2d       	mov	r20, r12
    21fa:	5b 2d       	mov	r21, r11
    21fc:	00 e2       	ldi	r16, 0x20	; 32
    21fe:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <__lshrdi3>
    2202:	c9 01       	movw	r24, r18
    2204:	ba 01       	movw	r22, r20
    2206:	d7 01       	movw	r26, r14
    2208:	1e 96       	adiw	r26, 0x0e	; 14
    220a:	2c 93       	st	X, r18
    220c:	1e 97       	sbiw	r26, 0x0e	; 14
    220e:	1f 96       	adiw	r26, 0x0f	; 15
    2210:	9c 93       	st	X, r25
    2212:	1f 97       	sbiw	r26, 0x0f	; 15
    2214:	50 96       	adiw	r26, 0x10	; 16
    2216:	4c 93       	st	X, r20
    2218:	50 97       	sbiw	r26, 0x10	; 16
    221a:	51 96       	adiw	r26, 0x11	; 17
    221c:	7c 93       	st	X, r23
    221e:	51 97       	sbiw	r26, 0x11	; 17
    2220:	52 96       	adiw	r26, 0x12	; 18
    2222:	1c 93       	st	X, r17
    2224:	52 97       	sbiw	r26, 0x12	; 18
    2226:	53 96       	adiw	r26, 0x13	; 19
    2228:	dc 92       	st	X, r13
    222a:	53 97       	sbiw	r26, 0x13	; 19
    222c:	54 96       	adiw	r26, 0x14	; 20
    222e:	cc 92       	st	X, r12
    2230:	54 97       	sbiw	r26, 0x14	; 20
    2232:	55 96       	adiw	r26, 0x15	; 21
    2234:	bc 92       	st	X, r11
    2236:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
                  nodeTypeStr[nodes[node->parentShortAddress].nodeType],
                  nodes[i].parentShortAddress,
                  nodes[i].lastRoutedAddress,
                  high,
                  low);
            debugMsgStr(str);
    223a:	ed b7       	in	r30, 0x3d	; 61
    223c:	fe b7       	in	r31, 0x3e	; 62
    223e:	72 96       	adiw	r30, 0x12	; 18
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	fe bf       	out	0x3e, r31	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	ed bf       	out	0x3d, r30	; 61
    224a:	80 91 a0 26 	lds	r24, 0x26A0
    224e:	90 91 a1 26 	lds	r25, 0x26A1
    2252:	92 83       	std	Z+2, r25	; 0x02
    2254:	81 83       	std	Z+1, r24	; 0x01
    2256:	34 82       	std	Z+4, r3	; 0x04
    2258:	23 82       	std	Z+3, r2	; 0x03
    225a:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	40 e1       	ldi	r20, 0x10	; 16
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	84 0e       	add	r8, r20
    226c:	95 1e       	adc	r9, r21
    226e:	08 94       	sec
    2270:	61 1c       	adc	r6, r1
    2272:	71 1c       	adc	r7, r1
         associatedNodes_t *node;
         char nodeTypeStr[4] = "CCRE"; // Coord, Router, End


         debugMsgStr("\r\nTable Data:\r\n");
         for(i=1;i<MAXNODES;i++)
    2274:	50 ee       	ldi	r21, 0xE0	; 224
    2276:	85 16       	cp	r8, r21
    2278:	53 e1       	ldi	r21, 0x13	; 19
    227a:	95 06       	cpc	r9, r21
    227c:	09 f0       	breq	.+2      	; 0x2280 <macPrintTree+0x1c6>
    227e:	5a cf       	rjmp	.-332    	; 0x2134 <macPrintTree+0x7a>
                  low);
            debugMsgStr(str);
         }


         debugMsgStr("\r\nNetwork Tree\r\n");
    2280:	60 91 a0 26 	lds	r22, 0x26A0
    2284:	70 91 a1 26 	lds	r23, 0x26A1
    2288:	8a ef       	ldi	r24, 0xFA	; 250
    228a:	92 e0       	ldi	r25, 0x02	; 2
    228c:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
    2290:	00 e0       	ldi	r16, 0x00	; 0
    2292:	10 e0       	ldi	r17, 0x00	; 0
    2294:	ee 24       	eor	r14, r14
            // 5. If yes (sibling), go back to parent
            // 6. If parent == coord, quit
            // 7. Goto step 3
            node = &nodes[ndx];

            sprintf(str,"%c%02X ",nodeTypeStr[node->nodeType], ndx);
    2296:	25 e0       	ldi	r18, 0x05	; 5
    2298:	82 2e       	mov	r8, r18
    229a:	91 2c       	mov	r9, r1
    229c:	8c 0e       	add	r8, r28
    229e:	9d 1e       	adc	r9, r29
    22a0:	9b e0       	ldi	r25, 0x0B	; 11
    22a2:	49 2e       	mov	r4, r25
    22a4:	93 e0       	ldi	r25, 0x03	; 3
    22a6:	59 2e       	mov	r5, r25
    22a8:	3e 01       	movw	r6, r28
    22aa:	08 94       	sec
    22ac:	61 1c       	adc	r6, r1
    22ae:	71 1c       	adc	r7, r1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <macPrintTree+0x1fa>
                  low);
            debugMsgStr(str);
         }


         debugMsgStr("\r\nNetwork Tree\r\n");
    22b2:	86 01       	movw	r16, r12
            // 5. If yes (sibling), go back to parent
            // 6. If parent == coord, quit
            // 7. Goto step 3
            node = &nodes[ndx];

            sprintf(str,"%c%02X ",nodeTypeStr[node->nodeType], ndx);
    22b4:	8d b7       	in	r24, 0x3d	; 61
    22b6:	9e b7       	in	r25, 0x3e	; 62
    22b8:	08 97       	sbiw	r24, 0x08	; 8
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	9e bf       	out	0x3e, r25	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	8d bf       	out	0x3d, r24	; 61
    22c4:	ad b7       	in	r26, 0x3d	; 61
    22c6:	be b7       	in	r27, 0x3e	; 62
    22c8:	11 96       	adiw	r26, 0x01	; 1
    22ca:	ed b7       	in	r30, 0x3d	; 61
    22cc:	fe b7       	in	r31, 0x3e	; 62
    22ce:	92 82       	std	Z+2, r9	; 0x02
    22d0:	81 82       	std	Z+1, r8	; 0x01
    22d2:	13 96       	adiw	r26, 0x03	; 3
    22d4:	5c 92       	st	X, r5
    22d6:	4e 92       	st	-X, r4
    22d8:	12 97       	sbiw	r26, 0x02	; 2
    22da:	f8 01       	movw	r30, r16
    22dc:	84 e0       	ldi	r24, 0x04	; 4
    22de:	ee 0f       	add	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	8a 95       	dec	r24
    22e4:	e1 f7       	brne	.-8      	; 0x22de <macPrintTree+0x224>
    22e6:	e0 56       	subi	r30, 0x60	; 96
    22e8:	f2 4f       	sbci	r31, 0xF2	; 242
    22ea:	80 81       	ld	r24, Z
    22ec:	f3 01       	movw	r30, r6
    22ee:	e8 0f       	add	r30, r24
    22f0:	f1 1d       	adc	r31, r1
    22f2:	80 81       	ld	r24, Z
    22f4:	14 96       	adiw	r26, 0x04	; 4
    22f6:	8c 93       	st	X, r24
    22f8:	14 97       	sbiw	r26, 0x04	; 4
    22fa:	15 96       	adiw	r26, 0x05	; 5
    22fc:	1c 92       	st	X, r1
    22fe:	15 97       	sbiw	r26, 0x05	; 5
    2300:	17 96       	adiw	r26, 0x07	; 7
    2302:	1c 93       	st	X, r17
    2304:	0e 93       	st	-X, r16
    2306:	16 97       	sbiw	r26, 0x06	; 6
    2308:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
            debugMsgStr(str);
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	80 91 a0 26 	lds	r24, 0x26A0
    2318:	90 91 a1 26 	lds	r25, 0x26A1
    231c:	ad b7       	in	r26, 0x3d	; 61
    231e:	be b7       	in	r27, 0x3e	; 62
    2320:	12 96       	adiw	r26, 0x02	; 2
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	11 97       	sbiw	r26, 0x01	; 1
    2328:	14 96       	adiw	r26, 0x04	; 4
    232a:	9c 92       	st	X, r9
    232c:	8e 92       	st	-X, r8
    232e:	13 97       	sbiw	r26, 0x03	; 3
    2330:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>

            if ((newNdx = findFirstChild(ndx)))
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	c8 01       	movw	r24, r16
    233e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <findFirstChild>
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	19 f0       	breq	.+6      	; 0x234c <macPrintTree+0x292>
            {
               // Child found, just go again
               ndx = newNdx;
               level++;
    2346:	e3 94       	inc	r14
    2348:	8c 01       	movw	r16, r24
    234a:	b4 cf       	rjmp	.-152    	; 0x22b4 <macPrintTree+0x1fa>
            }
            else
            {
               fns:
               // No child found, look for a sibling
               if ((newNdx = findNextSibling(ndx)))
    234c:	c8 01       	movw	r24, r16
    234e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <findNextSibling>
    2352:	6c 01       	movw	r12, r24
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	b1 f0       	breq	.+44     	; 0x2384 <macPrintTree+0x2ca>
               {
                  // Found a sibling, print CRLF and some spaces
                  ndx = newNdx;
                  debugMsgStr("\r\n");
    2358:	60 91 a0 26 	lds	r22, 0x26A0
    235c:	70 91 a1 26 	lds	r23, 0x26A1
    2360:	83 e1       	ldi	r24, 0x13	; 19
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
    2368:	10 e0       	ldi	r17, 0x00	; 0
    236a:	09 c0       	rjmp	.+18     	; 0x237e <macPrintTree+0x2c4>
                  for (i=0;i<level;i++)
                     debugMsgStr("    ");
    236c:	60 91 a0 26 	lds	r22, 0x26A0
    2370:	70 91 a1 26 	lds	r23, 0x26A1
    2374:	86 e1       	ldi	r24, 0x16	; 22
    2376:	93 e0       	ldi	r25, 0x03	; 3
    2378:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
               if ((newNdx = findNextSibling(ndx)))
               {
                  // Found a sibling, print CRLF and some spaces
                  ndx = newNdx;
                  debugMsgStr("\r\n");
                  for (i=0;i<level;i++)
    237c:	1f 5f       	subi	r17, 0xFF	; 255
    237e:	1e 15       	cp	r17, r14
    2380:	a8 f3       	brcs	.-22     	; 0x236c <macPrintTree+0x2b2>
    2382:	97 cf       	rjmp	.-210    	; 0x22b2 <macPrintTree+0x1f8>
                  continue;
               }
               else
               {
                  // No sibling found, go back to parent and look for more.
                  ndx = nodes[ndx].parentShortAddress;
    2384:	f8 01       	movw	r30, r16
    2386:	b4 e0       	ldi	r27, 0x04	; 4
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ba 95       	dec	r27
    238e:	e1 f7       	brne	.-8      	; 0x2388 <macPrintTree+0x2ce>
    2390:	e0 56       	subi	r30, 0x60	; 96
    2392:	f2 4f       	sbci	r31, 0xF2	; 242
    2394:	01 85       	ldd	r16, Z+9	; 0x09
    2396:	12 85       	ldd	r17, Z+10	; 0x0a
                  if (!ndx)
    2398:	01 15       	cp	r16, r1
    239a:	11 05       	cpc	r17, r1
    239c:	11 f0       	breq	.+4      	; 0x23a2 <macPrintTree+0x2e8>
                     // parent is coord, we are done
                     break;
                  // Go up one level
                  level--;
    239e:	ea 94       	dec	r14
    23a0:	d5 cf       	rjmp	.-86     	; 0x234c <macPrintTree+0x292>
               debugMsgStr(str);
            }
         debugMsgStr("\r\n");
      }
   }
}
    23a2:	e6 96       	adiw	r28, 0x36	; 54
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	ff 90       	pop	r15
    23b8:	ef 90       	pop	r14
    23ba:	df 90       	pop	r13
    23bc:	cf 90       	pop	r12
    23be:	bf 90       	pop	r11
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	7f 90       	pop	r7
    23c6:	6f 90       	pop	r6
    23c8:	5f 90       	pop	r5
    23ca:	4f 90       	pop	r4
    23cc:	3f 90       	pop	r3
    23ce:	2f 90       	pop	r2
    23d0:	08 95       	ret

000023d2 <macAssociationResponse>:
   @brief This function is called when an association request is
   received by this node (and this node is coordinator).  The frame is
   held in the global mac_buffer array.
 */
void macAssociationResponse(uint8_t* pFrame)
{
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <macAssociationResponse+0x16>
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <macAssociationResponse+0x18>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
   {
      u16 shortAddress = DEFAULT_COORD_ADDR;
      u16 childAddr;
      u8 rpSent; // Was a routing packet sent?

      uint8_t *data_frame = (uint8_t*)(((rx_frame_t*)pFrame)->data);
    23f0:	8c 01       	movw	r16, r24
      u16 fcf = data_frame[0] + data_frame[1]*0x100;
    23f2:	dc 01       	movw	r26, r24
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	9c 91       	ld	r25, X
    23f8:	12 97       	sbiw	r26, 0x02	; 2
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	11 96       	adiw	r26, 0x01	; 1
    23fe:	2c 91       	ld	r18, X
    2400:	82 0f       	add	r24, r18
    2402:	91 1d       	adc	r25, r1

      //u16 fcf = mac_buffer_rx[1] + mac_buffer_rx[2]*0x100;

      if(fcf == FCF_ASSOC_REQ_IND) // association request indirect
    2404:	b8 e8       	ldi	r27, 0x88	; 136
    2406:	83 36       	cpi	r24, 0x63	; 99
    2408:	9b 07       	cpc	r25, r27
    240a:	09 f0       	breq	.+2      	; 0x240e <macAssociationResponse+0x3c>
    240c:	af c0       	rjmp	.+350    	; 0x256c <macAssociationResponse+0x19a>
      {
         uint8_t* pFrameResponse = bmm_buffer_alloc();
    240e:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    2412:	5c 01       	movw	r10, r24

         if(pFrameResponse != NULL)
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	09 f4       	brne	.+2      	; 0x241a <macAssociationResponse+0x48>
    2418:	3b c1       	rjmp	.+630    	; 0x2690 <macAssociationResponse+0x2be>
         {
            ftAssocReqIndirect *request = (ftAssocReqIndirect*)(((rx_frame_t*)pFrame)->data);
    241a:	68 01       	movw	r12, r16
    241c:	08 94       	sec
    241e:	c1 1c       	adc	r12, r1
    2420:	d1 1c       	adc	r13, r1
            //ftAssocReqIndirect  *request  = (ftAssocReqIndirect *)(mac_buffer_rx+1);

            ftAssocRespIndirect *response = (ftAssocRespIndirect*)(((rx_frame_t*)pFrameResponse)->data);
    2422:	7c 01       	movw	r14, r24
    2424:	08 94       	sec
    2426:	e1 1c       	adc	r14, r1
    2428:	f1 1c       	adc	r15, r1
            //ftAssocRespIndirect *response = (ftAssocRespIndirect*)(mac_buffer_tx+1);

            // See if this node is already in the table
            DECLARE64(request->macAddr);
            childAddr = macGetNodeAddr(USE64(request->macAddr));
    242a:	03 5f       	subi	r16, 0xF3	; 243
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	c8 01       	movw	r24, r16
    2430:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <macGetNodeAddr>
    2434:	bc 01       	movw	r22, r24
            if (childAddr != BROADCASTADDR && nodes[childAddr].nodeType)
    2436:	ef ef       	ldi	r30, 0xFF	; 255
    2438:	8f 3f       	cpi	r24, 0xFF	; 255
    243a:	9e 07       	cpc	r25, r30
    243c:	21 f1       	breq	.+72     	; 0x2486 <macAssociationResponse+0xb4>
    243e:	fc 01       	movw	r30, r24
    2440:	b4 e0       	ldi	r27, 0x04	; 4
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	ba 95       	dec	r27
    2448:	e1 f7       	brne	.-8      	; 0x2442 <macAssociationResponse+0x70>
    244a:	e0 56       	subi	r30, 0x60	; 96
    244c:	f2 4f       	sbci	r31, 0xF2	; 242
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	c9 f0       	breq	.+50     	; 0x2486 <macAssociationResponse+0xb4>
            {
               // This node already has been associated, notify its
               // parent to drop them from the table
               if (nodes[childAddr].parentShortAddress == DEFAULT_COORD_ADDR)
    2454:	21 85       	ldd	r18, Z+9	; 0x09
    2456:	32 85       	ldd	r19, Z+10	; 0x0a
    2458:	21 15       	cp	r18, r1
    245a:	31 05       	cpc	r19, r1
    245c:	49 f4       	brne	.+18     	; 0x2470 <macAssociationResponse+0x9e>
void macRemoveChild(u16 shortAddr)
{
   if (NODETYPE == COORD)
   {
      // remove from coord table, clear data
      if (shortAddr >= MAXNODES)
    245e:	64 36       	cpi	r22, 0x64	; 100
    2460:	71 05       	cpc	r23, r1
    2462:	88 f4       	brcc	.+34     	; 0x2486 <macAssociationResponse+0xb4>
         return;
      nodes[shortAddr].nodeType = 0;
    2464:	10 82       	st	Z, r1
      nodes[shortAddr].parentShortAddress = 0;
    2466:	12 86       	std	Z+10, r1	; 0x0a
    2468:	11 86       	std	Z+9, r1	; 0x09
      nodes[shortAddr].lastRoutedAddress =0;
    246a:	14 86       	std	Z+12, r1	; 0x0c
    246c:	13 86       	std	Z+11, r1	; 0x0b
    246e:	0b c0       	rjmp	.+22     	; 0x2486 <macAssociationResponse+0xb4>
               else
               {
                  // This node has already been associated, and if it was
                  // previously associated to another router, then have that
                  // router drop this node from its parent table
                  if (request->parentAddr != nodes[childAddr].parentShortAddress)
    2470:	d6 01       	movw	r26, r12
    2472:	1a 96       	adiw	r26, 0x0a	; 10
    2474:	8d 91       	ld	r24, X+
    2476:	9c 91       	ld	r25, X
    2478:	1b 97       	sbiw	r26, 0x0b	; 11
    247a:	82 17       	cp	r24, r18
    247c:	93 07       	cpc	r25, r19
    247e:	19 f0       	breq	.+6      	; 0x2486 <macAssociationResponse+0xb4>
                     macNotifyDrop(nodes[childAddr].parentShortAddress, childAddr);
    2480:	c9 01       	movw	r24, r18
    2482:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <macNotifyDrop>
               }
            }

            // first, send routing packet if necessary
            rpSent = macSendRoutingPacket(request->parentAddr);
    2486:	f6 01       	movw	r30, r12
    2488:	82 85       	ldd	r24, Z+10	; 0x0a
    248a:	93 85       	ldd	r25, Z+11	; 0x0b
    248c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <macSendRoutingPacket>

            // Add the new node to the table.
            shortAddress = addNode(request->type, USE64(request->macAddr), request->parentAddr);
    2490:	d6 01       	movw	r26, r12
    2492:	1a 96       	adiw	r26, 0x0a	; 10
    2494:	4d 91       	ld	r20, X+
    2496:	5c 91       	ld	r21, X
    2498:	1b 97       	sbiw	r26, 0x0b	; 11
    249a:	54 96       	adiw	r26, 0x14	; 20
    249c:	8c 91       	ld	r24, X
    249e:	b8 01       	movw	r22, r16
    24a0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <addNode>
    24a4:	8c 01       	movw	r16, r24

            response->shortAddr = shortAddress;
    24a6:	f7 01       	movw	r30, r14
    24a8:	95 8b       	std	Z+21, r25	; 0x15
    24aa:	84 8b       	std	Z+20, r24	; 0x14

            response->fcf = FCF_ASSOC_RESP_IND;
    24ac:	83 e6       	ldi	r24, 0x63	; 99
    24ae:	98 e8       	ldi	r25, 0x88	; 136
    24b0:	d5 01       	movw	r26, r10
    24b2:	12 96       	adiw	r26, 0x02	; 2
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	11 97       	sbiw	r26, 0x01	; 1
            response->seq = macConfig.dsn++;
    24ba:	80 91 c7 1f 	lds	r24, 0x1FC7
    24be:	82 83       	std	Z+2, r24	; 0x02
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	80 93 c7 1f 	sts	0x1FC7, r24
            response->panid   = macConfig.panId;
    24c6:	80 91 c8 1f 	lds	r24, 0x1FC8
    24ca:	90 91 c9 1f 	lds	r25, 0x1FC9
    24ce:	94 83       	std	Z+4, r25	; 0x04
    24d0:	83 83       	std	Z+3, r24	; 0x03
            response->dstAddr  = request->srcAddr;
    24d2:	f6 01       	movw	r30, r12
    24d4:	87 81       	ldd	r24, Z+7	; 0x07
    24d6:	90 85       	ldd	r25, Z+8	; 0x08
    24d8:	d7 01       	movw	r26, r14
    24da:	16 96       	adiw	r26, 0x06	; 6
    24dc:	9c 93       	st	X, r25
    24de:	8e 93       	st	-X, r24
    24e0:	15 97       	sbiw	r26, 0x05	; 5
            response->srcAddr   = macConfig.shortAddress; // If coord this is the same as macCoordShortAddress
    24e2:	80 91 ca 1f 	lds	r24, 0x1FCA
    24e6:	90 91 cb 1f 	lds	r25, 0x1FCB
    24ea:	18 96       	adiw	r26, 0x08	; 8
    24ec:	9c 93       	st	X, r25
    24ee:	8e 93       	st	-X, r24
    24f0:	17 97       	sbiw	r26, 0x07	; 7
            response->cmd = ASSOCIATION_RESPONSE;
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	19 96       	adiw	r26, 0x09	; 9
    24f6:	8c 93       	st	X, r24
    24f8:	19 97       	sbiw	r26, 0x09	; 9
            response->parentAddr = request->parentAddr;
    24fa:	82 85       	ldd	r24, Z+10	; 0x0a
    24fc:	93 85       	ldd	r25, Z+11	; 0x0b
    24fe:	1b 96       	adiw	r26, 0x0b	; 11
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24
    2504:	1a 97       	sbiw	r26, 0x0a	; 10
            response->macAddr = request->macAddr; // long address of device that requested association
    2506:	84 85       	ldd	r24, Z+12	; 0x0c
    2508:	1c 96       	adiw	r26, 0x0c	; 12
    250a:	8c 93       	st	X, r24
    250c:	1c 97       	sbiw	r26, 0x0c	; 12
    250e:	85 85       	ldd	r24, Z+13	; 0x0d
    2510:	1d 96       	adiw	r26, 0x0d	; 13
    2512:	8c 93       	st	X, r24
    2514:	1d 97       	sbiw	r26, 0x0d	; 13
    2516:	86 85       	ldd	r24, Z+14	; 0x0e
    2518:	1e 96       	adiw	r26, 0x0e	; 14
    251a:	8c 93       	st	X, r24
    251c:	1e 97       	sbiw	r26, 0x0e	; 14
    251e:	87 85       	ldd	r24, Z+15	; 0x0f
    2520:	1f 96       	adiw	r26, 0x0f	; 15
    2522:	8c 93       	st	X, r24
    2524:	1f 97       	sbiw	r26, 0x0f	; 15
    2526:	80 89       	ldd	r24, Z+16	; 0x10
    2528:	50 96       	adiw	r26, 0x10	; 16
    252a:	8c 93       	st	X, r24
    252c:	50 97       	sbiw	r26, 0x10	; 16
    252e:	81 89       	ldd	r24, Z+17	; 0x11
    2530:	51 96       	adiw	r26, 0x11	; 17
    2532:	8c 93       	st	X, r24
    2534:	51 97       	sbiw	r26, 0x11	; 17
    2536:	82 89       	ldd	r24, Z+18	; 0x12
    2538:	52 96       	adiw	r26, 0x12	; 18
    253a:	8c 93       	st	X, r24
    253c:	52 97       	sbiw	r26, 0x12	; 18
    253e:	83 89       	ldd	r24, Z+19	; 0x13
    2540:	53 96       	adiw	r26, 0x13	; 19
    2542:	8c 93       	st	X, r24

            // send data to radio, after a delay for routing packet to get out of the way
            //macSetAlarm(rpSent ? MAC_RP_DELAY : 0, sendAsResInd);

            macConfig.busy = true;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 d4 1f 	sts	0x1FD4, r24

            ((rx_frame_t*)pFrameResponse)->length = sizeof(ftAssocRespIndirect);
    254a:	86 e1       	ldi	r24, 0x16	; 22
    254c:	f5 01       	movw	r30, r10
    254e:	80 83       	st	Z, r24

            event_object_t event;
            event.event = MAC_EVENT_SEND;
    2550:	8a e1       	ldi	r24, 0x1A	; 26
    2552:	89 83       	std	Y+1, r24	; 0x01
            event.data = pFrameResponse;
    2554:	bb 82       	std	Y+3, r11	; 0x03
    2556:	aa 82       	std	Y+2, r10	; 0x02
            event.callback = 0;
    2558:	1d 82       	std	Y+5, r1	; 0x05
    255a:	1c 82       	std	Y+4, r1	; 0x04

            // save Event
            mac_put_event(&event);
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>


            // Alert the application that we added a child
            appChildAssociated(shortAddress);
    2564:	c8 01       	movw	r24, r16
    2566:	0e 94 88 1c 	call	0x3910	; 0x3910 <appChildAssociated>
    256a:	94 c0       	rjmp	.+296    	; 0x2694 <macAssociationResponse+0x2c2>
         }
      }
      else if(fcf == FCF_ASSOC_REQ_DIRECT) // association response direct
    256c:	83 56       	subi	r24, 0x63	; 99
    256e:	98 4c       	sbci	r25, 0xC8	; 200
    2570:	09 f0       	breq	.+2      	; 0x2574 <macAssociationResponse+0x1a2>
    2572:	8e c0       	rjmp	.+284    	; 0x2690 <macAssociationResponse+0x2be>
      {
         uint8_t* pFrameResponse = bmm_buffer_alloc();
    2574:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    2578:	5c 01       	movw	r10, r24

         if(pFrameResponse != NULL)
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	09 f4       	brne	.+2      	; 0x2580 <macAssociationResponse+0x1ae>
    257e:	88 c0       	rjmp	.+272    	; 0x2690 <macAssociationResponse+0x2be>
         {
            volatile ftAssocReqDirect *request = (ftAssocReqDirect*)(((rx_frame_t*)pFrame)->data);
    2580:	68 01       	movw	r12, r16
    2582:	08 94       	sec
    2584:	c1 1c       	adc	r12, r1
    2586:	d1 1c       	adc	r13, r1
            //volatile ftAssocReqDirect *request = (ftAssocReqDirect *)(mac_buffer_rx+1);

            ftAssocRespDirect *response = (ftAssocRespDirect*)(((rx_frame_t*)pFrameResponse)->data);
    2588:	7c 01       	movw	r14, r24
    258a:	08 94       	sec
    258c:	e1 1c       	adc	r14, r1
    258e:	f1 1c       	adc	r15, r1
            //volatile ftAssocRespDirect *response = (ftAssocRespDirect *)(mac_buffer_tx+1);

            // See if this node is already in the table
            DECLARE64(request->srcAddr);
            childAddr = macGetNodeAddr(USE64(request->srcAddr));
    2590:	c8 01       	movw	r24, r16
    2592:	08 96       	adiw	r24, 0x08	; 8
    2594:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <macGetNodeAddr>
    2598:	bc 01       	movw	r22, r24


            if (childAddr != BROADCASTADDR)
    259a:	2f ef       	ldi	r18, 0xFF	; 255
    259c:	8f 3f       	cpi	r24, 0xFF	; 255
    259e:	92 07       	cpc	r25, r18
    25a0:	b9 f0       	breq	.+46     	; 0x25d0 <macAssociationResponse+0x1fe>
            {
               // This node already has been associated, notify its
               // parent to drop them from the table
               if (nodes[childAddr].parentShortAddress == DEFAULT_COORD_ADDR)
    25a2:	fc 01       	movw	r30, r24
    25a4:	a4 e0       	ldi	r26, 0x04	; 4
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	aa 95       	dec	r26
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <macAssociationResponse+0x1d4>
    25ae:	e0 56       	subi	r30, 0x60	; 96
    25b0:	f2 4f       	sbci	r31, 0xF2	; 242
    25b2:	81 85       	ldd	r24, Z+9	; 0x09
    25b4:	92 85       	ldd	r25, Z+10	; 0x0a
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	49 f4       	brne	.+18     	; 0x25cc <macAssociationResponse+0x1fa>
void macRemoveChild(u16 shortAddr)
{
   if (NODETYPE == COORD)
   {
      // remove from coord table, clear data
      if (shortAddr >= MAXNODES)
    25ba:	64 36       	cpi	r22, 0x64	; 100
    25bc:	71 05       	cpc	r23, r1
    25be:	40 f4       	brcc	.+16     	; 0x25d0 <macAssociationResponse+0x1fe>
         return;
      nodes[shortAddr].nodeType = 0;
    25c0:	10 82       	st	Z, r1
      nodes[shortAddr].parentShortAddress = 0;
    25c2:	12 86       	std	Z+10, r1	; 0x0a
    25c4:	11 86       	std	Z+9, r1	; 0x09
      nodes[shortAddr].lastRoutedAddress =0;
    25c6:	14 86       	std	Z+12, r1	; 0x0c
    25c8:	13 86       	std	Z+11, r1	; 0x0b
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <macAssociationResponse+0x1fe>
               if (nodes[childAddr].parentShortAddress == DEFAULT_COORD_ADDR)
                  // Remove from Coordinator table
                  macRemoveChild(childAddr);
               else
                  // Notify node's parent to drop
                  macNotifyDrop(nodes[childAddr].parentShortAddress, childAddr);
    25cc:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <macNotifyDrop>
            }
            // Add node to table, coord is parent
            shortAddress = addNode(request->type,
    25d0:	d6 01       	movw	r26, r12
    25d2:	52 96       	adiw	r26, 0x12	; 18
    25d4:	8c 91       	ld	r24, X
    25d6:	b6 01       	movw	r22, r12
    25d8:	69 5f       	subi	r22, 0xF9	; 249
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <addNode>
    25e4:	8c 01       	movw	r16, r24
                  USE64(request->srcAddr),
                  DEFAULT_COORD_ADDR);

            response->fcf = FCF_ASSOC_RESP_DIRECT;
    25e6:	83 e6       	ldi	r24, 0x63	; 99
    25e8:	9c e8       	ldi	r25, 0x8C	; 140
    25ea:	f5 01       	movw	r30, r10
    25ec:	92 83       	std	Z+2, r25	; 0x02
    25ee:	81 83       	std	Z+1, r24	; 0x01

            // Increment and set the data sequence number.
            response->seq = macConfig.dsn++;
    25f0:	80 91 c7 1f 	lds	r24, 0x1FC7
    25f4:	d7 01       	movw	r26, r14
    25f6:	12 96       	adiw	r26, 0x02	; 2
    25f8:	8c 93       	st	X, r24
    25fa:	12 97       	sbiw	r26, 0x02	; 2
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	80 93 c7 1f 	sts	0x1FC7, r24

            // Complete the addressing fields.
            response->panid = macConfig.panId;
    2602:	80 91 c8 1f 	lds	r24, 0x1FC8
    2606:	90 91 c9 1f 	lds	r25, 0x1FC9
    260a:	14 96       	adiw	r26, 0x04	; 4
    260c:	9c 93       	st	X, r25
    260e:	8e 93       	st	-X, r24
    2610:	13 97       	sbiw	r26, 0x03	; 3
            response->dstAddr = request->srcAddr;
    2612:	f6 01       	movw	r30, r12
    2614:	87 81       	ldd	r24, Z+7	; 0x07
    2616:	90 85       	ldd	r25, Z+8	; 0x08
    2618:	21 85       	ldd	r18, Z+9	; 0x09
    261a:	32 85       	ldd	r19, Z+10	; 0x0a
    261c:	43 85       	ldd	r20, Z+11	; 0x0b
    261e:	54 85       	ldd	r21, Z+12	; 0x0c
    2620:	65 85       	ldd	r22, Z+13	; 0x0d
    2622:	76 85       	ldd	r23, Z+14	; 0x0e
    2624:	15 96       	adiw	r26, 0x05	; 5
    2626:	8c 93       	st	X, r24
    2628:	15 97       	sbiw	r26, 0x05	; 5
    262a:	16 96       	adiw	r26, 0x06	; 6
    262c:	9c 93       	st	X, r25
    262e:	16 97       	sbiw	r26, 0x06	; 6
    2630:	17 96       	adiw	r26, 0x07	; 7
    2632:	2c 93       	st	X, r18
    2634:	17 97       	sbiw	r26, 0x07	; 7
    2636:	18 96       	adiw	r26, 0x08	; 8
    2638:	3c 93       	st	X, r19
    263a:	18 97       	sbiw	r26, 0x08	; 8
    263c:	19 96       	adiw	r26, 0x09	; 9
    263e:	4c 93       	st	X, r20
    2640:	19 97       	sbiw	r26, 0x09	; 9
    2642:	1a 96       	adiw	r26, 0x0a	; 10
    2644:	5c 93       	st	X, r21
    2646:	1a 97       	sbiw	r26, 0x0a	; 10
    2648:	1b 96       	adiw	r26, 0x0b	; 11
    264a:	6c 93       	st	X, r22
    264c:	1b 97       	sbiw	r26, 0x0b	; 11
    264e:	1c 96       	adiw	r26, 0x0c	; 12
    2650:	7c 93       	st	X, r23
    2652:	1c 97       	sbiw	r26, 0x0c	; 12
            response->srcAddr = macConfig.shortAddress; // If coord this is the same as macCoordShortAddress
    2654:	80 91 ca 1f 	lds	r24, 0x1FCA
    2658:	90 91 cb 1f 	lds	r25, 0x1FCB
    265c:	1e 96       	adiw	r26, 0x0e	; 14
    265e:	9c 93       	st	X, r25
    2660:	8e 93       	st	-X, r24
    2662:	1d 97       	sbiw	r26, 0x0d	; 13
            // Generate the payload data and record the node address data in the Pan
            // Coord's address table.
            response->cmd = ASSOCIATION_RESPONSE;
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	1f 96       	adiw	r26, 0x0f	; 15
    2668:	8c 93       	st	X, r24
    266a:	1f 97       	sbiw	r26, 0x0f	; 15
            response->shortAddr =  shortAddress;
    266c:	51 96       	adiw	r26, 0x11	; 17
    266e:	1c 93       	st	X, r17
    2670:	0e 93       	st	-X, r16
    2672:	50 97       	sbiw	r26, 0x10	; 16

            ((rx_frame_t*)pFrameResponse)->length = sizeof(ftAssocRespDirect);
    2674:	82 e1       	ldi	r24, 0x12	; 18
    2676:	d5 01       	movw	r26, r10
    2678:	8c 93       	st	X, r24

            event_object_t event;
            event.event = MAC_EVENT_SEND;
    267a:	8a e1       	ldi	r24, 0x1A	; 26
    267c:	89 83       	std	Y+1, r24	; 0x01
            event.data = pFrameResponse;
    267e:	bb 82       	std	Y+3, r11	; 0x03
    2680:	aa 82       	std	Y+2, r10	; 0x02
            event.callback = 0;
    2682:	1d 82       	std	Y+5, r1	; 0x05
    2684:	1c 82       	std	Y+4, r1	; 0x04

            // save Event
            mac_put_event(&event);
    2686:	ce 01       	movw	r24, r28
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <macAssociationResponse+0x2c2>
    2690:	00 e0       	ldi	r16, 0x00	; 0
    2692:	10 e0       	ldi	r17, 0x00	; 0
            //radioSendData(sizeof(ftAssocRespDirect), (u8 *)response);
         }

      }

      UART_PRINT("\r\nAssociated node ");
    2694:	00 d0       	rcall	.+0      	; 0x2696 <macAssociationResponse+0x2c4>
    2696:	80 e2       	ldi	r24, 0x20	; 32
    2698:	93 e0       	ldi	r25, 0x03	; 3
    269a:	ed b7       	in	r30, 0x3d	; 61
    269c:	fe b7       	in	r31, 0x3e	; 62
    269e:	92 83       	std	Z+2, r25	; 0x02
    26a0:	81 83       	std	Z+1, r24	; 0x01
    26a2:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
      UART_PRINT_HEX(shortAddress);
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <macAssociationResponse+0x2d6>
    26a8:	83 e3       	ldi	r24, 0x33	; 51
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	ad b7       	in	r26, 0x3d	; 61
    26ae:	be b7       	in	r27, 0x3e	; 62
    26b0:	12 96       	adiw	r26, 0x02	; 2
    26b2:	9c 93       	st	X, r25
    26b4:	8e 93       	st	-X, r24
    26b6:	11 97       	sbiw	r26, 0x01	; 1
    26b8:	14 96       	adiw	r26, 0x04	; 4
    26ba:	1c 93       	st	X, r17
    26bc:	0e 93       	st	-X, r16
    26be:	13 97       	sbiw	r26, 0x03	; 3
    26c0:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
      UART_PRINT(" Hops = ");
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	86 e3       	ldi	r24, 0x36	; 54
    26ca:	93 e0       	ldi	r25, 0x03	; 3
    26cc:	ed b7       	in	r30, 0x3d	; 61
    26ce:	fe b7       	in	r31, 0x3e	; 62
    26d0:	92 83       	std	Z+2, r25	; 0x02
    26d2:	81 83       	std	Z+1, r24	; 0x01
    26d4:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    26d8:	c8 01       	movw	r24, r16
    26da:	21 e0       	ldi	r18, 0x01	; 1
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
{
   u8 hops = 1;

   for(;;)
   {
      if (!nodes[node_short].nodeType)
    26e0:	fc 01       	movw	r30, r24
    26e2:	74 e0       	ldi	r23, 0x04	; 4
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	7a 95       	dec	r23
    26ea:	e1 f7       	brne	.-8      	; 0x26e4 <macAssociationResponse+0x312>
    26ec:	e0 56       	subi	r30, 0x60	; 96
    26ee:	f2 4f       	sbci	r31, 0xF2	; 242
    26f0:	80 81       	ld	r24, Z
    26f2:	88 23       	and	r24, r24
    26f4:	31 f0       	breq	.+12     	; 0x2702 <macAssociationResponse+0x330>
         // bad short address, quit
         return 0;

      // see if we're just one hop away
      if (nodes[node_short].parentShortAddress == DEFAULT_COORD_ADDR)
    26f6:	81 85       	ldd	r24, Z+9	; 0x09
    26f8:	92 85       	ldd	r25, Z+10	; 0x0a
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	19 f0       	breq	.+6      	; 0x2704 <macAssociationResponse+0x332>

      // find node's parent, the new node for next cycle
      node_short = nodes[node_short].parentShortAddress;

      // Go for another hop
      hops++;
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	ef cf       	rjmp	.-34     	; 0x26e0 <macAssociationResponse+0x30e>
    2702:	20 e0       	ldi	r18, 0x00	; 0
      }

      UART_PRINT("\r\nAssociated node ");
      UART_PRINT_HEX(shortAddress);
      UART_PRINT(" Hops = ");
      UART_PRINT_HEX(macGetHopCount(shortAddress));
    2704:	00 d0       	rcall	.+0      	; 0x2706 <macAssociationResponse+0x334>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <macAssociationResponse+0x336>
    2708:	ed b7       	in	r30, 0x3d	; 61
    270a:	fe b7       	in	r31, 0x3e	; 62
    270c:	31 96       	adiw	r30, 0x01	; 1
    270e:	83 e3       	ldi	r24, 0x33	; 51
    2710:	93 e0       	ldi	r25, 0x03	; 3
    2712:	ad b7       	in	r26, 0x3d	; 61
    2714:	be b7       	in	r27, 0x3e	; 62
    2716:	12 96       	adiw	r26, 0x02	; 2
    2718:	9c 93       	st	X, r25
    271a:	8e 93       	st	-X, r24
    271c:	11 97       	sbiw	r26, 0x01	; 1
    271e:	22 83       	std	Z+2, r18	; 0x02
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
      UART_PRINT("\r\n");
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	8f e3       	ldi	r24, 0x3F	; 63
    2730:	93 e0       	ldi	r25, 0x03	; 3
    2732:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>

      // Let app know that a node was associated
      appNodeAssociated(shortAddress);
    2736:	c8 01       	movw	r24, r16
    2738:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <appNodeAssociated>
   }
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	ff 90       	pop	r15
    2750:	ef 90       	pop	r14
    2752:	df 90       	pop	r13
    2754:	cf 90       	pop	r12
    2756:	bf 90       	pop	r11
    2758:	af 90       	pop	r10
    275a:	08 95       	ret

0000275c <setAssociationTimeout>:
   and a timeout has to be set.
 */
void setAssociationTimeout(void)
{
   // Set a time out timer for an "association period" of 100 ms.
   associationTimer = macSetAlarm(VLP ? 100 : ASSOCIATION_TIMEOUT,
    275c:	88 ee       	ldi	r24, 0xE8	; 232
    275e:	93 e0       	ldi	r25, 0x03	; 3
    2760:	64 ec       	ldi	r22, 0xC4	; 196
    2762:	7d e0       	ldi	r23, 0x0D	; 13
    2764:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    2768:	80 93 9b 0d 	sts	0x0D9B, r24
         macAssociationConfirm);
}
    276c:	08 95       	ret

0000276e <sendBeaconFrame>:
/**
   Create and send a beacon frame.  This is called in response to a
   beacon request frame.
*/
void sendBeaconFrame(void)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <sendBeaconFrame+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <sendBeaconFrame+0x8>
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    if (NODETYPE != ENDDEVICE)
    {
       uint8_t* pFrame = bmm_buffer_alloc();
    277c:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    2780:	dc 01       	movw	r26, r24

       if(pFrame != NULL)
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	79 f1       	breq	.+94     	; 0x27e4 <sendBeaconFrame+0x76>
       {
          ftBeacon *data_frame = (ftBeacon*)(((rx_frame_t*)pFrame)->data);
    2786:	fc 01       	movw	r30, r24
    2788:	31 96       	adiw	r30, 0x01	; 1

          data_frame->fcf   = FCF_BEACON;
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e8       	ldi	r25, 0x80	; 128
    278e:	12 96       	adiw	r26, 0x02	; 2
    2790:	9c 93       	st	X, r25
    2792:	8e 93       	st	-X, r24
    2794:	11 97       	sbiw	r26, 0x01	; 1
          data_frame->seq   = macConfig.bsn++;
    2796:	80 91 c6 1f 	lds	r24, 0x1FC6
    279a:	82 83       	std	Z+2, r24	; 0x02
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	80 93 c6 1f 	sts	0x1FC6, r24
          data_frame->panid = macConfig.panId;
    27a2:	80 91 c8 1f 	lds	r24, 0x1FC8
    27a6:	90 91 c9 1f 	lds	r25, 0x1FC9
    27aa:	94 83       	std	Z+4, r25	; 0x04
    27ac:	83 83       	std	Z+3, r24	; 0x03
          data_frame->addr  = macConfig.shortAddress;
    27ae:	80 91 ca 1f 	lds	r24, 0x1FCA
    27b2:	90 91 cb 1f 	lds	r25, 0x1FCB
    27b6:	96 83       	std	Z+6, r25	; 0x06
    27b8:	85 83       	std	Z+5, r24	; 0x05

          if(NODETYPE == ROUTER)
            data_frame->superFrame = ROUTER_SUPERFRAME;
          else
            data_frame->superFrame = COORD_SUPERFRAME;
    27ba:	8f ef       	ldi	r24, 0xFF	; 255
    27bc:	90 e4       	ldi	r25, 0x40	; 64
    27be:	90 87       	std	Z+8, r25	; 0x08
    27c0:	87 83       	std	Z+7, r24	; 0x07

          data_frame->netID = 0x06;
    27c2:	86 e0       	ldi	r24, 0x06	; 6
    27c4:	81 87       	std	Z+9, r24	; 0x09
          data_frame->hops = macConfig.hopsToCoord;
    27c6:	80 91 d0 1f 	lds	r24, 0x1FD0
    27ca:	82 87       	std	Z+10, r24	; 0x0a

          ((rx_frame_t*)pFrame)->length = sizeof(ftBeacon);
    27cc:	8b e0       	ldi	r24, 0x0B	; 11
    27ce:	8c 93       	st	X, r24

          event_object_t event;
          event.event = MAC_EVENT_SEND;
    27d0:	8a e1       	ldi	r24, 0x1A	; 26
    27d2:	89 83       	std	Y+1, r24	; 0x01
          event.data = pFrame;
    27d4:	bb 83       	std	Y+3, r27	; 0x03
    27d6:	aa 83       	std	Y+2, r26	; 0x02
          event.callback = 0;
    27d8:	1d 82       	std	Y+5, r1	; 0x05
    27da:	1c 82       	std	Y+4, r1	; 0x04

          // save Event and send later
          mac_put_event(&event);
    27dc:	ce 01       	movw	r24, r28
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
       }
    }
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <macOtaDebugRequest>:
{
   if (NODETYPE != COORD)
   {
      macDataRequestInt(DEFAULT_COORD_ADDR, strlen((char *)str)+1, str, DEBUG_FRAME);
   }
}
    27f4:	08 95       	ret

000027f6 <macSendStoredFrame>:

         }
      }
   }

}
    27f6:	08 95       	ret

000027f8 <macHoldFrame>:
   @param addr Short address of recipient node

   @param pFrame Pointer to buffer containing the frame and length information
 */
void macHoldFrame(u16 addr, u8 *pFrame)
{
    27f8:	cb 01       	movw	r24, r22
               storedFrames[i].len = 0;
         }
      }
   }

   bmm_buffer_free(pFrame); // free buffer
    27fa:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
}
    27fe:	08 95       	ret

00002800 <mp>:
   }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <mp+0xe>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <mp+0x10>
    2810:	0f 92       	push	r0
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
   uint8_t* pFrame = bmm_buffer_alloc();
    2816:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    281a:	7c 01       	movw	r14, r24

   if(pFrame != NULL)
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	09 f4       	brne	.+2      	; 0x2822 <mp+0x22>
    2820:	44 c0       	rjmp	.+136    	; 0x28aa <mp+0xaa>
   {
      ftPing *frame = (ftPing*)(((rx_frame_t*)pFrame)->data);
    2822:	8c 01       	movw	r16, r24
    2824:	0f 5f       	subi	r16, 0xFF	; 255
    2826:	1f 4f       	sbci	r17, 0xFF	; 255

      frame->fcf = FCF_DATA;
    2828:	81 e6       	ldi	r24, 0x61	; 97
    282a:	98 e8       	ldi	r25, 0x88	; 136
    282c:	f7 01       	movw	r30, r14
    282e:	92 83       	std	Z+2, r25	; 0x02
    2830:	81 83       	std	Z+1, r24	; 0x01
      frame->seq = macConfig.dsn++;
    2832:	80 91 c7 1f 	lds	r24, 0x1FC7
    2836:	f8 01       	movw	r30, r16
    2838:	82 83       	std	Z+2, r24	; 0x02
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 c7 1f 	sts	0x1FC7, r24
      frame->panid = macConfig.panId;
    2840:	80 91 c8 1f 	lds	r24, 0x1FC8
    2844:	90 91 c9 1f 	lds	r25, 0x1FC9
    2848:	94 83       	std	Z+4, r25	; 0x04
    284a:	83 83       	std	Z+3, r24	; 0x03
      frame->srcAddr = macConfig.shortAddress;
    284c:	80 91 ca 1f 	lds	r24, 0x1FCA
    2850:	90 91 cb 1f 	lds	r25, 0x1FCB
    2854:	90 87       	std	Z+8, r25	; 0x08
    2856:	87 83       	std	Z+7, r24	; 0x07
      frame->originAddr = macConfig.shortAddress;
    2858:	94 87       	std	Z+12, r25	; 0x0c
    285a:	83 87       	std	Z+11, r24	; 0x0b
      frame->finalDestAddr = pingAddr;
    285c:	80 91 e0 13 	lds	r24, 0x13E0
    2860:	90 91 e1 13 	lds	r25, 0x13E1
    2864:	92 87       	std	Z+10, r25	; 0x0a
    2866:	81 87       	std	Z+9, r24	; 0x09
      frame->type = pingType;
    2868:	80 91 e2 13 	lds	r24, 0x13E2
    286c:	85 87       	std	Z+13, r24	; 0x0d
      frame->rssi = radioGetSavedRssiValue();
    286e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <radioGetSavedRssiValue>
    2872:	f8 01       	movw	r30, r16
    2874:	86 87       	std	Z+14, r24	; 0x0e
      frame->lqi = radioGetSavedLqiValue();
    2876:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <radioGetSavedLqiValue>
    287a:	f8 01       	movw	r30, r16
    287c:	87 87       	std	Z+15, r24	; 0x0f

      ((rx_frame_t*)pFrame)->length = sizeof(ftPing);
    287e:	80 e1       	ldi	r24, 0x10	; 16
    2880:	f7 01       	movw	r30, r14
    2882:	80 83       	st	Z, r24

      if (NODETYPE == COORD)
      {
         // Find the top parent
         u8 addr = macGetTopParent(pingAddr);
    2884:	80 91 e0 13 	lds	r24, 0x13E0
    2888:	90 91 e1 13 	lds	r25, 0x13E1
    288c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <macGetTopParent>
         frame->destAddr = addr;
    2890:	f8 01       	movw	r30, r16
    2892:	85 83       	std	Z+5, r24	; 0x05
    2894:	16 82       	std	Z+6, r1	; 0x06
      {
         frame->destAddr = macConfig.parentShortAddress;
      }

      event_object_t event;
      event.event = MAC_EVENT_SEND;
    2896:	8a e1       	ldi	r24, 0x1A	; 26
    2898:	89 83       	std	Y+1, r24	; 0x01
      event.data = pFrame;
    289a:	fb 82       	std	Y+3, r15	; 0x03
    289c:	ea 82       	std	Y+2, r14	; 0x02
      event.callback = 0;
    289e:	1d 82       	std	Y+5, r1	; 0x05
    28a0:	1c 82       	std	Y+4, r1	; 0x04

      // save Event
      mac_put_event(&event);
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
   }
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <macPing>:
   PING_REQ_FRAME or @ref PING_RSP_FRAME.

   @param addr Short address of node to send ping
 */
void macPing(u8 pingTypeArg, u16 addr)
{
    28c2:	28 2f       	mov	r18, r24
   // Don't send to self
   if (addr == macConfig.shortAddress)
    28c4:	80 91 ca 1f 	lds	r24, 0x1FCA
    28c8:	90 91 cb 1f 	lds	r25, 0x1FCB
    28cc:	68 17       	cp	r22, r24
    28ce:	79 07       	cpc	r23, r25
    28d0:	a1 f0       	breq	.+40     	; 0x28fa <macPing+0x38>
   {
      return;
   }

   // Broadcast addr
   if (!macConfig.associated)
    28d2:	80 91 c5 1f 	lds	r24, 0x1FC5
    28d6:	88 23       	and	r24, r24
    28d8:	81 f0       	breq	.+32     	; 0x28fa <macPing+0x38>
   {
      return;
   }

   pingAddr = addr;
    28da:	70 93 e1 13 	sts	0x13E1, r23
    28de:	60 93 e0 13 	sts	0x13E0, r22
   pingType = pingTypeArg;
    28e2:	20 93 e2 13 	sts	0x13E2, r18
    28e6:	10 92 e3 13 	sts	0x13E3, r1

   if (NODETYPE == COORD)
   {
      // First send a routing packet
      u8 rpSent;
      rpSent = macSendRoutingPacket(addr);
    28ea:	cb 01       	movw	r24, r22
    28ec:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <macSendRoutingPacket>
      //macSetAlarm(rpSent ? MAC_RP_DELAY : 0, mp);
      mp();
    28f0:	0e 94 00 14 	call	0x2800	; 0x2800 <mp>
      macConfig.busy = true;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 d4 1f 	sts	0x1FD4, r24
    28fa:	08 95       	ret

000028fc <macDataIndication>:
 */
void macDataIndication(uint8_t* pFrame)
{

   // Sort out the different types of data packets.
   ftData *frame = (ftData*)(((rx_frame_t*)pFrame)->data);
    28fc:	fc 01       	movw	r30, r24
    28fe:	dc 01       	movw	r26, r24
    2900:	11 96       	adiw	r26, 0x01	; 1
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif
    */
   switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    2902:	1d 96       	adiw	r26, 0x0d	; 13
    2904:	8c 91       	ld	r24, X
    2906:	1d 97       	sbiw	r26, 0x0d	; 13
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	8f 77       	andi	r24, 0x7F	; 127
    290c:	90 70       	andi	r25, 0x00	; 0
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	91 05       	cpc	r25, r1
    2912:	79 f0       	breq	.+30     	; 0x2932 <macDataIndication+0x36>
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	91 05       	cpc	r25, r1
    2918:	1c f4       	brge	.+6      	; 0x2920 <macDataIndication+0x24>
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	e9 f4       	brne	.+58     	; 0x2958 <macDataIndication+0x5c>
    291e:	06 c0       	rjmp	.+12     	; 0x292c <macDataIndication+0x30>
    2920:	83 30       	cpi	r24, 0x03	; 3
    2922:	91 05       	cpc	r25, r1
    2924:	69 f0       	breq	.+26     	; 0x2940 <macDataIndication+0x44>
    2926:	05 97       	sbiw	r24, 0x05	; 5
    2928:	b9 f4       	brne	.+46     	; 0x2958 <macDataIndication+0x5c>
    292a:	11 c0       	rjmp	.+34     	; 0x294e <macDataIndication+0x52>
   {
   case DATA_FRAME:
      // Plain old data, send it up the chain
      appDataIndication();
    292c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <appDataIndication>
    2930:	08 95       	ret
         debugMsgStr("\r\nAwake");
      }
      break;
   case PING_REQ_FRAME:
      // We got a ping request, let the app handle that
      appPingReq(frame->originAddr);
    2932:	1b 96       	adiw	r26, 0x0b	; 11
    2934:	8d 91       	ld	r24, X+
    2936:	9c 91       	ld	r25, X
    2938:	1c 97       	sbiw	r26, 0x0c	; 12
    293a:	0e 94 98 1c 	call	0x3930	; 0x3930 <appPingReq>
    293e:	08 95       	ret
      break;
   case PING_RSP_FRAME:
      // We got a ping response, app will handle it
      appPingRsp(frame->originAddr);
    2940:	1b 96       	adiw	r26, 0x0b	; 11
    2942:	8d 91       	ld	r24, X+
    2944:	9c 91       	ld	r25, X
    2946:	1c 97       	sbiw	r26, 0x0c	; 12
    2948:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <appPingRsp>
    294c:	08 95       	ret
      break;
   case DATA_FRAME_6LOWPAN:
      //6lowpan data indication
      if (IPV6LOWPAN == 1)
         //sixlowpan_DataIndication(frame, *mac_buffer_rx - 16);
         sixlowpan_DataIndication(frame, (((rx_frame_t*)pFrame)->length) - 16);
    294e:	60 81       	ld	r22, Z
    2950:	60 51       	subi	r22, 0x10	; 16
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 3b 07 	call	0xe76	; 0xe76 <sixlowpan_DataIndication>
    2958:	08 95       	ret

0000295a <macDataRequestInt>:
    @param data Pointer to the data to be sent.

    @param type Type of frame to be sent
 */
static void macDataRequestInt(u16 addr, u8 len, u8 * data, u8 type)
{
    295a:	6f 92       	push	r6
    295c:	7f 92       	push	r7
    295e:	8f 92       	push	r8
    2960:	9f 92       	push	r9
    2962:	af 92       	push	r10
    2964:	bf 92       	push	r11
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <macDataRequestInt+0x1e>
    2978:	00 d0       	rcall	.+0      	; 0x297a <macDataRequestInt+0x20>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	6c 01       	movw	r12, r24
    2982:	96 2e       	mov	r9, r22
    2984:	3a 01       	movw	r6, r20
    2986:	82 2e       	mov	r8, r18
   u8 rpSent; // Was a routing packet sent?

   // Don't send to self
   if (addr == macConfig.shortAddress || addr == BROADCASTADDR)
    2988:	80 91 ca 1f 	lds	r24, 0x1FCA
    298c:	90 91 cb 1f 	lds	r25, 0x1FCB
    2990:	c8 16       	cp	r12, r24
    2992:	d9 06       	cpc	r13, r25
    2994:	09 f4       	brne	.+2      	; 0x2998 <macDataRequestInt+0x3e>
    2996:	7d c0       	rjmp	.+250    	; 0x2a92 <macDataRequestInt+0x138>
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    299a:	c8 16       	cp	r12, r24
    299c:	8f ef       	ldi	r24, 0xFF	; 255
    299e:	d8 06       	cpc	r13, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <macDataRequestInt+0x4a>
    29a2:	77 c0       	rjmp	.+238    	; 0x2a92 <macDataRequestInt+0x138>
   {
      return;
   }

   // This node has no short address
   if (!macConfig.associated)
    29a4:	80 91 c5 1f 	lds	r24, 0x1FC5
    29a8:	88 23       	and	r24, r24
    29aa:	09 f4       	brne	.+2      	; 0x29ae <macDataRequestInt+0x54>
    29ac:	72 c0       	rjmp	.+228    	; 0x2a92 <macDataRequestInt+0x138>
   {
      return;
   }

   uint8_t* pFrame = bmm_buffer_alloc();
    29ae:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    29b2:	5c 01       	movw	r10, r24

   if(pFrame != NULL)
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	09 f4       	brne	.+2      	; 0x29ba <macDataRequestInt+0x60>
    29b8:	6c c0       	rjmp	.+216    	; 0x2a92 <macDataRequestInt+0x138>
   {
      // Create a struct pointer to the global variable...
      //ftData *data_frame = (ftData*)(mac_buffer_tx+1);

      ftData *data_frame = (ftData*)(((rx_frame_t*)pFrame)->data);
    29ba:	7c 01       	movw	r14, r24
    29bc:	08 94       	sec
    29be:	e1 1c       	adc	r14, r1
    29c0:	f1 1c       	adc	r15, r1

      // Build the frame.
      data_frame->fcf = FCF_DATA;
    29c2:	81 e6       	ldi	r24, 0x61	; 97
    29c4:	98 e8       	ldi	r25, 0x88	; 136
    29c6:	d5 01       	movw	r26, r10
    29c8:	12 96       	adiw	r26, 0x02	; 2
    29ca:	9c 93       	st	X, r25
    29cc:	8e 93       	st	-X, r24
    29ce:	11 97       	sbiw	r26, 0x01	; 1
      data_frame->seq = macConfig.dsn++;
    29d0:	80 91 c7 1f 	lds	r24, 0x1FC7
    29d4:	f7 01       	movw	r30, r14
    29d6:	82 83       	std	Z+2, r24	; 0x02
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	80 93 c7 1f 	sts	0x1FC7, r24
      data_frame->panid = macConfig.panId;
    29de:	80 91 c8 1f 	lds	r24, 0x1FC8
    29e2:	90 91 c9 1f 	lds	r25, 0x1FC9
    29e6:	94 83       	std	Z+4, r25	; 0x04
    29e8:	83 83       	std	Z+3, r24	; 0x03
      data_frame->srcAddr = macConfig.shortAddress;
    29ea:	80 91 ca 1f 	lds	r24, 0x1FCA
    29ee:	90 91 cb 1f 	lds	r25, 0x1FCB
    29f2:	90 87       	std	Z+8, r25	; 0x08
    29f4:	87 83       	std	Z+7, r24	; 0x07
      data_frame->finalDestAddr = addr;
    29f6:	d2 86       	std	Z+10, r13	; 0x0a
    29f8:	c1 86       	std	Z+9, r12	; 0x09
      data_frame->originAddr = macConfig.shortAddress;
    29fa:	94 87       	std	Z+12, r25	; 0x0c
    29fc:	83 87       	std	Z+11, r24	; 0x0b

      // send a routing packet if necessary
      rpSent = macSendRoutingPacket(addr);
    29fe:	c6 01       	movw	r24, r12
    2a00:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <macSendRoutingPacket>

      if (NODETYPE == COORD)
      {
         // Find the child node that can route this packet
         u16 child = addr;
         u16 parent = macGetParent(child);
    2a04:	c6 01       	movw	r24, r12
    2a06:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <macGetParent>
    2a0a:	8c 01       	movw	r16, r24
    2a0c:	5c 2d       	mov	r21, r12
    2a0e:	4d 2d       	mov	r20, r13
    2a10:	06 c0       	rjmp	.+12     	; 0x2a1e <macDataRequestInt+0xc4>
         while (parent != DEFAULT_COORD_ADDR)
         {
            child = parent;
            parent = macGetParent(child);
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <macGetParent>
    2a18:	50 2f       	mov	r21, r16
    2a1a:	41 2f       	mov	r20, r17
    2a1c:	8c 01       	movw	r16, r24
      if (NODETYPE == COORD)
      {
         // Find the child node that can route this packet
         u16 child = addr;
         u16 parent = macGetParent(child);
         while (parent != DEFAULT_COORD_ADDR)
    2a1e:	01 15       	cp	r16, r1
    2a20:	11 05       	cpc	r17, r1
    2a22:	b9 f7       	brne	.-18     	; 0x2a12 <macDataRequestInt+0xb8>
         {
            child = parent;
            parent = macGetParent(child);
         }
         // send to child node that can route this packet
         data_frame->destAddr = child;
    2a24:	d7 01       	movw	r26, r14
    2a26:	15 96       	adiw	r26, 0x05	; 5
    2a28:	5c 93       	st	X, r21
    2a2a:	15 97       	sbiw	r26, 0x05	; 5
    2a2c:	16 96       	adiw	r26, 0x06	; 6
    2a2e:	4c 93       	st	X, r20
    2a30:	16 97       	sbiw	r26, 0x06	; 6
      if (macConfig.sleeping && NODETYPE == ENDDEVICE && RUMSLEEP)
      {
         type |= 0x80; // Set high bit of type if we're sleeping
      }

      data_frame->type = type;
    2a32:	1d 96       	adiw	r26, 0x0d	; 13
    2a34:	8c 92       	st	X, r8
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	08 c0       	rjmp	.+16     	; 0x2a4a <macDataRequestInt+0xf0>

      // Copy the payload data to frame. (note: this creates smaller code than using memcpy!!)
      u8 i;
      for(i=0; i<len; i++){
         ((u8*)&data_frame->payload)[i] = *data++;
    2a3a:	f7 01       	movw	r30, r14
    2a3c:	e9 0f       	add	r30, r25
    2a3e:	f1 1d       	adc	r31, r1
    2a40:	d3 01       	movw	r26, r6
    2a42:	8d 91       	ld	r24, X+
    2a44:	3d 01       	movw	r6, r26
    2a46:	86 87       	std	Z+14, r24	; 0x0e

      data_frame->type = type;

      // Copy the payload data to frame. (note: this creates smaller code than using memcpy!!)
      u8 i;
      for(i=0; i<len; i++){
    2a48:	9f 5f       	subi	r25, 0xFF	; 255
    2a4a:	99 15       	cp	r25, r9
    2a4c:	b0 f3       	brcs	.-20     	; 0x2a3a <macDataRequestInt+0xe0>
         ((u8*)&data_frame->payload)[i] = *data++;
      }

      // Check addresses again - addr will be different now -> Don't send to self
      if (data_frame->destAddr == macConfig.shortAddress || data_frame->destAddr == BROADCASTADDR)
    2a4e:	f7 01       	movw	r30, r14
    2a50:	25 81       	ldd	r18, Z+5	; 0x05
    2a52:	36 81       	ldd	r19, Z+6	; 0x06
    2a54:	80 91 ca 1f 	lds	r24, 0x1FCA
    2a58:	90 91 cb 1f 	lds	r25, 0x1FCB
    2a5c:	28 17       	cp	r18, r24
    2a5e:	39 07       	cpc	r19, r25
    2a60:	19 f0       	breq	.+6      	; 0x2a68 <macDataRequestInt+0x10e>
    2a62:	2f 5f       	subi	r18, 0xFF	; 255
    2a64:	3f 4f       	sbci	r19, 0xFF	; 255
    2a66:	21 f4       	brne	.+8      	; 0x2a70 <macDataRequestInt+0x116>
      {
         bmm_buffer_free(pFrame);
    2a68:	c5 01       	movw	r24, r10
    2a6a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
    2a6e:	11 c0       	rjmp	.+34     	; 0x2a92 <macDataRequestInt+0x138>
         return;
      }

      ((rx_frame_t*)pFrame)->length = len + ftDataHeaderSize; // save length away
    2a70:	8e e0       	ldi	r24, 0x0E	; 14
    2a72:	98 0e       	add	r9, r24
    2a74:	d5 01       	movw	r26, r10
    2a76:	9c 92       	st	X, r9
            // buffer is freed inside macHoldFrame()
         }
         else // Node is not sleeping child, send it now.
         {
            event_object_t event;
            event.event = MAC_EVENT_SEND;
    2a78:	8a e1       	ldi	r24, 0x1A	; 26
    2a7a:	89 83       	std	Y+1, r24	; 0x01
            event.data = pFrame;
    2a7c:	bb 82       	std	Y+3, r11	; 0x03
    2a7e:	aa 82       	std	Y+2, r10	; 0x02
            event.callback = 0;
    2a80:	1d 82       	std	Y+5, r1	; 0x05
    2a82:	1c 82       	std	Y+4, r1	; 0x04

            // save Event
            mac_put_event(&event);
    2a84:	ce 01       	movw	r24, r28
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
         event.callback = 0;

         // save Event
         mac_put_event(&event);
      }
      macConfig.busy = true;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	80 93 d4 1f 	sts	0x1FD4, r24
   }
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	08 95       	ret

00002aba <macsixlowpanDataRequest>:
    @ingroup avr6lowpan
 */
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
   if (IPV6LOWPAN == 1)
      macDataRequestInt(addr, len, data, DATA_FRAME_6LOWPAN);
    2aba:	25 e0       	ldi	r18, 0x05	; 5
    2abc:	0e 94 ad 14 	call	0x295a	; 0x295a <macDataRequestInt>
}
    2ac0:	08 95       	ret

00002ac2 <macWakeRequest>:
    @param addr Short address of the parent router of the node to wake
    up.
    @param child Short address of the child node to wake up.
 */
void macWakeRequest(u16 addr, u16 child)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <macWakeRequest+0x6>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	7a 83       	std	Y+2, r23	; 0x02
    2ace:	69 83       	std	Y+1, r22	; 0x01
   if (NODETYPE != ENDDEVICE)
   {
      macDataRequestInt(addr, 2, (u8*)&child, WAKE_NODE);
    2ad0:	62 e0       	ldi	r22, 0x02	; 2
    2ad2:	ae 01       	movw	r20, r28
    2ad4:	4f 5f       	subi	r20, 0xFF	; 255
    2ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad8:	26 e0       	ldi	r18, 0x06	; 6
    2ada:	0e 94 ad 14 	call	0x295a	; 0x295a <macDataRequestInt>
   }
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <macDataRequest>:

   @param data Pointer to the data to be sent.
 */
void macDataRequest(u16 addr, u8 len, u8 * data)
{
   macDataRequestInt(addr, len, data, DATA_FRAME);
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	0e 94 ad 14 	call	0x295a	; 0x295a <macDataRequestInt>
}
    2aee:	08 95       	ret

00002af0 <mac_event_pending>:

    @return True if there is a pending event, else false.
 */
u8 mac_event_pending(void)
{
   return (event_queue.head != event_queue.tail);
    2af0:	90 91 fe 1f 	lds	r25, 0x1FFE
    2af4:	80 91 ff 1f 	lds	r24, 0x1FFF
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	98 13       	cpse	r25, r24
    2afc:	21 e0       	ldi	r18, 0x01	; 1
}
    2afe:	82 2f       	mov	r24, r18
    2b00:	08 95       	ret

00002b02 <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
 */
event_object_t * mac_get_event(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <mac_get_event+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
   event_object_t *object = NULL;
   AVR_ENTER_CRITICAL_REGION();
    2b0c:	8f b7       	in	r24, 0x3f	; 63
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	f8 94       	cli
   volatile u8 newtail;

   newtail = event_queue.tail;
    2b12:	80 91 ff 1f 	lds	r24, 0x1FFF
    2b16:	8a 83       	std	Y+2, r24	; 0x02

   object = &(event_queue.event_object[newtail]);
    2b18:	9a 81       	ldd	r25, Y+2	; 0x02

   // calculate new tail
   newtail++;
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	8a 83       	std	Y+2, r24	; 0x02
   if (newtail >= MAX_EVENTS)
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	84 31       	cpi	r24, 0x14	; 20
    2b24:	08 f0       	brcs	.+2      	; 0x2b28 <mac_get_event+0x26>
      newtail = 0;
    2b26:	1a 82       	std	Y+2, r1	; 0x02

   event_queue.tail = newtail;
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	80 93 ff 1f 	sts	0x1FFF, r24

   AVR_LEAVE_CRITICAL_REGION();
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	8f bf       	out	0x3f, r24	; 63
    2b32:	25 e0       	ldi	r18, 0x05	; 5
    2b34:	92 9f       	mul	r25, r18
    2b36:	90 01       	movw	r18, r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	20 50       	subi	r18, 0x00	; 0
    2b3c:	30 4e       	sbci	r19, 0xE0	; 224
   return(object);

}
    2b3e:	c9 01       	movw	r24, r18
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
 */
void mac_put_event(event_object_t *object)
{
    2b4a:	0f 93       	push	r16
    2b4c:	1f 93       	push	r17
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	8c 01       	movw	r16, r24
   AVR_ENTER_CRITICAL_REGION();
    2b5a:	8f b7       	in	r24, 0x3f	; 63
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	f8 94       	cli
   u8 newhead;

   if ((event_queue.head + 1) % MAX_EVENTS == event_queue.tail)
    2b60:	80 91 fe 1f 	lds	r24, 0x1FFE
    2b64:	20 91 ff 1f 	lds	r18, 0x1FFF
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	64 e1       	ldi	r22, 0x14	; 20
    2b6e:	70 e0       	ldi	r23, 0x00	; 0
    2b70:	0e 94 1d 34 	call	0x683a	; 0x683a <__divmodhi4>
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	82 17       	cp	r24, r18
    2b78:	93 07       	cpc	r25, r19
    2b7a:	41 f4       	brne	.+16     	; 0x2b8c <mac_put_event+0x42>
   {
      if(object->data != 0)
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	81 81       	ldd	r24, Z+1	; 0x01
    2b80:	92 81       	ldd	r25, Z+2	; 0x02
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	f9 f0       	breq	.+62     	; 0x2bc4 <mac_put_event+0x7a>
      {
         bmm_buffer_free(object->data);
    2b86:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
    2b8a:	1c c0       	rjmp	.+56     	; 0x2bc4 <mac_put_event+0x7a>
      }
      // queue full, get outta here
      return;
   }

   newhead = event_queue.head;
    2b8c:	20 91 fe 1f 	lds	r18, 0x1FFE

   // store in queue
   event_queue.event_object[newhead] = *object;
    2b90:	82 2f       	mov	r24, r18
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	fc 01       	movw	r30, r24
    2b96:	ee 0f       	add	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	ee 0f       	add	r30, r30
    2b9c:	ff 1f       	adc	r31, r31
    2b9e:	e8 0f       	add	r30, r24
    2ba0:	f9 1f       	adc	r31, r25
    2ba2:	e0 50       	subi	r30, 0x00	; 0
    2ba4:	f0 4e       	sbci	r31, 0xE0	; 224
    2ba6:	d8 01       	movw	r26, r16
    2ba8:	85 e0       	ldi	r24, 0x05	; 5
    2baa:	0d 90       	ld	r0, X+
    2bac:	01 92       	st	Z+, r0
    2bae:	81 50       	subi	r24, 0x01	; 1
    2bb0:	e1 f7       	brne	.-8      	; 0x2baa <mac_put_event+0x60>

   // calculate new head index
   newhead++;
    2bb2:	82 2f       	mov	r24, r18
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
   if (newhead >= MAX_EVENTS)
    2bb6:	84 31       	cpi	r24, 0x14	; 20
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <mac_put_event+0x72>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
      newhead = 0;
   event_queue.head = newhead;
    2bbc:	80 93 fe 1f 	sts	0x1FFE, r24
   AVR_LEAVE_CRITICAL_REGION();
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	8f bf       	out	0x3f, r24	; 63
}
    2bc4:	0f 90       	pop	r0
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	08 95       	ret

00002bd0 <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
 */
void macTask(void)
{
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	72 c0       	rjmp	.+228    	; 0x2cba <macTask+0xea>
   event_object_t *event;

   event = 0;
   while(mac_event_pending())
   {
      event = mac_get_event();
    2bd6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <mac_get_event>
    2bda:	ec 01       	movw	r28, r24
      switch (event->event)
    2bdc:	88 81       	ld	r24, Y
    2bde:	85 31       	cpi	r24, 0x15	; 21
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <macTask+0x14>
    2be2:	4e c0       	rjmp	.+156    	; 0x2c80 <macTask+0xb0>
    2be4:	86 31       	cpi	r24, 0x16	; 22
    2be6:	80 f4       	brcc	.+32     	; 0x2c08 <macTask+0x38>
    2be8:	81 31       	cpi	r24, 0x11	; 17
    2bea:	09 f4       	brne	.+2      	; 0x2bee <macTask+0x1e>
    2bec:	54 c0       	rjmp	.+168    	; 0x2c96 <macTask+0xc6>
    2bee:	82 31       	cpi	r24, 0x12	; 18
    2bf0:	20 f4       	brcc	.+8      	; 0x2bfa <macTask+0x2a>
    2bf2:	80 31       	cpi	r24, 0x10	; 16
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <macTask+0x28>
    2bf6:	61 c0       	rjmp	.+194    	; 0x2cba <macTask+0xea>
    2bf8:	27 c0       	rjmp	.+78     	; 0x2c48 <macTask+0x78>
    2bfa:	83 31       	cpi	r24, 0x13	; 19
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <macTask+0x30>
    2bfe:	48 c0       	rjmp	.+144    	; 0x2c90 <macTask+0xc0>
    2c00:	84 31       	cpi	r24, 0x14	; 20
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <macTask+0x36>
    2c04:	5a c0       	rjmp	.+180    	; 0x2cba <macTask+0xea>
    2c06:	12 c0       	rjmp	.+36     	; 0x2c2c <macTask+0x5c>
    2c08:	88 31       	cpi	r24, 0x18	; 24
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <macTask+0x3e>
    2c0c:	52 c0       	rjmp	.+164    	; 0x2cb2 <macTask+0xe2>
    2c0e:	89 31       	cpi	r24, 0x19	; 25
    2c10:	30 f4       	brcc	.+12     	; 0x2c1e <macTask+0x4e>
    2c12:	86 31       	cpi	r24, 0x16	; 22
    2c14:	a9 f0       	breq	.+42     	; 0x2c40 <macTask+0x70>
    2c16:	87 31       	cpi	r24, 0x17	; 23
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <macTask+0x4c>
    2c1a:	4f c0       	rjmp	.+158    	; 0x2cba <macTask+0xea>
    2c1c:	34 c0       	rjmp	.+104    	; 0x2c86 <macTask+0xb6>
    2c1e:	89 31       	cpi	r24, 0x19	; 25
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <macTask+0x54>
    2c22:	47 c0       	rjmp	.+142    	; 0x2cb2 <macTask+0xe2>
    2c24:	8a 31       	cpi	r24, 0x1A	; 26
    2c26:	09 f0       	breq	.+2      	; 0x2c2a <macTask+0x5a>
    2c28:	48 c0       	rjmp	.+144    	; 0x2cba <macTask+0xea>
    2c2a:	38 c0       	rjmp	.+112    	; 0x2c9c <macTask+0xcc>
      case MAC_EVENT_SCAN:
         //UART_PRINT("Beacon Frame\r\n");
         // A beacon has been received as a result of an active scan.
         // Record the pan descriptor and store it until the scan has
         // completed.
         if (!macConfig.associated)
    2c2c:	80 91 c5 1f 	lds	r24, 0x1FC5
    2c30:	88 23       	and	r24, r24
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <macTask+0x66>
    2c34:	42 c0       	rjmp	.+132    	; 0x2cba <macTask+0xea>
         {
            mac_logPanDescriptors(event->data);
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <mac_logPanDescriptors>
    2c3e:	39 c0       	rjmp	.+114    	; 0x2cb2 <macTask+0xe2>
         }
         break;
#if __AVR__
      case MAC_EVENT_TIMER:
         // Timer has expired, just callback the stored function pointer
         ((void (*)(void))event->data)();  // cast data to function pointer
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	09 95       	icall
    2c46:	39 c0       	rjmp	.+114    	; 0x2cba <macTask+0xea>
         break;
#endif
      case MAC_EVENT_RX:
         if (macConfig.associated)
    2c48:	80 91 c5 1f 	lds	r24, 0x1FC5
    2c4c:	88 23       	and	r24, r24
    2c4e:	a9 f1       	breq	.+106    	; 0x2cba <macTask+0xea>

            // Wake up
            if (NODETYPE != ENDDEVICE)
            {
               uint8_t* pData = ((rx_frame_t*)event->data)->data;
               macChildIsAwake((ftData*)(pData));
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <macChildIsAwake>
               // do not free buffer, this is done in later execution
            }

            // Received a data frame, process it or route it
            if (((ftData*)(((rx_frame_t*)event->data)->data))->finalDestAddr == macConfig.shortAddress)
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	22 85       	ldd	r18, Z+10	; 0x0a
    2c60:	33 85       	ldd	r19, Z+11	; 0x0b
    2c62:	80 91 ca 1f 	lds	r24, 0x1FCA
    2c66:	90 91 cb 1f 	lds	r25, 0x1FCB
    2c6a:	28 17       	cp	r18, r24
    2c6c:	39 07       	cpc	r19, r25
    2c6e:	21 f4       	brne	.+8      	; 0x2c78 <macTask+0xa8>
            {
               // This data frame is for this node
               macDataIndication(event->data);
    2c70:	cf 01       	movw	r24, r30
    2c72:	0e 94 7e 14 	call	0x28fc	; 0x28fc <macDataIndication>
    2c76:	1d c0       	rjmp	.+58     	; 0x2cb2 <macTask+0xe2>
            else
            {
               // Route the packet up/down stream
               if (NODETYPE != ENDDEVICE)
               {
                  macRouteData(event->data);
    2c78:	cf 01       	movw	r24, r30
    2c7a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <macRouteData>
    2c7e:	1d c0       	rjmp	.+58     	; 0x2cba <macTask+0xea>
         //UART_PRINT("Beacon REQ\r\n");
         // Generate and send the beacon.
         if ((NODETYPE == ROUTER && macConfig.associated) || (NODETYPE == COORD))
         {
            //UART_PRINT("send Beacon Frame\r\n");
            sendBeaconFrame();
    2c80:	0e 94 b7 13 	call	0x276e	; 0x276e <sendBeaconFrame>
    2c84:	16 c0       	rjmp	.+44     	; 0x2cb2 <macTask+0xe2>
      case MAC_EVENT_ASSOCIATION_REQUEST:
         //UART_PRINT("Association REQ\r\n");
         // Pan Coord has received this request.
         if (NODETYPE == COORD)
         {
            macAssociationResponse(event->data);
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <macAssociationResponse>
    2c8e:	11 c0       	rjmp	.+34     	; 0x2cb2 <macTask+0xe2>
            bmm_buffer_free(event->data);
         }
         break;
      case MAC_EVENT_ACCESS:
         // Channel access failure
         appPacketSendAccessFail();
    2c90:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <appPacketSendAccessFail>
    2c94:	12 c0       	rjmp	.+36     	; 0x2cba <macTask+0xea>
         //there is no buffer to free, event->data is empty
         break;
      case MAC_EVENT_ACK:
         //UART_PRINT("MAC Event ACK\r\n");
         // Packet got through, alert application
         appPacketSendSucceed();
    2c96:	0e 94 6f 1c 	call	0x38de	; 0x38de <appPacketSendSucceed>
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <macTask+0xea>
         //there is no buffer to free, event->data is empty
         break;
      case MAC_EVENT_SEND:
         //UART_PRINT("MAC Event SEND\r\n");
         radioSendData(((rx_frame_t*)(event->data))->length, ((rx_frame_t*)(event->data))->data);
    2c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca0:	81 91       	ld	r24, Z+
    2ca2:	bf 01       	movw	r22, r30
    2ca4:	0e 94 3d 1b 	call	0x367a	; 0x367a <radioSendData>
         if(event->callback)
    2ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    2caa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cac:	30 97       	sbiw	r30, 0x00	; 0
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <macTask+0xe2>
         {
            (*event->callback)(); // execute callback function
    2cb0:	09 95       	icall
         }
         bmm_buffer_free(event->data);
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>

    @return True if there is a pending event, else false.
 */
u8 mac_event_pending(void)
{
   return (event_queue.head != event_queue.tail);
    2cba:	90 91 fe 1f 	lds	r25, 0x1FFE
    2cbe:	80 91 ff 1f 	lds	r24, 0x1FFF
void macTask(void)
{
   event_object_t *event;

   event = 0;
   while(mac_event_pending())
    2cc2:	98 17       	cp	r25, r24
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <macTask+0xf8>
    2cc6:	87 cf       	rjmp	.-242    	; 0x2bd6 <macTask+0x6>
         break;
      default:
         break;
      }
   }
}
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <macRouteAssociateRequest>:
			// save Event
			mac_put_event(&event);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    2cce:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
	}
}
    2cd2:	08 95       	ret

00002cd4 <macRouteAssociateResponse>:
			// save Event
			mac_put_event(&event);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    2cd4:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
	}
}
    2cd8:	08 95       	ret

00002cda <macForwardRoutingPacket>:
		} else {
			bmm_buffer_free(pFrame);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    2cda:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
	}
}
    2cde:	08 95       	ret

00002ce0 <macSendRoutingPacket>:
 address of the parent of the final destination node.

 @return Zero if no routing packet was sent (probably because it was not needed).
 @return Non-zero if a routing packet was sent.
 */
u8 macSendRoutingPacket(u16 shortAddr) {
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	27 97       	sbiw	r28, 0x07	; 7
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	6c 01       	movw	r12, r24
	if (NODETYPE == COORD) {
		uint8_t* pFrame = bmm_buffer_alloc();
    2d02:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    2d06:	7c 01       	movw	r14, r24

		if (pFrame != NULL) {
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	71 f0       	breq	.+28     	; 0x2d28 <macSendRoutingPacket+0x48>
			volatile u16 topParent; // Return to caller

			ftRouting *frame = (ftRouting*) (((rx_frame_t*) pFrame)->data);
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	0f 5f       	subi	r16, 0xFF	; 255
    2d10:	1f 4f       	sbci	r17, 0xFF	; 255
			u8 hops; // Number of router-to-router hops

			// Calculate the routing portion of the routing packet
			hops = macCreateRoute(shortAddr, frame);
    2d12:	c6 01       	movw	r24, r12
    2d14:	b8 01       	movw	r22, r16
    2d16:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <macCreateRoute>
    2d1a:	d8 2e       	mov	r13, r24

			if (hops < 3) {
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	8d 15       	cp	r24, r13
    2d20:	28 f0       	brcs	.+10     	; 0x2d2c <macSendRoutingPacket+0x4c>
				bmm_buffer_free(pFrame);
    2d22:	c7 01       	movw	r24, r14
    2d24:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	3a c0       	rjmp	.+116    	; 0x2da0 <macSendRoutingPacket+0xc0>
				// Could not create routing packet, or no packet needed
				return 0;
			}

			frame->fcf = FCF_ROUTE;
    2d2c:	83 e6       	ldi	r24, 0x63	; 99
    2d2e:	98 e8       	ldi	r25, 0x88	; 136
    2d30:	f7 01       	movw	r30, r14
    2d32:	92 83       	std	Z+2, r25	; 0x02
    2d34:	81 83       	std	Z+1, r24	; 0x01
			frame->seq = macConfig.dsn++;
    2d36:	80 91 c7 1f 	lds	r24, 0x1FC7
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	82 83       	std	Z+2, r24	; 0x02
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	80 93 c7 1f 	sts	0x1FC7, r24
			frame->panid = macConfig.panId;
    2d44:	80 91 c8 1f 	lds	r24, 0x1FC8
    2d48:	90 91 c9 1f 	lds	r25, 0x1FC9
    2d4c:	94 83       	std	Z+4, r25	; 0x04
    2d4e:	83 83       	std	Z+3, r24	; 0x03
			frame->srcAddr = DEFAULT_COORD_ADDR;
    2d50:	10 86       	std	Z+8, r1	; 0x08
    2d52:	17 82       	std	Z+7, r1	; 0x07
			frame->cmd = ROUTING_PACKET;
    2d54:	8b eb       	ldi	r24, 0xBB	; 187
    2d56:	81 87       	std	Z+9, r24	; 0x09

			topParent = frame->destAddr;
    2d58:	85 81       	ldd	r24, Z+5	; 0x05
    2d5a:	96 81       	ldd	r25, Z+6	; 0x06
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01

			// See if we can skip routing because the last packet went there.
			if (macGetLastRoute(topParent) == frame->shortAddr) {
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <macGetLastRoute>
    2d68:	f8 01       	movw	r30, r16
    2d6a:	62 85       	ldd	r22, Z+10	; 0x0a
    2d6c:	73 85       	ldd	r23, Z+11	; 0x0b
    2d6e:	86 17       	cp	r24, r22
    2d70:	97 07       	cpc	r25, r23
    2d72:	b9 f2       	breq	.-82     	; 0x2d22 <macSendRoutingPacket+0x42>
				bmm_buffer_free(pFrame);
				return 0;
			}

			// Save route for this child router
			macSetLastRoute(topParent, frame->shortAddr);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <macSetLastRoute>

			((rx_frame_t*) pFrame)->length = sizeof(ftRouting) + (hops - 3) * 2;
    2d7c:	8d 2d       	mov	r24, r13
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	03 96       	adiw	r24, 0x03	; 3
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	f7 01       	movw	r30, r14
    2d88:	80 83       	st	Z, r24

			event_object_t event;
			event.event = MAC_EVENT_SEND;
    2d8a:	8a e1       	ldi	r24, 0x1A	; 26
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
			event.data = pFrame;
    2d8e:	fd 82       	std	Y+5, r15	; 0x05
    2d90:	ec 82       	std	Y+4, r14	; 0x04
			event.callback = 0;
    2d92:	1f 82       	std	Y+7, r1	; 0x07
    2d94:	1e 82       	std	Y+6, r1	; 0x06

			// save Event
			mac_put_event(&event);
    2d96:	ce 01       	movw	r24, r28
    2d98:	03 96       	adiw	r24, 0x03	; 3
    2d9a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
			// Set the flag to say we sent a routing packet.
			return 1;
		}
	}
	return 0;
}
    2da0:	27 96       	adiw	r28, 0x07	; 7
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	08 95       	ret

00002dbe <macRouteData>:
 - Coordinator: send the packet down the tree, preceded by a routing
 packet in necessary.

 @param pFrame pointer to buffer (in this case it's the receiving frame)
 */
void macRouteData(uint8_t* pFrame) {
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <macRouteData+0x12>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <macRouteData+0x14>
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	d8 2e       	mov	r13, r24
    2dda:	c9 2e       	mov	r12, r25
	if (NODETYPE == ROUTER || NODETYPE == COORD) {
		ftData *frame = (ftData*) (((rx_frame_t*) pFrame)->data);
    2ddc:	e8 2e       	mov	r14, r24
    2dde:	f9 2e       	mov	r15, r25
    2de0:	87 01       	movw	r16, r14
    2de2:	0f 5f       	subi	r16, 0xFF	; 255
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255

		LED_ON(1);
    2de6:	71 98       	cbi	0x0e, 1	; 14
    2de8:	69 9a       	sbi	0x0d, 1	; 13
		macSetAlarm(LED_DELAY, ledoff1);
    2dea:	8a e0       	ldi	r24, 0x0A	; 10
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	65 e6       	ldi	r22, 0x65	; 101
    2df0:	7c e1       	ldi	r23, 0x1C	; 28
    2df2:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

		// See if this frame is in the child table
		if (macIsChild(frame->finalDestAddr)) {
    2df6:	f8 01       	movw	r30, r16
    2df8:	81 85       	ldd	r24, Z+9	; 0x09
    2dfa:	92 85       	ldd	r25, Z+10	; 0x0a
    2dfc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <macIsChild>
    2e00:	88 23       	and	r24, r24
    2e02:	59 f1       	breq	.+86     	; 0x2e5a <macRouteData+0x9c>
			// send frame to child
			frame->seq = macConfig.dsn++;
    2e04:	80 91 c7 1f 	lds	r24, 0x1FC7
    2e08:	f8 01       	movw	r30, r16
    2e0a:	82 83       	std	Z+2, r24	; 0x02
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 c7 1f 	sts	0x1FC7, r24
			frame->destAddr = frame->finalDestAddr;
    2e12:	81 85       	ldd	r24, Z+9	; 0x09
    2e14:	92 85       	ldd	r25, Z+10	; 0x0a
    2e16:	96 83       	std	Z+6, r25	; 0x06
    2e18:	85 83       	std	Z+5, r24	; 0x05
			frame->srcAddr = macConfig.shortAddress;
    2e1a:	80 91 ca 1f 	lds	r24, 0x1FCA
    2e1e:	90 91 cb 1f 	lds	r25, 0x1FCB
    2e22:	90 87       	std	Z+8, r25	; 0x08
    2e24:	87 83       	std	Z+7, r24	; 0x07
			debugMsgStr("\r\nRoute data to child");
    2e26:	60 91 a0 26 	lds	r22, 0x26A0
    2e2a:	70 91 a1 26 	lds	r23, 0x26A1
    2e2e:	81 e4       	ldi	r24, 0x41	; 65
    2e30:	93 e0       	ldi	r25, 0x03	; 3
    2e32:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>

			// See if the child is sleeping
			if (RUMSLEEP && macIsChildSleeping(frame->finalDestAddr)) { // Send it later, after child is awake
				macHoldFrame(frame->finalDestAddr, (u8*) frame);
				// buffer is freed in macHoldFrame() !!
			} else if (frame->destAddr != BROADCASTADDR) {
    2e36:	f8 01       	movw	r30, r16
    2e38:	85 81       	ldd	r24, Z+5	; 0x05
    2e3a:	96 81       	ldd	r25, Z+6	; 0x06
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <macRouteData+0x86>
    2e42:	45 c0       	rjmp	.+138    	; 0x2ece <macRouteData+0x110>
				event_object_t event;
				event.event = MAC_EVENT_SEND;
    2e44:	8a e1       	ldi	r24, 0x1A	; 26
    2e46:	89 83       	std	Y+1, r24	; 0x01
				event.data = pFrame;
    2e48:	da 82       	std	Y+2, r13	; 0x02
    2e4a:	cb 82       	std	Y+3, r12	; 0x03
				event.callback = 0;
    2e4c:	1d 82       	std	Y+5, r1	; 0x05
    2e4e:	1c 82       	std	Y+4, r1	; 0x04

				// subtract 2 bytes from length for checksum length
				((rx_frame_t*) pFrame)->length -= 2; // length info already exist, because this
    2e50:	f7 01       	movw	r30, r14
    2e52:	80 81       	ld	r24, Z
    2e54:	82 50       	subi	r24, 0x02	; 2
    2e56:	80 83       	st	Z, r24
    2e58:	35 c0       	rjmp	.+106    	; 0x2ec4 <macRouteData+0x106>
			}
		} else // Not child node, send up or down the chain
		{
			if (NODETYPE == COORD) {
				// Send down the chain
				frame->seq = macConfig.dsn++;
    2e5a:	80 91 c7 1f 	lds	r24, 0x1FC7
    2e5e:	f8 01       	movw	r30, r16
    2e60:	82 83       	std	Z+2, r24	; 0x02
    2e62:	8f 5f       	subi	r24, 0xFF	; 255
    2e64:	80 93 c7 1f 	sts	0x1FC7, r24
				frame->destAddr = macGetTopParent(frame->finalDestAddr);
    2e68:	81 85       	ldd	r24, Z+9	; 0x09
    2e6a:	92 85       	ldd	r25, Z+10	; 0x0a
    2e6c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <macGetTopParent>
    2e70:	f8 01       	movw	r30, r16
    2e72:	96 83       	std	Z+6, r25	; 0x06
    2e74:	85 83       	std	Z+5, r24	; 0x05
				frame->srcAddr = DEFAULT_COORD_ADDR;
    2e76:	10 86       	std	Z+8, r1	; 0x08
    2e78:	17 82       	std	Z+7, r1	; 0x07

				debugMsgStr("\r\nRoute data from Coord");
    2e7a:	60 91 a0 26 	lds	r22, 0x26A0
    2e7e:	70 91 a1 26 	lds	r23, 0x26A1
    2e82:	87 e5       	ldi	r24, 0x57	; 87
    2e84:	93 e0       	ldi	r25, 0x03	; 3
    2e86:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>

				// if no routing packet has to be send (e.g. last routing packet went there)
				// the bottom if-clause will be executed
				if (macSendRoutingPacket(frame->finalDestAddr)) {
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	81 85       	ldd	r24, Z+9	; 0x09
    2e8e:	92 85       	ldd	r25, Z+10	; 0x0a
    2e90:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <macSendRoutingPacket>
    2e94:	88 23       	and	r24, r24
    2e96:	31 f0       	breq	.+12     	; 0x2ea4 <macRouteData+0xe6>
					macConfig.busy = true;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	80 93 d4 1f 	sts	0x1FD4, r24

					((rx_frame_t*) pFrame)->length = sizeof(ftData);
    2e9e:	8f e7       	ldi	r24, 0x7F	; 127
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	09 c0       	rjmp	.+18     	; 0x2eb6 <macRouteData+0xf8>
					frame->srcAddr = macConfig.shortAddress;
					debugMsgStr("\r\nRoute data up");
				}
			}
			// Make sure we're not broadcasting frames
			if (frame->destAddr != BROADCASTADDR) {
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	85 81       	ldd	r24, Z+5	; 0x05
    2ea8:	96 81       	ldd	r25, Z+6	; 0x06
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	9f 4f       	sbci	r25, 0xFF	; 255
    2eae:	79 f0       	breq	.+30     	; 0x2ece <macRouteData+0x110>
				// subtract 2 bytes from length for checksum length
				((rx_frame_t*) pFrame)->length -= 2;
    2eb0:	f7 01       	movw	r30, r14
    2eb2:	80 81       	ld	r24, Z
    2eb4:	82 50       	subi	r24, 0x02	; 2
    2eb6:	80 83       	st	Z, r24

				event_object_t event;
				event.event = MAC_EVENT_SEND;
    2eb8:	8a e1       	ldi	r24, 0x1A	; 26
    2eba:	89 83       	std	Y+1, r24	; 0x01
				event.data = pFrame;
    2ebc:	da 82       	std	Y+2, r13	; 0x02
    2ebe:	cb 82       	std	Y+3, r12	; 0x03
				event.callback = 0;
    2ec0:	1d 82       	std	Y+5, r1	; 0x05
    2ec2:	1c 82       	std	Y+4, r1	; 0x04

				// save Event
				mac_put_event(&event);
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <macRouteData+0x118>
			} else {
				bmm_buffer_free(pFrame);
    2ece:	8d 2d       	mov	r24, r13
    2ed0:	9c 2d       	mov	r25, r12
    2ed2:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
		}
	} else // NODETYPE == ENDDEVICE
	{
		bmm_buffer_free(pFrame);
	}
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	ff 90       	pop	r15
    2eea:	ef 90       	pop	r14
    2eec:	df 90       	pop	r13
    2eee:	cf 90       	pop	r12
    2ef0:	08 95       	ret

00002ef2 <macIsScanning>:
   @return True if MAC is scanning. False if MAC is not scanning.
 */
u8 macIsScanning(void)
{
   return scanInProcess;
}
    2ef2:	80 91 e4 13 	lds	r24, 0x13E4
    2ef6:	08 95       	ret

00002ef8 <macSetScanChannel>:
   @param channel The single channel to scan, or ALL_CHANNELS to scan
   all channels.
 */
void macSetScanChannel(u8 channel)
{
   scanChannel = channel;
    2ef8:	80 93 93 03 	sts	0x0393, r24
}
    2efc:	08 95       	ret

00002efe <macGetScanChannel>:
   @return The channel set by @ref macSetScanChannel().
 */
u8 macGetScanChannel(void)
{
   return scanChannel;
}
    2efe:	80 91 93 03 	lds	r24, 0x0393
    2f02:	08 95       	ret

00002f04 <mac_logPanDescriptors>:
   //u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;

   ftBeacon *frame = (ftBeacon *)(((rx_frame_t*)pFrame)->data);
   u8 lqi = ((rx_frame_t*)pFrame)->lqi;

   if (!scanInProcess)
    2f04:	80 91 e4 13 	lds	r24, 0x13E4
    2f08:	88 23       	and	r24, r24
    2f0a:	69 f0       	breq	.+26     	; 0x2f26 <mac_logPanDescriptors+0x22>
      return;

   if (NODETYPE == COORD)
   {
      // Energy scan, mark that this channel has a lot of interference
      energy.energy[energy.currentChannel] += 500;
    2f0c:	e0 91 e5 13 	lds	r30, 0x13E5
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	ee 0f       	add	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	eb 51       	subi	r30, 0x1B	; 27
    2f18:	fc 4e       	sbci	r31, 0xEC	; 236
    2f1a:	83 81       	ldd	r24, Z+3	; 0x03
    2f1c:	94 81       	ldd	r25, Z+4	; 0x04
    2f1e:	8c 50       	subi	r24, 0x0C	; 12
    2f20:	9e 4f       	sbci	r25, 0xFE	; 254
    2f22:	94 83       	std	Z+4, r25	; 0x04
    2f24:	83 83       	std	Z+3, r24	; 0x03
    2f26:	08 95       	ret

00002f28 <macFindClearChannel>:
   if (NODETYPE == COORD)
   {
      if (PAN_CHANNEL != CHANNEL255)
      {
         // In this mode, don't scan
         appClearChanFound(PAN_CHANNEL);
    2f28:	84 e1       	ldi	r24, 0x14	; 20
    2f2a:	0e 94 84 21 	call	0x4308	; 0x4308 <appClearChanFound>
         scanInProcess = true;

         energyScanCallback();
      }
   }
}
    2f2e:	08 95       	ret

00002f30 <macEdCallback>:
   if (NODETYPE == COORD)
   {
      // We have received an energy detect IRQ (ED_READY)

      // Accumulate the ED values.
      u8 e = hal_register_read(RG_PHY_ED_LEVEL);
    2f30:	87 e4       	ldi	r24, 0x47	; 71
    2f32:	91 e0       	ldi	r25, 0x01	; 1
    2f34:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_register_read>
      energy.energy[energy.currentChannel] += e;
    2f38:	e0 91 e5 13 	lds	r30, 0x13E5
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	eb 51       	subi	r30, 0x1B	; 27
    2f44:	fc 4e       	sbci	r31, 0xEC	; 236
    2f46:	23 81       	ldd	r18, Z+3	; 0x03
    2f48:	34 81       	ldd	r19, Z+4	; 0x04
    2f4a:	28 0f       	add	r18, r24
    2f4c:	31 1d       	adc	r19, r1
    2f4e:	34 83       	std	Z+4, r19	; 0x04
    2f50:	23 83       	std	Z+3, r18	; 0x03
      hal_register_write(RG_PHY_ED_LEVEL, 0);
    2f52:	87 e4       	ldi	r24, 0x47	; 71
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	60 e0       	ldi	r22, 0x00	; 0
    2f58:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>
   }
}
    2f5c:	08 95       	ret

00002f5e <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
 */
void mac_scanConfirm(void)
{
    2f5e:	1f 93       	push	r17
   // logicalChannel is used as flag to show that we received a valid beacon
   u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    2f60:	10 e0       	ldi	r17, 0x00	; 0
    2f62:	80 91 69 20 	lds	r24, 0x2069
    2f66:	8f 3f       	cpi	r24, 0xFF	; 255
    2f68:	e1 f0       	breq	.+56     	; 0x2fa2 <mac_scanConfirm+0x44>
    2f6a:	11 e0       	ldi	r17, 0x01	; 1

   if (gotbeacon)
   {
      // Save the panDescriptor data to the PIB's.
      macConfig.panId = panDescriptor.coorPANId;
    2f6c:	80 91 65 20 	lds	r24, 0x2065
    2f70:	90 91 66 20 	lds	r25, 0x2066
    2f74:	90 93 c9 1f 	sts	0x1FC9, r25
    2f78:	80 93 c8 1f 	sts	0x1FC8, r24
      macConfig.parentShortAddress = panDescriptor.coordAddr;
    2f7c:	20 91 67 20 	lds	r18, 0x2067
    2f80:	30 91 68 20 	lds	r19, 0x2068
    2f84:	30 93 cd 1f 	sts	0x1FCD, r19
    2f88:	20 93 cc 1f 	sts	0x1FCC, r18

      // Need to reset the PAN ID in the radio.
      radioSetPanId(macConfig.panId);
    2f8c:	0e 94 c2 19 	call	0x3384	; 0x3384 <radioSetPanId>

      macSetOperatingChannel(panDescriptor.logicalChannel);
    2f90:	80 91 69 20 	lds	r24, 0x2069
    2f94:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <macSetOperatingChannel>

      // We are one hop more than our (prospective) parent
      macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    2f98:	80 91 6d 20 	lds	r24, 0x206D
    2f9c:	8f 5f       	subi	r24, 0xFF	; 255
    2f9e:	80 93 d0 1f 	sts	0x1FD0, r24
   }
   // Confirm the scan, only if we have a valid coordinator
   appScanConfirm(gotbeacon);
    2fa2:	81 2f       	mov	r24, r17
    2fa4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <appScanConfirm>
}
    2fa8:	1f 91       	pop	r17
    2faa:	08 95       	ret

00002fac <setScanDurationTimer>:
   macConfig.currentChannel++;
}

void setScanDurationTimer(void)
{
   macSetAlarm(SCANDURATION, macScan);
    2fac:	84 e1       	ldi	r24, 0x14	; 20
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	6d ed       	ldi	r22, 0xDD	; 221
    2fb2:	77 e1       	ldi	r23, 0x17	; 23
    2fb4:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    2fb8:	08 95       	ret

00002fba <macScan>:
   timeout.

   When the entire scan is complete, the mac_scanConfirm() function is called.
 */
void macScan(void)
{
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <macScan+0xa>
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <macScan+0xc>
    2fc6:	0f 92       	push	r0
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
   @param channel The single channel to scan, or ALL_CHANNELS to scan
   all channels.
 */
void macSetScanChannel(u8 channel)
{
   scanChannel = channel;
    2fcc:	24 e1       	ldi	r18, 0x14	; 20
    2fce:	20 93 93 03 	sts	0x0393, r18
   // Check for fixed channel
   if (PAN_CHANNEL != CHANNEL255)
      macSetScanChannel(PAN_CHANNEL);

   // Set up some varibles on the initial call to macScan()
   if (0xFF == macConfig.currentChannel)
    2fd2:	90 91 d1 1f 	lds	r25, 0x1FD1
    2fd6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <macScan+0x22>
    2fda:	48 c0       	rjmp	.+144    	; 0x306c <macScan+0xb2>
   {
      scanInProcess = true;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	80 93 e4 13 	sts	0x13E4, r24

      // Reset the variables.
      memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    2fe2:	86 e1       	ldi	r24, 0x16	; 22
    2fe4:	e4 e6       	ldi	r30, 0x64	; 100
    2fe6:	f0 e2       	ldi	r31, 0x20	; 32
    2fe8:	df 01       	movw	r26, r30
    2fea:	1d 92       	st	X+, r1
    2fec:	8a 95       	dec	r24
    2fee:	e9 f7       	brne	.-6      	; 0x2fea <macScan+0x30>

      // logicalChannel is used as flag to show that we received a valid beacon
      panDescriptor.logicalChannel = 0xff;
    2ff0:	90 93 69 20 	sts	0x2069, r25

      macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x

      // Check for a single pre-defined channel to scan.
      if (scanChannel != ALL_CHANNELS)
         macConfig.currentChannel = scanChannel;
    2ff4:	20 93 d1 1f 	sts	0x1FD1, r18

      // Display the channel if it's a fixed channel
      if (PAN_CHANNEL != CHANNEL255)
      {
         debugMsgStr("Ch=0x");
    2ff8:	60 91 a0 26 	lds	r22, 0x26A0
    2ffc:	70 91 a1 26 	lds	r23, 0x26A1
    3000:	8f e6       	ldi	r24, 0x6F	; 111
    3002:	93 e0       	ldi	r25, 0x03	; 3
    3004:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
         debugMsgInt(PAN_CHANNEL);
    3008:	00 d0       	rcall	.+0      	; 0x300a <macScan+0x50>
    300a:	00 d0       	rcall	.+0      	; 0x300c <macScan+0x52>
    300c:	00 d0       	rcall	.+0      	; 0x300e <macScan+0x54>
    300e:	ed b7       	in	r30, 0x3d	; 61
    3010:	fe b7       	in	r31, 0x3e	; 62
    3012:	31 96       	adiw	r30, 0x01	; 1
    3014:	06 ed       	ldi	r16, 0xD6	; 214
    3016:	1f e1       	ldi	r17, 0x1F	; 31
    3018:	ad b7       	in	r26, 0x3d	; 61
    301a:	be b7       	in	r27, 0x3e	; 62
    301c:	12 96       	adiw	r26, 0x02	; 2
    301e:	1c 93       	st	X, r17
    3020:	0e 93       	st	-X, r16
    3022:	11 97       	sbiw	r26, 0x01	; 1
    3024:	85 e7       	ldi	r24, 0x75	; 117
    3026:	93 e0       	ldi	r25, 0x03	; 3
    3028:	93 83       	std	Z+3, r25	; 0x03
    302a:	82 83       	std	Z+2, r24	; 0x02
    302c:	84 e1       	ldi	r24, 0x14	; 20
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	95 83       	std	Z+5, r25	; 0x05
    3032:	84 83       	std	Z+4, r24	; 0x04
    3034:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	80 91 a0 26 	lds	r24, 0x26A0
    3040:	90 91 a1 26 	lds	r25, 0x26A1
    3044:	ed b7       	in	r30, 0x3d	; 61
    3046:	fe b7       	in	r31, 0x3e	; 62
    3048:	92 83       	std	Z+2, r25	; 0x02
    304a:	81 83       	std	Z+1, r24	; 0x01
    304c:	14 83       	std	Z+4, r17	; 0x04
    304e:	03 83       	std	Z+3, r16	; 0x03
    3050:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
         debugMsgStr("\r\n");
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	60 91 a0 26 	lds	r22, 0x26A0
    3060:	70 91 a1 26 	lds	r23, 0x26A1
    3064:	88 e7       	ldi	r24, 0x78	; 120
    3066:	93 e0       	ldi	r25, 0x03	; 3
    3068:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
      // Not first time through, must sleep very low power nodes.
      if (VLP && (NODETYPE == ENDDEVICE))
         nodeSleep(SCAN_SLEEP_TIME);

   // See if we're done scanning
   if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    306c:	40 91 d1 1f 	lds	r20, 0x1FD1
    3070:	4b 31       	cpi	r20, 0x1B	; 27
    3072:	48 f4       	brcc	.+18     	; 0x3086 <macScan+0xcc>
    3074:	24 2f       	mov	r18, r20
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	80 91 93 03 	lds	r24, 0x0393
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	01 96       	adiw	r24, 0x01	; 1
    3080:	28 17       	cp	r18, r24
    3082:	39 07       	cpc	r19, r25
    3084:	61 f4       	brne	.+24     	; 0x309e <macScan+0xe4>
         macConfig.currentChannel == scanChannel + 1)
   {
      // done scanning
      scanInProcess = false;
    3086:	10 92 e4 13 	sts	0x13E4, r1
      macConfig.currentChannel = 0xFF;
    308a:	8f ef       	ldi	r24, 0xFF	; 255
    308c:	80 93 d1 1f 	sts	0x1FD1, r24

      mac_scanConfirm();
    3090:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <mac_scanConfirm>
      UART_PRINT(" -> DONE WITH SCANNING\r\n");
    3094:	8b e7       	ldi	r24, 0x7B	; 123
    3096:	93 e0       	ldi	r25, 0x03	; 3
    3098:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
    309c:	31 c0       	rjmp	.+98     	; 0x3100 <macScan+0x146>
      return;
   }

   // Set the channel.
   macSetOperatingChannel(macConfig.currentChannel);
    309e:	84 2f       	mov	r24, r20
    30a0:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <macSetOperatingChannel>
   initialized, and the channel set to a valid value.  The beacon
   request is normally called as part of a channel scan.
 */
static void sendBeaconRequest(void)
{
   uint8_t* pFrame = bmm_buffer_alloc();
    30a4:	0e 94 ca 28 	call	0x5194	; 0x5194 <bmm_buffer_alloc>
    30a8:	dc 01       	movw	r26, r24

   if(pFrame != NULL)
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	21 f1       	breq	.+72     	; 0x30f6 <macScan+0x13c>
   {
      ftBeaconReq *brFrame = (ftBeaconReq*)(((rx_frame_t*)pFrame)->data);
    30ae:	fc 01       	movw	r30, r24
    30b0:	31 96       	adiw	r30, 0x01	; 1
      // Create a struct pointer to the global variable...

      // Fill in beacon request frame
      brFrame->fcf = FCF_BEACONREQ;
    30b2:	83 e0       	ldi	r24, 0x03	; 3
    30b4:	98 e0       	ldi	r25, 0x08	; 8
    30b6:	12 96       	adiw	r26, 0x02	; 2
    30b8:	9c 93       	st	X, r25
    30ba:	8e 93       	st	-X, r24
    30bc:	11 97       	sbiw	r26, 0x01	; 1
      brFrame->seq = macConfig.bsn++;
    30be:	80 91 c6 1f 	lds	r24, 0x1FC6
    30c2:	82 83       	std	Z+2, r24	; 0x02
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	80 93 c6 1f 	sts	0x1FC6, r24
      brFrame->panid = PAN_ID;
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
    30cc:	9f ef       	ldi	r25, 0xFF	; 255
    30ce:	94 83       	std	Z+4, r25	; 0x04
    30d0:	83 83       	std	Z+3, r24	; 0x03
      brFrame->broadcastAddr = BROADCASTADDR;
    30d2:	96 83       	std	Z+6, r25	; 0x06
    30d4:	85 83       	std	Z+5, r24	; 0x05
      brFrame->cmd = BEACON_REQUEST;
    30d6:	87 e0       	ldi	r24, 0x07	; 7
    30d8:	87 83       	std	Z+7, r24	; 0x07

      ((rx_frame_t*)pFrame)->length = sizeof(ftBeaconReq);
    30da:	88 e0       	ldi	r24, 0x08	; 8
    30dc:	8c 93       	st	X, r24

      event_object_t event;
      event.event = MAC_EVENT_SEND;
    30de:	8a e1       	ldi	r24, 0x1A	; 26
    30e0:	89 83       	std	Y+1, r24	; 0x01
      event.data = pFrame;
    30e2:	bb 83       	std	Y+3, r27	; 0x03
    30e4:	aa 83       	std	Y+2, r26	; 0x02
      event.callback = &setScanDurationTimer;
    30e6:	86 ed       	ldi	r24, 0xD6	; 214
    30e8:	97 e1       	ldi	r25, 0x17	; 23
    30ea:	9d 83       	std	Y+5, r25	; 0x05
    30ec:	8c 83       	std	Y+4, r24	; 0x04

      // save Event
      mac_put_event(&event);
    30ee:	ce 01       	movw	r24, r28
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>

   // Send the beacon request
   sendBeaconRequest();

   // Beacon was send, increment channel to prepare for the next one.
   macConfig.currentChannel++;
    30f6:	80 91 d1 1f 	lds	r24, 0x1FD1
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	80 93 d1 1f 	sts	0x1FD1, r24
}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	08 95       	ret

00003114 <macStartCoord>:
   device in the network.

   @ingroup mac
*/
void macStartCoord(void)
{
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
        // Generate a random PANID and stick into the radio.
        if(PAN_ID != BROADCASTPANID)
            panid = PAN_ID;
        else
        {
            panid = radioRandom(8);
    311c:	88 e0       	ldi	r24, 0x08	; 8
    311e:	0e 94 8f 1a 	call	0x351e	; 0x351e <radioRandom>
            panid <<= 8;
    3122:	f8 2e       	mov	r15, r24
    3124:	ee 24       	eor	r14, r14
            panid |= radioRandom(8);
    3126:	88 e0       	ldi	r24, 0x08	; 8
    3128:	0e 94 8f 1a 	call	0x351e	; 0x351e <radioRandom>
    312c:	08 2f       	mov	r16, r24
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	0e 29       	or	r16, r14
    3132:	1f 29       	or	r17, r15
        }
        
        radioSetPanId(panid);
    3134:	c8 01       	movw	r24, r16
    3136:	0e 94 c2 19 	call	0x3384	; 0x3384 <radioSetPanId>
        macConfig.panId = panid;
    313a:	10 93 c9 1f 	sts	0x1FC9, r17
    313e:	00 93 c8 1f 	sts	0x1FC8, r16

        // Generate a random short address and stick into the radio.
        radioSetShortAddress(DEFAULT_COORD_ADDR);
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	0e 94 b4 19 	call	0x3368	; 0x3368 <radioSetShortAddress>
        macConfig.shortAddress = DEFAULT_COORD_ADDR;
    314a:	10 92 cb 1f 	sts	0x1FCB, r1
    314e:	10 92 ca 1f 	sts	0x1FCA, r1
    }
}
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ff 90       	pop	r15
    3158:	ef 90       	pop	r14
    315a:	08 95       	ret

0000315c <main>:
int main(void) {
	// make sure external memory interface is enabled (only ATmega1281)
	XRAM_ENABLE();

	// Init USB (for serial communication)
	usb_init();
    315c:	0e 94 c9 30 	call	0x6192	; 0x6192 <usb_init>

	// Init Buffer Management Module (buffer for rx and tx messages)
	bmm_buffer_init();
    3160:	0e 94 ba 28 	call	0x5174	; 0x5174 <bmm_buffer_init>

	// switch off LED's
#ifndef RCB_BREAKOUT
	led_set(PLATFORM_STB, STB_LED_0, PLATFORM_LED_OFF);
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	42 e0       	ldi	r20, 0x02	; 2
    316a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <led_set>
	led_set(PLATFORM_STB, STB_LED_1, PLATFORM_LED_OFF);
    316e:	82 e0       	ldi	r24, 0x02	; 2
    3170:	61 e0       	ldi	r22, 0x01	; 1
    3172:	42 e0       	ldi	r20, 0x02	; 2
    3174:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <led_set>
#endif
	led_set(PLATFORM_RCB, RCB_LED_0, PLATFORM_LED_OFF);
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	62 e0       	ldi	r22, 0x02	; 2
    317c:	42 e0       	ldi	r20, 0x02	; 2
    317e:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <led_set>
	led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_OFF);
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	63 e0       	ldi	r22, 0x03	; 3
    3186:	42 e0       	ldi	r20, 0x02	; 2
    3188:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <led_set>
	led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	64 e0       	ldi	r22, 0x04	; 4
    3190:	42 e0       	ldi	r20, 0x02	; 2
    3192:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <led_set>

	// Setup clock speed
	halSetupClock();
    3196:	0e 94 a9 0b 	call	0x1752	; 0x1752 <halSetupClock>

#if defined(UART_DEBUG) || defined(COMMUNICATION_UART)
	//uart_init(38400);  // init UART hardware (other possible values: 9600, 115200)
	uart_init(115200); // init UART hardware (other possible values: 9600, 115200)
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	72 ec       	ldi	r23, 0xC2	; 194
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 6f 30 	call	0x60de	; 0x60de <uart_init>
#endif

	// init HDLC layer (frame tagging)
	hdlc_init();
    31a6:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <hdlc_init>

	// init serial
	if (SERIAL) {
		serial_init(NULL);
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 06 23 	call	0x460c	; 0x460c <serial_init>
	}

	// Init the timer system for the MAC
	timerInit();
    31b2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <timerInit>

	// Init the (sample) application rum_application
	//appInit();

	// Init sensor_network application
	app_init();
    31b6:	0e 94 42 26 	call	0x4c84	; 0x4c84 <app_init>
	evaluate_status_request(); // is called via macSetAlarm() every 10000ms
#endif

#endif // ROUTERNODE || ENDNODE
#ifdef COORDNODE
	send_quality_request(); // is called via macSetAlarm() every 5000 ms
    31ba:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <send_quality_request>
#ifdef STATUS_DEBUG
	init_status_timer(); // init timestamp (free running timer) unit
	status_timer_enable(); // start timestamp unit
#endif

	UART_PRINT("Init completed\r\n");
    31be:	84 e9       	ldi	r24, 0x94	; 148
    31c0:	93 e0       	ldi	r25, 0x03	; 3
    31c2:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
	// Main forever loop for the application.
	for (;;) {
		// Turn interrupts on if they are off.  They should always be on
		// at this point in the loop, so just turn them on every time, in
		// case interrupts were inadvertently turned off elsewhere.
		sei();
    31c6:	78 94       	sei
		// Task functions called from main loop.  Either add your own task loop
		// or edit the example appTask().
		//appTask();

		//Task von Simon
		loopTask();
    31c8:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <loopTask>
		macTask();
    31cc:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <macTask>
    31d0:	fa cf       	rjmp	.-12     	; 0x31c6 <main+0x6a>

000031d2 <radioGetSavedRssiValue>:
   Input Signal Strength (in dBm) = -90dBm + (3 * RSSI - 1)
 */
u8 radioGetSavedRssiValue(void)
{
   return rssi_val;
}
    31d2:	80 91 1f 14 	lds	r24, 0x141F
    31d6:	08 95       	ret

000031d8 <radioGetSavedLqiValue>:
   @return The LQI value, which ranges from 0 to 255.
 */
u8 radioGetSavedLqiValue(void)
{
   return lastLQI;
}
    31d8:	80 91 21 14 	lds	r24, 0x1421
    31dc:	08 95       	ret

000031de <radioGetSavedEDValue>:

   @return The ED value, which ranges from 0 to 84.
 */
//TODO added to get saved ed level value in dB
int8_t radioGetSavedEDValue(void)
{
    31de:	80 91 20 14 	lds	r24, 0x1420
   return (RSSI_BASE_VAL + ed_val);
}
    31e2:	8b 55       	subi	r24, 0x5B	; 91
    31e4:	08 95       	ret

000031e6 <radioGetClockSpeed>:
#ifdef SINGLE_CHIP
   return 0; // there is no clcok speed setting available on 128rfa1
#else
   return hal_subregister_read(SR_CLKM_CTRL);
#endif
}
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	08 95       	ret

000031ea <radioSetClockSpeed>:
      hal_subregister_write(SR_CLKM_SHA_SEL, 0);

   hal_subregister_write(SR_CLKM_CTRL, clock_speed);
#endif
   return RADIO_SUCCESS;
}
    31ea:	80 e4       	ldi	r24, 0x40	; 64
    31ec:	08 95       	ret

000031ee <radioResetTrx>:
 *
 *  \ingroup radio
 */
void radioResetTrx(void)
{
   hal_set_rst_low();
    31ee:	e9 e3       	ldi	r30, 0x39	; 57
    31f0:	f1 e0       	ldi	r31, 0x01	; 1
    31f2:	80 81       	ld	r24, Z
    31f4:	8e 7f       	andi	r24, 0xFE	; 254
    31f6:	80 83       	st	Z, r24
   hal_set_slptr_low();
    31f8:	80 81       	ld	r24, Z
    31fa:	8d 7f       	andi	r24, 0xFD	; 253
    31fc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fe:	8d e0       	ldi	r24, 0x0D	; 13
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <radioResetTrx+0x14>
   delay_us(TIME_RESET);
   hal_set_rst_high();
    3206:	80 81       	ld	r24, Z
    3208:	81 60       	ori	r24, 0x01	; 1
    320a:	80 83       	st	Z, r24
}
    320c:	08 95       	ret

0000320e <radioSetBoost>:
void radioSetBoost(u8 boost)
{
   if (BAND == BAND900)
   {
   }
}
    320e:	08 95       	ret

00003210 <radioSetModulation>:
{
   // create an enum of monulation types.
   if (BAND == BAND900)
   {
   }
}
    3210:	08 95       	ret

00003212 <radioSetup900>:
         }
      }
      // Turn up the backoff times
      hal_register_write(RG_CSMA_BE, 0xfa);
   }
}
    3212:	08 95       	ret

00003214 <radioGetTrxState>:
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    3214:	81 e4       	ldi	r24, 0x41	; 65
    3216:	91 e0       	ldi	r25, 0x01	; 1
    3218:	6f e1       	ldi	r22, 0x1F	; 31
    321a:	40 e0       	ldi	r20, 0x00	; 0
    321c:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    3220:	08 95       	ret

00003222 <radioIsBusy>:
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    3222:	81 e4       	ldi	r24, 0x41	; 65
    3224:	91 e0       	ldi	r25, 0x01	; 1
    3226:	6f e1       	ldi	r22, 0x1F	; 31
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    322e:	28 2f       	mov	r18, r24
u8 radioIsBusy(void)
{
   u8 state;

   state = radioGetTrxState();
   return (state == BUSY_RX_AACK ||
    3230:	81 51       	subi	r24, 0x11	; 17
    3232:	82 30       	cpi	r24, 0x02	; 2
    3234:	58 f0       	brcs	.+22     	; 0x324c <radioIsBusy+0x2a>
    3236:	22 30       	cpi	r18, 0x02	; 2
    3238:	49 f0       	breq	.+18     	; 0x324c <radioIsBusy+0x2a>
    323a:	21 30       	cpi	r18, 0x01	; 1
    323c:	39 f0       	breq	.+14     	; 0x324c <radioIsBusy+0x2a>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	21 31       	cpi	r18, 0x11	; 17
    3244:	29 f4       	brne	.+10     	; 0x3250 <radioIsBusy+0x2e>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	08 95       	ret
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
         state == BUSY_TX_ARET ||
         state == BUSY_TX ||
         state == BUSY_RX ||
         state == BUSY_RX_AACK_NOCLK);
}
    3250:	08 95       	ret

00003252 <radioLeaveSleepMode>:
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    3252:	80 91 39 01 	lds	r24, 0x0139
    3256:	81 fd       	sbrc	r24, 1
    3258:	02 c0       	rjmp	.+4      	; 0x325e <radioLeaveSleepMode+0xc>
    325a:	80 e4       	ldi	r24, 0x40	; 64
   //Ensure that the radio transceiver is in the TRX_OFF state.
   if (radioGetTrxState() == TRX_OFF)
      leave_sleep_status = RADIO_SUCCESS;

   return leave_sleep_status;
}
    325c:	08 95       	ret
{
   //Check if the radio transceiver is actually sleeping.
   if (isSleeping() == false)
      return RADIO_SUCCESS;

   hal_set_slptr_low();
    325e:	80 91 39 01 	lds	r24, 0x0139
    3262:	8d 7f       	andi	r24, 0xFD	; 253
    3264:	80 93 39 01 	sts	0x0139, r24
    3268:	81 ee       	ldi	r24, 0xE1	; 225
    326a:	96 e0       	ldi	r25, 0x06	; 6
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <radioLeaveSleepMode+0x1a>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    3270:	81 e4       	ldi	r24, 0x41	; 65
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	6f e1       	ldi	r22, 0x1F	; 31
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>

   //Ensure CLKM is OFF
   radioSetClockSpeed(true, CLKM_DISABLED);

   //Ensure that the radio transceiver is in the TRX_OFF state.
   if (radioGetTrxState() == TRX_OFF)
    327c:	88 30       	cpi	r24, 0x08	; 8
    327e:	69 f3       	breq	.-38     	; 0x325a <radioLeaveSleepMode+0x8>
    3280:	83 e4       	ldi	r24, 0x43	; 67
    3282:	08 95       	ret

00003284 <radioGetRssiValue>:
 *  \retval RADIO_WRONG_STATE The radio transceiver is not in RX_ON or BUSY_RX.
 *
 *  \ingroup radio
 */
radio_status_t radioGetRssiValue(u8 *rssi)
{
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	ec 01       	movw	r28, r24
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    328a:	81 e4       	ldi	r24, 0x41	; 65
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	6f e1       	ldi	r22, 0x1F	; 31
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>

   u8 current_state = radioGetTrxState();
   radio_status_t retval = RADIO_WRONG_STATE;

   /*The RSSI measurement should only be done in RX_ON or BUSY_RX.*/
   if ((current_state == RX_ON) ||
    3296:	86 30       	cpi	r24, 0x06	; 6
    3298:	21 f0       	breq	.+8      	; 0x32a2 <radioGetRssiValue+0x1e>
    329a:	81 30       	cpi	r24, 0x01	; 1
    329c:	11 f0       	breq	.+4      	; 0x32a2 <radioGetRssiValue+0x1e>
    329e:	84 e4       	ldi	r24, 0x44	; 68
    32a0:	08 c0       	rjmp	.+16     	; 0x32b2 <radioGetRssiValue+0x2e>
         (current_state == BUSY_RX))
   {
      *rssi = hal_subregister_read(SR_RSSI);
    32a2:	86 e4       	ldi	r24, 0x46	; 70
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	6f e1       	ldi	r22, 0x1F	; 31
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    32ae:	88 83       	st	Y, r24
    32b0:	80 e4       	ldi	r24, 0x40	; 64
      retval = RADIO_SUCCESS;
   }

   return retval;
}
    32b2:	df 91       	pop	r29
    32b4:	cf 91       	pop	r28
    32b6:	08 95       	ret

000032b8 <radioBatmonGetStatus>:
radio_status_t radioBatmonGetStatus(void)
{

   radio_status_t batmon_status = RADIO_BAT_LOW;

   if (hal_subregister_read(SR_BATMON_OK) !=
    32b8:	81 e5       	ldi	r24, 0x51	; 81
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	60 e2       	ldi	r22, 0x20	; 32
    32be:	45 e0       	ldi	r20, 0x05	; 5
    32c0:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    32c4:	88 23       	and	r24, r24
    32c6:	11 f0       	breq	.+4      	; 0x32cc <radioBatmonGetStatus+0x14>
    32c8:	8b e4       	ldi	r24, 0x4B	; 75
    32ca:	08 95       	ret
    32cc:	8a e4       	ldi	r24, 0x4A	; 74
         BATTERY_MONITOR_VOLTAGE_UNDER_THRESHOLD)
      batmon_status = RADIO_BAT_OK;

   return batmon_status;
}
    32ce:	08 95       	ret

000032d0 <radioBatmonGetVoltageRange>:
 *
 *  \ingroup radio
 */
u8 radioBatmonGetVoltageRange(void)
{
   return hal_subregister_read(SR_BATMON_HR);
    32d0:	81 e5       	ldi	r24, 0x51	; 81
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	60 e1       	ldi	r22, 0x10	; 16
    32d6:	44 e0       	ldi	r20, 0x04	; 4
    32d8:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    32dc:	08 95       	ret

000032de <radioBatmonGetVoltageThreshold>:
 *
 *  \ingroup radio
 */
u8 radioBatmonGetVoltageThreshold(void)
{
   return hal_subregister_read(SR_BATMON_VTH);
    32de:	81 e5       	ldi	r24, 0x51	; 81
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	6f e0       	ldi	r22, 0x0F	; 15
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    32ea:	08 95       	ret

000032ec <radioGetEdThreshold>:
 *
 *  \ingroup radio
 */
u8 radioGetEdThreshold(void)
{
   return hal_subregister_read(SR_CCA_ED_THRES);
    32ec:	89 e4       	ldi	r24, 0x49	; 73
    32ee:	91 e0       	ldi	r25, 0x01	; 1
    32f0:	6f e0       	ldi	r22, 0x0F	; 15
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    32f8:	08 95       	ret

000032fa <radioGetCcaMode>:
 *
 *  \ingroup radio
 */
u8 radioGetCcaMode(void)
{
   return hal_subregister_read(SR_CCA_MODE);
    32fa:	88 e4       	ldi	r24, 0x48	; 72
    32fc:	91 e0       	ldi	r25, 0x01	; 1
    32fe:	60 e6       	ldi	r22, 0x60	; 96
    3300:	45 e0       	ldi	r20, 0x05	; 5
    3302:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    3306:	08 95       	ret

00003308 <radioGetTxPowerLevel>:
 *
 *  \ingroup radio
 */
u8 radioGetTxPowerLevel(void)
{
   return hal_subregister_read(SR_TX_PWR);
    3308:	85 e4       	ldi	r24, 0x45	; 69
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	6f e0       	ldi	r22, 0x0F	; 15
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    3314:	08 95       	ret

00003316 <radioGetOperatingChannel>:
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    3316:	88 e4       	ldi	r24, 0x48	; 72
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	6f e1       	ldi	r22, 0x1F	; 31
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
}
    3322:	08 95       	ret

00003324 <radioRxStartEvent>:
   @param frame_length The length of the frame that is being received.
 */
void radioRxStartEvent(u8 const frame_length)
{
   // save away RSSI
   rssi_val =  hal_subregister_read( SR_RSSI );
    3324:	86 e4       	ldi	r24, 0x46	; 70
    3326:	91 e0       	ldi	r25, 0x01	; 1
    3328:	6f e1       	ldi	r22, 0x1F	; 31
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    3330:	80 93 1f 14 	sts	0x141F, r24

   //UART_PRINT("  -> frame length: %d and RSSI: %d\r\n", frame_length, rssi_val);

   macConfig.busy = false;
    3334:	10 92 d4 1f 	sts	0x1FD4, r1
}
    3338:	08 95       	ret

0000333a <radioSetExtendedAddress>:
 *  \param  extended_address Extended address to be used by the address filter.
 *
 *  \ingroup radio
 */
void radioSetExtendedAddress(u8 *extended_address)
{
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	8c 01       	movw	r16, r24
    3344:	c4 e6       	ldi	r28, 0x64	; 100
    3346:	d1 e0       	ldi	r29, 0x01	; 1
   u8 i;

   for (i=0;i<8;i++)
   {
      hal_register_write(RG_IEEE_ADDR_0+i, *extended_address++);
    3348:	f8 01       	movw	r30, r16
    334a:	61 91       	ld	r22, Z+
    334c:	8f 01       	movw	r16, r30
    334e:	ce 01       	movw	r24, r28
    3350:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>
    3354:	21 96       	adiw	r28, 0x01	; 1
 */
void radioSetExtendedAddress(u8 *extended_address)
{
   u8 i;

   for (i=0;i<8;i++)
    3356:	f1 e0       	ldi	r31, 0x01	; 1
    3358:	cc 36       	cpi	r28, 0x6C	; 108
    335a:	df 07       	cpc	r29, r31
    335c:	a9 f7       	brne	.-22     	; 0x3348 <radioSetExtendedAddress+0xe>
   {
      hal_register_write(RG_IEEE_ADDR_0+i, *extended_address++);
   }
}
    335e:	df 91       	pop	r29
    3360:	cf 91       	pop	r28
    3362:	1f 91       	pop	r17
    3364:	0f 91       	pop	r16
    3366:	08 95       	ret

00003368 <radioSetShortAddress>:
 *  \param  new_short_address Short address to be used by the address filter.
 *
 *  \ingroup radio
 */
void radioSetShortAddress(u16 new_short_address)
{
    3368:	1f 93       	push	r17
    336a:	68 2f       	mov	r22, r24
    336c:	19 2f       	mov	r17, r25

   u8 short_address_byte = new_short_address & 0xFF; // Extract short_address_7_0.
   hal_register_write(RG_SHORT_ADDR_0, short_address_byte);
    336e:	80 e6       	ldi	r24, 0x60	; 96
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>

   short_address_byte = (new_short_address >> 8*1) & 0xFF; // Extract short_address_15_8.
   hal_register_write(RG_SHORT_ADDR_1, short_address_byte);
    3376:	81 e6       	ldi	r24, 0x61	; 97
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	61 2f       	mov	r22, r17
    337c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>
}
    3380:	1f 91       	pop	r17
    3382:	08 95       	ret

00003384 <radioSetPanId>:
 *  \param  new_pan_id Desired PANID. Can be any value from 0x0000 to 0xFFFF
 *
 *  \ingroup radio
 */
void radioSetPanId(u16 new_pan_id)
{
    3384:	1f 93       	push	r17
    3386:	68 2f       	mov	r22, r24
    3388:	19 2f       	mov	r17, r25

   u8 pan_byte = new_pan_id & 0xFF; // Extract new_pan_id_7_0.
   hal_register_write(RG_PAN_ID_0, pan_byte);
    338a:	82 e6       	ldi	r24, 0x62	; 98
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>

   pan_byte = (new_pan_id >> 8*1) & 0xFF;  // Extract new_pan_id_15_8.
   hal_register_write(RG_PAN_ID_1, pan_byte);
    3392:	83 e6       	ldi	r24, 0x63	; 99
    3394:	91 e0       	ldi	r25, 0x01	; 1
    3396:	61 2f       	mov	r22, r17
    3398:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>
}
    339c:	1f 91       	pop	r17
    339e:	08 95       	ret

000033a0 <radioSetDeviceRole>:
 *                              transceiver's address filter.
 *                              False disables the same feature.
 *  \ingroup radio
 */
void radioSetDeviceRole(bool i_am_coordinator)
{
    33a0:	28 2f       	mov	r18, r24
   hal_subregister_write(SR_I_AM_COORD, i_am_coordinator);
    33a2:	8e e6       	ldi	r24, 0x6E	; 110
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	68 e0       	ldi	r22, 0x08	; 8
    33a8:	43 e0       	ldi	r20, 0x03	; 3
    33aa:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
}
    33ae:	08 95       	ret

000033b0 <radioUseAutoTxCrc>:
 *                      false, the automatic CRC will be disabled.
 *
 *  \ingroup radio
 */
void radioUseAutoTxCrc(bool auto_crc_on)
{
    33b0:	28 2f       	mov	r18, r24
   /*
    * if SINGLE CHIP is used this is the default setting
    * SR_TX_AUTO_CRC_ON is mapped to correct register place
    */
   else
      hal_subregister_write(SR_TX_AUTO_CRC_ON, auto_crc_on == true);
    33b2:	84 e4       	ldi	r24, 0x44	; 68
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	60 e2       	ldi	r22, 0x20	; 32
    33b8:	45 e0       	ldi	r20, 0x05	; 5
    33ba:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
}
    33be:	08 95       	ret

000033c0 <radioResetStateMachine>:
 *
 *  \ingroup radio
 */
void radioResetStateMachine(void)
{
   hal_set_slptr_low();
    33c0:	e9 e3       	ldi	r30, 0x39	; 57
    33c2:	f1 e0       	ldi	r31, 0x01	; 1
    33c4:	80 81       	ld	r24, Z
    33c6:	8d 7f       	andi	r24, 0xFD	; 253
    33c8:	80 83       	st	Z, r24
    33ca:	8d e0       	ldi	r24, 0x0D	; 13
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	01 97       	sbiw	r24, 0x01	; 1
    33d0:	f1 f7       	brne	.-4      	; 0x33ce <radioResetStateMachine+0xe>
   delay_us(TIME_NOCLK_TO_WAKE);
   hal_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    33d2:	82 e4       	ldi	r24, 0x42	; 66
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	6f e1       	ldi	r22, 0x1F	; 31
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	23 e0       	ldi	r18, 0x03	; 3
    33dc:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <radioResetStateMachine+0x24>
   delay_us(TIME_CMD_FORCE_TRX_OFF);
}
    33e8:	08 95       	ret

000033ea <radioEnterSleepMode>:
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    33ea:	80 91 39 01 	lds	r24, 0x0139
    33ee:	81 ff       	sbrs	r24, 1
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <radioEnterSleepMode+0xc>
    33f2:	80 e4       	ldi	r24, 0x40	; 64
    33f4:	08 95       	ret
radio_status_t radioEnterSleepMode(void)
{
   if (isSleeping() == true)
      return RADIO_SUCCESS;

   radioResetStateMachine(); //Force the device into TRX_OFF.
    33f6:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <radioResetStateMachine>
    33fa:	8b e4       	ldi	r24, 0x4B	; 75
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <radioEnterSleepMode+0x14>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    3402:	81 e4       	ldi	r24, 0x41	; 65
    3404:	91 e0       	ldi	r25, 0x01	; 1
    3406:	6f e1       	ldi	r22, 0x1F	; 31
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>

   delay_us(TIME_RESET_TRX_OFF);

   radio_status_t enter_sleep_status = RADIO_TIMED_OUT;

   if (radioGetTrxState() == TRX_OFF)
    340e:	88 30       	cpi	r24, 0x08	; 8
    3410:	11 f0       	breq	.+4      	; 0x3416 <radioEnterSleepMode+0x2c>
    3412:	83 e4       	ldi	r24, 0x43	; 67
    3414:	08 95       	ret
   {
      //Enter Sleep.
      hal_set_slptr_high();
    3416:	80 91 39 01 	lds	r24, 0x0139
    341a:	82 60       	ori	r24, 0x02	; 2
    341c:	80 93 39 01 	sts	0x0139, r24
    3420:	80 e4       	ldi	r24, 0x40	; 64
      enter_sleep_status = RADIO_SUCCESS;
   }

   return enter_sleep_status;
}
    3422:	08 95       	ret

00003424 <radioBatmonConfigure>:
 *  \retval RADIO_INVALID_ARGUMENT The voltage_threshold parameter is out of
 *                               bounds (Not within [0 - 15]).
 *  \ingroup radio
 */
radio_status_t radioBatmonConfigure(bool range, u8 voltage_threshold)
{
    3424:	1f 93       	push	r17
    3426:	98 2f       	mov	r25, r24
    3428:	16 2f       	mov	r17, r22

   /*Check function parameters and state.*/
   if (voltage_threshold > BATTERY_MONITOR_HIGHEST_VOLTAGE)
    342a:	60 31       	cpi	r22, 0x10	; 16
    342c:	10 f0       	brcs	.+4      	; 0x3432 <radioBatmonConfigure+0xe>
    342e:	82 e4       	ldi	r24, 0x42	; 66
    3430:	1d c0       	rjmp	.+58     	; 0x346c <radioBatmonConfigure+0x48>
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    3432:	80 91 39 01 	lds	r24, 0x0139
    3436:	81 ff       	sbrs	r24, 1
    3438:	02 c0       	rjmp	.+4      	; 0x343e <radioBatmonConfigure+0x1a>
    343a:	84 e4       	ldi	r24, 0x44	; 68
    343c:	17 c0       	rjmp	.+46     	; 0x346c <radioBatmonConfigure+0x48>

   if (isSleeping() == true)
      return RADIO_WRONG_STATE;

   /*Write new voltage range and voltage level.*/
   if (range == true)
    343e:	99 23       	and	r25, r25
    3440:	31 f0       	breq	.+12     	; 0x344e <radioBatmonConfigure+0x2a>
      hal_subregister_write(SR_BATMON_HR, BATTERY_MONITOR_HIGH_VOLTAGE);
    3442:	81 e5       	ldi	r24, 0x51	; 81
    3444:	91 e0       	ldi	r25, 0x01	; 1
    3446:	60 e1       	ldi	r22, 0x10	; 16
    3448:	44 e0       	ldi	r20, 0x04	; 4
    344a:	21 e0       	ldi	r18, 0x01	; 1
    344c:	05 c0       	rjmp	.+10     	; 0x3458 <radioBatmonConfigure+0x34>
   else
      hal_subregister_write(SR_BATMON_HR, BATTERY_MONITOR_LOW_VOLTAGE);
    344e:	81 e5       	ldi	r24, 0x51	; 81
    3450:	91 e0       	ldi	r25, 0x01	; 1
    3452:	60 e1       	ldi	r22, 0x10	; 16
    3454:	44 e0       	ldi	r20, 0x04	; 4
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>

   hal_subregister_write(SR_BATMON_VTH, voltage_threshold);
    345c:	81 e5       	ldi	r24, 0x51	; 81
    345e:	91 e0       	ldi	r25, 0x01	; 1
    3460:	6f e0       	ldi	r22, 0x0F	; 15
    3462:	40 e0       	ldi	r20, 0x00	; 0
    3464:	21 2f       	mov	r18, r17
    3466:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
    346a:	80 e4       	ldi	r24, 0x40	; 64

   return RADIO_SUCCESS;
}
    346c:	1f 91       	pop	r17
    346e:	08 95       	ret

00003470 <radioSetTxPowerLevel>:
 *                          device is sleeping.
 *
 *  \ingroup radio
 */
radio_status_t radioSetTxPowerLevel(u8 power_level)
{
    3470:	28 2f       	mov	r18, r24

   /*Check function parameter and state.*/
   if (power_level > TX_PWR_17_2DBM)
    3472:	80 31       	cpi	r24, 0x10	; 16
    3474:	10 f0       	brcs	.+4      	; 0x347a <radioSetTxPowerLevel+0xa>
    3476:	82 e4       	ldi	r24, 0x42	; 66
    3478:	08 95       	ret
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    347a:	80 91 39 01 	lds	r24, 0x0139
    347e:	81 ff       	sbrs	r24, 1
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <radioSetTxPowerLevel+0x16>
    3482:	84 e4       	ldi	r24, 0x44	; 68
    3484:	08 95       	ret

   if (isSleeping() == true)
      return RADIO_WRONG_STATE;

   /*Set new power level*/
   hal_subregister_write(SR_TX_PWR, power_level);
    3486:	85 e4       	ldi	r24, 0x45	; 69
    3488:	91 e0       	ldi	r25, 0x01	; 1
    348a:	6f e0       	ldi	r22, 0x0F	; 15
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
    3492:	80 e4       	ldi	r24, 0x40	; 64

   return RADIO_SUCCESS;
}
    3494:	08 95       	ret

00003496 <radioSetOperatingChannel>:
 *  \retval RADIO_TIMED_OUT The PLL did not lock within the specified time.
 *
 *  \ingroup radio
 */
radio_status_t radioSetOperatingChannel(u8 channel)
{
    3496:	1f 93       	push	r17
    3498:	18 2f       	mov	r17, r24
      hal_register_write(RG_CC_CTRL_0, val);
      return RADIO_SUCCESS;
   }
   else // Not china mode
   {
      if (((s8)channel < MIN_CHANNEL && MIN_CHANNEL) ||
    349a:	8b 50       	subi	r24, 0x0B	; 11
    349c:	80 31       	cpi	r24, 0x10	; 16
    349e:	10 f0       	brcs	.+4      	; 0x34a4 <radioSetOperatingChannel+0xe>
    34a0:	82 e4       	ldi	r24, 0x42	; 66
    34a2:	2e c0       	rjmp	.+92     	; 0x3500 <radioSetOperatingChannel+0x6a>
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    34a4:	80 91 39 01 	lds	r24, 0x0139
    34a8:	81 ff       	sbrs	r24, 1
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <radioSetOperatingChannel+0x1a>
    34ac:	84 e4       	ldi	r24, 0x44	; 68
    34ae:	28 c0       	rjmp	.+80     	; 0x3500 <radioSetOperatingChannel+0x6a>
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    34b0:	88 e4       	ldi	r24, 0x48	; 72
    34b2:	91 e0       	ldi	r25, 0x01	; 1
    34b4:	6f e1       	ldi	r22, 0x1F	; 31
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
         return RADIO_INVALID_ARGUMENT;

      if (isSleeping() == true)
         return RADIO_WRONG_STATE;

      if (radioGetOperatingChannel() == channel)
    34bc:	81 17       	cp	r24, r17
    34be:	f9 f0       	breq	.+62     	; 0x34fe <radioSetOperatingChannel+0x68>
         return RADIO_SUCCESS;

      /*Set new operating channel.*/
      hal_subregister_write(SR_CHANNEL, channel);
    34c0:	88 e4       	ldi	r24, 0x48	; 72
    34c2:	91 e0       	ldi	r25, 0x01	; 1
    34c4:	6f e1       	ldi	r22, 0x1F	; 31
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	21 2f       	mov	r18, r17
    34ca:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    34ce:	81 e4       	ldi	r24, 0x41	; 65
    34d0:	91 e0       	ldi	r25, 0x01	; 1
    34d2:	6f e1       	ldi	r22, 0x1F	; 31
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>

      //Read current state and wait for the PLL_LOCK interrupt if the
      //radio transceiver is in either RX_ON or PLL_ON.
      u8 trx_state = radioGetTrxState();

      if ((trx_state == RX_ON) ||
    34da:	86 30       	cpi	r24, 0x06	; 6
    34dc:	11 f0       	breq	.+4      	; 0x34e2 <radioSetOperatingChannel+0x4c>
    34de:	89 30       	cpi	r24, 0x09	; 9
    34e0:	21 f4       	brne	.+8      	; 0x34ea <radioSetOperatingChannel+0x54>
    34e2:	8d e2       	ldi	r24, 0x2D	; 45
    34e4:	91 e0       	ldi	r25, 0x01	; 1
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <radioSetOperatingChannel+0x50>
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    34ea:	88 e4       	ldi	r24, 0x48	; 72
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	6f e1       	ldi	r22, 0x1F	; 31
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
         delay_us(TIME_PLL_LOCK);

      radio_status_t channel_set_status = RADIO_TIMED_OUT;

      //Check that the channel was set properly.
      if (radioGetOperatingChannel() == channel)
    34f6:	81 17       	cp	r24, r17
    34f8:	11 f0       	breq	.+4      	; 0x34fe <radioSetOperatingChannel+0x68>
    34fa:	83 e4       	ldi	r24, 0x43	; 67
    34fc:	01 c0       	rjmp	.+2      	; 0x3500 <radioSetOperatingChannel+0x6a>
    34fe:	80 e4       	ldi	r24, 0x40	; 64
         channel_set_status = RADIO_SUCCESS;

      return channel_set_status;
   }

}
    3500:	1f 91       	pop	r17
    3502:	08 95       	ret

00003504 <radioGetPartnum>:
 */
u8 radioGetPartnum(void)
{
   static u8 radio_part_number;

   if (!radio_part_number)
    3504:	80 91 1e 14 	lds	r24, 0x141E
    3508:	88 23       	and	r24, r24
    350a:	31 f4       	brne	.+12     	; 0x3518 <radioGetPartnum+0x14>
      radio_part_number = hal_register_read(RG_PART_NUM);
    350c:	8c e5       	ldi	r24, 0x5C	; 92
    350e:	91 e0       	ldi	r25, 0x01	; 1
    3510:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_register_read>
    3514:	80 93 1e 14 	sts	0x141E, r24
   return radio_part_number;
}
    3518:	80 91 1e 14 	lds	r24, 0x141E
    351c:	08 95       	ret

0000351e <radioRandom>:

   @param bits Number of bits of random data to return.  This function
   will return an even number of random bits, equal to or less than bits.
 */
u8 radioRandom(u8 bits)
{
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	00 d0       	rcall	.+0      	; 0x3528 <radioRandom+0xa>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	08 2f       	mov	r16, r24
   if ((NODETYPE != ENDDEVICE) || APP)
   {
      volatile u8 val=0;
    352e:	19 82       	std	Y+1, r1	; 0x01
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    3530:	81 e4       	ldi	r24, 0x41	; 65
    3532:	91 e0       	ldi	r25, 0x01	; 1
    3534:	6f e1       	ldi	r22, 0x1F	; 31
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    353c:	18 2f       	mov	r17, r24
      volatile u8 val=0;
      volatile u8 regval;
      u8 i;

      i = radioGetTrxState();
      if ((radioGetPartnum() == RF231 ||    // RF231
    353e:	0e 94 82 1a 	call	0x3504	; 0x3504 <radioGetPartnum>
    3542:	83 30       	cpi	r24, 0x03	; 3
    3544:	21 f0       	breq	.+8      	; 0x354e <radioRandom+0x30>
    3546:	0e 94 82 1a 	call	0x3504	; 0x3504 <radioGetPartnum>
    354a:	87 30       	cpi	r24, 0x07	; 7
    354c:	d1 f4       	brne	.+52     	; 0x3582 <radioRandom+0x64>
    354e:	16 30       	cpi	r17, 0x06	; 6
    3550:	19 f4       	brne	.+6      	; 0x3558 <radioRandom+0x3a>
            (i == RX_ON ||
                  i == RX_AACK_ON))       // Must be in rx to get random numbers
      {
         // Random number generator on-board
         // has two random bits each read
         for (i=0;i<bits/2;i++)
    3552:	06 95       	lsr	r16
    3554:	10 e0       	ldi	r17, 0x00	; 0
    3556:	11 c0       	rjmp	.+34     	; 0x357a <radioRandom+0x5c>
      volatile u8 val=0;
      volatile u8 regval;
      u8 i;

      i = radioGetTrxState();
      if ((radioGetPartnum() == RF231 ||    // RF231
    3558:	16 31       	cpi	r17, 0x16	; 22
    355a:	99 f4       	brne	.+38     	; 0x3582 <radioRandom+0x64>
    355c:	fa cf       	rjmp	.-12     	; 0x3552 <radioRandom+0x34>
      {
         // Random number generator on-board
         // has two random bits each read
         for (i=0;i<bits/2;i++)
         {
            regval = hal_subregister_read(SR_RND_VALUE);
    355e:	86 e4       	ldi	r24, 0x46	; 70
    3560:	91 e0       	ldi	r25, 0x01	; 1
    3562:	60 e6       	ldi	r22, 0x60	; 96
    3564:	45 e0       	ldi	r20, 0x05	; 5
    3566:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    356a:	8a 83       	std	Y+2, r24	; 0x02
            val = (val << 2) | regval;
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	9a 81       	ldd	r25, Y+2	; 0x02
    3570:	88 0f       	add	r24, r24
    3572:	88 0f       	add	r24, r24
    3574:	89 2b       	or	r24, r25
    3576:	89 83       	std	Y+1, r24	; 0x01
            (i == RX_ON ||
                  i == RX_AACK_ON))       // Must be in rx to get random numbers
      {
         // Random number generator on-board
         // has two random bits each read
         for (i=0;i<bits/2;i++)
    3578:	1f 5f       	subi	r17, 0xFF	; 255
    357a:	10 17       	cp	r17, r16
    357c:	80 f3       	brcs	.-32     	; 0x355e <radioRandom+0x40>
         {
            regval = hal_subregister_read(SR_RND_VALUE);
            val = (val << 2) | regval;
         }
         return val;
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <radioRandom+0x68>
      }
      else
         // use library function.
         return rand();
    3582:	0e 94 ad 34 	call	0x695a	; 0x695a <rand>
   }
   else
      return 0;
}
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	08 95       	ret

00003594 <radioSetTrxState>:
 *                                  within resonable time.
 *
 *  \ingroup radio
 */
radio_status_t radioSetTrxState(u8 new_state)
{
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	18 2f       	mov	r17, r24
   u8 original_state;

   /*Check function paramter and current state of the radio transceiver.*/
   if (!((new_state == TRX_OFF)    ||
    359a:	88 30       	cpi	r24, 0x08	; 8
    359c:	51 f0       	breq	.+20     	; 0x35b2 <radioSetTrxState+0x1e>
    359e:	86 30       	cpi	r24, 0x06	; 6
    35a0:	41 f0       	breq	.+16     	; 0x35b2 <radioSetTrxState+0x1e>
    35a2:	89 30       	cpi	r24, 0x09	; 9
    35a4:	31 f0       	breq	.+12     	; 0x35b2 <radioSetTrxState+0x1e>
    35a6:	86 31       	cpi	r24, 0x16	; 22
    35a8:	21 f0       	breq	.+8      	; 0x35b2 <radioSetTrxState+0x1e>
    35aa:	89 31       	cpi	r24, 0x19	; 25
    35ac:	11 f0       	breq	.+4      	; 0x35b2 <radioSetTrxState+0x1e>
    35ae:	82 e4       	ldi	r24, 0x42	; 66
    35b0:	61 c0       	rjmp	.+194    	; 0x3674 <radioSetTrxState+0xe0>
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    35b2:	80 91 39 01 	lds	r24, 0x0139
    35b6:	81 ff       	sbrs	r24, 1
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <radioSetTrxState+0x2a>
    35ba:	84 e4       	ldi	r24, 0x44	; 68
    35bc:	5b c0       	rjmp	.+182    	; 0x3674 <radioSetTrxState+0xe0>

   if (isSleeping() == true)
      return RADIO_WRONG_STATE;

   // Wait for radio to finish previous operation
   while (radioIsBusy())
    35be:	0e 94 11 19 	call	0x3222	; 0x3222 <radioIsBusy>
    35c2:	88 23       	and	r24, r24
    35c4:	e1 f7       	brne	.-8      	; 0x35be <radioSetTrxState+0x2a>
      ;

   // For RF230, don't use auto mode while scanning, because no RX_START
   // will be issued.
   if (radioGetPartnum() == RF230 &&
    35c6:	0e 94 82 1a 	call	0x3504	; 0x3504 <radioGetPartnum>
    35ca:	82 30       	cpi	r24, 0x02	; 2
    35cc:	39 f4       	brne	.+14     	; 0x35dc <radioSetTrxState+0x48>
    35ce:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <macIsScanning>
    35d2:	88 23       	and	r24, r24
    35d4:	19 f0       	breq	.+6      	; 0x35dc <radioSetTrxState+0x48>
    35d6:	16 31       	cpi	r17, 0x16	; 22
    35d8:	09 f4       	brne	.+2      	; 0x35dc <radioSetTrxState+0x48>
    35da:	16 e0       	ldi	r17, 0x06	; 6
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    35dc:	81 e4       	ldi	r24, 0x41	; 65
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	6f e1       	ldi	r22, 0x1F	; 31
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    35e8:	08 2f       	mov	r16, r24
         new_state == RX_AACK_ON)
      new_state = RX_ON;

   original_state = radioGetTrxState();

   if (new_state == original_state)
    35ea:	18 17       	cp	r17, r24
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <radioSetTrxState+0x5c>
    35ee:	41 c0       	rjmp	.+130    	; 0x3672 <radioSetTrxState+0xde>
   //At this point it is clear that the requested new_state is:
   //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.

   //The radio transceiver can be in one of the following states:
   //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON, TX_ARET_ON.
   if(new_state == TRX_OFF)
    35f0:	18 30       	cpi	r17, 0x08	; 8
    35f2:	19 f4       	brne	.+6      	; 0x35fa <radioSetTrxState+0x66>
      radioResetStateMachine(); //Go to TRX_OFF from any state.
    35f4:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <radioResetStateMachine>
    35f8:	32 c0       	rjmp	.+100    	; 0x365e <radioSetTrxState+0xca>
   else
   {
      //It is not allowed to go from RX_AACK_ON or TX_AACK_ON and directly to
      //TX_AACK_ON or RX_AACK_ON respectively. Need to go via RX_ON or PLL_ON.
      if ((new_state == TX_ARET_ON) &&
    35fa:	19 31       	cpi	r17, 0x19	; 25
    35fc:	61 f4       	brne	.+24     	; 0x3616 <radioSetTrxState+0x82>
    35fe:	89 30       	cpi	r24, 0x09	; 9
    3600:	f1 f0       	breq	.+60     	; 0x363e <radioSetTrxState+0xaa>
            (original_state != PLL_ON))
      {
         //First do intermediate state transition to PLL_ON, then to TX_ARET_ON.
         //The final state transition to TX_ARET_ON is handled after the if-else if.
         hal_subregister_write(SR_TRX_CMD, PLL_ON);
    3602:	82 e4       	ldi	r24, 0x42	; 66
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	6f e1       	ldi	r22, 0x1F	; 31
    3608:	40 e0       	ldi	r20, 0x00	; 0
    360a:	29 e0       	ldi	r18, 0x09	; 9
    360c:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
#ifdef __AVR__
         if (original_state == RX_AACK_ON)
    3610:	06 31       	cpi	r16, 0x16	; 22
    3612:	89 f4       	brne	.+34     	; 0x3636 <radioSetTrxState+0xa2>
    3614:	0d c0       	rjmp	.+26     	; 0x3630 <radioSetTrxState+0x9c>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
         else
            delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
#endif
      }
      else if ((new_state == RX_AACK_ON) &&
    3616:	16 31       	cpi	r17, 0x16	; 22
    3618:	91 f4       	brne	.+36     	; 0x363e <radioSetTrxState+0xaa>
    361a:	89 30       	cpi	r24, 0x09	; 9
    361c:	81 f0       	breq	.+32     	; 0x363e <radioSetTrxState+0xaa>
            (original_state != PLL_ON))
      {
         //First do intermediate state transition to PLL_ON, then to RX_AACK_ON.
         hal_subregister_write(SR_TRX_CMD, PLL_ON);
    361e:	82 e4       	ldi	r24, 0x42	; 66
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	6f e1       	ldi	r22, 0x1F	; 31
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	29 e0       	ldi	r18, 0x09	; 9
    3628:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
#ifdef __AVR__
         if (original_state == TX_ARET_ON)
    362c:	09 31       	cpi	r16, 0x19	; 25
    362e:	19 f4       	brne	.+6      	; 0x3636 <radioSetTrxState+0xa2>
    3630:	83 e0       	ldi	r24, 0x03	; 3
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	02 c0       	rjmp	.+4      	; 0x363a <radioSetTrxState+0xa6>
    3636:	89 e6       	ldi	r24, 0x69	; 105
    3638:	91 e0       	ldi	r25, 0x01	; 1
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <radioSetTrxState+0xa6>
            delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
#endif
      }

      //Any other state transition can be done directly.
      hal_subregister_write(SR_TRX_CMD, new_state);
    363e:	82 e4       	ldi	r24, 0x42	; 66
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	6f e1       	ldi	r22, 0x1F	; 31
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	21 2f       	mov	r18, r17
    3648:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>

      //When the PLL is active most states can be reached in 1us. However, from
      //TRX_OFF the PLL needs time to activate.
      if (original_state == TRX_OFF)
    364c:	08 30       	cpi	r16, 0x08	; 8
    364e:	19 f4       	brne	.+6      	; 0x3656 <radioSetTrxState+0xc2>
    3650:	89 e6       	ldi	r24, 0x69	; 105
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	02 c0       	rjmp	.+4      	; 0x365a <radioSetTrxState+0xc6>
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <radioSetTrxState+0xc6>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    365e:	81 e4       	ldi	r24, 0x41	; 65
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	6f e1       	ldi	r22, 0x1F	; 31
    3664:	40 e0       	ldi	r20, 0x00	; 0
    3666:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
   } // end: if(new_state == TRX_OFF) ...

   /*Verify state transition.*/
   radio_status_t set_state_status = RADIO_TIMED_OUT;

   if (radioGetTrxState() == new_state)
    366a:	81 17       	cp	r24, r17
    366c:	11 f0       	breq	.+4      	; 0x3672 <radioSetTrxState+0xde>
    366e:	83 e4       	ldi	r24, 0x43	; 67
    3670:	01 c0       	rjmp	.+2      	; 0x3674 <radioSetTrxState+0xe0>
    3672:	80 e4       	ldi	r24, 0x40	; 64
      set_state_status = RADIO_SUCCESS;

   return set_state_status;
}
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	08 95       	ret

0000367a <radioSendData>:
 *                          detected this error message will be returned.
 *
 *  \ingroup radio
 */
radio_status_t radioSendData(u8 data_length, u8 *data)
{
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	18 2f       	mov	r17, r24
    3682:	eb 01       	movw	r28, r22
   //UART_PRINT("radioSendData()\r\n");
   // Check function parameters and current state.
   if (data_length > RF2xx_MAX_TX_FRAME_LENGTH)
    3684:	87 ff       	sbrs	r24, 7
    3686:	02 c0       	rjmp	.+4      	; 0x368c <radioSendData+0x12>
    3688:	82 e4       	ldi	r24, 0x42	; 66
    368a:	1b c0       	rjmp	.+54     	; 0x36c2 <radioSendData+0x48>
      return RADIO_INVALID_ARGUMENT;

   // Wait for radio to get unbusy
   while (radioIsBusy())
    368c:	0e 94 11 19 	call	0x3222	; 0x3222 <radioIsBusy>
    3690:	88 23       	and	r24, r24
    3692:	e1 f7       	brne	.-8      	; 0x368c <radioSendData+0x12>
      ;

   // Put radio in TX_ARET_ON state
   do
   {
      radioSetTrxState(TX_ARET_ON);
    3694:	89 e1       	ldi	r24, 0x19	; 25
    3696:	0e 94 ca 1a 	call	0x3594	; 0x3594 <radioSetTrxState>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    369a:	81 e4       	ldi	r24, 0x41	; 65
    369c:	91 e0       	ldi	r25, 0x01	; 1
    369e:	6f e1       	ldi	r22, 0x1F	; 31
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>

   // Put radio in TX_ARET_ON state
   do
   {
      radioSetTrxState(TX_ARET_ON);
   } while (radioGetTrxState() != TX_ARET_ON);
    36a6:	89 31       	cpi	r24, 0x19	; 25
    36a8:	a9 f7       	brne	.-22     	; 0x3694 <radioSendData+0x1a>

   // save last destination address, which is needed
   // to process a send failure later
   macConfig.lastDestAddr = ((ftData*)data)->destAddr;
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	9e 81       	ldd	r25, Y+6	; 0x06
    36ae:	90 93 d3 1f 	sts	0x1FD3, r25
    36b2:	80 93 d2 1f 	sts	0x1FD2, r24

   /*Do frame transmission.*/
   hal_frame_write(data, data_length+2); //Then write data to the frame buffer.
    36b6:	1e 5f       	subi	r17, 0xFE	; 254
    36b8:	ce 01       	movw	r24, r28
    36ba:	61 2f       	mov	r22, r17
    36bc:	0e 94 ef 0c 	call	0x19de	; 0x19de <hal_frame_write>
    36c0:	80 e4       	ldi	r24, 0x40	; 64

   return RADIO_SUCCESS;
}
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	1f 91       	pop	r17
    36c8:	08 95       	ret

000036ca <radioRxEndEvent>:

   // Put radio back into receive mode.
   radioSetTrxState(RX_AACK_ON);
}
void radioRxEndEvent(void)
{
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <radioRxEndEvent+0xa>
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <radioRxEndEvent+0xc>
    36d6:	0f 92       	push	r0
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
   //TODO read ED level - by Dresden Elektronik
   ed_val = hal_register_read(RG_PHY_ED_LEVEL);
    36dc:	87 e4       	ldi	r24, 0x47	; 71
    36de:	91 e0       	ldi	r25, 0x01	; 1
    36e0:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_register_read>
    36e4:	80 93 20 14 	sts	0x1420, r24

   /* radio has received frame, store it away */
   uint8_t* pFrame = hal_frame_read();
    36e8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <hal_frame_read>
    36ec:	8c 01       	movw	r16, r24

   if(pFrame != NULL)
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <radioRxEndEvent+0x2a>
    36f2:	7f c0       	rjmp	.+254    	; 0x37f2 <radioRxEndEvent+0x128>
   {
      lastLQI = normalize_lqi(((rx_frame_t*)pFrame)->lqi, ed_val);
    36f4:	00 58       	subi	r16, 0x80	; 128
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	f8 01       	movw	r30, r16
    36fa:	90 81       	ld	r25, Z
    36fc:	00 58       	subi	r16, 0x80	; 128
    36fe:	10 40       	sbci	r17, 0x00	; 0
    3700:	20 91 20 14 	lds	r18, 0x1420
static inline uint8_t normalize_lqi(uint8_t lqi, uint8_t ed_value)
{
    uint16_t link_quality;
    uint8_t lqi_star;

    if (ed_value > ED_MAX)
    3704:	25 35       	cpi	r18, 0x55	; 85
    3706:	10 f0       	brcs	.+4      	; 0x370c <radioRxEndEvent+0x42>
    3708:	24 e5       	ldi	r18, 0x54	; 84
    370a:	03 c0       	rjmp	.+6      	; 0x3712 <radioRxEndEvent+0x48>
    {
        ed_value = ED_MAX;
    }
    else if (ed_value == 0)
    370c:	22 23       	and	r18, r18
    370e:	09 f4       	brne	.+2      	; 0x3712 <radioRxEndEvent+0x48>
    3710:	21 e0       	ldi	r18, 0x01	; 1
    {
        ed_value = 1;
    }

    lqi_star = lqi >> 6;
    link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 / (ED_MAX * LQI_MAX);
    3712:	92 95       	swap	r25
    3714:	96 95       	lsr	r25
    3716:	96 95       	lsr	r25
    3718:	93 70       	andi	r25, 0x03	; 3
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	98 9f       	mul	r25, r24
    371e:	c0 01       	movw	r24, r0
    3720:	11 24       	eor	r1, r1
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	ac 01       	movw	r20, r24
    3726:	42 9f       	mul	r20, r18
    3728:	c0 01       	movw	r24, r0
    372a:	43 9f       	mul	r20, r19
    372c:	90 0d       	add	r25, r0
    372e:	52 9f       	mul	r21, r18
    3730:	90 0d       	add	r25, r0
    3732:	11 24       	eor	r1, r1
    3734:	6c ef       	ldi	r22, 0xFC	; 252
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodhi4>

    if (link_quality > 255)
    373c:	6f 3f       	cpi	r22, 0xFF	; 255
    373e:	71 05       	cpc	r23, r1
    3740:	11 f0       	breq	.+4      	; 0x3746 <radioRxEndEvent+0x7c>
    3742:	08 f0       	brcs	.+2      	; 0x3746 <radioRxEndEvent+0x7c>
    3744:	6f ef       	ldi	r22, 0xFF	; 255
   /* radio has received frame, store it away */
   uint8_t* pFrame = hal_frame_read();

   if(pFrame != NULL)
   {
      lastLQI = normalize_lqi(((rx_frame_t*)pFrame)->lqi, ed_val);
    3746:	60 93 21 14 	sts	0x1421, r22
      ((rx_frame_t*)pFrame)->lqi = lastLQI;
    374a:	00 58       	subi	r16, 0x80	; 128
    374c:	1f 4f       	sbci	r17, 0xFF	; 255
    374e:	f8 01       	movw	r30, r16
    3750:	60 83       	st	Z, r22
    3752:	00 58       	subi	r16, 0x80	; 128
    3754:	10 40       	sbci	r17, 0x00	; 0

#if (NODETYPE != ENDDEVICE)
      check_and_save_quality_values(pFrame);
    3756:	c8 01       	movw	r24, r16
    3758:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <check_and_save_quality_values>
#endif

      event_object_t event;
      event.event = 0;
    375c:	19 82       	std	Y+1, r1	; 0x01
      event.data = 0;
    375e:	1b 82       	std	Y+3, r1	; 0x03
    3760:	1a 82       	std	Y+2, r1	; 0x02
      event.callback = 0;
    3762:	1d 82       	std	Y+5, r1	; 0x05
    3764:	1c 82       	std	Y+4, r1	; 0x04

      uint8_t *data_frame = ((rx_frame_t*)pFrame)->data;

      // Figure out which kind of frame we have
      u16 fcf = data_frame[0] + data_frame[1]*0x100;
    3766:	f8 01       	movw	r30, r16
    3768:	92 81       	ldd	r25, Z+2	; 0x02
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	21 81       	ldd	r18, Z+1	; 0x01
    376e:	ac 01       	movw	r20, r24
    3770:	42 0f       	add	r20, r18
    3772:	51 1d       	adc	r21, r1
    3774:	9a 01       	movw	r18, r20

      if (data_frame[5] == 0xff && // Broadcast src addr
    3776:	86 81       	ldd	r24, Z+6	; 0x06
    3778:	8f 3f       	cpi	r24, 0xFF	; 255
    377a:	31 f4       	brne	.+12     	; 0x3788 <radioRxEndEvent+0xbe>
    377c:	87 81       	ldd	r24, Z+7	; 0x07
    377e:	8f 3f       	cpi	r24, 0xFF	; 255
    3780:	19 f4       	brne	.+6      	; 0x3788 <radioRxEndEvent+0xbe>
    3782:	84 2f       	mov	r24, r20
    3784:	80 7f       	andi	r24, 0xF0	; 240
    3786:	69 f5       	brne	.+90     	; 0x37e2 <radioRxEndEvent+0x118>
         // Don't bother processing this broadcast frame
         return;
      }

      // Look at fcf
      switch (fcf)
    3788:	58 e8       	ldi	r21, 0x88	; 136
    378a:	21 36       	cpi	r18, 0x61	; 97
    378c:	35 07       	cpc	r19, r21
    378e:	e1 f0       	breq	.+56     	; 0x37c8 <radioRxEndEvent+0xfe>
    3790:	88 e8       	ldi	r24, 0x88	; 136
    3792:	22 36       	cpi	r18, 0x62	; 98
    3794:	38 07       	cpc	r19, r24
    3796:	40 f4       	brcc	.+16     	; 0x37a8 <radioRxEndEvent+0xde>
    3798:	e8 e0       	ldi	r30, 0x08	; 8
    379a:	23 30       	cpi	r18, 0x03	; 3
    379c:	3e 07       	cpc	r19, r30
    379e:	61 f0       	breq	.+24     	; 0x37b8 <radioRxEndEvent+0xee>
    37a0:	20 50       	subi	r18, 0x00	; 0
    37a2:	30 48       	sbci	r19, 0x80	; 128
    37a4:	d9 f4       	brne	.+54     	; 0x37dc <radioRxEndEvent+0x112>
    37a6:	0a c0       	rjmp	.+20     	; 0x37bc <radioRxEndEvent+0xf2>
    37a8:	48 e8       	ldi	r20, 0x88	; 136
    37aa:	23 36       	cpi	r18, 0x63	; 99
    37ac:	34 07       	cpc	r19, r20
    37ae:	71 f0       	breq	.+28     	; 0x37cc <radioRxEndEvent+0x102>
    37b0:	23 56       	subi	r18, 0x63	; 99
    37b2:	38 4c       	sbci	r19, 0xC8	; 200
    37b4:	99 f4       	brne	.+38     	; 0x37dc <radioRxEndEvent+0x112>
    37b6:	0e c0       	rjmp	.+28     	; 0x37d4 <radioRxEndEvent+0x10a>
      {
      case FCF_BEACONREQ:
         // Beacon request
         if ((NODETYPE == ROUTER && macConfig.associated) || NODETYPE == COORD)
         {
            event.event = MAC_EVENT_BEACON_REQ;
    37b8:	85 e1       	ldi	r24, 0x15	; 21
    37ba:	0d c0       	rjmp	.+26     	; 0x37d6 <radioRxEndEvent+0x10c>
         }
         break;
      case FCF_BEACON:
         // Beacon
         // Only report beacon frames if we're scanning
         if (macIsScanning())
    37bc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <macIsScanning>
    37c0:	88 23       	and	r24, r24
    37c2:	61 f0       	breq	.+24     	; 0x37dc <radioRxEndEvent+0x112>
         {
            event.event = MAC_EVENT_SCAN;
    37c4:	84 e1       	ldi	r24, 0x14	; 20
    37c6:	07 c0       	rjmp	.+14     	; 0x37d6 <radioRxEndEvent+0x10c>
            event.data = pFrame;
         }
         break;
      case FCF_DATA:
         // Data
         event.event = MAC_EVENT_RX;
    37c8:	80 e1       	ldi	r24, 0x10	; 16
    37ca:	05 c0       	rjmp	.+10     	; 0x37d6 <radioRxEndEvent+0x10c>
            event.data = pFrame;
         }
         break;
      case FCF_MAC_CMD:
         // MAC command frames
         switch (((ftRouting*)(((rx_frame_t*)pFrame)->data))->cmd)
    37cc:	f8 01       	movw	r30, r16
    37ce:	82 85       	ldd	r24, Z+10	; 0x0a
    37d0:	81 30       	cpi	r24, 0x01	; 1
    37d2:	21 f4       	brne	.+8      	; 0x37dc <radioRxEndEvent+0x112>
         {
         case 1:
            // Association request
            if (NODETYPE != ENDDEVICE)
            {
               event.event = MAC_EVENT_ASSOCIATION_REQUEST;
    37d4:	87 e1       	ldi	r24, 0x17	; 23
    37d6:	89 83       	std	Y+1, r24	; 0x01
               event.data = pFrame;
    37d8:	1b 83       	std	Y+3, r17	; 0x03
    37da:	0a 83       	std	Y+2, r16	; 0x02
            break;
         }
         default:
            break;
      }
      if (event.event == 0)
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	88 23       	and	r24, r24
    37e0:	21 f4       	brne	.+8      	; 0x37ea <radioRxEndEvent+0x120>
      {
         bmm_buffer_free(pFrame); // free buffer
    37e2:	c8 01       	movw	r24, r16
    37e4:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <bmm_buffer_free>
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <radioRxEndEvent+0x128>
      }
      else
      {
         mac_put_event(&event);
    37ea:	ce 01       	movw	r24, r28
    37ec:	01 96       	adiw	r24, 0x01	; 1
    37ee:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>
      }
   }
}
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	08 95       	ret

00003806 <radioTrxEndEvent>:
}
#endif // SINGLE_CHIP

#ifdef SINGLE_CHIP
void radioTrxEndEvent(void)
{
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	00 d0       	rcall	.+0      	; 0x380c <radioTrxEndEvent+0x6>
    380c:	00 d0       	rcall	.+0      	; 0x380e <radioTrxEndEvent+0x8>
    380e:	00 d0       	rcall	.+0      	; 0x3810 <radioTrxEndEvent+0xa>
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
   volatile u8 status;

   // Not busy any more
   macConfig.busy = false;
    3814:	10 92 d4 1f 	sts	0x1FD4, r1

   // transmit mode, put end-of-transmit event in queue
   event_object_t event;
   event.event = 0;
    3818:	1a 82       	std	Y+2, r1	; 0x02
   event.data = 0;
    381a:	1c 82       	std	Y+4, r1	; 0x04
    381c:	1b 82       	std	Y+3, r1	; 0x03

   status = hal_subregister_read(SR_TRAC_STATUS);
    381e:	82 e4       	ldi	r24, 0x42	; 66
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	60 ee       	ldi	r22, 0xE0	; 224
    3824:	45 e0       	ldi	r20, 0x05	; 5
    3826:	0e 94 1d 0b 	call	0x163a	; 0x163a <hal_subregister_read>
    382a:	89 83       	std	Y+1, r24	; 0x01

   switch(status)
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	81 30       	cpi	r24, 0x01	; 1
    3830:	39 f0       	breq	.+14     	; 0x3840 <radioTrxEndEvent+0x3a>
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	28 f0       	brcs	.+10     	; 0x3840 <radioTrxEndEvent+0x3a>
    3836:	83 30       	cpi	r24, 0x03	; 3
    3838:	29 f0       	breq	.+10     	; 0x3844 <radioTrxEndEvent+0x3e>
    383a:	85 30       	cpi	r24, 0x05	; 5
    383c:	39 f4       	brne	.+14     	; 0x384c <radioTrxEndEvent+0x46>
    383e:	04 c0       	rjmp	.+8      	; 0x3848 <radioTrxEndEvent+0x42>
      //UART_PRINT("TRX END Trac Success\r\n");
      event.event = MAC_EVENT_ACK;
      break;
   case TRAC_SUCCESS_DATA_PENDING:
      //UART_PRINT("TRX END Trac Success Data Pending\r\n");
      event.event = MAC_EVENT_ACK;
    3840:	81 e1       	ldi	r24, 0x11	; 17
    3842:	03 c0       	rjmp	.+6      	; 0x384a <radioTrxEndEvent+0x44>
      break;
   case TRAC_CHANNEL_ACCESS_FAILURE:
      //UART_PRINT("TRX END Trac Channel Access Failure\r\n");
      event.event = MAC_EVENT_ACCESS;
    3844:	83 e1       	ldi	r24, 0x13	; 19
    3846:	01 c0       	rjmp	.+2      	; 0x384a <radioTrxEndEvent+0x44>
      break;
   case TRAC_NO_ACK:
      //UART_PRINT("TRX END Trac No Ack\r\n");
      event.event = MAC_EVENT_NACK;
    3848:	82 e1       	ldi	r24, 0x12	; 18
    384a:	8a 83       	std	Y+2, r24	; 0x02
      break;
   default:
      break;
   }

   if (event.event)
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	88 23       	and	r24, r24
    3850:	21 f0       	breq	.+8      	; 0x385a <radioTrxEndEvent+0x54>
      mac_put_event(&event);
    3852:	ce 01       	movw	r24, r28
    3854:	02 96       	adiw	r24, 0x02	; 2
    3856:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <mac_put_event>

   // Put radio back into receive mode.
   radioSetTrxState(RX_AACK_ON);
    385a:	86 e1       	ldi	r24, 0x16	; 22
    385c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <radioSetTrxState>
}
    3860:	26 96       	adiw	r28, 0x06	; 6
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <radioInit>:

   @retval RADIO_TIMED_OUT The radio transceiver was not able to
   initialize and enter TRX_OFF state within the specified time.
 */
radio_status_t radioInit(bool cal_rc_osc)
{
    3872:	ff 92       	push	r15
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	f8 2e       	mov	r15, r24
    387a:	0d ef       	ldi	r16, 0xFD	; 253
    387c:	13 e0       	ldi	r17, 0x03	; 3
    387e:	c8 01       	movw	r24, r16
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <radioInit+0xe>
   radio_status_t init_status = RADIO_SUCCESS;

   delay_us(TIME_TO_ENTER_P_ON);

   //Initialize Hardware Abstraction Layer.
   hal_init();
    3884:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <hal_init>

   radioResetTrx(); //Do HW reset of radio transeiver.
    3888:	0e 94 f7 18 	call	0x31ee	; 0x31ee <radioResetTrx>

   //Force transition to TRX_OFF.
   hal_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    388c:	82 e4       	ldi	r24, 0x42	; 66
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	6f e1       	ldi	r22, 0x1F	; 31
    3892:	40 e0       	ldi	r20, 0x00	; 0
    3894:	23 e0       	ldi	r18, 0x03	; 3
    3896:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>
    389a:	c8 01       	movw	r24, r16
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <radioInit+0x2a>

   delay_us(TIME_P_ON_TO_TRX_OFF); //Wait for the transition to be complete.

   hal_register_write(RG_IRQ_MASK, SUPPORTED_INTERRUPT_MASK);
    38a0:	8e e4       	ldi	r24, 0x4E	; 78
    38a2:	91 e0       	ldi	r25, 0x01	; 1
    38a4:	6c e5       	ldi	r22, 0x5C	; 92
    38a6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>

   // Set the CCA ED threshold really low
   hal_subregister_write(SR_CCA_ED_THRES, DEMO ? 2 : 7);
    38aa:	89 e4       	ldi	r24, 0x49	; 73
    38ac:	91 e0       	ldi	r25, 0x01	; 1
    38ae:	6f e0       	ldi	r22, 0x0F	; 15
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	27 e0       	ldi	r18, 0x07	; 7
    38b4:	0e 94 27 0b 	call	0x164e	; 0x164e <hal_subregister_write>

   // calibrate oscillator
   if (cal_rc_osc && SERIAL && (PLATFORM != RAVENUSB))
    38b8:	ff 20       	and	r15, r15
    38ba:	11 f0       	breq	.+4      	; 0x38c0 <radioInit+0x4e>
   {
      calibrate_rc_osc();
    38bc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <calibrate_rc_osc>
   }
   return init_status;
}
    38c0:	80 e4       	ldi	r24, 0x40	; 64
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	ff 90       	pop	r15
    38c8:	08 95       	ret

000038ca <ledoff1>:

// These LED functions are used to provide address callbacks for macSetAlarm.
// Cannot use defines directly in callbacks.
void ledoff1(void)
{
   LED_OFF(1);
    38ca:	71 9a       	sbi	0x0e, 1	; 14
    38cc:	69 9a       	sbi	0x0d, 1	; 13
}
    38ce:	08 95       	ret

000038d0 <ledoff2>:

void ledoff2(void)
{
   LED_OFF(2);
    38d0:	72 9a       	sbi	0x0e, 2	; 14
    38d2:	6a 9a       	sbi	0x0d, 2	; 13
}
    38d4:	08 95       	ret

000038d6 <ledoff3>:

void ledoff3(void)
{
   LED_OFF(3);
    38d6:	73 9a       	sbi	0x0e, 3	; 14
    38d8:	6b 9a       	sbi	0x0d, 3	; 13
}
    38da:	08 95       	ret

000038dc <appSixlowpanPingResponse>:
void appSixlowpanPingResponse(void)
{
   if (PLATFORM == RAVEN)
      // Send the 3290 a frame to show that we got a ping response.
      serial_send_frame(REPORT_PING_BEEP, 0, NULL);
}
    38dc:	08 95       	ret

000038de <appPacketSendSucceed>:

      // Tell IPv6 LOWPAN
      //        if (IPV6LOWPAN)
      //            sixlowpanSleep_packetSucceed();
   }
}
    38de:	08 95       	ret

000038e0 <appPacketSendAccessFail>:
void appPacketSendAccessFail(void)
{
   // Tell sensor app
   if (APP == SENSOR)
      sensorPacketSendFailed();
}
    38e0:	08 95       	ret

000038e2 <appPacketSendFailed>:
         macRemoveChild(macConfig.lastDestAddr);
         debugMsgStr("\r\nDropped child bcs packet send failed.");
      }
   }

}
    38e2:	08 95       	ret

000038e4 <rf2xx_reg_dump>:
//      }
//
//      debugMsgStr("\r\n");
//   }
//#endif
}
    38e4:	08 95       	ret

000038e6 <appDataIndication>:
                debugMsgStr((char *)(frame->payload));
            }
    }
    */

}
    38e6:	08 95       	ret

000038e8 <appNodeAssociated>:
   @param shortAddress The short address assigned to the new node.  The
   MAC stores this address, so the application should not have to.
 */
void appNodeAssociated(u16 shortAddress)
{
}
    38e8:	08 95       	ret

000038ea <appAssociateConfirm>:
         else
            // Try again in one second
            macSetAlarm(1000, appStartScan);
      }
   }
}
    38ea:	08 95       	ret

000038ec <appScanConfirm>:
         else
            macSetAlarm(1000,appStartScan);
         debugMsgStr("\r\nScan bad");
      }
   }
}
    38ec:	08 95       	ret

000038ee <printPrompt>:
void printPrompt(void)
{
   if (NODETYPE == COORD)
   {
      //#if (__AVR__)
      debugMsgStr("\r\nd=dump t=table i=info p=ping s=stream c=chan");
    38ee:	60 91 a0 26 	lds	r22, 0x26A0
    38f2:	70 91 a1 26 	lds	r23, 0x26A1
    38f6:	84 ea       	ldi	r24, 0xA4	; 164
    38f8:	93 e0       	ldi	r25, 0x03	; 3
    38fa:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
      debugMsgStr("\r\nr=reading n=name w=wake P=pause: ");
    38fe:	60 91 a0 26 	lds	r22, 0x26A0
    3902:	70 91 a1 26 	lds	r23, 0x26A1
    3906:	83 ed       	ldi	r24, 0xD3	; 211
    3908:	93 e0       	ldi	r25, 0x03	; 3
    390a:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
#endif // __AVR__
       */
   }
   else
      debugMsgStr("\r\nd=dump t=table i=info p=ping s=stream P=pause: ");
}
    390e:	08 95       	ret

00003910 <appChildAssociated>:
   application should not have to.
 */
void appChildAssociated(u16 shortAddress)
{
   // Blip the LED when we associate a child
   LED_ON(1);
    3910:	71 98       	cbi	0x0e, 1	; 14
    3912:	69 9a       	sbi	0x0d, 1	; 13
   macSetAlarm(LED_DELAY,ledoff1);
    3914:	8a e0       	ldi	r24, 0x0A	; 10
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	65 e6       	ldi	r22, 0x65	; 101
    391a:	7c e1       	ldi	r23, 0x1C	; 28
    391c:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    3920:	08 95       	ret

00003922 <appSendDataFrame>:
   // send data frames once per second
   if (NODETYPE != COORD)
      macDataRequest(0x00, 4, (u8*) ((NODETYPE == ENDDEVICE) ? "endd" : "rout"));

   // Send another data frame later
   macSetAlarm(1000, appSendDataFrame);
    3922:	88 ee       	ldi	r24, 0xE8	; 232
    3924:	93 e0       	ldi	r25, 0x03	; 3
    3926:	61 e9       	ldi	r22, 0x91	; 145
    3928:	7c e1       	ldi	r23, 0x1C	; 28
    392a:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    392e:	08 95       	ret

00003930 <appPingReq>:
   packet addressed to this node.

   @param addr The short address of the node that sent the ping request
 */
void appPingReq(u16 addr)
{
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	7c 01       	movw	r14, r24
   // We got a ping, send a response
   // Blip the LED
   LED_ON(1);
    393a:	71 98       	cbi	0x0e, 1	; 14
    393c:	69 9a       	sbi	0x0d, 1	; 13

   macSetAlarm(/* LED_PING_DELAY */ 1 ,ledoff1);
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	65 e6       	ldi	r22, 0x65	; 101
    3944:	7c e1       	ldi	r23, 0x1C	; 28
    3946:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

   debugMsgStr("\r\nPing request from node ");
    394a:	60 91 a0 26 	lds	r22, 0x26A0
    394e:	70 91 a1 26 	lds	r23, 0x26A1
    3952:	87 ef       	ldi	r24, 0xF7	; 247
    3954:	93 e0       	ldi	r25, 0x03	; 3
    3956:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgInt(addr);
    395a:	00 d0       	rcall	.+0      	; 0x395c <appPingReq+0x2c>
    395c:	00 d0       	rcall	.+0      	; 0x395e <appPingReq+0x2e>
    395e:	00 d0       	rcall	.+0      	; 0x3960 <appPingReq+0x30>
    3960:	ed b7       	in	r30, 0x3d	; 61
    3962:	fe b7       	in	r31, 0x3e	; 62
    3964:	31 96       	adiw	r30, 0x01	; 1
    3966:	06 ed       	ldi	r16, 0xD6	; 214
    3968:	1f e1       	ldi	r17, 0x1F	; 31
    396a:	ad b7       	in	r26, 0x3d	; 61
    396c:	be b7       	in	r27, 0x3e	; 62
    396e:	12 96       	adiw	r26, 0x02	; 2
    3970:	1c 93       	st	X, r17
    3972:	0e 93       	st	-X, r16
    3974:	11 97       	sbiw	r26, 0x01	; 1
    3976:	81 e1       	ldi	r24, 0x11	; 17
    3978:	94 e0       	ldi	r25, 0x04	; 4
    397a:	93 83       	std	Z+3, r25	; 0x03
    397c:	82 83       	std	Z+2, r24	; 0x02
    397e:	f5 82       	std	Z+5, r15	; 0x05
    3980:	e4 82       	std	Z+4, r14	; 0x04
    3982:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	80 91 a0 26 	lds	r24, 0x26A0
    398e:	90 91 a1 26 	lds	r25, 0x26A1
    3992:	ed b7       	in	r30, 0x3d	; 61
    3994:	fe b7       	in	r31, 0x3e	; 62
    3996:	92 83       	std	Z+2, r25	; 0x02
    3998:	81 83       	std	Z+1, r24	; 0x01
    399a:	14 83       	std	Z+4, r17	; 0x04
    399c:	03 83       	std	Z+3, r16	; 0x03
    399e:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>

   if (PLATFORM == RAVEN && SERIAL)
      // Tell 3290p
      serial_send_frame(REPORT_PING_BEEP, 2, (u8*)&addr);

   macPing(PING_RSP_FRAME, addr);
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	83 e0       	ldi	r24, 0x03	; 3
    39ac:	b7 01       	movw	r22, r14
    39ae:	0e 94 61 14 	call	0x28c2	; 0x28c2 <macPing>
}
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	ff 90       	pop	r15
    39b8:	ef 90       	pop	r14
    39ba:	08 95       	ret

000039bc <blink1>:
}

// This function can be used for diagnostic reasons. Not used in RUM application.
void blink1(void)
{
   LED_ON(1);
    39bc:	71 98       	cbi	0x0e, 1	; 14
    39be:	69 9a       	sbi	0x0d, 1	; 13
   macSetAlarm(25, ledoff1);
    39c0:	89 e1       	ldi	r24, 0x19	; 25
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	65 e6       	ldi	r22, 0x65	; 101
    39c6:	7c e1       	ldi	r23, 0x1C	; 28
    39c8:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

   //    macSetAlarm(500, blink1);

   //    macDataRequest(0, 7, (u8*)"Howdy\r\n");
}
    39cc:	08 95       	ret

000039ce <allNodes>:
/**
   When called, this will either Ping or request data from all associated nodes.
   A reading interval can also be set if desired.
 */
void allNodes(u8 func, u16 val)
{
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
      static u16 value;
      u8 nodeFound=0;
      associatedNodes_t *node;

      // Check to see if this is first time through
      if (func)
    39d2:	88 23       	and	r24, r24
    39d4:	49 f0       	breq	.+18     	; 0x39e8 <allNodes+0x1a>
      {
         // Set up for repeated calls to this function
         function = func;
    39d6:	80 93 28 14 	sts	0x1428, r24
         value = val;
    39da:	70 93 27 14 	sts	0x1427, r23
    39de:	60 93 26 14 	sts	0x1426, r22
         nodeNdx = 1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	80 93 29 14 	sts	0x1429, r24
      }

      // See if we are supposed to do something
      if (!function)
    39e8:	80 91 28 14 	lds	r24, 0x1428
    39ec:	88 23       	and	r24, r24
    39ee:	09 f4       	brne	.+2      	; 0x39f2 <allNodes+0x24>
    39f0:	61 c0       	rjmp	.+194    	; 0x3ab4 <allNodes+0xe6>
         return;

      // Get a node from table
      node = macGetNode(nodeNdx);
    39f2:	80 91 29 14 	lds	r24, 0x1429
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <macGetNode>
    39fc:	fc 01       	movw	r30, r24

      // Do the operation for connected nodes
      if (node->nodeType)
    39fe:	80 81       	ld	r24, Z
    3a00:	88 23       	and	r24, r24
    3a02:	11 f4       	brne	.+4      	; 0x3a08 <allNodes+0x3a>
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	3d c0       	rjmp	.+122    	; 0x3a82 <allNodes+0xb4>
      {
         nodeFound = 1;
         // Do the operation on it
         switch (function)
    3a08:	80 91 28 14 	lds	r24, 0x1428
    3a0c:	81 30       	cpi	r24, 0x01	; 1
    3a0e:	c1 f5       	brne	.+112    	; 0x3a80 <allNodes+0xb2>
         {
         case PING_ALL:
            // Send a ping to the node
            debugMsgStr("\r\nPinging node ");
    3a10:	60 91 a0 26 	lds	r22, 0x26A0
    3a14:	70 91 a1 26 	lds	r23, 0x26A1
    3a18:	84 e1       	ldi	r24, 0x14	; 20
    3a1a:	94 e0       	ldi	r25, 0x04	; 4
    3a1c:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
            debugMsgInt(nodeNdx);
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <allNodes+0x54>
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <allNodes+0x56>
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <allNodes+0x58>
    3a26:	ed b7       	in	r30, 0x3d	; 61
    3a28:	fe b7       	in	r31, 0x3e	; 62
    3a2a:	31 96       	adiw	r30, 0x01	; 1
    3a2c:	06 ed       	ldi	r16, 0xD6	; 214
    3a2e:	1f e1       	ldi	r17, 0x1F	; 31
    3a30:	ad b7       	in	r26, 0x3d	; 61
    3a32:	be b7       	in	r27, 0x3e	; 62
    3a34:	12 96       	adiw	r26, 0x02	; 2
    3a36:	1c 93       	st	X, r17
    3a38:	0e 93       	st	-X, r16
    3a3a:	11 97       	sbiw	r26, 0x01	; 1
    3a3c:	81 e1       	ldi	r24, 0x11	; 17
    3a3e:	94 e0       	ldi	r25, 0x04	; 4
    3a40:	93 83       	std	Z+3, r25	; 0x03
    3a42:	82 83       	std	Z+2, r24	; 0x02
    3a44:	80 91 29 14 	lds	r24, 0x1429
    3a48:	84 83       	std	Z+4, r24	; 0x04
    3a4a:	15 82       	std	Z+5, r1	; 0x05
    3a4c:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	80 91 a0 26 	lds	r24, 0x26A0
    3a58:	90 91 a1 26 	lds	r25, 0x26A1
    3a5c:	ed b7       	in	r30, 0x3d	; 61
    3a5e:	fe b7       	in	r31, 0x3e	; 62
    3a60:	92 83       	std	Z+2, r25	; 0x02
    3a62:	81 83       	std	Z+1, r24	; 0x01
    3a64:	14 83       	std	Z+4, r17	; 0x04
    3a66:	03 83       	std	Z+3, r16	; 0x03
    3a68:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
            macPing(PING_REQ_FRAME, nodeNdx);
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	60 91 29 14 	lds	r22, 0x1429
    3a78:	82 e0       	ldi	r24, 0x02	; 2
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <macPing>
    3a80:	91 e0       	ldi	r25, 0x01	; 1
            break;
         }
      }

      // Prepare for next node in the list
      nodeNdx++;
    3a82:	80 91 29 14 	lds	r24, 0x1429
    3a86:	8f 5f       	subi	r24, 0xFF	; 255
    3a88:	80 93 29 14 	sts	0x1429, r24
      if (nodeNdx < MAXNODES)
    3a8c:	84 36       	cpi	r24, 0x64	; 100
    3a8e:	60 f4       	brcc	.+24     	; 0x3aa8 <allNodes+0xda>
         // Let's go again
         macSetAlarm(nodeFound ? 250 : 1, allNodesCB);
    3a90:	99 23       	and	r25, r25
    3a92:	19 f4       	brne	.+6      	; 0x3a9a <allNodes+0xcc>
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	02 c0       	rjmp	.+4      	; 0x3a9e <allNodes+0xd0>
    3a9a:	8a ef       	ldi	r24, 0xFA	; 250
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	68 ef       	ldi	r22, 0xF8	; 248
    3aa0:	70 e2       	ldi	r23, 0x20	; 32
    3aa2:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    3aa6:	06 c0       	rjmp	.+12     	; 0x3ab4 <allNodes+0xe6>
      else
         // All done, cancel any furthur action
         function = value = 0;
    3aa8:	10 92 27 14 	sts	0x1427, r1
    3aac:	10 92 26 14 	sts	0x1426, r1
    3ab0:	10 92 28 14 	sts	0x1428, r1
   }
}
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <appTask>:
   Sample application task loop function.  This function is meant to
   be called periodically.  It uses the serial port and button status
   for input, and implements a terminal interface for debugging use.
 */
void appTask(void)
{
    3aba:	9f 92       	push	r9
    3abc:	af 92       	push	r10
    3abe:	bf 92       	push	r11
    3ac0:	cf 92       	push	r12
    3ac2:	df 92       	push	r13
    3ac4:	ef 92       	push	r14
    3ac6:	ff 92       	push	r15
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	df 93       	push	r29
    3ace:	cf 93       	push	r28
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	c6 56       	subi	r28, 0x66	; 102
    3ad6:	d0 40       	sbci	r29, 0x00	; 0
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	f8 94       	cli
    3adc:	de bf       	out	0x3e, r29	; 62
    3ade:	0f be       	out	0x3f, r0	; 63
    3ae0:	cd bf       	out	0x3d, r28	; 61
   static u8 state=0;             // Used for button processing

   // perform periodical things.
   // check for button presses on RCB's
   if (BUTTON_PRESSED() ||
    3ae2:	6d 98       	cbi	0x0d, 5	; 13
    3ae4:	75 9a       	sbi	0x0e, 5	; 14
    3ae6:	65 99       	sbic	0x0c, 5	; 12
    3ae8:	19 c0       	rjmp	.+50     	; 0x3b1c <appTask+0x62>
         (simulateButton &&
               IPV6LOWPAN == 1 &&
               NODETYPE != COORD))
   {
      if (!state)
    3aea:	80 91 25 14 	lds	r24, 0x1425
    3aee:	88 23       	and	r24, r24
    3af0:	b9 f4       	brne	.+46     	; 0x3b20 <appTask+0x66>
      {
         if (pingTimer)
    3af2:	80 91 2a 14 	lds	r24, 0x142A
    3af6:	88 23       	and	r24, r24
    3af8:	29 f0       	breq	.+10     	; 0x3b04 <appTask+0x4a>
         {
            // stop pinging
            macTimerEnd(pingTimer);
    3afa:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>
            pingTimer = 0;
    3afe:	10 92 2a 14 	sts	0x142A, r1
    3b02:	08 c0       	rjmp	.+16     	; 0x3b14 <appTask+0x5a>
         }
         else
         {
            // ping the coordinator
            //debugMsgStr("\r\nPinging coord\r\n");
            UART_PRINT("Pinging coord\r\n");
    3b04:	84 e2       	ldi	r24, 0x24	; 36
    3b06:	94 e0       	ldi	r25, 0x04	; 4
    3b08:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
            if (IPV6LOWPAN == 1)
            {
               simulateButton = 0;
    3b0c:	10 92 2a 0c 	sts	0x0C2A, r1
               sixlowpan_button();
    3b10:	0e 94 92 07 	call	0xf24	; 0xf24 <sixlowpan_button>
            }
            else
               doPing();
         }

         state = 1;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	80 93 25 14 	sts	0x1425, r24
    3b1a:	02 c0       	rjmp	.+4      	; 0x3b20 <appTask+0x66>
      }
   }
   else
      state = 0;
    3b1c:	10 92 25 14 	sts	0x1425, r1

   if (DEBUG && SERIAL)
   {
      if (serial_ischar() &&
    3b20:	0e 94 73 23 	call	0x46e6	; 0x46e6 <serial_ischar>
    3b24:	88 23       	and	r24, r24
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <appTask+0x70>
    3b28:	50 c3       	rjmp	.+1696   	; 0x41ca <appTask+0x710>
         u8 n;
         char ch;
         static u16 addr=0;
         char str[102];

         if (macConfig.busy)
    3b2a:	80 91 d4 1f 	lds	r24, 0x1FD4
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <appTask+0x7a>
    3b32:	4b c3       	rjmp	.+1686   	; 0x41ca <appTask+0x710>
            // try again when mac is not busy
            return;

         ch = serial_getchar();
    3b34:	0e 94 b2 23 	call	0x4764	; 0x4764 <serial_getchar>
    3b38:	18 2f       	mov	r17, r24
         // Quit stream mode on Ctrl-t
         if (ch == 0x14)
    3b3a:	84 31       	cpi	r24, 0x14	; 20
    3b3c:	11 f4       	brne	.+4      	; 0x3b42 <appTask+0x88>
            streamMode = 0;
    3b3e:	10 92 22 14 	sts	0x1422, r1
         // In stream mode, send all serial data over the air.
         if (streamMode)
    3b42:	80 91 22 14 	lds	r24, 0x1422
    3b46:	88 23       	and	r24, r24
    3b48:	01 f1       	breq	.+64     	; 0x3b8a <appTask+0xd0>
    3b4a:	7e 01       	movw	r14, r28
    3b4c:	08 94       	sec
    3b4e:	e1 1c       	adc	r14, r1
    3b50:	f1 1c       	adc	r15, r1
    3b52:	00 e0       	ldi	r16, 0x00	; 0
            // Send the chars out over the air to dest
            n = 0;
            for(;;)
            {
               // Build a string of chars waiting in the queue
               str[n++] = ch;
    3b54:	d7 01       	movw	r26, r14
    3b56:	1c 93       	st	X, r17
    3b58:	0f 5f       	subi	r16, 0xFF	; 255
               if (n >= 100)
    3b5a:	04 36       	cpi	r16, 0x64	; 100
    3b5c:	59 f0       	breq	.+22     	; 0x3b74 <appTask+0xba>
                  break;
               if (serial_ischar())
    3b5e:	0e 94 73 23 	call	0x46e6	; 0x46e6 <serial_ischar>
    3b62:	08 94       	sec
    3b64:	e1 1c       	adc	r14, r1
    3b66:	f1 1c       	adc	r15, r1
    3b68:	88 23       	and	r24, r24
    3b6a:	21 f0       	breq	.+8      	; 0x3b74 <appTask+0xba>
                  ch = serial_getchar();
    3b6c:	0e 94 b2 23 	call	0x4764	; 0x4764 <serial_getchar>
    3b70:	18 2f       	mov	r17, r24
    3b72:	f0 cf       	rjmp	.-32     	; 0x3b54 <appTask+0x9a>
               else
                  break;
            }
            // And send it off to destination
            macDataRequest(addr, n, (u8*) str);
    3b74:	80 91 23 14 	lds	r24, 0x1423
    3b78:	90 91 24 14 	lds	r25, 0x1424
    3b7c:	60 2f       	mov	r22, r16
    3b7e:	ae 01       	movw	r20, r28
    3b80:	4f 5f       	subi	r20, 0xFF	; 255
    3b82:	5f 4f       	sbci	r21, 0xFF	; 255
    3b84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <macDataRequest>
    3b88:	20 c3       	rjmp	.+1600   	; 0x41ca <appTask+0x710>
         }
         else
         {
            debugMsgCrLf();
    3b8a:	83 e3       	ldi	r24, 0x33	; 51
    3b8c:	94 e0       	ldi	r25, 0x04	; 4
    3b8e:	0e 94 66 23 	call	0x46cc	; 0x46cc <serial_puts>
            switch (ch)
    3b92:	19 36       	cpi	r17, 0x69	; 105
    3b94:	f1 f0       	breq	.+60     	; 0x3bd2 <appTask+0x118>
    3b96:	1a 36       	cpi	r17, 0x6A	; 106
    3b98:	50 f4       	brcc	.+20     	; 0x3bae <appTask+0xf4>
    3b9a:	10 35       	cpi	r17, 0x50	; 80
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <appTask+0xe6>
    3b9e:	ee c2       	rjmp	.+1500   	; 0x417c <appTask+0x6c2>
    3ba0:	13 36       	cpi	r17, 0x63	; 99
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <appTask+0xec>
    3ba4:	85 c2       	rjmp	.+1290   	; 0x40b0 <appTask+0x5f6>
    3ba6:	11 34       	cpi	r17, 0x41	; 65
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <appTask+0xf2>
    3baa:	09 c3       	rjmp	.+1554   	; 0x41be <appTask+0x704>
    3bac:	f2 c2       	rjmp	.+1508   	; 0x4192 <appTask+0x6d8>
    3bae:	13 37       	cpi	r17, 0x73	; 115
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <appTask+0xfa>
    3bb2:	63 c2       	rjmp	.+1222   	; 0x407a <appTask+0x5c0>
    3bb4:	14 37       	cpi	r17, 0x74	; 116
    3bb6:	20 f4       	brcc	.+8      	; 0x3bc0 <appTask+0x106>
    3bb8:	10 37       	cpi	r17, 0x70	; 112
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <appTask+0x104>
    3bbc:	00 c3       	rjmp	.+1536   	; 0x41be <appTask+0x704>
    3bbe:	40 c2       	rjmp	.+1152   	; 0x4040 <appTask+0x586>
    3bc0:	14 37       	cpi	r17, 0x74	; 116
    3bc2:	21 f0       	breq	.+8      	; 0x3bcc <appTask+0x112>
    3bc4:	17 37       	cpi	r17, 0x77	; 119
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <appTask+0x110>
    3bc8:	fa c2       	rjmp	.+1524   	; 0x41be <appTask+0x704>
    3bca:	b8 c2       	rjmp	.+1392   	; 0x413c <appTask+0x682>
               // reg dump
               rf2xx_reg_dump();
               break;
            case 't':
               // print table
               macPrintTree();
    3bcc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <macPrintTree>
    3bd0:	f6 c2       	rjmp	.+1516   	; 0x41be <appTask+0x704>
               break;
            case 'i':
               // print info
               sprintf(str,"\r\nshort = %04X\r\nparent = %04X\r\nroute=%04X\r\n",
    3bd2:	ed b7       	in	r30, 0x3d	; 61
    3bd4:	fe b7       	in	r31, 0x3e	; 62
    3bd6:	3a 97       	sbiw	r30, 0x0a	; 10
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	fe bf       	out	0x3e, r31	; 62
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	ed bf       	out	0x3d, r30	; 61
    3be2:	31 96       	adiw	r30, 0x01	; 1
    3be4:	6e 01       	movw	r12, r28
    3be6:	08 94       	sec
    3be8:	c1 1c       	adc	r12, r1
    3bea:	d1 1c       	adc	r13, r1
    3bec:	ad b7       	in	r26, 0x3d	; 61
    3bee:	be b7       	in	r27, 0x3e	; 62
    3bf0:	12 96       	adiw	r26, 0x02	; 2
    3bf2:	dc 92       	st	X, r13
    3bf4:	ce 92       	st	-X, r12
    3bf6:	11 97       	sbiw	r26, 0x01	; 1
    3bf8:	86 e3       	ldi	r24, 0x36	; 54
    3bfa:	94 e0       	ldi	r25, 0x04	; 4
    3bfc:	93 83       	std	Z+3, r25	; 0x03
    3bfe:	82 83       	std	Z+2, r24	; 0x02
    3c00:	80 91 ca 1f 	lds	r24, 0x1FCA
    3c04:	90 91 cb 1f 	lds	r25, 0x1FCB
    3c08:	95 83       	std	Z+5, r25	; 0x05
    3c0a:	84 83       	std	Z+4, r24	; 0x04
    3c0c:	80 91 cc 1f 	lds	r24, 0x1FCC
    3c10:	90 91 cd 1f 	lds	r25, 0x1FCD
    3c14:	97 83       	std	Z+7, r25	; 0x07
    3c16:	86 83       	std	Z+6, r24	; 0x06
    3c18:	80 91 ce 1f 	lds	r24, 0x1FCE
    3c1c:	90 91 cf 1f 	lds	r25, 0x1FCF
    3c20:	91 87       	std	Z+9, r25	; 0x09
    3c22:	80 87       	std	Z+8, r24	; 0x08
    3c24:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
                     macConfig.shortAddress,
                     macConfig.parentShortAddress,
                     macConfig.lastRoute);
               debugMsgStr(str);
    3c28:	ed b7       	in	r30, 0x3d	; 61
    3c2a:	fe b7       	in	r31, 0x3e	; 62
    3c2c:	36 96       	adiw	r30, 0x06	; 6
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	fe bf       	out	0x3e, r31	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	ed bf       	out	0x3d, r30	; 61
    3c38:	80 91 a0 26 	lds	r24, 0x26A0
    3c3c:	90 91 a1 26 	lds	r25, 0x26A1
    3c40:	92 83       	std	Z+2, r25	; 0x02
    3c42:	81 83       	std	Z+1, r24	; 0x01
    3c44:	d4 82       	std	Z+4, r13	; 0x04
    3c46:	c3 82       	std	Z+3, r12	; 0x03
    3c48:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               sprintf(str,"chan = %d\r\n", macConfig.currentChannel);
    3c4c:	00 d0       	rcall	.+0      	; 0x3c4e <appTask+0x194>
    3c4e:	ed b7       	in	r30, 0x3d	; 61
    3c50:	fe b7       	in	r31, 0x3e	; 62
    3c52:	31 96       	adiw	r30, 0x01	; 1
    3c54:	ad b7       	in	r26, 0x3d	; 61
    3c56:	be b7       	in	r27, 0x3e	; 62
    3c58:	12 96       	adiw	r26, 0x02	; 2
    3c5a:	dc 92       	st	X, r13
    3c5c:	ce 92       	st	-X, r12
    3c5e:	11 97       	sbiw	r26, 0x01	; 1
    3c60:	82 e6       	ldi	r24, 0x62	; 98
    3c62:	94 e0       	ldi	r25, 0x04	; 4
    3c64:	93 83       	std	Z+3, r25	; 0x03
    3c66:	82 83       	std	Z+2, r24	; 0x02
    3c68:	80 91 d1 1f 	lds	r24, 0x1FD1
    3c6c:	84 83       	std	Z+4, r24	; 0x04
    3c6e:	15 82       	std	Z+5, r1	; 0x05
    3c70:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
               debugMsgStr(str);
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	80 91 a0 26 	lds	r24, 0x26A0
    3c7c:	90 91 a1 26 	lds	r25, 0x26A1
    3c80:	ed b7       	in	r30, 0x3d	; 61
    3c82:	fe b7       	in	r31, 0x3e	; 62
    3c84:	92 83       	std	Z+2, r25	; 0x02
    3c86:	81 83       	std	Z+1, r24	; 0x01
    3c88:	d4 82       	std	Z+4, r13	; 0x04
    3c8a:	c3 82       	std	Z+3, r12	; 0x03
    3c8c:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               debugMsgStr("PAN ID = 0x");
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	60 91 a0 26 	lds	r22, 0x26A0
    3c9c:	70 91 a1 26 	lds	r23, 0x26A1
    3ca0:	8e e6       	ldi	r24, 0x6E	; 110
    3ca2:	94 e0       	ldi	r25, 0x04	; 4
    3ca4:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
               debugMsgHex(macConfig.panId);
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <appTask+0x1f0>
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <appTask+0x1f2>
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <appTask+0x1f4>
    3cae:	ed b7       	in	r30, 0x3d	; 61
    3cb0:	fe b7       	in	r31, 0x3e	; 62
    3cb2:	31 96       	adiw	r30, 0x01	; 1
    3cb4:	06 ed       	ldi	r16, 0xD6	; 214
    3cb6:	1f e1       	ldi	r17, 0x1F	; 31
    3cb8:	ad b7       	in	r26, 0x3d	; 61
    3cba:	be b7       	in	r27, 0x3e	; 62
    3cbc:	12 96       	adiw	r26, 0x02	; 2
    3cbe:	1c 93       	st	X, r17
    3cc0:	0e 93       	st	-X, r16
    3cc2:	11 97       	sbiw	r26, 0x01	; 1
    3cc4:	8a e7       	ldi	r24, 0x7A	; 122
    3cc6:	94 e0       	ldi	r25, 0x04	; 4
    3cc8:	93 83       	std	Z+3, r25	; 0x03
    3cca:	82 83       	std	Z+2, r24	; 0x02
    3ccc:	80 91 c8 1f 	lds	r24, 0x1FC8
    3cd0:	90 91 c9 1f 	lds	r25, 0x1FC9
    3cd4:	95 83       	std	Z+5, r25	; 0x05
    3cd6:	84 83       	std	Z+4, r24	; 0x04
    3cd8:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    3cdc:	0f 90       	pop	r0
    3cde:	0f 90       	pop	r0
    3ce0:	80 91 a0 26 	lds	r24, 0x26A0
    3ce4:	90 91 a1 26 	lds	r25, 0x26A1
    3ce8:	ed b7       	in	r30, 0x3d	; 61
    3cea:	fe b7       	in	r31, 0x3e	; 62
    3cec:	92 83       	std	Z+2, r25	; 0x02
    3cee:	81 83       	std	Z+1, r24	; 0x01
    3cf0:	14 83       	std	Z+4, r17	; 0x04
    3cf2:	03 83       	std	Z+3, r16	; 0x03
    3cf4:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               debugMsgCrLf();
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	83 e3       	ldi	r24, 0x33	; 51
    3d02:	94 e0       	ldi	r25, 0x04	; 4
    3d04:	0e 94 66 23 	call	0x46cc	; 0x46cc <serial_puts>
               u32 low = macConfig.longAddr;
    3d08:	10 91 bd 1f 	lds	r17, 0x1FBD
    3d0c:	b0 90 be 1f 	lds	r11, 0x1FBE
    3d10:	a0 90 bf 1f 	lds	r10, 0x1FBF
    3d14:	90 90 c0 1f 	lds	r9, 0x1FC0
    3d18:	60 91 c1 1f 	lds	r22, 0x1FC1
    3d1c:	70 91 c2 1f 	lds	r23, 0x1FC2
    3d20:	80 91 c3 1f 	lds	r24, 0x1FC3
    3d24:	90 91 c4 1f 	lds	r25, 0x1FC4
               u32 high = macConfig.longAddr >> 32;
               sprintf(str,"long = 0x%08lX%08lX\r\n", high, low);
    3d28:	2d b7       	in	r18, 0x3d	; 61
    3d2a:	3e b7       	in	r19, 0x3e	; 62
    3d2c:	2c 50       	subi	r18, 0x0C	; 12
    3d2e:	30 40       	sbci	r19, 0x00	; 0
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	3e bf       	out	0x3e, r19	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	2d bf       	out	0x3d, r18	; 61
    3d3a:	ed b6       	in	r14, 0x3d	; 61
    3d3c:	fe b6       	in	r15, 0x3e	; 62
    3d3e:	08 94       	sec
    3d40:	e1 1c       	adc	r14, r1
    3d42:	f1 1c       	adc	r15, r1
    3d44:	ad b7       	in	r26, 0x3d	; 61
    3d46:	be b7       	in	r27, 0x3e	; 62
    3d48:	12 96       	adiw	r26, 0x02	; 2
    3d4a:	dc 92       	st	X, r13
    3d4c:	ce 92       	st	-X, r12
    3d4e:	11 97       	sbiw	r26, 0x01	; 1
    3d50:	2d e7       	ldi	r18, 0x7D	; 125
    3d52:	34 e0       	ldi	r19, 0x04	; 4
    3d54:	f7 01       	movw	r30, r14
    3d56:	33 83       	std	Z+3, r19	; 0x03
    3d58:	22 83       	std	Z+2, r18	; 0x02
    3d5a:	21 2f       	mov	r18, r17
    3d5c:	3b 2d       	mov	r19, r11
    3d5e:	4a 2d       	mov	r20, r10
    3d60:	59 2d       	mov	r21, r9
    3d62:	00 e2       	ldi	r16, 0x20	; 32
    3d64:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <__lshrdi3>
    3d68:	c9 01       	movw	r24, r18
    3d6a:	ba 01       	movw	r22, r20
    3d6c:	d7 01       	movw	r26, r14
    3d6e:	14 96       	adiw	r26, 0x04	; 4
    3d70:	2c 93       	st	X, r18
    3d72:	14 97       	sbiw	r26, 0x04	; 4
    3d74:	15 96       	adiw	r26, 0x05	; 5
    3d76:	9c 93       	st	X, r25
    3d78:	15 97       	sbiw	r26, 0x05	; 5
    3d7a:	16 96       	adiw	r26, 0x06	; 6
    3d7c:	4c 93       	st	X, r20
    3d7e:	16 97       	sbiw	r26, 0x06	; 6
    3d80:	17 96       	adiw	r26, 0x07	; 7
    3d82:	7c 93       	st	X, r23
    3d84:	17 97       	sbiw	r26, 0x07	; 7
    3d86:	18 96       	adiw	r26, 0x08	; 8
    3d88:	1c 93       	st	X, r17
    3d8a:	18 97       	sbiw	r26, 0x08	; 8
    3d8c:	19 96       	adiw	r26, 0x09	; 9
    3d8e:	bc 92       	st	X, r11
    3d90:	19 97       	sbiw	r26, 0x09	; 9
    3d92:	1a 96       	adiw	r26, 0x0a	; 10
    3d94:	ac 92       	st	X, r10
    3d96:	1a 97       	sbiw	r26, 0x0a	; 10
    3d98:	1b 96       	adiw	r26, 0x0b	; 11
    3d9a:	9c 92       	st	X, r9
    3d9c:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
               debugMsgStr(str);
    3da0:	ed b7       	in	r30, 0x3d	; 61
    3da2:	fe b7       	in	r31, 0x3e	; 62
    3da4:	38 96       	adiw	r30, 0x08	; 8
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	fe bf       	out	0x3e, r31	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	ed bf       	out	0x3d, r30	; 61
    3db0:	80 91 a0 26 	lds	r24, 0x26A0
    3db4:	90 91 a1 26 	lds	r25, 0x26A1
    3db8:	92 83       	std	Z+2, r25	; 0x02
    3dba:	81 83       	std	Z+1, r24	; 0x01
    3dbc:	d4 82       	std	Z+4, r13	; 0x04
    3dbe:	c3 82       	std	Z+3, r12	; 0x03
    3dc0:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>

               sprintf(str,"assoc = %s\r\nHops = %04X\r\n",
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	80 91 c5 1f 	lds	r24, 0x1FC5
    3dd0:	88 23       	and	r24, r24
    3dd2:	19 f4       	brne	.+6      	; 0x3dda <appTask+0x320>
    3dd4:	23 e9       	ldi	r18, 0x93	; 147
    3dd6:	34 e0       	ldi	r19, 0x04	; 4
    3dd8:	02 c0       	rjmp	.+4      	; 0x3dde <appTask+0x324>
    3dda:	29 e9       	ldi	r18, 0x99	; 153
    3ddc:	34 e0       	ldi	r19, 0x04	; 4
    3dde:	8d b7       	in	r24, 0x3d	; 61
    3de0:	9e b7       	in	r25, 0x3e	; 62
    3de2:	08 97       	sbiw	r24, 0x08	; 8
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	9e bf       	out	0x3e, r25	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	8d bf       	out	0x3d, r24	; 61
    3dee:	ed b7       	in	r30, 0x3d	; 61
    3df0:	fe b7       	in	r31, 0x3e	; 62
    3df2:	31 96       	adiw	r30, 0x01	; 1
    3df4:	8e 01       	movw	r16, r28
    3df6:	0f 5f       	subi	r16, 0xFF	; 255
    3df8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfa:	ad b7       	in	r26, 0x3d	; 61
    3dfc:	be b7       	in	r27, 0x3e	; 62
    3dfe:	12 96       	adiw	r26, 0x02	; 2
    3e00:	1c 93       	st	X, r17
    3e02:	0e 93       	st	-X, r16
    3e04:	11 97       	sbiw	r26, 0x01	; 1
    3e06:	8e e9       	ldi	r24, 0x9E	; 158
    3e08:	94 e0       	ldi	r25, 0x04	; 4
    3e0a:	93 83       	std	Z+3, r25	; 0x03
    3e0c:	82 83       	std	Z+2, r24	; 0x02
    3e0e:	35 83       	std	Z+5, r19	; 0x05
    3e10:	24 83       	std	Z+4, r18	; 0x04
    3e12:	80 91 d0 1f 	lds	r24, 0x1FD0
    3e16:	86 83       	std	Z+6, r24	; 0x06
    3e18:	17 82       	std	Z+7, r1	; 0x07
    3e1a:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
                     macConfig.associated ? "true" : "false",
                           macConfig.hopsToCoord);
               debugMsgStr(str);
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	80 91 a0 26 	lds	r24, 0x26A0
    3e2a:	90 91 a1 26 	lds	r25, 0x26A1
    3e2e:	ed b7       	in	r30, 0x3d	; 61
    3e30:	fe b7       	in	r31, 0x3e	; 62
    3e32:	92 83       	std	Z+2, r25	; 0x02
    3e34:	81 83       	std	Z+1, r24	; 0x01
    3e36:	14 83       	std	Z+4, r17	; 0x04
    3e38:	03 83       	std	Z+3, r16	; 0x03
    3e3a:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               sprintf(str,"rand = %02X\r\n",
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	88 e0       	ldi	r24, 0x08	; 8
    3e48:	0e 94 8f 1a 	call	0x351e	; 0x351e <radioRandom>
    3e4c:	00 d0       	rcall	.+0      	; 0x3e4e <appTask+0x394>
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <appTask+0x396>
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <appTask+0x398>
    3e52:	ed b7       	in	r30, 0x3d	; 61
    3e54:	fe b7       	in	r31, 0x3e	; 62
    3e56:	31 96       	adiw	r30, 0x01	; 1
    3e58:	ad b7       	in	r26, 0x3d	; 61
    3e5a:	be b7       	in	r27, 0x3e	; 62
    3e5c:	12 96       	adiw	r26, 0x02	; 2
    3e5e:	1c 93       	st	X, r17
    3e60:	0e 93       	st	-X, r16
    3e62:	11 97       	sbiw	r26, 0x01	; 1
    3e64:	28 eb       	ldi	r18, 0xB8	; 184
    3e66:	34 e0       	ldi	r19, 0x04	; 4
    3e68:	33 83       	std	Z+3, r19	; 0x03
    3e6a:	22 83       	std	Z+2, r18	; 0x02
    3e6c:	84 83       	std	Z+4, r24	; 0x04
    3e6e:	15 82       	std	Z+5, r1	; 0x05
    3e70:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
                     radioRandom(8));
               debugMsgStr(str);
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	80 91 a0 26 	lds	r24, 0x26A0
    3e7c:	90 91 a1 26 	lds	r25, 0x26A1
    3e80:	ed b7       	in	r30, 0x3d	; 61
    3e82:	fe b7       	in	r31, 0x3e	; 62
    3e84:	92 83       	std	Z+2, r25	; 0x02
    3e86:	81 83       	std	Z+1, r24	; 0x01
    3e88:	14 83       	std	Z+4, r17	; 0x04
    3e8a:	03 83       	std	Z+3, r16	; 0x03
    3e8c:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               // Radio part number
               u16 pn = radioGetPartnum();
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0e 94 82 1a 	call	0x3504	; 0x3504 <radioGetPartnum>
               switch (pn)
    3e9c:	83 30       	cpi	r24, 0x03	; 3
    3e9e:	59 f0       	breq	.+22     	; 0x3eb6 <appTask+0x3fc>
    3ea0:	87 30       	cpi	r24, 0x07	; 7
    3ea2:	69 f0       	breq	.+26     	; 0x3ebe <appTask+0x404>
    3ea4:	82 30       	cpi	r24, 0x02	; 2
    3ea6:	21 f4       	brne	.+8      	; 0x3eb0 <appTask+0x3f6>
    3ea8:	36 ee       	ldi	r19, 0xE6	; 230
    3eaa:	e3 2e       	mov	r14, r19
    3eac:	f1 2c       	mov	r15, r1
    3eae:	0a c0       	rjmp	.+20     	; 0x3ec4 <appTask+0x40a>
               debugMsgStr(str);
               sprintf(str,"rand = %02X\r\n",
                     radioRandom(8));
               debugMsgStr(str);
               // Radio part number
               u16 pn = radioGetPartnum();
    3eb0:	e8 2e       	mov	r14, r24
    3eb2:	ff 24       	eor	r15, r15
    3eb4:	07 c0       	rjmp	.+14     	; 0x3ec4 <appTask+0x40a>
    3eb6:	27 ee       	ldi	r18, 0xE7	; 231
    3eb8:	e2 2e       	mov	r14, r18
    3eba:	f1 2c       	mov	r15, r1
    3ebc:	03 c0       	rjmp	.+6      	; 0x3ec4 <appTask+0x40a>
               case RF230:
                  pn = 230;
                  break;
               case RF231:
                  pn = 231;
                  break;
    3ebe:	94 ed       	ldi	r25, 0xD4	; 212
    3ec0:	e9 2e       	mov	r14, r25
    3ec2:	f1 2c       	mov	r15, r1
                  break;
               default:
                  // Just report whatever number the radio chip gives.
                  break;
               }
               debugMsgStr("Part=RF");
    3ec4:	60 91 a0 26 	lds	r22, 0x26A0
    3ec8:	70 91 a1 26 	lds	r23, 0x26A1
    3ecc:	86 ec       	ldi	r24, 0xC6	; 198
    3ece:	94 e0       	ldi	r25, 0x04	; 4
    3ed0:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
               sprintf(str,"%u, Rev=%d\r\n", pn,
    3ed4:	8d e5       	ldi	r24, 0x5D	; 93
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_register_read>
    3edc:	2d b7       	in	r18, 0x3d	; 61
    3ede:	3e b7       	in	r19, 0x3e	; 62
    3ee0:	28 50       	subi	r18, 0x08	; 8
    3ee2:	30 40       	sbci	r19, 0x00	; 0
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	f8 94       	cli
    3ee8:	3e bf       	out	0x3e, r19	; 62
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	2d bf       	out	0x3d, r18	; 61
    3eee:	ed b7       	in	r30, 0x3d	; 61
    3ef0:	fe b7       	in	r31, 0x3e	; 62
    3ef2:	31 96       	adiw	r30, 0x01	; 1
    3ef4:	8e 01       	movw	r16, r28
    3ef6:	0f 5f       	subi	r16, 0xFF	; 255
    3ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    3efa:	ad b7       	in	r26, 0x3d	; 61
    3efc:	be b7       	in	r27, 0x3e	; 62
    3efe:	12 96       	adiw	r26, 0x02	; 2
    3f00:	1c 93       	st	X, r17
    3f02:	0e 93       	st	-X, r16
    3f04:	11 97       	sbiw	r26, 0x01	; 1
    3f06:	2e ec       	ldi	r18, 0xCE	; 206
    3f08:	34 e0       	ldi	r19, 0x04	; 4
    3f0a:	33 83       	std	Z+3, r19	; 0x03
    3f0c:	22 83       	std	Z+2, r18	; 0x02
    3f0e:	f5 82       	std	Z+5, r15	; 0x05
    3f10:	e4 82       	std	Z+4, r14	; 0x04
    3f12:	86 83       	std	Z+6, r24	; 0x06
    3f14:	17 82       	std	Z+7, r1	; 0x07
    3f16:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
                     hal_register_read(RG_VERSION_NUM));
               debugMsgStr(str);
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	80 91 a0 26 	lds	r24, 0x26A0
    3f26:	90 91 a1 26 	lds	r25, 0x26A1
    3f2a:	ed b7       	in	r30, 0x3d	; 61
    3f2c:	fe b7       	in	r31, 0x3e	; 62
    3f2e:	92 83       	std	Z+2, r25	; 0x02
    3f30:	81 83       	std	Z+1, r24	; 0x01
    3f32:	14 83       	std	Z+4, r17	; 0x04
    3f34:	03 83       	std	Z+3, r16	; 0x03
    3f36:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
                  debugMsgStr("Name=");
                  debugMsgStr(sensorGetName());
                  debugMsgCrLf();
               }
               // Report compile options
               sprintf(str,"Sleep = %s\r\n", RUMSLEEP ? "Yes":"No");
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <appTask+0x482>
    3f3c:	ed b7       	in	r30, 0x3d	; 61
    3f3e:	fe b7       	in	r31, 0x3e	; 62
    3f40:	31 96       	adiw	r30, 0x01	; 1
    3f42:	ad b7       	in	r26, 0x3d	; 61
    3f44:	be b7       	in	r27, 0x3e	; 62
    3f46:	12 96       	adiw	r26, 0x02	; 2
    3f48:	1c 93       	st	X, r17
    3f4a:	0e 93       	st	-X, r16
    3f4c:	11 97       	sbiw	r26, 0x01	; 1
    3f4e:	8b ed       	ldi	r24, 0xDB	; 219
    3f50:	94 e0       	ldi	r25, 0x04	; 4
    3f52:	93 83       	std	Z+3, r25	; 0x03
    3f54:	82 83       	std	Z+2, r24	; 0x02
    3f56:	88 ee       	ldi	r24, 0xE8	; 232
    3f58:	e8 2e       	mov	r14, r24
    3f5a:	84 e0       	ldi	r24, 0x04	; 4
    3f5c:	f8 2e       	mov	r15, r24
    3f5e:	f5 82       	std	Z+5, r15	; 0x05
    3f60:	e4 82       	std	Z+4, r14	; 0x04
    3f62:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
               debugMsgStr(str);
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	80 91 a0 26 	lds	r24, 0x26A0
    3f6e:	90 91 a1 26 	lds	r25, 0x26A1
    3f72:	ed b7       	in	r30, 0x3d	; 61
    3f74:	fe b7       	in	r31, 0x3e	; 62
    3f76:	92 83       	std	Z+2, r25	; 0x02
    3f78:	81 83       	std	Z+1, r24	; 0x01
    3f7a:	14 83       	std	Z+4, r17	; 0x04
    3f7c:	03 83       	std	Z+3, r16	; 0x03
    3f7e:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               sprintf(str,"Freq = %dMHz\r\n", (int)(F_CPU / 1000000UL));
    3f82:	00 d0       	rcall	.+0      	; 0x3f84 <appTask+0x4ca>
    3f84:	ed b7       	in	r30, 0x3d	; 61
    3f86:	fe b7       	in	r31, 0x3e	; 62
    3f88:	31 96       	adiw	r30, 0x01	; 1
    3f8a:	ad b7       	in	r26, 0x3d	; 61
    3f8c:	be b7       	in	r27, 0x3e	; 62
    3f8e:	12 96       	adiw	r26, 0x02	; 2
    3f90:	1c 93       	st	X, r17
    3f92:	0e 93       	st	-X, r16
    3f94:	11 97       	sbiw	r26, 0x01	; 1
    3f96:	8b ee       	ldi	r24, 0xEB	; 235
    3f98:	94 e0       	ldi	r25, 0x04	; 4
    3f9a:	93 83       	std	Z+3, r25	; 0x03
    3f9c:	82 83       	std	Z+2, r24	; 0x02
    3f9e:	88 e0       	ldi	r24, 0x08	; 8
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	95 83       	std	Z+5, r25	; 0x05
    3fa4:	84 83       	std	Z+4, r24	; 0x04
    3fa6:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
               debugMsgStr(str);
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	80 91 a0 26 	lds	r24, 0x26A0
    3fb2:	90 91 a1 26 	lds	r25, 0x26A1
    3fb6:	ed b7       	in	r30, 0x3d	; 61
    3fb8:	fe b7       	in	r31, 0x3e	; 62
    3fba:	92 83       	std	Z+2, r25	; 0x02
    3fbc:	81 83       	std	Z+1, r24	; 0x01
    3fbe:	14 83       	std	Z+4, r17	; 0x04
    3fc0:	03 83       	std	Z+3, r16	; 0x03
    3fc2:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
                  sprintf(str,"Interval = %d.%dsec\r\n", frameInterval/10, frameInterval%10);
                  debugMsgStr(str);
                  sprintf(str,"Sleep timed by %s timer\r\n", WDOG_SLEEP ? "WatchDog" : "32KHz");
                  debugMsgStr(str);
               }
               sprintf(str,"6LoWPAN = %s\r\n", IPV6LOWPAN ? "Yes":"No");
    3fc6:	00 d0       	rcall	.+0      	; 0x3fc8 <appTask+0x50e>
    3fc8:	ed b7       	in	r30, 0x3d	; 61
    3fca:	fe b7       	in	r31, 0x3e	; 62
    3fcc:	31 96       	adiw	r30, 0x01	; 1
    3fce:	ad b7       	in	r26, 0x3d	; 61
    3fd0:	be b7       	in	r27, 0x3e	; 62
    3fd2:	12 96       	adiw	r26, 0x02	; 2
    3fd4:	1c 93       	st	X, r17
    3fd6:	0e 93       	st	-X, r16
    3fd8:	11 97       	sbiw	r26, 0x01	; 1
    3fda:	8a ef       	ldi	r24, 0xFA	; 250
    3fdc:	94 e0       	ldi	r25, 0x04	; 4
    3fde:	93 83       	std	Z+3, r25	; 0x03
    3fe0:	82 83       	std	Z+2, r24	; 0x02
    3fe2:	89 e0       	ldi	r24, 0x09	; 9
    3fe4:	95 e0       	ldi	r25, 0x05	; 5
    3fe6:	95 83       	std	Z+5, r25	; 0x05
    3fe8:	84 83       	std	Z+4, r24	; 0x04
    3fea:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
               debugMsgStr(str);
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	80 91 a0 26 	lds	r24, 0x26A0
    3ff6:	90 91 a1 26 	lds	r25, 0x26A1
    3ffa:	ed b7       	in	r30, 0x3d	; 61
    3ffc:	fe b7       	in	r31, 0x3e	; 62
    3ffe:	92 83       	std	Z+2, r25	; 0x02
    4000:	81 83       	std	Z+1, r24	; 0x01
    4002:	14 83       	std	Z+4, r17	; 0x04
    4004:	03 83       	std	Z+3, r16	; 0x03
    4006:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
               sprintf(str,"Demo mode = %s\r\n", DEMO ? "Yes":"No");
    400a:	00 d0       	rcall	.+0      	; 0x400c <appTask+0x552>
    400c:	ed b7       	in	r30, 0x3d	; 61
    400e:	fe b7       	in	r31, 0x3e	; 62
    4010:	31 96       	adiw	r30, 0x01	; 1
    4012:	ad b7       	in	r26, 0x3d	; 61
    4014:	be b7       	in	r27, 0x3e	; 62
    4016:	12 96       	adiw	r26, 0x02	; 2
    4018:	1c 93       	st	X, r17
    401a:	0e 93       	st	-X, r16
    401c:	11 97       	sbiw	r26, 0x01	; 1
    401e:	8d e0       	ldi	r24, 0x0D	; 13
    4020:	95 e0       	ldi	r25, 0x05	; 5
    4022:	93 83       	std	Z+3, r25	; 0x03
    4024:	82 83       	std	Z+2, r24	; 0x02
    4026:	f5 82       	std	Z+5, r15	; 0x05
    4028:	e4 82       	std	Z+4, r14	; 0x04
    402a:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    402e:	ed b7       	in	r30, 0x3d	; 61
    4030:	fe b7       	in	r31, 0x3e	; 62
    4032:	36 96       	adiw	r30, 0x06	; 6
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	fe bf       	out	0x3e, r31	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	ed bf       	out	0x3d, r30	; 61
    403e:	bf c0       	rjmp	.+382    	; 0x41be <appTask+0x704>
               break;
               case 'p':
                  // ping
                  debugMsgStr("\r\nEnter short addr:");
    4040:	60 91 a0 26 	lds	r22, 0x26A0
    4044:	70 91 a1 26 	lds	r23, 0x26A1
    4048:	8e e1       	ldi	r24, 0x1E	; 30
    404a:	95 e0       	ldi	r25, 0x05	; 5
    404c:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                  serial_gets(str, 50, true);
    4050:	8e 01       	movw	r16, r28
    4052:	0f 5f       	subi	r16, 0xFF	; 255
    4054:	1f 4f       	sbci	r17, 0xFF	; 255
    4056:	c8 01       	movw	r24, r16
    4058:	62 e3       	ldi	r22, 0x32	; 50
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>
                  addr = atoi(str);
    4060:	c8 01       	movw	r24, r16
    4062:	0e 94 bd 34 	call	0x697a	; 0x697a <atoi>
    4066:	68 2f       	mov	r22, r24
    4068:	80 93 23 14 	sts	0x1423, r24
    406c:	90 93 24 14 	sts	0x1424, r25
                  macPing(PING_REQ_FRAME, addr);
    4070:	82 e0       	ldi	r24, 0x02	; 2
    4072:	79 2f       	mov	r23, r25
    4074:	0e 94 61 14 	call	0x28c2	; 0x28c2 <macPing>
    4078:	a2 c0       	rjmp	.+324    	; 0x41be <appTask+0x704>
                  break;
               case 's':
                  // Send data stream
                  debugMsgStr("\r\nStream mode to addr:");
    407a:	60 91 a0 26 	lds	r22, 0x26A0
    407e:	70 91 a1 26 	lds	r23, 0x26A1
    4082:	82 e3       	ldi	r24, 0x32	; 50
    4084:	95 e0       	ldi	r25, 0x05	; 5
    4086:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                  serial_gets(str,50,true);
    408a:	8e 01       	movw	r16, r28
    408c:	0f 5f       	subi	r16, 0xFF	; 255
    408e:	1f 4f       	sbci	r17, 0xFF	; 255
    4090:	c8 01       	movw	r24, r16
    4092:	62 e3       	ldi	r22, 0x32	; 50
    4094:	41 e0       	ldi	r20, 0x01	; 1
    4096:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>
                  addr = atoi(str);
    409a:	c8 01       	movw	r24, r16
    409c:	0e 94 bd 34 	call	0x697a	; 0x697a <atoi>
    40a0:	90 93 24 14 	sts	0x1424, r25
    40a4:	80 93 23 14 	sts	0x1423, r24
                  streamMode = 1;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	80 93 22 14 	sts	0x1422, r24
    40ae:	87 c0       	rjmp	.+270    	; 0x41be <appTask+0x704>
                  break;
               case 'c':
                  // change coordinator channel
                  if (NODETYPE == COORD)
                  {
                     debugMsgStr("\r\nEnter new chan");
    40b0:	60 91 a0 26 	lds	r22, 0x26A0
    40b4:	70 91 a1 26 	lds	r23, 0x26A1
    40b8:	89 e4       	ldi	r24, 0x49	; 73
    40ba:	95 e0       	ldi	r25, 0x05	; 5
    40bc:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                     serial_gets(str, 50, true);
    40c0:	8e 01       	movw	r16, r28
    40c2:	0f 5f       	subi	r16, 0xFF	; 255
    40c4:	1f 4f       	sbci	r17, 0xFF	; 255
    40c6:	c8 01       	movw	r24, r16
    40c8:	62 e3       	ldi	r22, 0x32	; 50
    40ca:	41 e0       	ldi	r20, 0x01	; 1
    40cc:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>
                     ch = atoi(str);
    40d0:	c8 01       	movw	r24, r16
    40d2:	0e 94 bd 34 	call	0x697a	; 0x697a <atoi>
    40d6:	f8 2e       	mov	r15, r24
                     debugMsgStr("\r\nEnter new PANID");
    40d8:	60 91 a0 26 	lds	r22, 0x26A0
    40dc:	70 91 a1 26 	lds	r23, 0x26A1
    40e0:	8a e5       	ldi	r24, 0x5A	; 90
    40e2:	95 e0       	ldi	r25, 0x05	; 5
    40e4:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                     serial_gets(str, 50, true);
    40e8:	c8 01       	movw	r24, r16
    40ea:	62 e3       	ldi	r22, 0x32	; 50
    40ec:	41 e0       	ldi	r20, 0x01	; 1
    40ee:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>

                     // Re-do the init stuff.
                     macInit(ch);
    40f2:	8f 2d       	mov	r24, r15
    40f4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <macInit>
                     macStartCoord();
    40f8:	0e 94 8a 18 	call	0x3114	; 0x3114 <macStartCoord>
                     debugMsgStr("\r\nStartup, I am coordinator.\r\n");
    40fc:	60 91 a0 26 	lds	r22, 0x26A0
    4100:	70 91 a1 26 	lds	r23, 0x26A1
    4104:	8c e6       	ldi	r24, 0x6C	; 108
    4106:	95 e0       	ldi	r25, 0x05	; 5
    4108:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                     macConfig.associated = true;
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	80 93 c5 1f 	sts	0x1FC5, r24

                     // Set PANID
                     addr = atoi(str);
    4112:	c8 01       	movw	r24, r16
    4114:	0e 94 bd 34 	call	0x697a	; 0x697a <atoi>
    4118:	90 93 24 14 	sts	0x1424, r25
    411c:	80 93 23 14 	sts	0x1423, r24
                     if (addr)
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	09 f4       	brne	.+2      	; 0x4126 <appTask+0x66c>
    4124:	4c c0       	rjmp	.+152    	; 0x41be <appTask+0x704>
                     {
                        radioSetPanId(addr);
    4126:	0e 94 c2 19 	call	0x3384	; 0x3384 <radioSetPanId>
                        macConfig.panId = addr;
    412a:	80 91 23 14 	lds	r24, 0x1423
    412e:	90 91 24 14 	lds	r25, 0x1424
    4132:	90 93 c9 1f 	sts	0x1FC9, r25
    4136:	80 93 c8 1f 	sts	0x1FC8, r24
    413a:	41 c0       	rjmp	.+130    	; 0x41be <appTask+0x704>
                  break;
               case 'w':
                  // wake an end node
                  if (NODETYPE == COORD)
                  {
                     debugMsgStr("\r\nWake which node:");
    413c:	60 91 a0 26 	lds	r22, 0x26A0
    4140:	70 91 a1 26 	lds	r23, 0x26A1
    4144:	8b e8       	ldi	r24, 0x8B	; 139
    4146:	95 e0       	ldi	r25, 0x05	; 5
    4148:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                     serial_gets(str,50,true);
    414c:	8e 01       	movw	r16, r28
    414e:	0f 5f       	subi	r16, 0xFF	; 255
    4150:	1f 4f       	sbci	r17, 0xFF	; 255
    4152:	c8 01       	movw	r24, r16
    4154:	62 e3       	ldi	r22, 0x32	; 50
    4156:	41 e0       	ldi	r20, 0x01	; 1
    4158:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>
                     addr = atoi(str);
    415c:	c8 01       	movw	r24, r16
    415e:	0e 94 bd 34 	call	0x697a	; 0x697a <atoi>
    4162:	90 93 24 14 	sts	0x1424, r25
    4166:	80 93 23 14 	sts	0x1423, r24
                     // Must process any rx'd packets before running macWake...
                     macTask();
    416a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <macTask>
                     macWakeChildNode(addr);
    416e:	80 91 23 14 	lds	r24, 0x1423
    4172:	90 91 24 14 	lds	r25, 0x1424
    4176:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <macWakeChildNode>
    417a:	21 c0       	rjmp	.+66     	; 0x41be <appTask+0x704>
                  }
                  break;
               case 'P':
                  // Pause serial display
                  debugMsgStr("\r\nPaused, press 'P' to unpause");
    417c:	60 91 a0 26 	lds	r22, 0x26A0
    4180:	70 91 a1 26 	lds	r23, 0x26A1
    4184:	8e e9       	ldi	r24, 0x9E	; 158
    4186:	95 e0       	ldi	r25, 0x05	; 5
    4188:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                  serial_toggle_pause();
    418c:	0e 94 0c 24 	call	0x4818	; 0x4818 <serial_toggle_pause>
    4190:	16 c0       	rjmp	.+44     	; 0x41be <appTask+0x704>
                  break;
               case 'A':
                  // Do something to all nodes
                  if (NODETYPE == COORD)
                  {
                     debugMsgStr("\r\nAll nodes - (r)eading, (p)ping:");
    4192:	60 91 a0 26 	lds	r22, 0x26A0
    4196:	70 91 a1 26 	lds	r23, 0x26A1
    419a:	8d eb       	ldi	r24, 0xBD	; 189
    419c:	95 e0       	ldi	r25, 0x05	; 5
    419e:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
                     serial_gets(str,50,true);
    41a2:	ce 01       	movw	r24, r28
    41a4:	01 96       	adiw	r24, 0x01	; 1
    41a6:	62 e3       	ldi	r22, 0x32	; 50
    41a8:	41 e0       	ldi	r20, 0x01	; 1
    41aa:	0e 94 d5 23 	call	0x47aa	; 0x47aa <serial_gets>
                     // Do the function
                     if (*str == 'p')
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	80 37       	cpi	r24, 0x70	; 112
    41b2:	29 f4       	brne	.+10     	; 0x41be <appTask+0x704>
                        allNodes(PING_ALL,0);
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	70 e0       	ldi	r23, 0x00	; 0
    41ba:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <allNodes>
                  break;
               default:
                  break;
            }
            // Delay a bit to allow for other messages (ping resp) to print.
            macSetAlarm(250,printPrompt);
    41be:	8a ef       	ldi	r24, 0xFA	; 250
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	67 e7       	ldi	r22, 0x77	; 119
    41c4:	7c e1       	ldi	r23, 0x1C	; 28
    41c6:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
            break;
         default:
            break;
         }
      }
}
    41ca:	ca 59       	subi	r28, 0x9A	; 154
    41cc:	df 4f       	sbci	r29, 0xFF	; 255
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	df 90       	pop	r13
    41e6:	cf 90       	pop	r12
    41e8:	bf 90       	pop	r11
    41ea:	af 90       	pop	r10
    41ec:	9f 90       	pop	r9
    41ee:	08 95       	ret

000041f0 <allNodesCB>:
/**
    @brief This is used as the allNodes callback for repeating the function operation.
 */
void allNodesCB(void)
{
   allNodes(0,0);
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	70 e0       	ldi	r23, 0x00	; 0
    41f6:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <allNodes>
}
    41fa:	08 95       	ret

000041fc <doPing>:
   Sample application function. Sends a ping packet to the network
   coordinator.
 */
void doPing(void)
{
   hal_register_write(RG_CSMA_BE,0);
    41fc:	8f e6       	ldi	r24, 0x6F	; 111
    41fe:	91 e0       	ldi	r25, 0x01	; 1
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	0e 94 1a 0b 	call	0x1634	; 0x1634 <hal_register_write>
   //macDataRequest(DEFAULT_COORD_ADDR, 110, dataString);
   macPing(PING_REQ_FRAME, DEFAULT_COORD_ADDR);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <macPing>

   // Uncomment the next line to make the button unleash a torrent of pings
#if __AVR__
   //    pingTimer = macSetAlarm(5+(23*(BAND == BAND900)), doPing);
   pingTimer = macSetAlarm(500, doPing);
    4210:	84 ef       	ldi	r24, 0xF4	; 244
    4212:	91 e0       	ldi	r25, 0x01	; 1
    4214:	6e ef       	ldi	r22, 0xFE	; 254
    4216:	70 e2       	ldi	r23, 0x20	; 32
    4218:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    421c:	80 93 2a 14 	sts	0x142A, r24
#endif
}
    4220:	08 95       	ret

00004222 <checkEeprom>:

   Similarly, the sensor interval time is set to 2 seconds if the
   EEPROM is unprogrammed.
 */
void checkEeprom(void)
{
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	df 93       	push	r29
    422c:	cf 93       	push	r28
    422e:	cd b7       	in	r28, 0x3d	; 61
    4230:	de b7       	in	r29, 0x3e	; 62
    4232:	28 97       	sbiw	r28, 0x08	; 8
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
   //if(1)
   //{
   u8 buf[8];
   u8 i,bad=1;

   halGetMacAddr(buf);
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	68 e0       	ldi	r22, 0x08	; 8
    4244:	8e 01       	movw	r16, r28
    4246:	0f 5f       	subi	r16, 0xFF	; 255
    4248:	1f 4f       	sbci	r17, 0xFF	; 255
    424a:	a8 01       	movw	r20, r16
    424c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <halGetEeprom>
    4250:	78 01       	movw	r14, r16
   for (i=0;i<8;i++)
    4252:	9e 01       	movw	r18, r28
    4254:	27 5f       	subi	r18, 0xF7	; 247
    4256:	3f 4f       	sbci	r19, 0xFF	; 255
      if (buf[i] != 0xff)
    4258:	f8 01       	movw	r30, r16
    425a:	80 81       	ld	r24, Z
    425c:	8f 3f       	cpi	r24, 0xFF	; 255
    425e:	b9 f4       	brne	.+46     	; 0x428e <checkEeprom+0x6c>
    4260:	0f 5f       	subi	r16, 0xFF	; 255
    4262:	1f 4f       	sbci	r17, 0xFF	; 255
   //{
   u8 buf[8];
   u8 i,bad=1;

   halGetMacAddr(buf);
   for (i=0;i<8;i++)
    4264:	02 17       	cp	r16, r18
    4266:	13 07       	cpc	r17, r19
    4268:	b9 f7       	brne	.-18     	; 0x4258 <checkEeprom+0x36>
    426a:	2a c0       	rjmp	.+84     	; 0x42c0 <checkEeprom+0x9e>
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
      radioSetTrxState(RX_ON);
      for (i=0;i<8;i++)
         buf[i] = radioRandom(8);
    426c:	88 e0       	ldi	r24, 0x08	; 8
    426e:	0e 94 8f 1a 	call	0x351e	; 0x351e <radioRandom>
    4272:	f7 01       	movw	r30, r14
    4274:	81 93       	st	Z+, r24
    4276:	7f 01       	movw	r14, r30
   if (bad)
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
      radioSetTrxState(RX_ON);
      for (i=0;i<8;i++)
    4278:	e0 17       	cp	r30, r16
    427a:	f1 07       	cpc	r31, r17
    427c:	b9 f7       	brne	.-18     	; 0x426c <checkEeprom+0x4a>
         buf[i] = radioRandom(8);
      halPutMacAddr(buf);
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	68 e0       	ldi	r22, 0x08	; 8
    4284:	ae 01       	movw	r20, r28
    4286:	4f 5f       	subi	r20, 0xFF	; 255
    4288:	5f 4f       	sbci	r21, 0xFF	; 255
    428a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <halPutEeprom>
   }

   halGetEeprom((u8*)offsetof(tEepromContents, dataSeconds),
    428e:	80 e1       	ldi	r24, 0x10	; 16
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	62 e0       	ldi	r22, 0x02	; 2
    4294:	8e 01       	movw	r16, r28
    4296:	0f 5f       	subi	r16, 0xFF	; 255
    4298:	1f 4f       	sbci	r17, 0xFF	; 255
    429a:	a8 01       	movw	r20, r16
    429c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <halGetEeprom>
         sizeof(typeof(((tEepromContents*)0)->dataSeconds)),
         buf);
   if (*((u16*)buf) == 0xffff)
    42a0:	89 81       	ldd	r24, Y+1	; 0x01
    42a2:	9a 81       	ldd	r25, Y+2	; 0x02
    42a4:	8f 5f       	subi	r24, 0xFF	; 255
    42a6:	9f 4f       	sbci	r25, 0xFF	; 255
    42a8:	91 f4       	brne	.+36     	; 0x42ce <checkEeprom+0xac>
   {
      // Bad timeout, set for 2 seconds
      *((u16*)buf) = 0x0014;
    42aa:	84 e1       	ldi	r24, 0x14	; 20
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	9a 83       	std	Y+2, r25	; 0x02
    42b0:	89 83       	std	Y+1, r24	; 0x01
      halPutEeprom((u8*)offsetof(tEepromContents, dataSeconds),
    42b2:	80 e1       	ldi	r24, 0x10	; 16
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	62 e0       	ldi	r22, 0x02	; 2
    42b8:	a8 01       	movw	r20, r16
    42ba:	0e 94 aa 0b 	call	0x1754	; 0x1754 <halPutEeprom>
    42be:	07 c0       	rjmp	.+14     	; 0x42ce <checkEeprom+0xac>
      }

   if (bad)
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	0e 94 39 1c 	call	0x3872	; 0x3872 <radioInit>
      radioSetTrxState(RX_ON);
    42c6:	86 e0       	ldi	r24, 0x06	; 6
    42c8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <radioSetTrxState>
    42cc:	cf cf       	rjmp	.-98     	; 0x426c <checkEeprom+0x4a>
      halPutEeprom((u8*)offsetof(tEepromContents, dataSeconds),
            sizeof(typeof(((tEepromContents*)0)->dataSeconds)),
            buf);
   }
   //}
}
    42ce:	28 96       	adiw	r28, 0x08	; 8
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	1f 91       	pop	r17
    42e0:	0f 91       	pop	r16
    42e2:	ff 90       	pop	r15
    42e4:	ef 90       	pop	r14
    42e6:	08 95       	ret

000042e8 <appInit>:
{
   // Init the mac
   LED_INIT();

   // Blip the LED once on powerup
   blink1();
    42e8:	0e 94 de 1c 	call	0x39bc	; 0x39bc <blink1>

#if (__AVR__)
   // If the EEPROM is cleared, init it to something useful
   checkEeprom();
    42ec:	0e 94 11 21 	call	0x4222	; 0x4222 <checkEeprom>
#endif // __AVR__
   // Init the mac and stuff
   if (NODETYPE == COORD)
   {
      macFindClearChannel();
    42f0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <macFindClearChannel>
      if (IPV6LOWPAN == 1)
         sixlowpan_init();
   }

   // Init the button
   BUTTON_SETUP();
    42f4:	6d 98       	cbi	0x0d, 5	; 13
    42f6:	75 9a       	sbi	0x0e, 5	; 14

   // Turn the power down depending if button is pressed on powerup
   if (!BUTTON_PRESSED() && DEMO)
    42f8:	6d 98       	cbi	0x0d, 5	; 13
    42fa:	75 9a       	sbi	0x0e, 5	; 14
    42fc:	8c b1       	in	r24, 0x0c	; 12
      hal_subregister_write(SR_RX_PDT_LEVEL, 0x02);
#endif
      UART_PRINT("Demo mode");
   }
   else
      UART_PRINT("Normal mode\r\n");
    42fe:	8f ed       	ldi	r24, 0xDF	; 223
    4300:	95 e0       	ldi	r25, 0x05	; 5
    4302:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>

}
    4306:	08 95       	ret

00004308 <appClearChanFound>:
   completes.

   u8 channel The clear channel selected for use by this PAN.
 */
void appClearChanFound(u8 channel)
{
    4308:	1f 93       	push	r17
    430a:	18 2f       	mov	r17, r24
   if (NODETYPE == COORD)
   {
      macInit(channel);
    430c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <macInit>
      macStartCoord();
    4310:	0e 94 8a 18 	call	0x3114	; 0x3114 <macStartCoord>
#if (__AVR__)
      //debugMsgStr("\r\nStartup, I am coordinator on ch ");
      UART_PRINT("\r\nStartup, I am coordinator on ch ");
    4314:	00 d0       	rcall	.+0      	; 0x4316 <appClearChanFound+0xe>
    4316:	8c ee       	ldi	r24, 0xEC	; 236
    4318:	95 e0       	ldi	r25, 0x05	; 5
    431a:	ad b7       	in	r26, 0x3d	; 61
    431c:	be b7       	in	r27, 0x3e	; 62
    431e:	12 96       	adiw	r26, 0x02	; 2
    4320:	9c 93       	st	X, r25
    4322:	8e 93       	st	-X, r24
    4324:	11 97       	sbiw	r26, 0x01	; 1
    4326:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
//#else // __arm__
      //        fnDebugMsg("\r\nStartup, I am coordinator on ch ");
#endif // __AVR__
      //debugMsgInt(channel);
      UART_PRINT_HEX(channel);
    432a:	00 d0       	rcall	.+0      	; 0x432c <appClearChanFound+0x24>
    432c:	ed b7       	in	r30, 0x3d	; 61
    432e:	fe b7       	in	r31, 0x3e	; 62
    4330:	31 96       	adiw	r30, 0x01	; 1
    4332:	8a e7       	ldi	r24, 0x7A	; 122
    4334:	94 e0       	ldi	r25, 0x04	; 4
    4336:	ad b7       	in	r26, 0x3d	; 61
    4338:	be b7       	in	r27, 0x3e	; 62
    433a:	12 96       	adiw	r26, 0x02	; 2
    433c:	9c 93       	st	X, r25
    433e:	8e 93       	st	-X, r24
    4340:	11 97       	sbiw	r26, 0x01	; 1
    4342:	12 83       	std	Z+2, r17	; 0x02
    4344:	13 82       	std	Z+3, r1	; 0x03
    4346:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
      UART_PRINT("\r\n");
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	8f e0       	ldi	r24, 0x0F	; 15
    4354:	96 e0       	ldi	r25, 0x06	; 6
    4356:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
      macConfig.associated = true;
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	80 93 c5 1f 	sts	0x1FC5, r24

      if (IPV6LOWPAN == 1)
         //Start uIP stack with 802.15.4 interface
         tuip_init_802154(macConfig.panId, macConfig.shortAddress);
   }
}
    4360:	1f 91       	pop	r17
    4362:	08 95       	ret

00004364 <appAssociate>:
/**
   Sample application function, associates this node to a network.
   This function is called after a successful @ref macScan.
 */
void appAssociate(void)
{
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
   debugMsgStr("\r\nAssociating to ");
    436c:	60 91 a0 26 	lds	r22, 0x26A0
    4370:	70 91 a1 26 	lds	r23, 0x26A1
    4374:	81 e1       	ldi	r24, 0x11	; 17
    4376:	96 e0       	ldi	r25, 0x06	; 6
    4378:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgHex(panDescriptor.coordAddr);
    437c:	00 d0       	rcall	.+0      	; 0x437e <appAssociate+0x1a>
    437e:	00 d0       	rcall	.+0      	; 0x4380 <appAssociate+0x1c>
    4380:	00 d0       	rcall	.+0      	; 0x4382 <appAssociate+0x1e>
    4382:	ed b7       	in	r30, 0x3d	; 61
    4384:	fe b7       	in	r31, 0x3e	; 62
    4386:	31 96       	adiw	r30, 0x01	; 1
    4388:	06 ed       	ldi	r16, 0xD6	; 214
    438a:	1f e1       	ldi	r17, 0x1F	; 31
    438c:	ad b7       	in	r26, 0x3d	; 61
    438e:	be b7       	in	r27, 0x3e	; 62
    4390:	12 96       	adiw	r26, 0x02	; 2
    4392:	1c 93       	st	X, r17
    4394:	0e 93       	st	-X, r16
    4396:	11 97       	sbiw	r26, 0x01	; 1
    4398:	8a e7       	ldi	r24, 0x7A	; 122
    439a:	94 e0       	ldi	r25, 0x04	; 4
    439c:	93 83       	std	Z+3, r25	; 0x03
    439e:	82 83       	std	Z+2, r24	; 0x02
    43a0:	80 91 67 20 	lds	r24, 0x2067
    43a4:	90 91 68 20 	lds	r25, 0x2068
    43a8:	95 83       	std	Z+5, r25	; 0x05
    43aa:	84 83       	std	Z+4, r24	; 0x04
    43ac:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	80 91 a0 26 	lds	r24, 0x26A0
    43b8:	90 91 a1 26 	lds	r25, 0x26A1
    43bc:	ed b7       	in	r30, 0x3d	; 61
    43be:	fe b7       	in	r31, 0x3e	; 62
    43c0:	92 83       	std	Z+2, r25	; 0x02
    43c2:	81 83       	std	Z+1, r24	; 0x01
    43c4:	14 83       	std	Z+4, r17	; 0x04
    43c6:	03 83       	std	Z+3, r16	; 0x03
    43c8:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
   debugMsgStr(" on ch ");
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	60 91 a0 26 	lds	r22, 0x26A0
    43d8:	70 91 a1 26 	lds	r23, 0x26A1
    43dc:	83 e2       	ldi	r24, 0x23	; 35
    43de:	96 e0       	ldi	r25, 0x06	; 6
    43e0:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgInt(panDescriptor.logicalChannel);
    43e4:	00 d0       	rcall	.+0      	; 0x43e6 <appAssociate+0x82>
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <appAssociate+0x84>
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <appAssociate+0x86>
    43ea:	ed b7       	in	r30, 0x3d	; 61
    43ec:	fe b7       	in	r31, 0x3e	; 62
    43ee:	31 96       	adiw	r30, 0x01	; 1
    43f0:	ad b7       	in	r26, 0x3d	; 61
    43f2:	be b7       	in	r27, 0x3e	; 62
    43f4:	12 96       	adiw	r26, 0x02	; 2
    43f6:	1c 93       	st	X, r17
    43f8:	0e 93       	st	-X, r16
    43fa:	11 97       	sbiw	r26, 0x01	; 1
    43fc:	41 e1       	ldi	r20, 0x11	; 17
    43fe:	e4 2e       	mov	r14, r20
    4400:	44 e0       	ldi	r20, 0x04	; 4
    4402:	f4 2e       	mov	r15, r20
    4404:	f3 82       	std	Z+3, r15	; 0x03
    4406:	e2 82       	std	Z+2, r14	; 0x02
    4408:	80 91 69 20 	lds	r24, 0x2069
    440c:	84 83       	std	Z+4, r24	; 0x04
    440e:	15 82       	std	Z+5, r1	; 0x05
    4410:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	80 91 a0 26 	lds	r24, 0x26A0
    441c:	90 91 a1 26 	lds	r25, 0x26A1
    4420:	ed b7       	in	r30, 0x3d	; 61
    4422:	fe b7       	in	r31, 0x3e	; 62
    4424:	92 83       	std	Z+2, r25	; 0x02
    4426:	81 83       	std	Z+1, r24	; 0x01
    4428:	14 83       	std	Z+4, r17	; 0x04
    442a:	03 83       	std	Z+3, r16	; 0x03
    442c:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
   debugMsgStr(", hops = ");
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	60 91 a0 26 	lds	r22, 0x26A0
    443c:	70 91 a1 26 	lds	r23, 0x26A1
    4440:	8b e2       	ldi	r24, 0x2B	; 43
    4442:	96 e0       	ldi	r25, 0x06	; 6
    4444:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgInt(panDescriptor.hopsToCoord);
    4448:	00 d0       	rcall	.+0      	; 0x444a <appAssociate+0xe6>
    444a:	00 d0       	rcall	.+0      	; 0x444c <appAssociate+0xe8>
    444c:	00 d0       	rcall	.+0      	; 0x444e <appAssociate+0xea>
    444e:	ed b7       	in	r30, 0x3d	; 61
    4450:	fe b7       	in	r31, 0x3e	; 62
    4452:	31 96       	adiw	r30, 0x01	; 1
    4454:	ad b7       	in	r26, 0x3d	; 61
    4456:	be b7       	in	r27, 0x3e	; 62
    4458:	12 96       	adiw	r26, 0x02	; 2
    445a:	1c 93       	st	X, r17
    445c:	0e 93       	st	-X, r16
    445e:	11 97       	sbiw	r26, 0x01	; 1
    4460:	f3 82       	std	Z+3, r15	; 0x03
    4462:	e2 82       	std	Z+2, r14	; 0x02
    4464:	80 91 6d 20 	lds	r24, 0x206D
    4468:	84 83       	std	Z+4, r24	; 0x04
    446a:	15 82       	std	Z+5, r1	; 0x05
    446c:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	80 91 a0 26 	lds	r24, 0x26A0
    4478:	90 91 a1 26 	lds	r25, 0x26A1
    447c:	ed b7       	in	r30, 0x3d	; 61
    447e:	fe b7       	in	r31, 0x3e	; 62
    4480:	92 83       	std	Z+2, r25	; 0x02
    4482:	81 83       	std	Z+1, r24	; 0x01
    4484:	14 83       	std	Z+4, r17	; 0x04
    4486:	03 83       	std	Z+3, r16	; 0x03
    4488:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>

   macAssociate(panDescriptor.coordAddr, panDescriptor.logicalChannel);
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	80 91 67 20 	lds	r24, 0x2067
    4498:	90 91 68 20 	lds	r25, 0x2068
    449c:	60 91 69 20 	lds	r22, 0x2069
    44a0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <macAssociate>
}
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	08 95       	ret

000044ae <sappStartScan>:

      macScan();
   }

   if (IPV6LOWPAN == 1)
      sixlowpan_application_init();
    44ae:	0e 94 91 07 	call	0xf22	; 0xf22 <sixlowpan_application_init>
}
    44b2:	08 95       	ret

000044b4 <appPingRsp>:
   response packet addressed to this node.

   @param addr The short address of the node that send the ping response
 */
void appPingRsp(u16 addr)
{
    44b4:	ef 92       	push	r14
    44b6:	ff 92       	push	r15
    44b8:	0f 93       	push	r16
    44ba:	1f 93       	push	r17
    44bc:	7c 01       	movw	r14, r24
   debugMsgStr("\r\nPing response from ");
    44be:	60 91 a0 26 	lds	r22, 0x26A0
    44c2:	70 91 a1 26 	lds	r23, 0x26A1
    44c6:	85 e3       	ldi	r24, 0x35	; 53
    44c8:	96 e0       	ldi	r25, 0x06	; 6
    44ca:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgHex(addr);
    44ce:	00 d0       	rcall	.+0      	; 0x44d0 <appPingRsp+0x1c>
    44d0:	00 d0       	rcall	.+0      	; 0x44d2 <appPingRsp+0x1e>
    44d2:	00 d0       	rcall	.+0      	; 0x44d4 <appPingRsp+0x20>
    44d4:	ed b7       	in	r30, 0x3d	; 61
    44d6:	fe b7       	in	r31, 0x3e	; 62
    44d8:	31 96       	adiw	r30, 0x01	; 1
    44da:	06 ed       	ldi	r16, 0xD6	; 214
    44dc:	1f e1       	ldi	r17, 0x1F	; 31
    44de:	ad b7       	in	r26, 0x3d	; 61
    44e0:	be b7       	in	r27, 0x3e	; 62
    44e2:	12 96       	adiw	r26, 0x02	; 2
    44e4:	1c 93       	st	X, r17
    44e6:	0e 93       	st	-X, r16
    44e8:	11 97       	sbiw	r26, 0x01	; 1
    44ea:	8a e7       	ldi	r24, 0x7A	; 122
    44ec:	94 e0       	ldi	r25, 0x04	; 4
    44ee:	93 83       	std	Z+3, r25	; 0x03
    44f0:	82 83       	std	Z+2, r24	; 0x02
    44f2:	f5 82       	std	Z+5, r15	; 0x05
    44f4:	e4 82       	std	Z+4, r14	; 0x04
    44f6:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	80 91 a0 26 	lds	r24, 0x26A0
    4502:	90 91 a1 26 	lds	r25, 0x26A1
    4506:	ed b7       	in	r30, 0x3d	; 61
    4508:	fe b7       	in	r31, 0x3e	; 62
    450a:	92 83       	std	Z+2, r25	; 0x02
    450c:	81 83       	std	Z+1, r24	; 0x01
    450e:	14 83       	std	Z+4, r17	; 0x04
    4510:	03 83       	std	Z+3, r16	; 0x03
    4512:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
   debugMsgStr(" LQI=");
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	60 91 a0 26 	lds	r22, 0x26A0
    4522:	70 91 a1 26 	lds	r23, 0x26A1
    4526:	8b e4       	ldi	r24, 0x4B	; 75
    4528:	96 e0       	ldi	r25, 0x06	; 6
    452a:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgInt(radioGetSavedLqiValue());
    452e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <radioGetSavedLqiValue>
    4532:	00 d0       	rcall	.+0      	; 0x4534 <appPingRsp+0x80>
    4534:	00 d0       	rcall	.+0      	; 0x4536 <appPingRsp+0x82>
    4536:	00 d0       	rcall	.+0      	; 0x4538 <appPingRsp+0x84>
    4538:	ed b7       	in	r30, 0x3d	; 61
    453a:	fe b7       	in	r31, 0x3e	; 62
    453c:	31 96       	adiw	r30, 0x01	; 1
    453e:	ad b7       	in	r26, 0x3d	; 61
    4540:	be b7       	in	r27, 0x3e	; 62
    4542:	12 96       	adiw	r26, 0x02	; 2
    4544:	1c 93       	st	X, r17
    4546:	0e 93       	st	-X, r16
    4548:	11 97       	sbiw	r26, 0x01	; 1
    454a:	51 e1       	ldi	r21, 0x11	; 17
    454c:	e5 2e       	mov	r14, r21
    454e:	54 e0       	ldi	r21, 0x04	; 4
    4550:	f5 2e       	mov	r15, r21
    4552:	f3 82       	std	Z+3, r15	; 0x03
    4554:	e2 82       	std	Z+2, r14	; 0x02
    4556:	84 83       	std	Z+4, r24	; 0x04
    4558:	15 82       	std	Z+5, r1	; 0x05
    455a:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    455e:	0f 90       	pop	r0
    4560:	0f 90       	pop	r0
    4562:	80 91 a0 26 	lds	r24, 0x26A0
    4566:	90 91 a1 26 	lds	r25, 0x26A1
    456a:	ed b7       	in	r30, 0x3d	; 61
    456c:	fe b7       	in	r31, 0x3e	; 62
    456e:	92 83       	std	Z+2, r25	; 0x02
    4570:	81 83       	std	Z+1, r24	; 0x01
    4572:	14 83       	std	Z+4, r17	; 0x04
    4574:	03 83       	std	Z+3, r16	; 0x03
    4576:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
   debugMsgStr(" RSSI=");
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	60 91 a0 26 	lds	r22, 0x26A0
    4586:	70 91 a1 26 	lds	r23, 0x26A1
    458a:	81 e5       	ldi	r24, 0x51	; 81
    458c:	96 e0       	ldi	r25, 0x06	; 6
    458e:	0e 94 39 35 	call	0x6a72	; 0x6a72 <fputs>
   debugMsgInt(radioGetSavedRssiValue());
    4592:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <radioGetSavedRssiValue>
    4596:	00 d0       	rcall	.+0      	; 0x4598 <appPingRsp+0xe4>
    4598:	00 d0       	rcall	.+0      	; 0x459a <appPingRsp+0xe6>
    459a:	00 d0       	rcall	.+0      	; 0x459c <appPingRsp+0xe8>
    459c:	ed b7       	in	r30, 0x3d	; 61
    459e:	fe b7       	in	r31, 0x3e	; 62
    45a0:	31 96       	adiw	r30, 0x01	; 1
    45a2:	ad b7       	in	r26, 0x3d	; 61
    45a4:	be b7       	in	r27, 0x3e	; 62
    45a6:	12 96       	adiw	r26, 0x02	; 2
    45a8:	1c 93       	st	X, r17
    45aa:	0e 93       	st	-X, r16
    45ac:	11 97       	sbiw	r26, 0x01	; 1
    45ae:	f3 82       	std	Z+3, r15	; 0x03
    45b0:	e2 82       	std	Z+2, r14	; 0x02
    45b2:	84 83       	std	Z+4, r24	; 0x04
    45b4:	15 82       	std	Z+5, r1	; 0x05
    45b6:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <sprintf>
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	80 91 a0 26 	lds	r24, 0x26A0
    45c2:	90 91 a1 26 	lds	r25, 0x26A1
    45c6:	ed b7       	in	r30, 0x3d	; 61
    45c8:	fe b7       	in	r31, 0x3e	; 62
    45ca:	92 83       	std	Z+2, r25	; 0x02
    45cc:	81 83       	std	Z+1, r24	; 0x01
    45ce:	14 83       	std	Z+4, r17	; 0x04
    45d0:	03 83       	std	Z+3, r16	; 0x03
    45d2:	0e 94 28 35 	call	0x6a50	; 0x6a50 <fprintf>
   debugMsgCrLf();
    45d6:	0f 90       	pop	r0
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	0f 90       	pop	r0
    45de:	83 e3       	ldi	r24, 0x33	; 51
    45e0:	94 e0       	ldi	r25, 0x04	; 4
    45e2:	0e 94 66 23 	call	0x46cc	; 0x46cc <serial_puts>
   if (PLATFORM == RAVEN && SERIAL)
      // Tell 3290p
      serial_send_frame(REPORT_PING_BEEP, 2, (u8*)&addr);

   // turn on the LED
   LED_ON(1);
    45e6:	71 98       	cbi	0x0e, 1	; 14
    45e8:	69 9a       	sbi	0x0d, 1	; 13

   // and make it turn off after a litte bit
   macSetAlarm(LED_DELAY,ledoff1);
    45ea:	8a e0       	ldi	r24, 0x0A	; 10
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	65 e6       	ldi	r22, 0x65	; 101
    45f0:	7c e1       	ldi	r23, 0x1C	; 28
    45f2:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
   //#if(__arm__)
   //    gotPanCoordPing = 1;
   //#endif
}
    45f6:	1f 91       	pop	r17
    45f8:	0f 91       	pop	r16
    45fa:	ff 90       	pop	r15
    45fc:	ef 90       	pop	r14
    45fe:	08 95       	ret

00004600 <twiInit>:
#define twiWrite(a,b)
#endif // PLATFORM == SPITFIRE

#else // APP == SENSOR

void twiInit(void) {;}
    4600:	08 95       	ret

00004602 <twiWrite>:
void twiWrite(u8 addr, u8 data) {;}
    4602:	08 95       	ret

00004604 <sensorGetName>:
char *sensorGetName(void) {return NULL;}
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	08 95       	ret

0000460a <sensorSendSetNodeName>:
void sensorSendSetNodeName(u16 addr, char *name) {}
    460a:	08 95       	ret

0000460c <serial_init>:

    @param cbuf Points to the structure to be initialized.
*/
static void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
    460c:	10 92 ae 14 	sts	0x14AE, r1
    4610:	20 91 ae 14 	lds	r18, 0x14AE
    4614:	20 93 ad 14 	sts	0x14AD, r18
    4618:	10 92 2c 14 	sts	0x142C, r1
    461c:	20 91 2c 14 	lds	r18, 0x142C
    4620:	20 93 2b 14 	sts	0x142B, r18
    if (PLATFORM == RAVENUSB)
        uart_usb_init();
    else
    {
        // Enable RX,TX and RX interrupt on USART
        USART_SETUP();
    4624:	28 e9       	ldi	r18, 0x98	; 152
    4626:	20 93 c9 00 	sts	0x00C9, r18
    462a:	26 e0       	ldi	r18, 0x06	; 6
    462c:	20 93 ca 00 	sts	0x00CA, r18
    4630:	10 92 cd 00 	sts	0x00CD, r1
    4634:	2c e0       	ldi	r18, 0x0C	; 12
    4636:	20 93 cc 00 	sts	0x00CC, r18
        
        // save pointer to rx handler function
        rx_handler = rxh;
    463a:	90 93 30 15 	sts	0x1530, r25
    463e:	80 93 2f 15 	sts	0x152F, r24
        
        // Init the RCB_BB if necessary
        if (PLATFORM < RAVEN) // RCB's only
            INIT_RCB_BB();
    }
}
    4642:	08 95       	ret

00004644 <serial_shutdown>:
   Turns off the serial port and RCB_BB transmitter chip
*/
void serial_shutdown(void)
{
    if (PLATFORM != RAVENUSB)
        USART_STOP();
    4644:	10 92 c9 00 	sts	0x00C9, r1
}
    4648:	08 95       	ret

0000464a <serial_putchar>:

    @param ch Character to be placed in the serial output buffer and
    then transmitted over the serial port.
*/
void serial_putchar(char ch)
{
    464a:	38 2f       	mov	r19, r24
    // If we're paused, don't send anything
    if (pause)
    464c:	80 91 32 15 	lds	r24, 0x1532
    4650:	88 23       	and	r24, r24
    4652:	d9 f5       	brne	.+118    	; 0x46ca <serial_putchar+0x80>
        return;

    // Interrupts really should be on here
    sei();
    4654:	78 94       	sei
    @param ch Character to add to buffer.
*/
static void add_to_circ_buf(tcirc_buf *cbuf, u8 ch)
{
    // Add char to buffer
    u8 newhead = cbuf->head;
    4656:	90 91 2b 14 	lds	r25, 0x142B
    newhead++;
    465a:	9f 5f       	subi	r25, 0xFF	; 255
    if (newhead >= BUFSIZE)
    465c:	97 ff       	sbrs	r25, 7
    465e:	05 c0       	rjmp	.+10     	; 0x466a <serial_putchar+0x20>
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	03 c0       	rjmp	.+6      	; 0x466a <serial_putchar+0x20>
        newhead = 0;
    while (newhead == cbuf->tail)
        if (rx)
    4664:	22 23       	and	r18, r18
    4666:	19 f0       	breq	.+6      	; 0x466e <serial_putchar+0x24>
    4668:	0e c0       	rjmp	.+28     	; 0x4686 <serial_putchar+0x3c>
    466a:	20 91 31 15 	lds	r18, 0x1531
    // Add char to buffer
    u8 newhead = cbuf->head;
    newhead++;
    if (newhead >= BUFSIZE)
        newhead = 0;
    while (newhead == cbuf->tail)
    466e:	80 91 2c 14 	lds	r24, 0x142C
    4672:	98 17       	cp	r25, r24
    4674:	b9 f3       	breq	.-18     	; 0x4664 <serial_putchar+0x1a>
            return;
        else
            cdc_task();


    cbuf->buf[cbuf->head] = ch;
    4676:	e0 91 2b 14 	lds	r30, 0x142B
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	e5 5d       	subi	r30, 0xD5	; 213
    467e:	fb 4e       	sbci	r31, 0xEB	; 235
    4680:	32 83       	std	Z+2, r19	; 0x02
    cbuf->head = newhead;
    4682:	90 93 2b 14 	sts	0x142B, r25
    add_to_circ_buf(&txbuf, ch);

    // Send the first byte if nothing is yet being sent
    // This is determined by seeing if the TX complete interrupt is
    // enabled.
    if (PLATFORM != RAVENUSB && USART_CHAR_READY())
    4686:	80 91 c9 00 	lds	r24, 0x00C9
    468a:	85 fd       	sbrc	r24, 5
    468c:	1e c0       	rjmp	.+60     	; 0x46ca <serial_putchar+0x80>
    {
        // Wait for the UDR buffer to get emptied.
        while (USART_DRE_WAIT())
    468e:	80 91 c8 00 	lds	r24, 0x00C8
    4692:	85 ff       	sbrs	r24, 5
    4694:	fc cf       	rjmp	.-8      	; 0x468e <serial_putchar+0x44>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    4696:	90 91 2c 14 	lds	r25, 0x142C
    u8 retval = cbuf->buf[newtail];
    469a:	e9 2f       	mov	r30, r25
    469c:	f0 e0       	ldi	r31, 0x00	; 0
    469e:	e5 5d       	subi	r30, 0xD5	; 213
    46a0:	fb 4e       	sbci	r31, 0xEB	; 235
    46a2:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    46a4:	80 91 2b 14 	lds	r24, 0x142B
    46a8:	98 17       	cp	r25, r24
    46aa:	11 f4       	brne	.+4      	; 0x46b0 <serial_putchar+0x66>
    46ac:	2f ef       	ldi	r18, 0xFF	; 255
    46ae:	06 c0       	rjmp	.+12     	; 0x46bc <serial_putchar+0x72>
        return SERIAL_ERR;

    newtail++;
    46b0:	e9 2f       	mov	r30, r25
    46b2:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    46b4:	e7 fd       	sbrc	r30, 7
    46b6:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    46b8:	e0 93 2c 14 	sts	0x142C, r30
    {
        // Wait for the UDR buffer to get emptied.
        while (USART_DRE_WAIT())
            ;
        // Feed the first byte to get the transmission started.
        USART_REG = get_from_circ_buf(&txbuf);
    46bc:	20 93 ce 00 	sts	0x00CE, r18

        // Enable the UART Data Register Empty interrupt.
        USART_DRE_ENABLE();
    46c0:	80 91 c9 00 	lds	r24, 0x00C9
    46c4:	80 62       	ori	r24, 0x20	; 32
    46c6:	80 93 c9 00 	sts	0x00C9, r24
    46ca:	08 95       	ret

000046cc <serial_puts>:
   @brief Sends an ASCIIZ string to the serial port.

   @param str Pointer to ASCIIZ terminated string to send.
*/
void serial_puts(char *str)
{
    46cc:	cf 93       	push	r28
    46ce:	df 93       	push	r29
    46d0:	ec 01       	movw	r28, r24
    46d2:	03 c0       	rjmp	.+6      	; 0x46da <serial_puts+0xe>
    while (*str)
    {
        serial_putchar(*str);
    46d4:	0e 94 25 23 	call	0x464a	; 0x464a <serial_putchar>
        str++;
    46d8:	21 96       	adiw	r28, 0x01	; 1

   @param str Pointer to ASCIIZ terminated string to send.
*/
void serial_puts(char *str)
{
    while (*str)
    46da:	88 81       	ld	r24, Y
    46dc:	88 23       	and	r24, r24
    46de:	d1 f7       	brne	.-12     	; 0x46d4 <serial_puts+0x8>
    {
        serial_putchar(*str);
        str++;
    }
}
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	08 95       	ret

000046e6 <serial_ischar>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    46e6:	80 91 ad 14 	lds	r24, 0x14AD
    46ea:	90 91 ae 14 	lds	r25, 0x14AE
    46ee:	28 2f       	mov	r18, r24
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	29 1b       	sub	r18, r25
    46f4:	31 09       	sbc	r19, r1
    if (count < 0)
    46f6:	37 ff       	sbrs	r19, 7
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <serial_ischar+0x18>
        count += BUFSIZE;
    46fa:	20 58       	subi	r18, 0x80	; 128
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
   @return The number of characters waiting
*/
u8 serial_ischar(void)
{
    return circ_buf_count(&rxbuf);
}
    46fe:	82 2f       	mov	r24, r18
    4700:	08 95       	ret

00004702 <rx_buf_count>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    4702:	80 91 ad 14 	lds	r24, 0x14AD
    4706:	90 91 ae 14 	lds	r25, 0x14AE
    470a:	28 2f       	mov	r18, r24
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	29 1b       	sub	r18, r25
    4710:	31 09       	sbc	r19, r1
    if (count < 0)
    4712:	37 ff       	sbrs	r19, 7
    4714:	02 c0       	rjmp	.+4      	; 0x471a <rx_buf_count+0x18>
        count += BUFSIZE;
    4716:	20 58       	subi	r18, 0x80	; 128
    4718:	3f 4f       	sbci	r19, 0xFF	; 255
   @return true if we can take for chars, otherwise false.
*/
u8 rx_buf_count(void)
{
    return circ_buf_count(&rxbuf);
}
    471a:	82 2f       	mov	r24, r18
    471c:	08 95       	ret

0000471e <tx_buf_has_char>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    471e:	80 91 2b 14 	lds	r24, 0x142B
    4722:	90 91 2c 14 	lds	r25, 0x142C
    4726:	28 2f       	mov	r18, r24
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	29 1b       	sub	r18, r25
    472c:	31 09       	sbc	r19, r1
    if (count < 0)
    472e:	37 ff       	sbrs	r19, 7
    4730:	02 c0       	rjmp	.+4      	; 0x4736 <tx_buf_has_char+0x18>
        count += BUFSIZE;
    4732:	20 58       	subi	r18, 0x80	; 128
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
}

u8 tx_buf_has_char(void)
{
    return circ_buf_count(&txbuf);
}
    4736:	82 2f       	mov	r24, r18
    4738:	08 95       	ret

0000473a <get_tx_char>:
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    473a:	90 91 2c 14 	lds	r25, 0x142C
    u8 retval = cbuf->buf[newtail];
    473e:	e9 2f       	mov	r30, r25
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	e5 5d       	subi	r30, 0xD5	; 213
    4744:	fb 4e       	sbci	r31, 0xEB	; 235
    4746:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    4748:	80 91 2b 14 	lds	r24, 0x142B
    474c:	98 17       	cp	r25, r24
    474e:	11 f4       	brne	.+4      	; 0x4754 <get_tx_char+0x1a>
    4750:	2f ef       	ldi	r18, 0xFF	; 255
    4752:	06 c0       	rjmp	.+12     	; 0x4760 <get_tx_char+0x26>
        return SERIAL_ERR;

    newtail++;
    4754:	e9 2f       	mov	r30, r25
    4756:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    4758:	e7 fd       	sbrc	r30, 7
    475a:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    475c:	e0 93 2c 14 	sts	0x142C, r30
}

u8 get_tx_char(void)
{
    return get_from_circ_buf(&txbuf);
}
    4760:	82 2f       	mov	r24, r18
    4762:	08 95       	ret

00004764 <serial_getchar>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    4764:	80 91 ad 14 	lds	r24, 0x14AD
    4768:	90 91 ae 14 	lds	r25, 0x14AE
    476c:	28 2f       	mov	r18, r24
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	29 1b       	sub	r18, r25
    4772:	31 09       	sbc	r19, r1
    if (count < 0)
    4774:	37 ff       	sbrs	r19, 7
    4776:	02 c0       	rjmp	.+4      	; 0x477c <serial_getchar+0x18>
        count += BUFSIZE;
    4778:	20 58       	subi	r18, 0x80	; 128
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
   @return Character from serial port.
*/
s8 serial_getchar(void)
{
    // wait for char if necessary
    while (!circ_buf_count(&rxbuf))
    477c:	22 23       	and	r18, r18
    477e:	91 f3       	breq	.-28     	; 0x4764 <serial_getchar>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    4780:	90 91 ae 14 	lds	r25, 0x14AE
    u8 retval = cbuf->buf[newtail];
    4784:	e9 2f       	mov	r30, r25
    4786:	f0 e0       	ldi	r31, 0x00	; 0
    4788:	e3 55       	subi	r30, 0x53	; 83
    478a:	fb 4e       	sbci	r31, 0xEB	; 235
    478c:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    478e:	80 91 ad 14 	lds	r24, 0x14AD
    4792:	98 17       	cp	r25, r24
    4794:	11 f4       	brne	.+4      	; 0x479a <serial_getchar+0x36>
    4796:	2f ef       	ldi	r18, 0xFF	; 255
    4798:	06 c0       	rjmp	.+12     	; 0x47a6 <serial_getchar+0x42>
        return SERIAL_ERR;

    newtail++;
    479a:	e9 2f       	mov	r30, r25
    479c:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    479e:	e7 fd       	sbrc	r30, 7
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    47a2:	e0 93 ae 14 	sts	0x14AE, r30
    while (!circ_buf_count(&rxbuf))
        cdc_task();

    // grab one from buffer.
    return get_from_circ_buf(&rxbuf);
}
    47a6:	82 2f       	mov	r24, r18
    47a8:	08 95       	ret

000047aa <serial_gets>:
   @param echo Specifies whether to echo each character received back to host.

   @return Number of characters in string.
*/
u8 serial_gets(char *str, u8 len, u8 echo)
{
    47aa:	df 92       	push	r13
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	ec 01       	movw	r28, r24
    47ba:	d4 2e       	mov	r13, r20
    47bc:	00 e0       	ldi	r16, 0x00	; 0
    u8 ch;

    for(;;)
    {
        ch = serial_getchar();
        if (count > len - 2 &&
    47be:	e6 2e       	mov	r14, r22
    47c0:	ff 24       	eor	r15, r15
    47c2:	08 94       	sec
    47c4:	e1 08       	sbc	r14, r1
    47c6:	f1 08       	sbc	r15, r1
    u8 count=0;                 // Number of characters we have so far
    u8 ch;

    for(;;)
    {
        ch = serial_getchar();
    47c8:	0e 94 b2 23 	call	0x4764	; 0x4764 <serial_getchar>
    47cc:	18 2f       	mov	r17, r24
        if (count > len - 2 &&
    47ce:	80 2f       	mov	r24, r16
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	8e 15       	cp	r24, r14
    47d4:	9f 05       	cpc	r25, r15
    47d6:	24 f0       	brlt	.+8      	; 0x47e0 <serial_gets+0x36>
    47d8:	1d 30       	cpi	r17, 0x0D	; 13
    47da:	11 f0       	breq	.+4      	; 0x47e0 <serial_gets+0x36>
    47dc:	18 30       	cpi	r17, 0x08	; 8
    47de:	a1 f7       	brne	.-24     	; 0x47c8 <serial_gets+0x1e>
            ch != '\r' &&
            ch != 8)
            continue;
        if (echo)
    47e0:	dd 20       	and	r13, r13
    47e2:	19 f0       	breq	.+6      	; 0x47ea <serial_gets+0x40>
            serial_putchar(ch);
    47e4:	81 2f       	mov	r24, r17
    47e6:	0e 94 25 23 	call	0x464a	; 0x464a <serial_putchar>
        switch(ch)
    47ea:	18 30       	cpi	r17, 0x08	; 8
    47ec:	61 f0       	breq	.+24     	; 0x4806 <serial_gets+0x5c>
    47ee:	1d 30       	cpi	r17, 0x0D	; 13
    47f0:	81 f4       	brne	.+32     	; 0x4812 <serial_gets+0x68>
        {
        case '\r':
            // end of input
            *str = 0;
    47f2:	18 82       	st	Y, r1
            *str++ = ch;
            count++;
            break;
        }
    }
}
    47f4:	80 2f       	mov	r24, r16
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	df 90       	pop	r13
    4804:	08 95       	ret
            // end of input
            *str = 0;
            return count;
        case 8:
            // backspace
            if (count)
    4806:	00 23       	and	r16, r16
    4808:	f9 f2       	breq	.-66     	; 0x47c8 <serial_gets+0x1e>
            {
                count--;
    480a:	01 50       	subi	r16, 0x01	; 1
                *str-- = 0;
    480c:	18 82       	st	Y, r1
    480e:	21 97       	sbiw	r28, 0x01	; 1
    4810:	db cf       	rjmp	.-74     	; 0x47c8 <serial_gets+0x1e>
            }
            break;
        default:
            // just another char for string
            *str++ = ch;
    4812:	19 93       	st	Y+, r17
            count++;
    4814:	0f 5f       	subi	r16, 0xFF	; 255
    4816:	d8 cf       	rjmp	.-80     	; 0x47c8 <serial_gets+0x1e>

00004818 <serial_toggle_pause>:
   @brief Toggles the pause flag.  When paused, any data sent to the
   serial send function is dropped.
*/
void serial_toggle_pause(void)
{
    pause = !pause;
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	80 91 32 15 	lds	r24, 0x1532
    481e:	88 23       	and	r24, r24
    4820:	09 f4       	brne	.+2      	; 0x4824 <serial_toggle_pause+0xc>
    4822:	91 e0       	ldi	r25, 0x01	; 1
    4824:	90 93 32 15 	sts	0x1532, r25
}
    4828:	08 95       	ret

0000482a <add_char_to_rx>:
        // Put character in Rx Buffer.
        rx = true;
        add_to_circ_buf(&rxbuf, ch);
        rx = false;
    }
}
    482a:	08 95       	ret

0000482c <serial_rcv_frame>:
            SerialFrame->state = sof;
            break;
        }
    }
    return false;
}
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	08 95       	ret

00004830 <serial_send_frame>:
        serial_putchar(cmd);
        for (i=0;i<=payload_length-1;i++)
   	    serial_putchar(payload[i]);
        serial_putchar(EOF_CHAR);
    }
}
    4830:	08 95       	ret

00004832 <__vector_36>:
    @brief USART ISR RX function.  If an RX handler was passed to
    serial_init(), then that handler will be called each time this ISR
    is called.
*/
ISR(USARTRXVECT)
{
    4832:	1f 92       	push	r1
    4834:	0f 92       	push	r0
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	0f 92       	push	r0
    483a:	0b b6       	in	r0, 0x3b	; 59
    483c:	0f 92       	push	r0
    483e:	11 24       	eor	r1, r1
    4840:	2f 93       	push	r18
    4842:	3f 93       	push	r19
    4844:	4f 93       	push	r20
    4846:	5f 93       	push	r21
    4848:	6f 93       	push	r22
    484a:	7f 93       	push	r23
    484c:	8f 93       	push	r24
    484e:	9f 93       	push	r25
    4850:	af 93       	push	r26
    4852:	bf 93       	push	r27
    4854:	ef 93       	push	r30
    4856:	ff 93       	push	r31
    // Get byte from serial port
    u8 ch = USART_REG;
    4858:	20 91 ce 00 	lds	r18, 0x00CE
    @param ch Character to add to buffer.
*/
static void add_to_circ_buf(tcirc_buf *cbuf, u8 ch)
{
    // Add char to buffer
    u8 newhead = cbuf->head;
    485c:	90 91 ad 14 	lds	r25, 0x14AD
    newhead++;
    4860:	9f 5f       	subi	r25, 0xFF	; 255
    if (newhead >= BUFSIZE)
    4862:	97 fd       	sbrc	r25, 7
    4864:	90 e0       	ldi	r25, 0x00	; 0
        newhead = 0;
    while (newhead == cbuf->tail)
    4866:	80 91 ae 14 	lds	r24, 0x14AE
    486a:	98 17       	cp	r25, r24
    486c:	41 f0       	breq	.+16     	; 0x487e <__vector_36+0x4c>
            return;
        else
            cdc_task();


    cbuf->buf[cbuf->head] = ch;
    486e:	e0 91 ad 14 	lds	r30, 0x14AD
    4872:	f0 e0       	ldi	r31, 0x00	; 0
    4874:	e3 55       	subi	r30, 0x53	; 83
    4876:	fb 4e       	sbci	r31, 0xEB	; 235
    4878:	22 83       	std	Z+2, r18	; 0x02
    cbuf->head = newhead;
    487a:	90 93 ad 14 	sts	0x14AD, r25
    u8 ch = USART_REG;

    // Put character in Rx Buffer.
    rx = true;
    add_to_circ_buf(&rxbuf, ch);
    rx = false;
    487e:	10 92 31 15 	sts	0x1531, r1

    // And call user's RX handler function
    if (rx_handler)
    4882:	e0 91 2f 15 	lds	r30, 0x152F
    4886:	f0 91 30 15 	lds	r31, 0x1530
    488a:	30 97       	sbiw	r30, 0x00	; 0
    488c:	11 f0       	breq	.+4      	; 0x4892 <__vector_36+0x60>
        rx_handler(ch);
    488e:	82 2f       	mov	r24, r18
    4890:	09 95       	icall
}
    4892:	ff 91       	pop	r31
    4894:	ef 91       	pop	r30
    4896:	bf 91       	pop	r27
    4898:	af 91       	pop	r26
    489a:	9f 91       	pop	r25
    489c:	8f 91       	pop	r24
    489e:	7f 91       	pop	r23
    48a0:	6f 91       	pop	r22
    48a2:	5f 91       	pop	r21
    48a4:	4f 91       	pop	r20
    48a6:	3f 91       	pop	r19
    48a8:	2f 91       	pop	r18
    48aa:	0f 90       	pop	r0
    48ac:	0b be       	out	0x3b, r0	; 59
    48ae:	0f 90       	pop	r0
    48b0:	0f be       	out	0x3f, r0	; 63
    48b2:	0f 90       	pop	r0
    48b4:	1f 90       	pop	r1
    48b6:	18 95       	reti

000048b8 <__vector_37>:

/**
    @brief USART ISR TX function.
*/
ISR(USARTTXVECT)
{
    48b8:	1f 92       	push	r1
    48ba:	0f 92       	push	r0
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	0f 92       	push	r0
    48c0:	0b b6       	in	r0, 0x3b	; 59
    48c2:	0f 92       	push	r0
    48c4:	11 24       	eor	r1, r1
    48c6:	2f 93       	push	r18
    48c8:	8f 93       	push	r24
    48ca:	9f 93       	push	r25
    48cc:	ef 93       	push	r30
    48ce:	ff 93       	push	r31
    @retval false if buffer is empty.
*/
static u8 circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    return (cbuf->head != cbuf->tail);
    48d0:	90 91 2b 14 	lds	r25, 0x142B
    48d4:	80 91 2c 14 	lds	r24, 0x142C
/**
    @brief USART ISR TX function.
*/
ISR(USARTTXVECT)
{
    if (circ_buf_has_char(&txbuf))
    48d8:	98 17       	cp	r25, r24
    48da:	b1 f0       	breq	.+44     	; 0x4908 <__vector_37+0x50>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    48dc:	90 91 2c 14 	lds	r25, 0x142C
    u8 retval = cbuf->buf[newtail];
    48e0:	e9 2f       	mov	r30, r25
    48e2:	f0 e0       	ldi	r31, 0x00	; 0
    48e4:	e5 5d       	subi	r30, 0xD5	; 213
    48e6:	fb 4e       	sbci	r31, 0xEB	; 235
    48e8:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    48ea:	80 91 2b 14 	lds	r24, 0x142B
    48ee:	98 17       	cp	r25, r24
    48f0:	11 f4       	brne	.+4      	; 0x48f6 <__vector_37+0x3e>
    48f2:	2f ef       	ldi	r18, 0xFF	; 255
    48f4:	06 c0       	rjmp	.+12     	; 0x4902 <__vector_37+0x4a>
        return SERIAL_ERR;

    newtail++;
    48f6:	e9 2f       	mov	r30, r25
    48f8:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    48fa:	e7 fd       	sbrc	r30, 7
    48fc:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    48fe:	e0 93 2c 14 	sts	0x142C, r30
*/
ISR(USARTTXVECT)
{
    if (circ_buf_has_char(&txbuf))
        // Feed a byte
        USART_REG = get_from_circ_buf(&txbuf);
    4902:	20 93 ce 00 	sts	0x00CE, r18
    4906:	05 c0       	rjmp	.+10     	; 0x4912 <__vector_37+0x5a>
    else
        // No more chars to send, disable this interrupt
        USART_DRE_DISABLE();
    4908:	80 91 c9 00 	lds	r24, 0x00C9
    490c:	8f 7d       	andi	r24, 0xDF	; 223
    490e:	80 93 c9 00 	sts	0x00C9, r24
}
    4912:	ff 91       	pop	r31
    4914:	ef 91       	pop	r30
    4916:	9f 91       	pop	r25
    4918:	8f 91       	pop	r24
    491a:	2f 91       	pop	r18
    491c:	0f 90       	pop	r0
    491e:	0b be       	out	0x3b, r0	; 59
    4920:	0f 90       	pop	r0
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	0f 90       	pop	r0
    4926:	1f 90       	pop	r1
    4928:	18 95       	reti

0000492a <nodeSleep>:
}


#else  // if (NODETYPE != COORD)
// For coord, provide dummy function so that code compiles
void nodeSleep(u16 seconds) {}
    492a:	08 95       	ret

0000492c <__vector_25>:
char command[20];
char paraBuffer[80];

//------------------------------RX Interrupt Service Routine---------------------------
ISR(USART0_RX_vect)
{
    492c:	1f 92       	push	r1
    492e:	0f 92       	push	r0
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	0f 92       	push	r0
    4934:	0b b6       	in	r0, 0x3b	; 59
    4936:	0f 92       	push	r0
    4938:	11 24       	eor	r1, r1
    493a:	2f 93       	push	r18
    493c:	3f 93       	push	r19
    493e:	4f 93       	push	r20
    4940:	5f 93       	push	r21
    4942:	6f 93       	push	r22
    4944:	7f 93       	push	r23
    4946:	8f 93       	push	r24
    4948:	9f 93       	push	r25
    494a:	af 93       	push	r26
    494c:	bf 93       	push	r27
    494e:	ef 93       	push	r30
    4950:	ff 93       	push	r31
	//	rxBuffer[rxPtr++] = (unsigned char) UDR0;
	//	printf("---Char received---\n");
	unsigned char nextChar;

	// Daten aus dem Puffer lesen
	nextChar = UDR0;
    4952:	90 91 c6 00 	lds	r25, 0x00C6
	if (uart_str_complete == 0) { // wenn uart_string gerade in Verwendung, neues Zeichen verwerfen
    4956:	80 91 33 15 	lds	r24, 0x1533
    495a:	88 23       	and	r24, r24
    495c:	09 f0       	breq	.+2      	; 0x4960 <__vector_25+0x34>
    495e:	3f c0       	rjmp	.+126    	; 0x49de <__vector_25+0xb2>

		// Daten werden erst in string geschrieben, wenn nicht String-Ende/max Zeichenl�nge erreicht ist/string gerade verarbeitet wird
		if (nextChar != '\n' && nextChar != '\r' && uart_str_count
    4960:	9a 30       	cpi	r25, 0x0A	; 10
    4962:	91 f0       	breq	.+36     	; 0x4988 <__vector_25+0x5c>
    4964:	9d 30       	cpi	r25, 0x0D	; 13
    4966:	81 f0       	breq	.+32     	; 0x4988 <__vector_25+0x5c>
    4968:	80 91 34 15 	lds	r24, 0x1534
    496c:	8f 3f       	cpi	r24, 0xFF	; 255
    496e:	61 f0       	breq	.+24     	; 0x4988 <__vector_25+0x5c>
				< UART_MAXSTRLEN - 1) {
			uart_string[uart_str_count] = nextChar;
    4970:	e0 91 34 15 	lds	r30, 0x1534
    4974:	f0 e0       	ldi	r31, 0x00	; 0
    4976:	eb 5c       	subi	r30, 0xCB	; 203
    4978:	fa 4e       	sbci	r31, 0xEA	; 234
    497a:	90 83       	st	Z, r25
			uart_str_count++;
    497c:	80 91 34 15 	lds	r24, 0x1534
    4980:	8f 5f       	subi	r24, 0xFF	; 255
    4982:	80 93 34 15 	sts	0x1534, r24
    4986:	2b c0       	rjmp	.+86     	; 0x49de <__vector_25+0xb2>
//			printf("---Char received---\n");
		} else {
			uart_string[uart_str_count] = '\0';
    4988:	e0 91 34 15 	lds	r30, 0x1534
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	eb 5c       	subi	r30, 0xCB	; 203
    4990:	fa 4e       	sbci	r31, 0xEA	; 234
    4992:	10 82       	st	Z, r1
			uart_str_count = 0;
    4994:	10 92 34 15 	sts	0x1534, r1
			uart_str_complete = 1;
    4998:	81 e0       	ldi	r24, 0x01	; 1
    499a:	80 93 33 15 	sts	0x1533, r24
			printf("%s ---  %d\n", uart_string,uart_str_complete);
    499e:	20 91 33 15 	lds	r18, 0x1533
    49a2:	00 d0       	rcall	.+0      	; 0x49a4 <__vector_25+0x78>
    49a4:	00 d0       	rcall	.+0      	; 0x49a6 <__vector_25+0x7a>
    49a6:	00 d0       	rcall	.+0      	; 0x49a8 <__vector_25+0x7c>
    49a8:	ed b7       	in	r30, 0x3d	; 61
    49aa:	fe b7       	in	r31, 0x3e	; 62
    49ac:	31 96       	adiw	r30, 0x01	; 1
    49ae:	88 ef       	ldi	r24, 0xF8	; 248
    49b0:	98 e0       	ldi	r25, 0x08	; 8
    49b2:	ad b7       	in	r26, 0x3d	; 61
    49b4:	be b7       	in	r27, 0x3e	; 62
    49b6:	12 96       	adiw	r26, 0x02	; 2
    49b8:	9c 93       	st	X, r25
    49ba:	8e 93       	st	-X, r24
    49bc:	11 97       	sbiw	r26, 0x01	; 1
    49be:	85 e3       	ldi	r24, 0x35	; 53
    49c0:	95 e1       	ldi	r25, 0x15	; 21
    49c2:	93 83       	std	Z+3, r25	; 0x03
    49c4:	82 83       	std	Z+2, r24	; 0x02
    49c6:	24 83       	std	Z+4, r18	; 0x04
    49c8:	15 82       	std	Z+5, r1	; 0x05
    49ca:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    49ce:	8d b7       	in	r24, 0x3d	; 61
    49d0:	9e b7       	in	r25, 0x3e	; 62
    49d2:	06 96       	adiw	r24, 0x06	; 6
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	9e bf       	out	0x3e, r25	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	8d bf       	out	0x3d, r24	; 61
		}
	}
}
    49de:	ff 91       	pop	r31
    49e0:	ef 91       	pop	r30
    49e2:	bf 91       	pop	r27
    49e4:	af 91       	pop	r26
    49e6:	9f 91       	pop	r25
    49e8:	8f 91       	pop	r24
    49ea:	7f 91       	pop	r23
    49ec:	6f 91       	pop	r22
    49ee:	5f 91       	pop	r21
    49f0:	4f 91       	pop	r20
    49f2:	3f 91       	pop	r19
    49f4:	2f 91       	pop	r18
    49f6:	0f 90       	pop	r0
    49f8:	0b be       	out	0x3b, r0	; 59
    49fa:	0f 90       	pop	r0
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	0f 90       	pop	r0
    4a00:	1f 90       	pop	r1
    4a02:	18 95       	reti

00004a04 <fh_com_looptask>:
//-------------------------------------------------------------------------------------


void fh_com_looptask() {
    4a04:	ef 92       	push	r14
    4a06:	ff 92       	push	r15
    4a08:	0f 93       	push	r16
    4a0a:	1f 93       	push	r17

	if (uart_str_complete == 1) {
    4a0c:	80 91 33 15 	lds	r24, 0x1533
    4a10:	81 30       	cpi	r24, 0x01	; 1
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <fh_com_looptask+0x12>
    4a14:	7f c0       	rjmp	.+254    	; 0x4b14 <fh_com_looptask+0x110>
		//Bearbeitung der Data-Link Befehle
		command[0] = 0;
    4a16:	10 92 80 20 	sts	0x2080, r1
		paraBuffer[0] = 0;
    4a1a:	10 92 95 20 	sts	0x2095, r1
		uart_str_complete = 0;
    4a1e:	10 92 33 15 	sts	0x1533, r1

		//	Mit UART-String
		raute_pos = (unsigned char) strlen(
    4a22:	05 e3       	ldi	r16, 0x35	; 53
    4a24:	15 e1       	ldi	r17, 0x15	; 21
    4a26:	c8 01       	movw	r24, r16
    4a28:	63 e2       	ldi	r22, 0x23	; 35
    4a2a:	70 e0       	ldi	r23, 0x00	; 0
    4a2c:	0e 94 e4 34 	call	0x69c8	; 0x69c8 <strchr>
    4a30:	fc 01       	movw	r30, r24
    4a32:	01 90       	ld	r0, Z+
    4a34:	00 20       	and	r0, r0
    4a36:	e9 f7       	brne	.-6      	; 0x4a32 <fh_com_looptask+0x2e>
    4a38:	31 97       	sbiw	r30, 0x01	; 1
    4a3a:	e8 1b       	sub	r30, r24
    4a3c:	f9 0b       	sbc	r31, r25
    4a3e:	d8 01       	movw	r26, r16
    4a40:	0d 90       	ld	r0, X+
    4a42:	00 20       	and	r0, r0
    4a44:	e9 f7       	brne	.-6      	; 0x4a40 <fh_com_looptask+0x3c>
    4a46:	8d 01       	movw	r16, r26
    4a48:	01 50       	subi	r16, 0x01	; 1
    4a4a:	10 40       	sbci	r17, 0x00	; 0
    4a4c:	05 53       	subi	r16, 0x35	; 53
    4a4e:	15 41       	sbci	r17, 0x15	; 21
    4a50:	e0 1b       	sub	r30, r16
    4a52:	e0 93 94 20 	sts	0x2094, r30
				(char*) strstr((char *) uart_string, "#")) - strlen(
				(char *) uart_string);
		if (raute_pos == 255)
    4a56:	ef 3f       	cpi	r30, 0xFF	; 255
    4a58:	11 f4       	brne	.+4      	; 0x4a5e <fh_com_looptask+0x5a>
			raute_pos = 0;
    4a5a:	10 92 94 20 	sts	0x2094, r1

		command[19] = 0;
    4a5e:	10 92 93 20 	sts	0x2093, r1
		paraBuffer[19] = 0;
    4a62:	10 92 a8 20 	sts	0x20A8, r1

		sscanf((char*) &uart_string[raute_pos], "%s %s\n", command, paraBuffer);
    4a66:	ed b7       	in	r30, 0x3d	; 61
    4a68:	fe b7       	in	r31, 0x3e	; 62
    4a6a:	38 97       	sbiw	r30, 0x08	; 8
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	fe bf       	out	0x3e, r31	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	ed bf       	out	0x3d, r30	; 61
    4a76:	31 96       	adiw	r30, 0x01	; 1
    4a78:	80 91 94 20 	lds	r24, 0x2094
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	8b 5c       	subi	r24, 0xCB	; 203
    4a80:	9a 4e       	sbci	r25, 0xEA	; 234
    4a82:	ad b7       	in	r26, 0x3d	; 61
    4a84:	be b7       	in	r27, 0x3e	; 62
    4a86:	12 96       	adiw	r26, 0x02	; 2
    4a88:	9c 93       	st	X, r25
    4a8a:	8e 93       	st	-X, r24
    4a8c:	11 97       	sbiw	r26, 0x01	; 1
    4a8e:	84 e0       	ldi	r24, 0x04	; 4
    4a90:	99 e0       	ldi	r25, 0x09	; 9
    4a92:	93 83       	std	Z+3, r25	; 0x03
    4a94:	82 83       	std	Z+2, r24	; 0x02
    4a96:	00 e8       	ldi	r16, 0x80	; 128
    4a98:	10 e2       	ldi	r17, 0x20	; 32
    4a9a:	15 83       	std	Z+5, r17	; 0x05
    4a9c:	04 83       	std	Z+4, r16	; 0x04
    4a9e:	85 e9       	ldi	r24, 0x95	; 149
    4aa0:	e8 2e       	mov	r14, r24
    4aa2:	80 e2       	ldi	r24, 0x20	; 32
    4aa4:	f8 2e       	mov	r15, r24
    4aa6:	f7 82       	std	Z+7, r15	; 0x07
    4aa8:	e6 82       	std	Z+6, r14	; 0x06
    4aaa:	0e 94 dc 35 	call	0x6bb8	; 0x6bb8 <sscanf>

		UART_PRINT("command: %s\n", command);
    4aae:	0f 90       	pop	r0
    4ab0:	0f 90       	pop	r0
    4ab2:	0f 90       	pop	r0
    4ab4:	0f 90       	pop	r0
    4ab6:	8b e0       	ldi	r24, 0x0B	; 11
    4ab8:	99 e0       	ldi	r25, 0x09	; 9
    4aba:	ed b7       	in	r30, 0x3d	; 61
    4abc:	fe b7       	in	r31, 0x3e	; 62
    4abe:	92 83       	std	Z+2, r25	; 0x02
    4ac0:	81 83       	std	Z+1, r24	; 0x01
    4ac2:	14 83       	std	Z+4, r17	; 0x04
    4ac4:	03 83       	std	Z+3, r16	; 0x03
    4ac6:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
		UART_PRINT("paraBuffer %s\n", paraBuffer);
    4aca:	88 e1       	ldi	r24, 0x18	; 24
    4acc:	99 e0       	ldi	r25, 0x09	; 9
    4ace:	ad b7       	in	r26, 0x3d	; 61
    4ad0:	be b7       	in	r27, 0x3e	; 62
    4ad2:	12 96       	adiw	r26, 0x02	; 2
    4ad4:	9c 93       	st	X, r25
    4ad6:	8e 93       	st	-X, r24
    4ad8:	11 97       	sbiw	r26, 0x01	; 1
    4ada:	14 96       	adiw	r26, 0x04	; 4
    4adc:	fc 92       	st	X, r15
    4ade:	ee 92       	st	-X, r14
    4ae0:	13 97       	sbiw	r26, 0x03	; 3
    4ae2:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>

		if (strcmp(command, "#getdata") == 0) {
    4ae6:	0f 90       	pop	r0
    4ae8:	0f 90       	pop	r0
    4aea:	0f 90       	pop	r0
    4aec:	0f 90       	pop	r0
    4aee:	c8 01       	movw	r24, r16
    4af0:	67 e2       	ldi	r22, 0x27	; 39
    4af2:	79 e0       	ldi	r23, 0x09	; 9
    4af4:	0e 94 ef 34 	call	0x69de	; 0x69de <strcmp>
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	61 f4       	brne	.+24     	; 0x4b14 <fh_com_looptask+0x110>
			printf("#BOData\n");
    4afc:	80 e3       	ldi	r24, 0x30	; 48
    4afe:	99 e0       	ldi	r25, 0x09	; 9
    4b00:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>

			printf("bin die daten\n");
    4b04:	88 e3       	ldi	r24, 0x38	; 56
    4b06:	99 e0       	ldi	r25, 0x09	; 9
    4b08:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
			//TODO Implement Wireless_UART
			printf("#EOData\n");
    4b0c:	86 e4       	ldi	r24, 0x46	; 70
    4b0e:	99 e0       	ldi	r25, 0x09	; 9
    4b10:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
			//TODO Implement
		}

	}

}
    4b14:	1f 91       	pop	r17
    4b16:	0f 91       	pop	r16
    4b18:	ff 90       	pop	r15
    4b1a:	ef 90       	pop	r14
    4b1c:	08 95       	ret

00004b1e <setButtonDebounce>:
int count = 0;
char mac_buf[MAX_FRAME_LENGTH_SN];

//MACRO for debounce delay
void setButtonDebounce(void) {
	buttondebounce = 0;
    4b1e:	10 92 35 16 	sts	0x1635, r1
}
    4b22:	08 95       	ret

00004b24 <appStartScan>:
void appStartScan(void) {
	if (NODETYPE != COORD) {
		macInit(0xff);
		macScan();
	}
}
    4b24:	08 95       	ret

00004b26 <process_endnode_udp_packet_SN>:
 * param: pUDPpacket pointer zur payload
 * param: payloadlen
 * param: address packet originates from
 */
void process_endnode_udp_packet_SN(uint8_t* pUDPpacket, uint8_t payloadlen,
		uint16_t originAddr) {
    4b26:	ff 92       	push	r15
    4b28:	0f 93       	push	r16
    4b2a:	1f 93       	push	r17
    4b2c:	cf 93       	push	r28
    4b2e:	df 93       	push	r29
    4b30:	ec 01       	movw	r28, r24
    4b32:	f6 2e       	mov	r15, r22
    4b34:	8a 01       	movw	r16, r20

	/*
	 * Process incoming Ping packets
	 */
if ((*pUDPpacket == COMMAND_PING_REQUEST) || (*pUDPpacket == COMMAND_PING_RESPONSE)) {
    4b36:	88 81       	ld	r24, Y
    4b38:	81 50       	subi	r24, 0x01	; 1
    4b3a:	82 30       	cpi	r24, 0x02	; 2
    4b3c:	28 f4       	brcc	.+10     	; 0x4b48 <process_endnode_udp_packet_SN+0x22>
	app_ping_device_process(pUDPpacket,originAddr);
    4b3e:	ce 01       	movw	r24, r28
    4b40:	ba 01       	movw	r22, r20
    4b42:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <app_ping_device_process>
    4b46:	3f c0       	rjmp	.+126    	; 0x4bc6 <process_endnode_udp_packet_SN+0xa0>
else
/*
 * Process incoming unknown package and print it as String
 */
{
	UART_PRINT("-----ENDNODE hat ein unbekanntes Paket empfangen\r\n");
    4b48:	8e e4       	ldi	r24, 0x4E	; 78
    4b4a:	99 e0       	ldi	r25, 0x09	; 9
    4b4c:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
	UART_PRINT("-----Payloadlen: %u\r\n",payloadlen);
    4b50:	00 d0       	rcall	.+0      	; 0x4b52 <process_endnode_udp_packet_SN+0x2c>
    4b52:	00 d0       	rcall	.+0      	; 0x4b54 <process_endnode_udp_packet_SN+0x2e>
    4b54:	ed b7       	in	r30, 0x3d	; 61
    4b56:	fe b7       	in	r31, 0x3e	; 62
    4b58:	31 96       	adiw	r30, 0x01	; 1
    4b5a:	80 e8       	ldi	r24, 0x80	; 128
    4b5c:	99 e0       	ldi	r25, 0x09	; 9
    4b5e:	ad b7       	in	r26, 0x3d	; 61
    4b60:	be b7       	in	r27, 0x3e	; 62
    4b62:	12 96       	adiw	r26, 0x02	; 2
    4b64:	9c 93       	st	X, r25
    4b66:	8e 93       	st	-X, r24
    4b68:	11 97       	sbiw	r26, 0x01	; 1
    4b6a:	f2 82       	std	Z+2, r15	; 0x02
    4b6c:	13 82       	std	Z+3, r1	; 0x03
    4b6e:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
	UART_PRINT("-----originAddr: 0x%u\r\n", originAddr);
    4b72:	86 e9       	ldi	r24, 0x96	; 150
    4b74:	99 e0       	ldi	r25, 0x09	; 9
    4b76:	ed b7       	in	r30, 0x3d	; 61
    4b78:	fe b7       	in	r31, 0x3e	; 62
    4b7a:	92 83       	std	Z+2, r25	; 0x02
    4b7c:	81 83       	std	Z+1, r24	; 0x01
    4b7e:	14 83       	std	Z+4, r17	; 0x04
    4b80:	03 83       	std	Z+3, r16	; 0x03
    4b82:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
	memcpy(mac_buf, pUDPpacket, payloadlen);
    4b86:	04 e4       	ldi	r16, 0x44	; 68
    4b88:	11 e2       	ldi	r17, 0x21	; 33
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	c8 01       	movw	r24, r16
    4b94:	be 01       	movw	r22, r28
    4b96:	4f 2d       	mov	r20, r15
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	0e 94 db 34 	call	0x69b6	; 0x69b6 <memcpy>
	UART_PRINT("-----%s\r\n",mac_buf);
    4b9e:	00 d0       	rcall	.+0      	; 0x4ba0 <process_endnode_udp_packet_SN+0x7a>
    4ba0:	00 d0       	rcall	.+0      	; 0x4ba2 <process_endnode_udp_packet_SN+0x7c>
    4ba2:	8e ea       	ldi	r24, 0xAE	; 174
    4ba4:	99 e0       	ldi	r25, 0x09	; 9
    4ba6:	ad b7       	in	r26, 0x3d	; 61
    4ba8:	be b7       	in	r27, 0x3e	; 62
    4baa:	12 96       	adiw	r26, 0x02	; 2
    4bac:	9c 93       	st	X, r25
    4bae:	8e 93       	st	-X, r24
    4bb0:	11 97       	sbiw	r26, 0x01	; 1
    4bb2:	14 96       	adiw	r26, 0x04	; 4
    4bb4:	1c 93       	st	X, r17
    4bb6:	0e 93       	st	-X, r16
    4bb8:	13 97       	sbiw	r26, 0x03	; 3
    4bba:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    4bbe:	0f 90       	pop	r0
    4bc0:	0f 90       	pop	r0
    4bc2:	0f 90       	pop	r0
    4bc4:	0f 90       	pop	r0
}
}
    4bc6:	df 91       	pop	r29
    4bc8:	cf 91       	pop	r28
    4bca:	1f 91       	pop	r17
    4bcc:	0f 91       	pop	r16
    4bce:	ff 90       	pop	r15
    4bd0:	08 95       	ret

00004bd2 <process_coord_udp_packet_SN>:
 * param: pUDPpacket Pointer zur Payload
 * param: payloadlen
 * param: address packet originates from
 */
void process_coord_udp_packet_SN(uint8_t* pUDPpacket, uint8_t payloadlen,
		uint16_t originAddr) {
    4bd2:	1f 93       	push	r17
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	fc 01       	movw	r30, r24
    4bda:	16 2f       	mov	r17, r22
    4bdc:	ea 01       	movw	r28, r20

	/*
	 * Process incoming Ping packets
	 */
		if ((*pUDPpacket == COMMAND_PING_REQUEST) || (*pUDPpacket == COMMAND_PING_RESPONSE)) {
    4bde:	80 81       	ld	r24, Z
    4be0:	81 50       	subi	r24, 0x01	; 1
    4be2:	82 30       	cpi	r24, 0x02	; 2
    4be4:	28 f4       	brcc	.+10     	; 0x4bf0 <process_coord_udp_packet_SN+0x1e>
			app_ping_coord_process(pUDPpacket,originAddr);
    4be6:	cf 01       	movw	r24, r30
    4be8:	ba 01       	movw	r22, r20
    4bea:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <app_ping_coord_process>
    4bee:	23 c0       	rjmp	.+70     	; 0x4c36 <process_coord_udp_packet_SN+0x64>
		} else {

#ifdef APP_PERF
		compare_test_data(pUDPpacket, payloadlen);
#else
		UART_PRINT("-----Coord hat einen String oder ein unbekanntes Paket empfangen\r\n");
    4bf0:	88 eb       	ldi	r24, 0xB8	; 184
    4bf2:	99 e0       	ldi	r25, 0x09	; 9
    4bf4:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
		UART_PRINT("-----Payloadlen: %u\r\n",payloadlen);
    4bf8:	00 d0       	rcall	.+0      	; 0x4bfa <process_coord_udp_packet_SN+0x28>
    4bfa:	00 d0       	rcall	.+0      	; 0x4bfc <process_coord_udp_packet_SN+0x2a>
    4bfc:	ed b7       	in	r30, 0x3d	; 61
    4bfe:	fe b7       	in	r31, 0x3e	; 62
    4c00:	31 96       	adiw	r30, 0x01	; 1
    4c02:	80 e8       	ldi	r24, 0x80	; 128
    4c04:	99 e0       	ldi	r25, 0x09	; 9
    4c06:	ad b7       	in	r26, 0x3d	; 61
    4c08:	be b7       	in	r27, 0x3e	; 62
    4c0a:	12 96       	adiw	r26, 0x02	; 2
    4c0c:	9c 93       	st	X, r25
    4c0e:	8e 93       	st	-X, r24
    4c10:	11 97       	sbiw	r26, 0x01	; 1
    4c12:	12 83       	std	Z+2, r17	; 0x02
    4c14:	13 82       	std	Z+3, r1	; 0x03
    4c16:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
		UART_PRINT("-----originAddr: 0x%u\r\n", originAddr);
    4c1a:	86 e9       	ldi	r24, 0x96	; 150
    4c1c:	99 e0       	ldi	r25, 0x09	; 9
    4c1e:	ed b7       	in	r30, 0x3d	; 61
    4c20:	fe b7       	in	r31, 0x3e	; 62
    4c22:	92 83       	std	Z+2, r25	; 0x02
    4c24:	81 83       	std	Z+1, r24	; 0x01
    4c26:	d4 83       	std	Z+4, r29	; 0x04
    4c28:	c3 83       	std	Z+3, r28	; 0x03
    4c2a:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
#endif
	}
}
    4c36:	df 91       	pop	r29
    4c38:	cf 91       	pop	r28
    4c3a:	1f 91       	pop	r17
    4c3c:	08 95       	ret

00004c3e <loopTask>:
#ifdef APP_PERF
	perf_loop_task();
#endif

#ifdef SENSORNETWORK
	fh_com_looptask();
    4c3e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <fh_com_looptask>

	/*
	 * Button Press
	 * Here the applications button press logic should be called
	 */
	if (button_pressed(PLATFORM_RCB) && buttondebounce == 0) {
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <button_pressed>
    4c48:	88 23       	and	r24, r24
    4c4a:	79 f0       	breq	.+30     	; 0x4c6a <loopTask+0x2c>
    4c4c:	80 91 35 16 	lds	r24, 0x1635
    4c50:	88 23       	and	r24, r24
    4c52:	59 f4       	brne	.+22     	; 0x4c6a <loopTask+0x2c>
#ifdef APP_PERF
		perf_button_ev();
#endif

#ifdef APP_PING
		ping_button_ev();
    4c54:	0e 94 90 27 	call	0x4f20	; 0x4f20 <ping_button_ev>
#endif

		// code to debbounce the button and avoid multiple button press
		buttondebounce = 1;
    4c58:	81 e0       	ldi	r24, 0x01	; 1
    4c5a:	80 93 35 16 	sts	0x1635, r24
		macSetAlarm(200, setButtonDebounce);
    4c5e:	88 ec       	ldi	r24, 0xC8	; 200
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	6f e8       	ldi	r22, 0x8F	; 143
    4c64:	75 e2       	ldi	r23, 0x25	; 37
    4c66:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    4c6a:	08 95       	ret

00004c6c <alive_pulse>:
		macScan();
	}
}

void alive_pulse() {
	LED_TOGGLE(LED_ALIVE);
    4c6c:	8e b1       	in	r24, 0x0e	; 14
    4c6e:	90 e1       	ldi	r25, 0x10	; 16
    4c70:	89 27       	eor	r24, r25
    4c72:	8e b9       	out	0x0e, r24	; 14
    4c74:	6c 9a       	sbi	0x0d, 4	; 13
	macSetAlarm(1000, alive_pulse);
    4c76:	88 ee       	ldi	r24, 0xE8	; 232
    4c78:	93 e0       	ldi	r25, 0x03	; 3
    4c7a:	66 e3       	ldi	r22, 0x36	; 54
    4c7c:	76 e2       	ldi	r23, 0x26	; 38
    4c7e:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    4c82:	08 95       	ret

00004c84 <app_init>:
 */
void app_init() {

#if (__AVR__)
	// If the EEPROM is cleared, init it to something useful
	checkEeprom();
    4c84:	0e 94 11 21 	call	0x4222	; 0x4222 <checkEeprom>
#endif // __AVR__
	alive_pulse();
    4c88:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <alive_pulse>
	BUTTON_SETUP();
    4c8c:	6d 98       	cbi	0x0d, 5	; 13
    4c8e:	75 9a       	sbi	0x0e, 5	; 14
		//		UART_PRINT("--some information:\r\n\t-sizeof(int)= %d\ Bytes\r\n\t-sizeof(uint8_t)= %d\r\n\t"
		//				"-sizeof(uint16_t)= %d\r\n\t-sizeof(uint32_t)= %d \r\n--end of information\r\n"
		//				,sizeof(int),sizeof(uint8_t),sizeof(uint16_t),sizeof(uint32_t));
	}
	if (NODETYPE == COORD) {
		macFindClearChannel();
    4c90:	0e 94 94 17 	call	0x2f28	; 0x2f28 <macFindClearChannel>
		sixlowpan_init();
    4c94:	0e 94 c0 00 	call	0x180	; 0x180 <sixlowpan_init>
		UART_PRINT("--Device is Coordinator\r\n");
    4c98:	8a ef       	ldi	r24, 0xFA	; 250
    4c9a:	99 e0       	ldi	r25, 0x09	; 9
    4c9c:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
	}

}
    4ca0:	08 95       	ret

00004ca2 <app_ping_device_process>:
		UART_PRINT("coord got a ping response, ping took: %ums\r\n", pingdelay);
	}

}

void app_ping_device_process(uint8_t* pUDPpacket, int16_t originAddr) {
    4ca2:	ef 92       	push	r14
    4ca4:	ff 92       	push	r15
    4ca6:	0f 93       	push	r16
    4ca8:	1f 93       	push	r17
    4caa:	df 93       	push	r29
    4cac:	cf 93       	push	r28
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
    4cb2:	eb 97       	sbiw	r28, 0x3b	; 59
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	7c 01       	movw	r14, r24
    4cc0:	8b 01       	movw	r16, r22
	if (*pUDPpacket == COMMAND_PING_REQUEST) {
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	80 81       	ld	r24, Z
    4cc6:	81 30       	cpi	r24, 0x01	; 1
    4cc8:	79 f5       	brne	.+94     	; 0x4d28 <app_ping_device_process+0x86>
		UART_PRINT("Node/Router got Ping request\r\n");
    4cca:	83 e1       	ldi	r24, 0x13	; 19
    4ccc:	9a e0       	ldi	r25, 0x0A	; 10
    4cce:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
		LED_TOGGLE(LED_WORKING);
    4cd2:	8e b1       	in	r24, 0x0e	; 14
    4cd4:	94 e0       	ldi	r25, 0x04	; 4
    4cd6:	89 27       	eor	r24, r25
    4cd8:	8e b9       	out	0x0e, r24	; 14
    4cda:	6a 9a       	sbi	0x0d, 2	; 13

		//setup response frame TODO response with a modified frame not a new one
		deRFprotocol_t frame;
		payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
		frame.command = COMMAND_PING_RESPONSE;
    4cdc:	82 e0       	ldi	r24, 0x02	; 2
    4cde:	89 83       	std	Y+1, r24	; 0x01
		frame.option = NO_OPTION;
    4ce0:	1a 82       	std	Y+2, r1	; 0x02
		pingFrame->mac = macConfig.longAddr;
    4ce2:	80 91 bd 1f 	lds	r24, 0x1FBD
    4ce6:	8b 83       	std	Y+3, r24	; 0x03
    4ce8:	80 91 be 1f 	lds	r24, 0x1FBE
    4cec:	8c 83       	std	Y+4, r24	; 0x04
    4cee:	80 91 bf 1f 	lds	r24, 0x1FBF
    4cf2:	8d 83       	std	Y+5, r24	; 0x05
    4cf4:	80 91 c0 1f 	lds	r24, 0x1FC0
    4cf8:	8e 83       	std	Y+6, r24	; 0x06
    4cfa:	80 91 c1 1f 	lds	r24, 0x1FC1
    4cfe:	8f 83       	std	Y+7, r24	; 0x07
    4d00:	80 91 c2 1f 	lds	r24, 0x1FC2
    4d04:	88 87       	std	Y+8, r24	; 0x08
    4d06:	80 91 c3 1f 	lds	r24, 0x1FC3
    4d0a:	89 87       	std	Y+9, r24	; 0x09
    4d0c:	80 91 c4 1f 	lds	r24, 0x1FC4
    4d10:	8a 87       	std	Y+10, r24	; 0x0a

		// send ping response to origin device/node
		send_data_wireless(originAddr, (uint8_t *) &frame,
    4d12:	c8 01       	movw	r24, r16
    4d14:	be 01       	movw	r22, r28
    4d16:	6f 5f       	subi	r22, 0xFF	; 255
    4d18:	7f 4f       	sbci	r23, 0xFF	; 255
    4d1a:	4b e3       	ldi	r20, 0x3B	; 59
    4d1c:	2e eb       	ldi	r18, 0xBE	; 190
    4d1e:	30 ef       	ldi	r19, 0xF0	; 240
    4d20:	0d eb       	ldi	r16, 0xBD	; 189
    4d22:	10 ef       	ldi	r17, 0xF0	; 240
    4d24:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_END_ROUTER,
				UDP_PORT_SENSN_COORD);
	}
	if (*pUDPpacket == COMMAND_PING_RESPONSE) {
    4d28:	f7 01       	movw	r30, r14
    4d2a:	80 81       	ld	r24, Z
    4d2c:	82 30       	cpi	r24, 0x02	; 2
    4d2e:	09 f5       	brne	.+66     	; 0x4d72 <app_ping_device_process+0xd0>
		pingdelay = macGetTime() - pingdelay;
    4d30:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4d34:	20 91 39 16 	lds	r18, 0x1639
    4d38:	30 91 3a 16 	lds	r19, 0x163A
    4d3c:	82 1b       	sub	r24, r18
    4d3e:	93 0b       	sbc	r25, r19
    4d40:	90 93 3a 16 	sts	0x163A, r25
    4d44:	80 93 39 16 	sts	0x1639, r24
		LED_TOGGLE(LED_WORKING);
    4d48:	2e b1       	in	r18, 0x0e	; 14
    4d4a:	34 e0       	ldi	r19, 0x04	; 4
    4d4c:	23 27       	eor	r18, r19
    4d4e:	2e b9       	out	0x0e, r18	; 14
    4d50:	6a 9a       	sbi	0x0d, 2	; 13
		UART_PRINT("Node/Router got a ping response, ping took: %ums\r\n", pingdelay);
    4d52:	00 d0       	rcall	.+0      	; 0x4d54 <app_ping_device_process+0xb2>
    4d54:	00 d0       	rcall	.+0      	; 0x4d56 <app_ping_device_process+0xb4>
    4d56:	21 e3       	ldi	r18, 0x31	; 49
    4d58:	3a e0       	ldi	r19, 0x0A	; 10
    4d5a:	ed b7       	in	r30, 0x3d	; 61
    4d5c:	fe b7       	in	r31, 0x3e	; 62
    4d5e:	32 83       	std	Z+2, r19	; 0x02
    4d60:	21 83       	std	Z+1, r18	; 0x01
    4d62:	94 83       	std	Z+4, r25	; 0x04
    4d64:	83 83       	std	Z+3, r24	; 0x03
    4d66:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    4d6a:	0f 90       	pop	r0
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	0f 90       	pop	r0
	}
}
    4d72:	eb 96       	adiw	r28, 0x3b	; 59
    4d74:	0f b6       	in	r0, 0x3f	; 63
    4d76:	f8 94       	cli
    4d78:	de bf       	out	0x3e, r29	; 62
    4d7a:	0f be       	out	0x3f, r0	; 63
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	cf 91       	pop	r28
    4d80:	df 91       	pop	r29
    4d82:	1f 91       	pop	r17
    4d84:	0f 91       	pop	r16
    4d86:	ff 90       	pop	r15
    4d88:	ef 90       	pop	r14
    4d8a:	08 95       	ret

00004d8c <app_ping_coord_process>:
	} else {
		cvar = 0;
	}
}

void app_ping_coord_process(uint8_t* pUDPpacket, int16_t originAddr) {
    4d8c:	ef 92       	push	r14
    4d8e:	ff 92       	push	r15
    4d90:	0f 93       	push	r16
    4d92:	1f 93       	push	r17
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	cd b7       	in	r28, 0x3d	; 61
    4d9a:	de b7       	in	r29, 0x3e	; 62
    4d9c:	eb 97       	sbiw	r28, 0x3b	; 59
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	f8 94       	cli
    4da2:	de bf       	out	0x3e, r29	; 62
    4da4:	0f be       	out	0x3f, r0	; 63
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	7c 01       	movw	r14, r24
    4daa:	8b 01       	movw	r16, r22
	if (*pUDPpacket == COMMAND_PING_REQUEST) {
    4dac:	fc 01       	movw	r30, r24
    4dae:	80 81       	ld	r24, Z
    4db0:	81 30       	cpi	r24, 0x01	; 1
    4db2:	79 f5       	brne	.+94     	; 0x4e12 <app_ping_coord_process+0x86>
		UART_PRINT("Coord got Ping request\r\n");
    4db4:	84 e6       	ldi	r24, 0x64	; 100
    4db6:	9a e0       	ldi	r25, 0x0A	; 10
    4db8:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
		LED_TOGGLE(LED_WORKING);
    4dbc:	8e b1       	in	r24, 0x0e	; 14
    4dbe:	94 e0       	ldi	r25, 0x04	; 4
    4dc0:	89 27       	eor	r24, r25
    4dc2:	8e b9       	out	0x0e, r24	; 14
    4dc4:	6a 9a       	sbi	0x0d, 2	; 13

		//setup response frame TODO response with a modified frame not a new one
		deRFprotocol_t frame;
		payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
		frame.command = COMMAND_PING_RESPONSE;
    4dc6:	82 e0       	ldi	r24, 0x02	; 2
    4dc8:	89 83       	std	Y+1, r24	; 0x01
		frame.option = NO_OPTION;
    4dca:	1a 82       	std	Y+2, r1	; 0x02
		pingFrame->mac = macConfig.longAddr;
    4dcc:	80 91 bd 1f 	lds	r24, 0x1FBD
    4dd0:	8b 83       	std	Y+3, r24	; 0x03
    4dd2:	80 91 be 1f 	lds	r24, 0x1FBE
    4dd6:	8c 83       	std	Y+4, r24	; 0x04
    4dd8:	80 91 bf 1f 	lds	r24, 0x1FBF
    4ddc:	8d 83       	std	Y+5, r24	; 0x05
    4dde:	80 91 c0 1f 	lds	r24, 0x1FC0
    4de2:	8e 83       	std	Y+6, r24	; 0x06
    4de4:	80 91 c1 1f 	lds	r24, 0x1FC1
    4de8:	8f 83       	std	Y+7, r24	; 0x07
    4dea:	80 91 c2 1f 	lds	r24, 0x1FC2
    4dee:	88 87       	std	Y+8, r24	; 0x08
    4df0:	80 91 c3 1f 	lds	r24, 0x1FC3
    4df4:	89 87       	std	Y+9, r24	; 0x09
    4df6:	80 91 c4 1f 	lds	r24, 0x1FC4
    4dfa:	8a 87       	std	Y+10, r24	; 0x0a

		// send ping response to origin device/node
		send_data_wireless(originAddr, (uint8_t *) &frame,
    4dfc:	c8 01       	movw	r24, r16
    4dfe:	be 01       	movw	r22, r28
    4e00:	6f 5f       	subi	r22, 0xFF	; 255
    4e02:	7f 4f       	sbci	r23, 0xFF	; 255
    4e04:	4b e3       	ldi	r20, 0x3B	; 59
    4e06:	2d eb       	ldi	r18, 0xBD	; 189
    4e08:	30 ef       	ldi	r19, 0xF0	; 240
    4e0a:	0e eb       	ldi	r16, 0xBE	; 190
    4e0c:	10 ef       	ldi	r17, 0xF0	; 240
    4e0e:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_COORD,
				UDP_PORT_SENSN_END_ROUTER);
	}
	if (*pUDPpacket == COMMAND_PING_RESPONSE) {
    4e12:	f7 01       	movw	r30, r14
    4e14:	80 81       	ld	r24, Z
    4e16:	82 30       	cpi	r24, 0x02	; 2
    4e18:	09 f5       	brne	.+66     	; 0x4e5c <app_ping_coord_process+0xd0>
		pingdelay = macGetTime() - pingdelay;
    4e1a:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4e1e:	20 91 39 16 	lds	r18, 0x1639
    4e22:	30 91 3a 16 	lds	r19, 0x163A
    4e26:	82 1b       	sub	r24, r18
    4e28:	93 0b       	sbc	r25, r19
    4e2a:	90 93 3a 16 	sts	0x163A, r25
    4e2e:	80 93 39 16 	sts	0x1639, r24
		LED_TOGGLE(LED_WORKING);
    4e32:	2e b1       	in	r18, 0x0e	; 14
    4e34:	34 e0       	ldi	r19, 0x04	; 4
    4e36:	23 27       	eor	r18, r19
    4e38:	2e b9       	out	0x0e, r18	; 14
    4e3a:	6a 9a       	sbi	0x0d, 2	; 13
		UART_PRINT("coord got a ping response, ping took: %ums\r\n", pingdelay);
    4e3c:	00 d0       	rcall	.+0      	; 0x4e3e <app_ping_coord_process+0xb2>
    4e3e:	00 d0       	rcall	.+0      	; 0x4e40 <app_ping_coord_process+0xb4>
    4e40:	2c e7       	ldi	r18, 0x7C	; 124
    4e42:	3a e0       	ldi	r19, 0x0A	; 10
    4e44:	ed b7       	in	r30, 0x3d	; 61
    4e46:	fe b7       	in	r31, 0x3e	; 62
    4e48:	32 83       	std	Z+2, r19	; 0x02
    4e4a:	21 83       	std	Z+1, r18	; 0x01
    4e4c:	94 83       	std	Z+4, r25	; 0x04
    4e4e:	83 83       	std	Z+3, r24	; 0x03
    4e50:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    4e54:	0f 90       	pop	r0
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
	}

}
    4e5c:	eb 96       	adiw	r28, 0x3b	; 59
    4e5e:	0f b6       	in	r0, 0x3f	; 63
    4e60:	f8 94       	cli
    4e62:	de bf       	out	0x3e, r29	; 62
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	cd bf       	out	0x3d, r28	; 61
    4e68:	cf 91       	pop	r28
    4e6a:	df 91       	pop	r29
    4e6c:	1f 91       	pop	r17
    4e6e:	0f 91       	pop	r16
    4e70:	ff 90       	pop	r15
    4e72:	ef 90       	pop	r14
    4e74:	08 95       	ret

00004e76 <sendPing>:

/*
 * function sends a periodic ping request over UDP to the dest_addr_ping
 * @param dest_addr Address the ping request to be sent
 */
void sendPing() {
    4e76:	0f 93       	push	r16
    4e78:	1f 93       	push	r17
    4e7a:	df 93       	push	r29
    4e7c:	cf 93       	push	r28
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
    4e82:	eb 97       	sbiw	r28, 0x3b	; 59
    4e84:	0f b6       	in	r0, 0x3f	; 63
    4e86:	f8 94       	cli
    4e88:	de bf       	out	0x3e, r29	; 62
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	cd bf       	out	0x3d, r28	; 61
	// Setup a Ping Request packet to be send to the destination address
	deRFprotocol_t frame;
	payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
	frame.command = COMMAND_PING_REQUEST;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	89 83       	std	Y+1, r24	; 0x01
	frame.option = NO_OPTION;
    4e92:	1a 82       	std	Y+2, r1	; 0x02
	pingFrame->mac = macConfig.longAddr;
    4e94:	80 91 bd 1f 	lds	r24, 0x1FBD
    4e98:	8b 83       	std	Y+3, r24	; 0x03
    4e9a:	80 91 be 1f 	lds	r24, 0x1FBE
    4e9e:	8c 83       	std	Y+4, r24	; 0x04
    4ea0:	80 91 bf 1f 	lds	r24, 0x1FBF
    4ea4:	8d 83       	std	Y+5, r24	; 0x05
    4ea6:	80 91 c0 1f 	lds	r24, 0x1FC0
    4eaa:	8e 83       	std	Y+6, r24	; 0x06
    4eac:	80 91 c1 1f 	lds	r24, 0x1FC1
    4eb0:	8f 83       	std	Y+7, r24	; 0x07
    4eb2:	80 91 c2 1f 	lds	r24, 0x1FC2
    4eb6:	88 87       	std	Y+8, r24	; 0x08
    4eb8:	80 91 c3 1f 	lds	r24, 0x1FC3
    4ebc:	89 87       	std	Y+9, r24	; 0x09
    4ebe:	80 91 c4 1f 	lds	r24, 0x1FC4
    4ec2:	8a 87       	std	Y+10, r24	; 0x0a

	if (NODETYPE == COORD) {
		pingdelay = macGetTime();
    4ec4:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4ec8:	90 93 3a 16 	sts	0x163A, r25
    4ecc:	80 93 39 16 	sts	0x1639, r24
		send_data_wireless(dest_addr_ping, (uint8_t *) &frame,
    4ed0:	80 91 e5 20 	lds	r24, 0x20E5
    4ed4:	90 91 e6 20 	lds	r25, 0x20E6
    4ed8:	be 01       	movw	r22, r28
    4eda:	6f 5f       	subi	r22, 0xFF	; 255
    4edc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ede:	4b e3       	ldi	r20, 0x3B	; 59
    4ee0:	2d eb       	ldi	r18, 0xBD	; 189
    4ee2:	30 ef       	ldi	r19, 0xF0	; 240
    4ee4:	0e eb       	ldi	r16, 0xBE	; 190
    4ee6:	10 ef       	ldi	r17, 0xF0	; 240
    4ee8:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_END_ROUTER,
				UDP_PORT_SENSN_COORD);
		UART_PRINT("Send Ping Request to 0x%u \r\n", dest_addr_ping);
	}
	// cvar repeats
	if (cvar < 4) { // limit number of pings by ++ cvar
    4eec:	80 91 3b 16 	lds	r24, 0x163B
    4ef0:	84 30       	cpi	r24, 0x04	; 4
    4ef2:	48 f4       	brcc	.+18     	; 0x4f06 <sendPing+0x90>
		utimer = macSetAlarm(500, sendPing);
    4ef4:	84 ef       	ldi	r24, 0xF4	; 244
    4ef6:	91 e0       	ldi	r25, 0x01	; 1
    4ef8:	6b e3       	ldi	r22, 0x3B	; 59
    4efa:	77 e2       	ldi	r23, 0x27	; 39
    4efc:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    4f00:	80 93 e7 20 	sts	0x20E7, r24
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <sendPing+0x94>
	} else {
		cvar = 0;
    4f06:	10 92 3b 16 	sts	0x163B, r1
	}
}
    4f0a:	eb 96       	adiw	r28, 0x3b	; 59
    4f0c:	0f b6       	in	r0, 0x3f	; 63
    4f0e:	f8 94       	cli
    4f10:	de bf       	out	0x3e, r29	; 62
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	cd bf       	out	0x3d, r28	; 61
    4f16:	cf 91       	pop	r28
    4f18:	df 91       	pop	r29
    4f1a:	1f 91       	pop	r17
    4f1c:	0f 91       	pop	r16
    4f1e:	08 95       	ret

00004f20 <ping_button_ev>:
u8 cvar = 0;
u8 utimer;
bool do_ = false;

void ping_button_ev() {
	if (do_ == true) {
    4f20:	80 91 3c 16 	lds	r24, 0x163C
    4f24:	88 23       	and	r24, r24
    4f26:	39 f0       	breq	.+14     	; 0x4f36 <ping_button_ev+0x16>
		do_ = false;
    4f28:	10 92 3c 16 	sts	0x163C, r1
		macTimerEnd(utimer);
    4f2c:	80 91 e7 20 	lds	r24, 0x20E7
    4f30:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>
    4f34:	08 95       	ret

	} else {
		do_ = true;
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	80 93 3c 16 	sts	0x163C, r24
		if (NODETYPE == COORD) {
			dest_addr_ping = DEFAULT_FIRST_NODE_ADDR;
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	90 93 e6 20 	sts	0x20E6, r25
    4f44:	80 93 e5 20 	sts	0x20E5, r24
		} else {
			dest_addr_ping = DEFAULT_COORD_ADDR;
		}
		sendPing();
    4f48:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <sendPing>
    4f4c:	08 95       	ret

00004f4e <perf_init>:
uint16_t netto_troughput;
bool do__ = false;
u8 utimer;

void perf_init() {
	do__ = false;
    4f4e:	10 92 41 16 	sts	0x1641, r1
}
    4f52:	08 95       	ret

00004f54 <perf_button_ev>:
}

void perf_button_ev() {

	if (NODETYPE == COORD) {
		UART_PRINT("APP_PERF COORD:Button pressed");
    4f54:	00 d0       	rcall	.+0      	; 0x4f56 <perf_button_ev+0x2>
    4f56:	89 ea       	ldi	r24, 0xA9	; 169
    4f58:	9a e0       	ldi	r25, 0x0A	; 10
    4f5a:	ed b7       	in	r30, 0x3d	; 61
    4f5c:	fe b7       	in	r31, 0x3e	; 62
    4f5e:	92 83       	std	Z+2, r25	; 0x02
    4f60:	81 83       	std	Z+1, r24	; 0x01
    4f62:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    4f66:	0f 90       	pop	r0
    4f68:	0f 90       	pop	r0
			send_test_data();

		}
	}

}
    4f6a:	08 95       	ret

00004f6c <compare_test_data>:

	send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t *) &s_send, strlen(s_send),
			UDP_PORT_SENSN_END_ROUTER, UDP_PORT_SENSN_COORD);
}

void compare_test_data(uint8_t* pUDPpacket, uint8_t payloadlen) {
    4f6c:	ef 92       	push	r14
    4f6e:	ff 92       	push	r15
    4f70:	0f 93       	push	r16
    4f72:	1f 93       	push	r17
    4f74:	28 2f       	mov	r18, r24
    4f76:	79 2f       	mov	r23, r25
    4f78:	46 2f       	mov	r20, r22
	//Check integrity of the data in a very simple way
	memcpy(mac_buf, pUDPpacket, payloadlen);
    4f7a:	04 e4       	ldi	r16, 0x44	; 68
    4f7c:	11 e2       	ldi	r17, 0x21	; 33
    4f7e:	c8 01       	movw	r24, r16
    4f80:	62 2f       	mov	r22, r18
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	0e 94 db 34 	call	0x69b6	; 0x69b6 <memcpy>

	if (strcmp(
    4f88:	c8 01       	movw	r24, r16
    4f8a:	67 ec       	ldi	r22, 0xC7	; 199
    4f8c:	7a e0       	ldi	r23, 0x0A	; 10
    4f8e:	0e 94 ef 34 	call	0x69de	; 0x69de <strcmp>
    4f92:	00 97       	sbiw	r24, 0x00	; 0
    4f94:	09 f0       	breq	.+2      	; 0x4f98 <compare_test_data+0x2c>
    4f96:	b3 c0       	rjmp	.+358    	; 0x50fe <compare_test_data+0x192>
			mac_buf,
			"Lorem ipsum dolor sit amet, consectetuers adipiscing elit. Aenaaaaaaean commodo ligul")
			== 0) {

		//measure time from first successfully received frame
		if (pro_counter == 1) {
    4f98:	80 91 3d 16 	lds	r24, 0x163D
    4f9c:	90 91 3e 16 	lds	r25, 0x163E
    4fa0:	01 97       	sbiw	r24, 0x01	; 1
    4fa2:	31 f4       	brne	.+12     	; 0x4fb0 <compare_test_data+0x44>
			time_from = macGetTime();
    4fa4:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4fa8:	90 93 43 21 	sts	0x2143, r25
    4fac:	80 93 42 21 	sts	0x2142, r24
		}
		//UART_PRINT(" ");
		//UART_PRINT("successfully received packet No. %u\r\n",pro_counter);

		if (++pro_counter >= P_COUNT) {
    4fb0:	80 91 3d 16 	lds	r24, 0x163D
    4fb4:	90 91 3e 16 	lds	r25, 0x163E
    4fb8:	01 96       	adiw	r24, 0x01	; 1
    4fba:	90 93 3e 16 	sts	0x163E, r25
    4fbe:	80 93 3d 16 	sts	0x163D, r24
    4fc2:	c2 97       	sbiw	r24, 0x32	; 50
    4fc4:	08 f4       	brcc	.+2      	; 0x4fc8 <compare_test_data+0x5c>
    4fc6:	a8 c0       	rjmp	.+336    	; 0x5118 <compare_test_data+0x1ac>
			time_test = macGetTime() - time_from;
    4fc8:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4fcc:	20 91 42 21 	lds	r18, 0x2142
    4fd0:	30 91 43 21 	lds	r19, 0x2143
    4fd4:	82 1b       	sub	r24, r18
    4fd6:	93 0b       	sbc	r25, r19
    4fd8:	90 93 3f 21 	sts	0x213F, r25
    4fdc:	80 93 3e 21 	sts	0x213E, r24

			// evaluate time and co_counter
			LED_TOGGLE(LED_WORKING);
    4fe0:	2e b1       	in	r18, 0x0e	; 14
    4fe2:	34 e0       	ldi	r19, 0x04	; 4
    4fe4:	23 27       	eor	r18, r19
    4fe6:	2e b9       	out	0x0e, r18	; 14
    4fe8:	6a 9a       	sbi	0x0d, 2	; 13
			//UART_PRINT("\033[2J\r\n");
			UART_PRINT("Received %u Frames in : %ums\r\n",pro_counter, time_test);
    4fea:	00 d0       	rcall	.+0      	; 0x4fec <compare_test_data+0x80>
    4fec:	00 d0       	rcall	.+0      	; 0x4fee <compare_test_data+0x82>
    4fee:	00 d0       	rcall	.+0      	; 0x4ff0 <compare_test_data+0x84>
    4ff0:	ed b7       	in	r30, 0x3d	; 61
    4ff2:	fe b7       	in	r31, 0x3e	; 62
    4ff4:	31 96       	adiw	r30, 0x01	; 1
    4ff6:	2d e1       	ldi	r18, 0x1D	; 29
    4ff8:	3b e0       	ldi	r19, 0x0B	; 11
    4ffa:	ad b7       	in	r26, 0x3d	; 61
    4ffc:	be b7       	in	r27, 0x3e	; 62
    4ffe:	12 96       	adiw	r26, 0x02	; 2
    5000:	3c 93       	st	X, r19
    5002:	2e 93       	st	-X, r18
    5004:	11 97       	sbiw	r26, 0x01	; 1
    5006:	20 91 3d 16 	lds	r18, 0x163D
    500a:	30 91 3e 16 	lds	r19, 0x163E
    500e:	33 83       	std	Z+3, r19	; 0x03
    5010:	22 83       	std	Z+2, r18	; 0x02
    5012:	95 83       	std	Z+5, r25	; 0x05
    5014:	84 83       	std	Z+4, r24	; 0x04
    5016:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
			netto_troughput = (((float) MAX_PERFTEST_FRAME_LENGTH * pro_counter)
    501a:	60 91 3d 16 	lds	r22, 0x163D
    501e:	70 91 3e 16 	lds	r23, 0x163E
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatunsisf>
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	4c ea       	ldi	r20, 0xAC	; 172
    5030:	52 e4       	ldi	r21, 0x42	; 66
    5032:	0e 94 87 33 	call	0x670e	; 0x670e <__mulsf3>
    5036:	7b 01       	movw	r14, r22
    5038:	8c 01       	movw	r16, r24
    503a:	60 91 3e 21 	lds	r22, 0x213E
    503e:	70 91 3f 21 	lds	r23, 0x213F
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatunsisf>
    504a:	9b 01       	movw	r18, r22
    504c:	ac 01       	movw	r20, r24
    504e:	c8 01       	movw	r24, r16
    5050:	b7 01       	movw	r22, r14
    5052:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__divsf3>
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	4a e7       	ldi	r20, 0x7A	; 122
    505c:	54 e4       	ldi	r21, 0x44	; 68
    505e:	0e 94 87 33 	call	0x670e	; 0x670e <__mulsf3>
    5062:	0e 94 cd 32 	call	0x659a	; 0x659a <__fixunssfsi>
    5066:	70 93 41 21 	sts	0x2141, r23
    506a:	60 93 40 21 	sts	0x2140, r22
					/ time_test) * 1000;
			UART_PRINT("Netto troughput was %u Bytes/s\r\n",netto_troughput);
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	ed b7       	in	r30, 0x3d	; 61
    5074:	fe b7       	in	r31, 0x3e	; 62
    5076:	31 96       	adiw	r30, 0x01	; 1
    5078:	2c e3       	ldi	r18, 0x3C	; 60
    507a:	3b e0       	ldi	r19, 0x0B	; 11
    507c:	ad b7       	in	r26, 0x3d	; 61
    507e:	be b7       	in	r27, 0x3e	; 62
    5080:	12 96       	adiw	r26, 0x02	; 2
    5082:	3c 93       	st	X, r19
    5084:	2e 93       	st	-X, r18
    5086:	11 97       	sbiw	r26, 0x01	; 1
    5088:	73 83       	std	Z+3, r23	; 0x03
    508a:	62 83       	std	Z+2, r22	; 0x02
    508c:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
			UART_PRINT("Es wurden %u Pakete erfolgreich empfangen\r\nDefekte Pakete: %u\r\n",pro_counter,co_counter);
    5090:	00 d0       	rcall	.+0      	; 0x5092 <compare_test_data+0x126>
    5092:	ed b7       	in	r30, 0x3d	; 61
    5094:	fe b7       	in	r31, 0x3e	; 62
    5096:	31 96       	adiw	r30, 0x01	; 1
    5098:	8d e5       	ldi	r24, 0x5D	; 93
    509a:	9b e0       	ldi	r25, 0x0B	; 11
    509c:	ad b7       	in	r26, 0x3d	; 61
    509e:	be b7       	in	r27, 0x3e	; 62
    50a0:	12 96       	adiw	r26, 0x02	; 2
    50a2:	9c 93       	st	X, r25
    50a4:	8e 93       	st	-X, r24
    50a6:	11 97       	sbiw	r26, 0x01	; 1
    50a8:	80 91 3d 16 	lds	r24, 0x163D
    50ac:	90 91 3e 16 	lds	r25, 0x163E
    50b0:	93 83       	std	Z+3, r25	; 0x03
    50b2:	82 83       	std	Z+2, r24	; 0x02
    50b4:	80 91 3f 16 	lds	r24, 0x163F
    50b8:	90 91 40 16 	lds	r25, 0x1640
    50bc:	95 83       	std	Z+5, r25	; 0x05
    50be:	84 83       	std	Z+4, r24	; 0x04
    50c0:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
			UART_PRINT("%u\r\n", netto_troughput);
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	8d e9       	ldi	r24, 0x9D	; 157
    50ca:	9b e0       	ldi	r25, 0x0B	; 11
    50cc:	ed b7       	in	r30, 0x3d	; 61
    50ce:	fe b7       	in	r31, 0x3e	; 62
    50d0:	92 83       	std	Z+2, r25	; 0x02
    50d2:	81 83       	std	Z+1, r24	; 0x01
    50d4:	80 91 40 21 	lds	r24, 0x2140
    50d8:	90 91 41 21 	lds	r25, 0x2141
    50dc:	94 83       	std	Z+4, r25	; 0x04
    50de:	83 83       	std	Z+3, r24	; 0x03
    50e0:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
			pro_counter = 0;
    50e4:	10 92 3e 16 	sts	0x163E, r1
    50e8:	10 92 3d 16 	sts	0x163D, r1
			co_counter = 0;
    50ec:	10 92 40 16 	sts	0x1640, r1
    50f0:	10 92 3f 16 	sts	0x163F, r1
    50f4:	0f 90       	pop	r0
    50f6:	0f 90       	pop	r0
    50f8:	0f 90       	pop	r0
    50fa:	0f 90       	pop	r0
    50fc:	0d c0       	rjmp	.+26     	; 0x5118 <compare_test_data+0x1ac>
		}

	} else {
		co_counter++;
    50fe:	80 91 3f 16 	lds	r24, 0x163F
    5102:	90 91 40 16 	lds	r25, 0x1640
    5106:	01 96       	adiw	r24, 0x01	; 1
    5108:	90 93 40 16 	sts	0x1640, r25
    510c:	80 93 3f 16 	sts	0x163F, r24
		UART_PRINT("defect frame\r\n");
    5110:	82 ea       	ldi	r24, 0xA2	; 162
    5112:	9b e0       	ldi	r25, 0x0B	; 11
    5114:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
	}

	//UART_PRINT("-----%s\r\n",mac_buf);

}
    5118:	1f 91       	pop	r17
    511a:	0f 91       	pop	r16
    511c:	ff 90       	pop	r15
    511e:	ef 90       	pop	r14
    5120:	08 95       	ret

00005122 <send_test_data>:

}
/*
 * sends test string in a UDP packet to coordinator
 */
void send_test_data() {
    5122:	0f 93       	push	r16
    5124:	1f 93       	push	r17
	//	char s_append[15];
	//	uint8_t len;
	// UART_PRINT("\r\nSende %d. Paket\r\n", ++count);
	LED_TOGGLE(LED_WORKING);
    5126:	8e b1       	in	r24, 0x0e	; 14
    5128:	94 e0       	ldi	r25, 0x04	; 4
    512a:	89 27       	eor	r24, r25
    512c:	8e b9       	out	0x0e, r24	; 14
    512e:	6a 9a       	sbi	0x0d, 2	; 13
	//sprintf(s_send, "Bin das %d. Paket von 0x%d (shortadress)  ", ++count,
	//		macConfig.shortAddress);
	// Teststring to be send periodic
	sprintf(
    5130:	08 ee       	ldi	r16, 0xE8	; 232
    5132:	10 e2       	ldi	r17, 0x20	; 32
    5134:	c8 01       	movw	r24, r16
    5136:	67 ec       	ldi	r22, 0xC7	; 199
    5138:	7a e0       	ldi	r23, 0x0A	; 10
    513a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <strcpy>
	//	sprintf(s_append, "L\x84nge: %d\r\n", (len + 11));
	//	strcat(s_send, s_append);
	//	UART_PRINT("String to be send:  %s",s_send);
	//	UART_PRINT("strlen of s_send: %d\r\n",strlen(s_send));

	send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t *) &s_send, strlen(s_send),
    513e:	f8 01       	movw	r30, r16
    5140:	01 90       	ld	r0, Z+
    5142:	00 20       	and	r0, r0
    5144:	e9 f7       	brne	.-6      	; 0x5140 <send_test_data+0x1e>
    5146:	31 97       	sbiw	r30, 0x01	; 1
    5148:	e0 1b       	sub	r30, r16
    514a:	f1 0b       	sbc	r31, r17
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	b8 01       	movw	r22, r16
    5152:	4e 2f       	mov	r20, r30
    5154:	2e eb       	ldi	r18, 0xBE	; 190
    5156:	30 ef       	ldi	r19, 0xF0	; 240
    5158:	0d eb       	ldi	r16, 0xBD	; 189
    515a:	10 ef       	ldi	r17, 0xF0	; 240
    515c:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
			UDP_PORT_SENSN_END_ROUTER, UDP_PORT_SENSN_COORD);
}
    5160:	1f 91       	pop	r17
    5162:	0f 91       	pop	r16
    5164:	08 95       	ret

00005166 <perf_loop_task>:
void perf_init() {
	do__ = false;
}

void perf_loop_task() {
	if (do__) {
    5166:	80 91 41 16 	lds	r24, 0x1641
    516a:	88 23       	and	r24, r24
    516c:	11 f0       	breq	.+4      	; 0x5172 <perf_loop_task+0xc>
		send_test_data();
    516e:	0e 94 91 28 	call	0x5122	; 0x5122 <send_test_data>
    5172:	08 95       	ret

00005174 <bmm_buffer_init>:
 * @brief Initialize buffer pool. Must called inside main initialization
 * routine (before first frame transmission starts).
 *
 */
void bmm_buffer_init(void)
{
    5174:	e0 ee       	ldi	r30, 0xE0	; 224
    5176:	fd e1       	ldi	r31, 0x1D	; 29
    5178:	82 e4       	ldi	r24, 0x42	; 66
    517a:	96 e1       	ldi	r25, 0x16	; 22
   uint8_t index = 0;
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      free_map[index] = buf_pool + (sizeof(buffer_t) * index);
    517c:	81 93       	st	Z+, r24
    517e:	91 93       	st	Z+, r25
    5180:	8e 57       	subi	r24, 0x7E	; 126
    5182:	9f 4f       	sbci	r25, 0xFF	; 255
 *
 */
void bmm_buffer_init(void)
{
   uint8_t index = 0;
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    5184:	2d e1       	ldi	r18, 0x1D	; 29
    5186:	ee 3f       	cpi	r30, 0xFE	; 254
    5188:	f2 07       	cpc	r31, r18
    518a:	c1 f7       	brne	.-16     	; 0x517c <bmm_buffer_init+0x8>
   {
      free_map[index] = buf_pool + (sizeof(buffer_t) * index);
   }
#if DEBUG_BUFFER
   counter = TOTAL_NUMBER_OF_BUFS;
    518c:	8f e0       	ldi	r24, 0x0F	; 15
    518e:	80 93 9a 21 	sts	0x219A, r24
      index_map[i].pFrame = NULL;
      index_map[i].id = 0;
   }
#endif // BMM_DEBUG_ENABLE
#endif
}
    5192:	08 95       	ret

00005194 <bmm_buffer_alloc>:
 * Allocates buffer if available. If there is no free buffer, NULL is returned.
 *
 * @return pointer to free buffer area, or NULL if no free buffer is available
 */
uint8_t* bmm_buffer_alloc()
{
    5194:	df 93       	push	r29
    5196:	cf 93       	push	r28
    5198:	0f 92       	push	r0
    519a:	cd b7       	in	r28, 0x3d	; 61
    519c:	de b7       	in	r29, 0x3e	; 62
   uint8_t index = 0;
   uint8_t* pFreeSpace = NULL;

   AVR_ENTER_CRITICAL_REGION();
    519e:	8f b7       	in	r24, 0x3f	; 63
    51a0:	89 83       	std	Y+1, r24	; 0x01
    51a2:	f8 94       	cli
    51a4:	a0 ee       	ldi	r26, 0xE0	; 224
    51a6:	bd e1       	ldi	r27, 0x1D	; 29
    51a8:	e0 e0       	ldi	r30, 0x00	; 0
    51aa:	f0 e0       	ldi	r31, 0x00	; 0
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      if(free_map[index] != NULL)
    51ac:	2d 91       	ld	r18, X+
    51ae:	3c 91       	ld	r19, X
    51b0:	11 97       	sbiw	r26, 0x01	; 1
    51b2:	21 15       	cp	r18, r1
    51b4:	31 05       	cpc	r19, r1
    51b6:	61 f0       	breq	.+24     	; 0x51d0 <bmm_buffer_alloc+0x3c>
      {
         pFreeSpace = free_map[index];
         free_map[index] = NULL;
    51b8:	ee 0f       	add	r30, r30
    51ba:	ff 1f       	adc	r31, r31
    51bc:	e0 52       	subi	r30, 0x20	; 32
    51be:	f2 4e       	sbci	r31, 0xE2	; 226
    51c0:	11 82       	std	Z+1, r1	; 0x01
    51c2:	10 82       	st	Z, r1
#if DEBUG_BUFFER
         counter--;
    51c4:	80 91 9a 21 	lds	r24, 0x219A
    51c8:	81 50       	subi	r24, 0x01	; 1
    51ca:	80 93 9a 21 	sts	0x219A, r24
    51ce:	05 c0       	rjmp	.+10     	; 0x51da <bmm_buffer_alloc+0x46>
            }
         }
         UART_PRINT(" b_a (%u - %u)\n", counter, id_counter);
#endif // BMM_DEBUG_ENABLE
#endif
         break;
    51d0:	31 96       	adiw	r30, 0x01	; 1
    51d2:	12 96       	adiw	r26, 0x02	; 2
{
   uint8_t index = 0;
   uint8_t* pFreeSpace = NULL;

   AVR_ENTER_CRITICAL_REGION();
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    51d4:	ef 30       	cpi	r30, 0x0F	; 15
    51d6:	f1 05       	cpc	r31, r1
    51d8:	49 f7       	brne	.-46     	; 0x51ac <bmm_buffer_alloc+0x18>
#endif // BMM_DEBUG_ENABLE
#endif
         break;
      }
   }
   AVR_LEAVE_CRITICAL_REGION();
    51da:	89 81       	ldd	r24, Y+1	; 0x01
    51dc:	8f bf       	out	0x3f, r24	; 63

   return pFreeSpace;
}
    51de:	c9 01       	movw	r24, r18
    51e0:	0f 90       	pop	r0
    51e2:	cf 91       	pop	r28
    51e4:	df 91       	pop	r29
    51e6:	08 95       	ret

000051e8 <bmm_buffer_free>:
 * Free allocated buffer area by simply add to free buffer list
 *
 * @param buf pointer to buffer area which should be freed
 */
void bmm_buffer_free(uint8_t* buf)
{
    51e8:	df 93       	push	r29
    51ea:	cf 93       	push	r28
    51ec:	0f 92       	push	r0
    51ee:	cd b7       	in	r28, 0x3d	; 61
    51f0:	de b7       	in	r29, 0x3e	; 62
    51f2:	9c 01       	movw	r18, r24
   uint8_t index = 0;

   AVR_ENTER_CRITICAL_REGION();
    51f4:	8f b7       	in	r24, 0x3f	; 63
    51f6:	89 83       	std	Y+1, r24	; 0x01
    51f8:	f8 94       	cli
    51fa:	a0 ee       	ldi	r26, 0xE0	; 224
    51fc:	bd e1       	ldi	r27, 0x1D	; 29
    51fe:	e0 e0       	ldi	r30, 0x00	; 0
    5200:	f0 e0       	ldi	r31, 0x00	; 0
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      if(free_map[index] == NULL)
    5202:	8d 91       	ld	r24, X+
    5204:	9c 91       	ld	r25, X
    5206:	11 97       	sbiw	r26, 0x01	; 1
    5208:	89 2b       	or	r24, r25
    520a:	39 f4       	brne	.+14     	; 0x521a <bmm_buffer_free+0x32>
      {
         free_map[index] = buf;
    520c:	ee 0f       	add	r30, r30
    520e:	ff 1f       	adc	r31, r31
    5210:	e0 52       	subi	r30, 0x20	; 32
    5212:	f2 4e       	sbci	r31, 0xE2	; 226
    5214:	31 83       	std	Z+1, r19	; 0x01
    5216:	20 83       	st	Z, r18
    5218:	05 c0       	rjmp	.+10     	; 0x5224 <bmm_buffer_free+0x3c>
         break;
    521a:	31 96       	adiw	r30, 0x01	; 1
    521c:	12 96       	adiw	r26, 0x02	; 2
void bmm_buffer_free(uint8_t* buf)
{
   uint8_t index = 0;

   AVR_ENTER_CRITICAL_REGION();
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    521e:	ef 30       	cpi	r30, 0x0F	; 15
    5220:	f1 05       	cpc	r31, r1
    5222:	79 f7       	brne	.-34     	; 0x5202 <bmm_buffer_free+0x1a>
         break;
      }
   }

#if DEBUG_BUFFER
   counter++;
    5224:	80 91 9a 21 	lds	r24, 0x219A
    5228:	8f 5f       	subi	r24, 0xFF	; 255
    522a:	80 93 9a 21 	sts	0x219A, r24
   }
   UART_PRINT(" b_f (%u - %u)\n", counter, temp_id);
#endif // BMM_DEBUG_ENABLE
#endif

   AVR_LEAVE_CRITICAL_REGION();
    522e:	89 81       	ldd	r24, Y+1	; 0x01
    5230:	8f bf       	out	0x3f, r24	; 63
}
    5232:	0f 90       	pop	r0
    5234:	cf 91       	pop	r28
    5236:	df 91       	pop	r29
    5238:	08 95       	ret

0000523a <number_of_free_buffers>:
{
#if DEBUG_BUFFER
   return counter;
#endif
   return 0;
}
    523a:	80 91 9a 21 	lds	r24, 0x219A
    523e:	08 95       	ret

00005240 <evaluate_data_frame>:
   (dataRCB & 0x04) ? led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_OFF);
   (dataRCB & 0x08) ? led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);

#endif // RCB_BREAKOUT
#endif // NODETYPE != COORD
}
    5240:	08 95       	ret

00005242 <set_output>:
            break;
         }
      }
   }
#endif // NODETYPE != COORD
}
    5242:	08 95       	ret

00005244 <check_input>:
         }
      }
   }
#endif // NODETYPE != COORD
   return stateChanged;
}
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	08 95       	ret

00005248 <read_io>:
      if(PING & (1 << pin)) { result = true; }
      break;
   }
#endif // NODETYPE != COORD
   return result;
}
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	08 95       	ret

0000524c <check_io_components>:
   }

   macSetAlarm(ITERATION_TIME_INPUT_IO, check_io_components);

#endif // NODETYPE != COORD
}
    524c:	08 95       	ret

0000524e <check_temp_and_vcc>:
   }

   // call again after ITERATION_TIME_TEMP_VCC timeouts
   macSetAlarm(ITERATION_TIME_TEMP_VCC, check_temp_and_vcc);
#endif // NODETYPE != COORD
}
    524e:	08 95       	ret

00005250 <process_endnode_udp_packet>:
      userDataFrame->command = COMMAND_USER_DATA_RESPONSE;
      send_data_wired(pUDPpacket, (userDataFrame->length + USER_DATA_HLEN));
   }

#endif // NODETYPE != COORD
}
    5250:	08 95       	ret

00005252 <getMACAddressBySA>:
 * who knows everthing about a node in it's network (PAN).
 *
 * @param   shortAddress  shortAddress of node
 */
uint8_t* getMACAddressBySA(uint16_t shortAddress)
                  {
    5252:	0f 93       	push	r16
    5254:	1f 93       	push	r17
    5256:	8c 01       	movw	r16, r24
#if (NODETYPE == COORD)
   associatedNodes_t* nodes = (associatedNodes_t*)getChildTable();
    5258:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
   associatedNodes_t* node = &nodes[shortAddress];
    525c:	f8 01       	movw	r30, r16
    525e:	24 e0       	ldi	r18, 0x04	; 4
    5260:	ee 0f       	add	r30, r30
    5262:	ff 1f       	adc	r31, r31
    5264:	2a 95       	dec	r18
    5266:	e1 f7       	brne	.-8      	; 0x5260 <getMACAddressBySA+0xe>
    5268:	e8 0f       	add	r30, r24
    526a:	f9 1f       	adc	r31, r25

   if (!node->nodeType)
    526c:	80 81       	ld	r24, Z
    526e:	88 23       	and	r24, r24
    5270:	19 f4       	brne	.+6      	; 0x5278 <getMACAddressBySA+0x26>
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	30 e0       	ldi	r19, 0x00	; 0
    5276:	03 c0       	rjmp	.+6      	; 0x527e <getMACAddressBySA+0x2c>
   {
      return NULL;
   }
   else
   {
      return (uint8_t*)&node->nodeLongAddress;
    5278:	9f 01       	movw	r18, r30
    527a:	2f 5f       	subi	r18, 0xFF	; 255
    527c:	3f 4f       	sbci	r19, 0xFF	; 255
   }
#endif // NODETYPE == COORD
   return NULL;
                  }
    527e:	c9 01       	movw	r24, r18
    5280:	1f 91       	pop	r17
    5282:	0f 91       	pop	r16
    5284:	08 95       	ret

00005286 <send_data_wired>:
 *
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
    5286:	9c 01       	movw	r18, r24
    5288:	46 2f       	mov	r20, r22
   protocol_send(0, pData, length);
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	b9 01       	movw	r22, r18
    528e:	50 e0       	ldi	r21, 0x00	; 0
    5290:	0e 94 ba 2c 	call	0x5974	; 0x5974 <protocol_send>
}
    5294:	08 95       	ret

00005296 <send_node_info>:
 *    - parent address of this child node (direct parent)
 *    - LQI/ED value of this child node
 *
 */
void send_node_info(uint8_t command)
{
    5296:	9f 92       	push	r9
    5298:	af 92       	push	r10
    529a:	bf 92       	push	r11
    529c:	cf 92       	push	r12
    529e:	df 92       	push	r13
    52a0:	ef 92       	push	r14
    52a2:	ff 92       	push	r15
    52a4:	0f 93       	push	r16
    52a6:	1f 93       	push	r17
    52a8:	df 93       	push	r29
    52aa:	cf 93       	push	r28
    52ac:	cd b7       	in	r28, 0x3d	; 61
    52ae:	de b7       	in	r29, 0x3e	; 62
    52b0:	eb 97       	sbiw	r28, 0x3b	; 59
    52b2:	0f b6       	in	r0, 0x3f	; 63
    52b4:	f8 94       	cli
    52b6:	de bf       	out	0x3e, r29	; 62
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	cd bf       	out	0x3d, r28	; 61
    52bc:	98 2e       	mov	r9, r24
#if NODETYPE == COORD
   associatedNodes_t* nodes = (associatedNodes_t*)getChildTable();
    52be:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
    52c2:	8c 01       	movw	r16, r24
    52c4:	41 e0       	ldi	r20, 0x01	; 1
    52c6:	c4 2e       	mov	r12, r20
    52c8:	d1 2c       	mov	r13, r1
      }

      frame.command = command;
      frame.option = NO_OPTION;

      payloadInitUpdateFrame_t* dataFrame = (payloadInitUpdateFrame_t*)&frame.payload;
    52ca:	33 e0       	ldi	r19, 0x03	; 3
    52cc:	e3 2e       	mov	r14, r19
    52ce:	f1 2c       	mov	r15, r1
    52d0:	ec 0e       	add	r14, r28
    52d2:	fd 1e       	adc	r15, r29
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    52d4:	5e 01       	movw	r10, r28
    52d6:	08 94       	sec
    52d8:	a1 1c       	adc	r10, r1
    52da:	b1 1c       	adc	r11, r1
   // i = 0 -> coordinator node
   for(i=1;i<MAXNODES;i++)
   {
      node = &nodes[i];

      if (!(node->nodeType)){
    52dc:	f8 01       	movw	r30, r16
    52de:	80 89       	ldd	r24, Z+16	; 0x10
    52e0:	88 23       	and	r24, r24
    52e2:	09 f4       	brne	.+2      	; 0x52e6 <send_node_info+0x50>
    52e4:	41 c0       	rjmp	.+130    	; 0x5368 <send_node_info+0xd2>
         continue;
      }

      frame.command = command;
    52e6:	99 82       	std	Y+1, r9	; 0x01
      frame.option = NO_OPTION;
    52e8:	1a 82       	std	Y+2, r1	; 0x02

      payloadInitUpdateFrame_t* dataFrame = (payloadInitUpdateFrame_t*)&frame.payload;

      dataFrame->mac                 = node->nodeLongAddress;
    52ea:	81 89       	ldd	r24, Z+17	; 0x11
    52ec:	f7 01       	movw	r30, r14
    52ee:	80 83       	st	Z, r24
    52f0:	f8 01       	movw	r30, r16
    52f2:	82 89       	ldd	r24, Z+18	; 0x12
    52f4:	f7 01       	movw	r30, r14
    52f6:	81 83       	std	Z+1, r24	; 0x01
    52f8:	f8 01       	movw	r30, r16
    52fa:	83 89       	ldd	r24, Z+19	; 0x13
    52fc:	f7 01       	movw	r30, r14
    52fe:	82 83       	std	Z+2, r24	; 0x02
    5300:	f8 01       	movw	r30, r16
    5302:	84 89       	ldd	r24, Z+20	; 0x14
    5304:	f7 01       	movw	r30, r14
    5306:	83 83       	std	Z+3, r24	; 0x03
    5308:	f8 01       	movw	r30, r16
    530a:	85 89       	ldd	r24, Z+21	; 0x15
    530c:	f7 01       	movw	r30, r14
    530e:	84 83       	std	Z+4, r24	; 0x04
    5310:	f8 01       	movw	r30, r16
    5312:	86 89       	ldd	r24, Z+22	; 0x16
    5314:	f7 01       	movw	r30, r14
    5316:	85 83       	std	Z+5, r24	; 0x05
    5318:	f8 01       	movw	r30, r16
    531a:	87 89       	ldd	r24, Z+23	; 0x17
    531c:	f7 01       	movw	r30, r14
    531e:	86 83       	std	Z+6, r24	; 0x06
    5320:	f8 01       	movw	r30, r16
    5322:	80 8d       	ldd	r24, Z+24	; 0x18
    5324:	f7 01       	movw	r30, r14
    5326:	87 83       	std	Z+7, r24	; 0x07
      dataFrame->nodeType            = node->nodeType;
    5328:	f8 01       	movw	r30, r16
    532a:	80 89       	ldd	r24, Z+16	; 0x10
    532c:	f7 01       	movw	r30, r14
    532e:	84 87       	std	Z+12, r24	; 0x0c
      dataFrame->shortAddress        = i;
    5330:	d1 86       	std	Z+9, r13	; 0x09
    5332:	c0 86       	std	Z+8, r12	; 0x08
      dataFrame->lastRoutedAddress   = node->lastRoutedAddress;
    5334:	f8 01       	movw	r30, r16
    5336:	83 8d       	ldd	r24, Z+27	; 0x1b
    5338:	94 8d       	ldd	r25, Z+28	; 0x1c
    533a:	f7 01       	movw	r30, r14
    533c:	96 87       	std	Z+14, r25	; 0x0e
    533e:	85 87       	std	Z+13, r24	; 0x0d
      dataFrame->ed                  = node->ed;
    5340:	f8 01       	movw	r30, r16
    5342:	86 8d       	ldd	r24, Z+30	; 0x1e
    5344:	f7 01       	movw	r30, r14
    5346:	80 8b       	std	Z+16, r24	; 0x10
      dataFrame->lqi                 = node->lqi;
    5348:	f8 01       	movw	r30, r16
    534a:	85 8d       	ldd	r24, Z+29	; 0x1d
    534c:	f7 01       	movw	r30, r14
    534e:	87 87       	std	Z+15, r24	; 0x0f
      dataFrame->parentAddress       = node->parentShortAddress;
    5350:	f8 01       	movw	r30, r16
    5352:	81 8d       	ldd	r24, Z+25	; 0x19
    5354:	92 8d       	ldd	r25, Z+26	; 0x1a
    5356:	f7 01       	movw	r30, r14
    5358:	93 87       	std	Z+11, r25	; 0x0b
    535a:	82 87       	std	Z+10, r24	; 0x0a
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	b5 01       	movw	r22, r10
    5360:	4b e3       	ldi	r20, 0x3B	; 59
    5362:	50 e0       	ldi	r21, 0x00	; 0
    5364:	0e 94 ba 2c 	call	0x5974	; 0x5974 <protocol_send>
    5368:	00 5f       	subi	r16, 0xF0	; 240
    536a:	1f 4f       	sbci	r17, 0xFF	; 255
    536c:	08 94       	sec
    536e:	c1 1c       	adc	r12, r1
    5370:	d1 1c       	adc	r13, r1
   u8 i;

   deRFprotocol_t frame;

   // i = 0 -> coordinator node
   for(i=1;i<MAXNODES;i++)
    5372:	f4 e6       	ldi	r31, 0x64	; 100
    5374:	cf 16       	cp	r12, r31
    5376:	d1 04       	cpc	r13, r1
    5378:	09 f0       	breq	.+2      	; 0x537c <send_node_info+0xe6>
    537a:	b0 cf       	rjmp	.-160    	; 0x52dc <send_node_info+0x46>

      // send frame out to usb
      send_data_wired((uint8_t*)&frame, sizeof(deRFprotocol_t));
   }
#endif // NODETYPE == COORD
}
    537c:	eb 96       	adiw	r28, 0x3b	; 59
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	cd bf       	out	0x3d, r28	; 61
    5388:	cf 91       	pop	r28
    538a:	df 91       	pop	r29
    538c:	1f 91       	pop	r17
    538e:	0f 91       	pop	r16
    5390:	ff 90       	pop	r15
    5392:	ef 90       	pop	r14
    5394:	df 90       	pop	r13
    5396:	cf 90       	pop	r12
    5398:	bf 90       	pop	r11
    539a:	af 90       	pop	r10
    539c:	9f 90       	pop	r9
    539e:	08 95       	ret

000053a0 <getNodeAddressByMAC>:
 * who knows everthing about a node in it's network (PAN).
 *
 * @param   macAddress  pointer to MAC address
 */
int16_t getNodeAddressByMAC(uint8_t* pMacAddress)
{
    53a0:	0f 93       	push	r16
    53a2:	1f 93       	push	r17
    53a4:	df 93       	push	r29
    53a6:	cf 93       	push	r28
    53a8:	cd b7       	in	r28, 0x3d	; 61
    53aa:	de b7       	in	r29, 0x3e	; 62
    53ac:	28 97       	sbiw	r28, 0x08	; 8
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	f8 94       	cli
    53b2:	de bf       	out	0x3e, r29	; 62
    53b4:	0f be       	out	0x3f, r0	; 63
    53b6:	cd bf       	out	0x3d, r28	; 61
#if (NODETYPE == COORD)
   // save MAC address as 64 Bit value
   u64 thisMacAddress;
   // take memcpy to be compatible with 8/16/32bit architectures
   memcpy(&thisMacAddress, pMacAddress, sizeof(u64));
    53b8:	de 01       	movw	r26, r28
    53ba:	11 96       	adiw	r26, 0x01	; 1
    53bc:	fc 01       	movw	r30, r24
    53be:	88 e0       	ldi	r24, 0x08	; 8
    53c0:	01 90       	ld	r0, Z+
    53c2:	0d 92       	st	X+, r0
    53c4:	81 50       	subi	r24, 0x01	; 1
    53c6:	e1 f7       	brne	.-8      	; 0x53c0 <getNodeAddressByMAC+0x20>

   associatedNodes_t *nodes;
   nodes = (associatedNodes_t*)getChildTable();
    53c8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
      {
         continue;
      }

      //compare MAC addresses
      if(thisMacAddress == node->nodeLongAddress)
    53cc:	09 81       	ldd	r16, Y+1	; 0x01
    53ce:	1a 81       	ldd	r17, Y+2	; 0x02
    53d0:	bb 81       	ldd	r27, Y+3	; 0x03
    53d2:	ac 81       	ldd	r26, Y+4	; 0x04
    53d4:	7d 81       	ldd	r23, Y+5	; 0x05
    53d6:	6e 81       	ldd	r22, Y+6	; 0x06
    53d8:	5f 81       	ldd	r21, Y+7	; 0x07
    53da:	48 85       	ldd	r20, Y+8	; 0x08
    53dc:	fc 01       	movw	r30, r24
    53de:	91 e0       	ldi	r25, 0x01	; 1
   for(i=1;i<MAXNODES;i++)
   {
      node = &nodes[i];

      //skip if empty
      if (!node->nodeType)
    53e0:	80 89       	ldd	r24, Z+16	; 0x10
    53e2:	88 23       	and	r24, r24
    53e4:	d9 f0       	breq	.+54     	; 0x541c <getNodeAddressByMAC+0x7c>
      {
         continue;
      }

      //compare MAC addresses
      if(thisMacAddress == node->nodeLongAddress)
    53e6:	81 89       	ldd	r24, Z+17	; 0x11
    53e8:	80 17       	cp	r24, r16
    53ea:	c1 f4       	brne	.+48     	; 0x541c <getNodeAddressByMAC+0x7c>
    53ec:	82 89       	ldd	r24, Z+18	; 0x12
    53ee:	81 17       	cp	r24, r17
    53f0:	a9 f4       	brne	.+42     	; 0x541c <getNodeAddressByMAC+0x7c>
    53f2:	83 89       	ldd	r24, Z+19	; 0x13
    53f4:	8b 17       	cp	r24, r27
    53f6:	91 f4       	brne	.+36     	; 0x541c <getNodeAddressByMAC+0x7c>
    53f8:	84 89       	ldd	r24, Z+20	; 0x14
    53fa:	8a 17       	cp	r24, r26
    53fc:	79 f4       	brne	.+30     	; 0x541c <getNodeAddressByMAC+0x7c>
    53fe:	85 89       	ldd	r24, Z+21	; 0x15
    5400:	87 17       	cp	r24, r23
    5402:	61 f4       	brne	.+24     	; 0x541c <getNodeAddressByMAC+0x7c>
    5404:	86 89       	ldd	r24, Z+22	; 0x16
    5406:	86 17       	cp	r24, r22
    5408:	49 f4       	brne	.+18     	; 0x541c <getNodeAddressByMAC+0x7c>
    540a:	87 89       	ldd	r24, Z+23	; 0x17
    540c:	85 17       	cp	r24, r21
    540e:	31 f4       	brne	.+12     	; 0x541c <getNodeAddressByMAC+0x7c>
    5410:	80 8d       	ldd	r24, Z+24	; 0x18
    5412:	84 17       	cp	r24, r20
    5414:	19 f4       	brne	.+6      	; 0x541c <getNodeAddressByMAC+0x7c>
         //if(*((u64*)macAddress) == node->nodeLongAddress)
      {
         return i; //return short address -> short address = index
    5416:	29 2f       	mov	r18, r25
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	06 c0       	rjmp	.+12     	; 0x5428 <getNodeAddressByMAC+0x88>
   associatedNodes_t *nodes;
   nodes = (associatedNodes_t*)getChildTable();

   associatedNodes_t *node;
   u8 i;
   for(i=1;i<MAXNODES;i++)
    541c:	9f 5f       	subi	r25, 0xFF	; 255
    541e:	70 96       	adiw	r30, 0x10	; 16
    5420:	94 36       	cpi	r25, 0x64	; 100
    5422:	f1 f6       	brne	.-68     	; 0x53e0 <getNodeAddressByMAC+0x40>
    5424:	2f ef       	ldi	r18, 0xFF	; 255
    5426:	3f ef       	ldi	r19, 0xFF	; 255
         return i; //return short address -> short address = index
      }
   }
#endif // NODETYPE == COORD
   return -1;
}
    5428:	c9 01       	movw	r24, r18
    542a:	28 96       	adiw	r28, 0x08	; 8
    542c:	0f b6       	in	r0, 0x3f	; 63
    542e:	f8 94       	cli
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	0f be       	out	0x3f, r0	; 63
    5434:	cd bf       	out	0x3d, r28	; 61
    5436:	cf 91       	pop	r28
    5438:	df 91       	pop	r29
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	08 95       	ret

00005440 <send_data_wireless>:
 * @param   len         length of data packet
 * @param   srcUDPPort  UDP port of source node
 * @param   destUDPPort UDP port of destination node
 */
void send_data_wireless(uint16_t destAddr, uint8_t* pData, uint8_t len, uint16_t srcUDPPort, uint16_t destUDPPort)
{
    5440:	bf 92       	push	r11
    5442:	cf 92       	push	r12
    5444:	df 92       	push	r13
    5446:	ef 92       	push	r14
    5448:	ff 92       	push	r15
    544a:	0f 93       	push	r16
    544c:	1f 93       	push	r17
    544e:	c6 2e       	mov	r12, r22
    5450:	b7 2e       	mov	r11, r23
    5452:	d4 2e       	mov	r13, r20
    5454:	79 01       	movw	r14, r18
   sixlowpan_hc01_udp_setup_iplocal(destAddr);
    5456:	0e 94 19 01 	call	0x232	; 0x232 <sixlowpan_hc01_udp_setup_iplocal>
   sixlowpan_hc01_udp_setup_ports(srcUDPPort, destUDPPort);
    545a:	c7 01       	movw	r24, r14
    545c:	b8 01       	movw	r22, r16
    545e:	0e 94 37 01 	call	0x26e	; 0x26e <sixlowpan_hc01_udp_setup_ports>

   memcpy( sixlowpan_hc01_udp_get_payloadptr(), pData, len);
    5462:	0e 94 91 01 	call	0x322	; 0x322 <sixlowpan_hc01_udp_get_payloadptr>
    5466:	6c 2d       	mov	r22, r12
    5468:	7b 2d       	mov	r23, r11
    546a:	4d 2d       	mov	r20, r13
    546c:	50 e0       	ldi	r21, 0x00	; 0
    546e:	0e 94 db 34 	call	0x69b6	; 0x69b6 <memcpy>
   sixlowpan_hc01_udp_set_payloadsize(len);
    5472:	8d 2d       	mov	r24, r13
    5474:	0e 94 96 01 	call	0x32c	; 0x32c <sixlowpan_hc01_udp_set_payloadsize>
   sixlowpan_hc01_udp_send();
    5478:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
}
    547c:	1f 91       	pop	r17
    547e:	0f 91       	pop	r16
    5480:	ff 90       	pop	r15
    5482:	ef 90       	pop	r14
    5484:	df 90       	pop	r13
    5486:	cf 90       	pop	r12
    5488:	bf 90       	pop	r11
    548a:	08 95       	ret

0000548c <process_incoming_user_data>:
 * @param   pUserData   pointer to incoming user data frame
 * @param   originAddr  short address of originating node
 *
 */
void process_incoming_user_data(uint8_t* pUserData, uint16_t originAddr)
{
    548c:	af 92       	push	r10
    548e:	bf 92       	push	r11
    5490:	cf 92       	push	r12
    5492:	df 92       	push	r13
    5494:	ef 92       	push	r14
    5496:	ff 92       	push	r15
    5498:	0f 93       	push	r16
    549a:	1f 93       	push	r17
    549c:	df 93       	push	r29
    549e:	cf 93       	push	r28
    54a0:	cd b7       	in	r28, 0x3d	; 61
    54a2:	de b7       	in	r29, 0x3e	; 62
    54a4:	28 97       	sbiw	r28, 0x08	; 8
    54a6:	0f b6       	in	r0, 0x3f	; 63
    54a8:	f8 94       	cli
    54aa:	de bf       	out	0x3e, r29	; 62
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	cd bf       	out	0x3d, r28	; 61
    54b0:	b8 2e       	mov	r11, r24
    54b2:	a9 2e       	mov	r10, r25
    54b4:	8b 01       	movw	r16, r22
#if NODETYPE == COORD
   // on Coord node side an User Data frame could be a message for this node or
   // should be forwarded to an End or router node
   userData_t* userDataFrame = (userData_t*)pUserData;
    54b6:	e8 2e       	mov	r14, r24
    54b8:	f9 2e       	mov	r15, r25
   int16_t shortAddress = getNodeAddressByMAC((uint8_t*)&userDataFrame->mac);
    54ba:	c7 01       	movw	r24, r14
    54bc:	02 96       	adiw	r24, 0x02	; 2
    54be:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <getNodeAddressByMAC>
    54c2:	6c 01       	movw	r12, r24

   // get MAC address from originating node
   u64 originMAC = 0;
    54c4:	19 82       	std	Y+1, r1	; 0x01
    54c6:	1a 82       	std	Y+2, r1	; 0x02
    54c8:	1b 82       	std	Y+3, r1	; 0x03
    54ca:	1c 82       	std	Y+4, r1	; 0x04
    54cc:	1d 82       	std	Y+5, r1	; 0x05
    54ce:	1e 82       	std	Y+6, r1	; 0x06
    54d0:	1f 82       	std	Y+7, r1	; 0x07
    54d2:	18 86       	std	Y+8, r1	; 0x08
   uint8_t* pMAC = getMACAddressBySA(originAddr);
    54d4:	c8 01       	movw	r24, r16
    54d6:	0e 94 29 29 	call	0x5252	; 0x5252 <getMACAddressBySA>
   if(pMAC != NULL)
    54da:	00 97       	sbiw	r24, 0x00	; 0
    54dc:	41 f0       	breq	.+16     	; 0x54ee <process_incoming_user_data+0x62>
   {
      memcpy(&originMAC, pMAC, sizeof(u64));
    54de:	de 01       	movw	r26, r28
    54e0:	11 96       	adiw	r26, 0x01	; 1
    54e2:	fc 01       	movw	r30, r24
    54e4:	88 e0       	ldi	r24, 0x08	; 8
    54e6:	01 90       	ld	r0, Z+
    54e8:	0d 92       	st	X+, r0
    54ea:	81 50       	subi	r24, 0x01	; 1
    54ec:	e1 f7       	brne	.-8      	; 0x54e6 <process_incoming_user_data+0x5a>
   }

   // coordinator does not know MAC address -> destination is not an child node
   if(shortAddress == -1)
    54ee:	8f ef       	ldi	r24, 0xFF	; 255
    54f0:	c8 16       	cp	r12, r24
    54f2:	8f ef       	ldi	r24, 0xFF	; 255
    54f4:	d8 06       	cpc	r13, r24
    54f6:	09 f0       	breq	.+2      	; 0x54fa <process_incoming_user_data+0x6e>
    54f8:	4a c0       	rjmp	.+148    	; 0x558e <process_incoming_user_data+0x102>
   {
      // check if destination node is coord node
      if(userDataFrame->mac == macConfig.longAddr)
    54fa:	f7 01       	movw	r30, r14
    54fc:	92 81       	ldd	r25, Z+2	; 0x02
    54fe:	80 91 bd 1f 	lds	r24, 0x1FBD
    5502:	98 17       	cp	r25, r24
    5504:	09 f0       	breq	.+2      	; 0x5508 <process_incoming_user_data+0x7c>
    5506:	5f c0       	rjmp	.+190    	; 0x55c6 <process_incoming_user_data+0x13a>
    5508:	93 81       	ldd	r25, Z+3	; 0x03
    550a:	80 91 be 1f 	lds	r24, 0x1FBE
    550e:	98 17       	cp	r25, r24
    5510:	09 f0       	breq	.+2      	; 0x5514 <process_incoming_user_data+0x88>
    5512:	59 c0       	rjmp	.+178    	; 0x55c6 <process_incoming_user_data+0x13a>
    5514:	94 81       	ldd	r25, Z+4	; 0x04
    5516:	80 91 bf 1f 	lds	r24, 0x1FBF
    551a:	98 17       	cp	r25, r24
    551c:	09 f0       	breq	.+2      	; 0x5520 <process_incoming_user_data+0x94>
    551e:	53 c0       	rjmp	.+166    	; 0x55c6 <process_incoming_user_data+0x13a>
    5520:	95 81       	ldd	r25, Z+5	; 0x05
    5522:	80 91 c0 1f 	lds	r24, 0x1FC0
    5526:	98 17       	cp	r25, r24
    5528:	09 f0       	breq	.+2      	; 0x552c <process_incoming_user_data+0xa0>
    552a:	4d c0       	rjmp	.+154    	; 0x55c6 <process_incoming_user_data+0x13a>
    552c:	96 81       	ldd	r25, Z+6	; 0x06
    552e:	80 91 c1 1f 	lds	r24, 0x1FC1
    5532:	98 17       	cp	r25, r24
    5534:	09 f0       	breq	.+2      	; 0x5538 <process_incoming_user_data+0xac>
    5536:	47 c0       	rjmp	.+142    	; 0x55c6 <process_incoming_user_data+0x13a>
    5538:	97 81       	ldd	r25, Z+7	; 0x07
    553a:	80 91 c2 1f 	lds	r24, 0x1FC2
    553e:	98 17       	cp	r25, r24
    5540:	09 f0       	breq	.+2      	; 0x5544 <process_incoming_user_data+0xb8>
    5542:	41 c0       	rjmp	.+130    	; 0x55c6 <process_incoming_user_data+0x13a>
    5544:	90 85       	ldd	r25, Z+8	; 0x08
    5546:	80 91 c3 1f 	lds	r24, 0x1FC3
    554a:	98 17       	cp	r25, r24
    554c:	e1 f5       	brne	.+120    	; 0x55c6 <process_incoming_user_data+0x13a>
    554e:	91 85       	ldd	r25, Z+9	; 0x09
    5550:	80 91 c4 1f 	lds	r24, 0x1FC4
    5554:	98 17       	cp	r25, r24
    5556:	b9 f5       	brne	.+110    	; 0x55c6 <process_incoming_user_data+0x13a>
      {
         // message is for this node, send out wired (USB, RS232)
         userDataFrame->command = COMMAND_USER_DATA_RESPONSE;
    5558:	81 e7       	ldi	r24, 0x71	; 113
    555a:	80 83       	st	Z, r24
         userDataFrame->mac = originMAC; //replace destMAC by MAC from originating node
    555c:	89 81       	ldd	r24, Y+1	; 0x01
    555e:	82 83       	std	Z+2, r24	; 0x02
    5560:	8a 81       	ldd	r24, Y+2	; 0x02
    5562:	83 83       	std	Z+3, r24	; 0x03
    5564:	8b 81       	ldd	r24, Y+3	; 0x03
    5566:	84 83       	std	Z+4, r24	; 0x04
    5568:	8c 81       	ldd	r24, Y+4	; 0x04
    556a:	85 83       	std	Z+5, r24	; 0x05
    556c:	8d 81       	ldd	r24, Y+5	; 0x05
    556e:	86 83       	std	Z+6, r24	; 0x06
    5570:	8e 81       	ldd	r24, Y+6	; 0x06
    5572:	87 83       	std	Z+7, r24	; 0x07
    5574:	8f 81       	ldd	r24, Y+7	; 0x07
    5576:	80 87       	std	Z+8, r24	; 0x08
    5578:	88 85       	ldd	r24, Y+8	; 0x08
    557a:	81 87       	std	Z+9, r24	; 0x09
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    557c:	41 81       	ldd	r20, Z+1	; 0x01
    557e:	46 5f       	subi	r20, 0xF6	; 246
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	6b 2d       	mov	r22, r11
    5584:	7a 2d       	mov	r23, r10
    5586:	50 e0       	ldi	r21, 0x00	; 0
    5588:	0e 94 ba 2c 	call	0x5974	; 0x5974 <protocol_send>
    558c:	1c c0       	rjmp	.+56     	; 0x55c6 <process_incoming_user_data+0x13a>
      }
   }
   else
   {
      //replace destMAC by MAC from originating node
      userDataFrame->mac = originMAC;
    558e:	89 81       	ldd	r24, Y+1	; 0x01
    5590:	f7 01       	movw	r30, r14
    5592:	82 83       	std	Z+2, r24	; 0x02
    5594:	8a 81       	ldd	r24, Y+2	; 0x02
    5596:	83 83       	std	Z+3, r24	; 0x03
    5598:	8b 81       	ldd	r24, Y+3	; 0x03
    559a:	84 83       	std	Z+4, r24	; 0x04
    559c:	8c 81       	ldd	r24, Y+4	; 0x04
    559e:	85 83       	std	Z+5, r24	; 0x05
    55a0:	8d 81       	ldd	r24, Y+5	; 0x05
    55a2:	86 83       	std	Z+6, r24	; 0x06
    55a4:	8e 81       	ldd	r24, Y+6	; 0x06
    55a6:	87 83       	std	Z+7, r24	; 0x07
    55a8:	8f 81       	ldd	r24, Y+7	; 0x07
    55aa:	80 87       	std	Z+8, r24	; 0x08
    55ac:	88 85       	ldd	r24, Y+8	; 0x08
    55ae:	81 87       	std	Z+9, r24	; 0x09
      // send message wireless to target node

      send_data_wireless(shortAddress, pUserData, (userDataFrame->length + USER_DATA_HLEN), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    55b0:	41 81       	ldd	r20, Z+1	; 0x01
    55b2:	46 5f       	subi	r20, 0xF6	; 246
    55b4:	c6 01       	movw	r24, r12
    55b6:	6b 2d       	mov	r22, r11
    55b8:	7a 2d       	mov	r23, r10
    55ba:	2c eb       	ldi	r18, 0xBC	; 188
    55bc:	30 ef       	ldi	r19, 0xF0	; 240
    55be:	0b eb       	ldi	r16, 0xBB	; 187
    55c0:	10 ef       	ldi	r17, 0xF0	; 240
    55c2:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
   }
#endif // NODETYPE == COORD
}
    55c6:	28 96       	adiw	r28, 0x08	; 8
    55c8:	0f b6       	in	r0, 0x3f	; 63
    55ca:	f8 94       	cli
    55cc:	de bf       	out	0x3e, r29	; 62
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	cd bf       	out	0x3d, r28	; 61
    55d2:	cf 91       	pop	r28
    55d4:	df 91       	pop	r29
    55d6:	1f 91       	pop	r17
    55d8:	0f 91       	pop	r16
    55da:	ff 90       	pop	r15
    55dc:	ef 90       	pop	r14
    55de:	df 90       	pop	r13
    55e0:	cf 90       	pop	r12
    55e2:	bf 90       	pop	r11
    55e4:	af 90       	pop	r10
    55e6:	08 95       	ret

000055e8 <evaluate_wired_data>:
 *
 * @param   pData pointer to data
 * @param   len   length of data
 */
uint8_t evaluate_wired_data(uint8_t* pData, uint16_t len)
{
    55e8:	0f 93       	push	r16
    55ea:	1f 93       	push	r17
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	ec 01       	movw	r28, r24
   if(*pData == COMMAND_USER_DATA_REQUEST)
    55f2:	88 81       	ld	r24, Y
    55f4:	80 37       	cpi	r24, 0x70	; 112
    55f6:	59 f5       	brne	.+86     	; 0x564e <evaluate_wired_data+0x66>
   {
      userData_t* userDataFrame = (userData_t*)pData;
      // check that length not exceed, if so, shorten length
      if(userDataFrame->length > MAX_USER_DATA_PAYLOAD)
    55f8:	89 81       	ldd	r24, Y+1	; 0x01
    55fa:	86 34       	cpi	r24, 0x46	; 70
    55fc:	10 f0       	brcs	.+4      	; 0x5602 <evaluate_wired_data+0x1a>
      {
         userDataFrame->length = MAX_USER_DATA_PAYLOAD;
    55fe:	85 e4       	ldi	r24, 0x45	; 69
    5600:	89 83       	std	Y+1, r24	; 0x01
      }
#if NODETYPE == COORD
      // get short address from destination MAC address
      int16_t shortAddress = getNodeAddressByMAC((uint8_t*)&userDataFrame->mac);
    5602:	ce 01       	movw	r24, r28
    5604:	02 96       	adiw	r24, 0x02	; 2
    5606:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <getNodeAddressByMAC>
    560a:	9c 01       	movw	r18, r24

      // if shortAddress == -1 , than MAC does not exist and shortAddress == 0 is coord address
      if(shortAddress > 0)
    560c:	18 16       	cp	r1, r24
    560e:	19 06       	cpc	r1, r25
    5610:	0c f0       	brlt	.+2      	; 0x5614 <evaluate_wired_data+0x2c>
    5612:	5a c0       	rjmp	.+180    	; 0x56c8 <evaluate_wired_data+0xe0>
      {
         // replace destination MAC address by MAC address from Coord node
         userDataFrame->mac = macConfig.longAddr;
    5614:	80 91 bd 1f 	lds	r24, 0x1FBD
    5618:	8a 83       	std	Y+2, r24	; 0x02
    561a:	80 91 be 1f 	lds	r24, 0x1FBE
    561e:	8b 83       	std	Y+3, r24	; 0x03
    5620:	80 91 bf 1f 	lds	r24, 0x1FBF
    5624:	8c 83       	std	Y+4, r24	; 0x04
    5626:	80 91 c0 1f 	lds	r24, 0x1FC0
    562a:	8d 83       	std	Y+5, r24	; 0x05
    562c:	80 91 c1 1f 	lds	r24, 0x1FC1
    5630:	8e 83       	std	Y+6, r24	; 0x06
    5632:	80 91 c2 1f 	lds	r24, 0x1FC2
    5636:	8f 83       	std	Y+7, r24	; 0x07
    5638:	80 91 c3 1f 	lds	r24, 0x1FC3
    563c:	88 87       	std	Y+8, r24	; 0x08
    563e:	80 91 c4 1f 	lds	r24, 0x1FC4
    5642:	89 87       	std	Y+9, r24	; 0x09
         // send message wireless to target node
         send_data_wireless(shortAddress, pData, (userDataFrame->length + USER_DATA_HLEN), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    5644:	49 81       	ldd	r20, Y+1	; 0x01
    5646:	46 5f       	subi	r20, 0xF6	; 246
    5648:	c9 01       	movw	r24, r18
    564a:	be 01       	movw	r22, r28
    564c:	37 c0       	rjmp	.+110    	; 0x56bc <evaluate_wired_data+0xd4>
      // this node is an endnode/router node, so send message to coord node
      // an end node/router node does not replace MAC address, because Coord never knows where to send message
      send_data_wireless(DEFAULT_COORD_ADDR, pData, (userDataFrame->length + USER_DATA_HLEN), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
#endif
   }
   else if(*pData == COMMAND_NODE_INFO_REQUEST)
    564e:	87 30       	cpi	r24, 0x07	; 7
    5650:	b1 f4       	brne	.+44     	; 0x567e <evaluate_wired_data+0x96>
   {
      nodeInfo_t* nodeInfoFrame = (nodeInfo_t*) pData;
      nodeInfoFrame->command = COMMAND_NODE_INFO_RESPONSE;
    5652:	88 e0       	ldi	r24, 0x08	; 8
    5654:	88 83       	st	Y, r24
      nodeInfoFrame->length = sizeof(macConfig_t) + 1; // 25 + 1 Bytes
    5656:	8a e1       	ldi	r24, 0x1A	; 26
    5658:	89 83       	std	Y+1, r24	; 0x01
      nodeInfoFrame->macConfig = macConfig;
    565a:	de 01       	movw	r26, r28
    565c:	12 96       	adiw	r26, 0x02	; 2
    565e:	ed eb       	ldi	r30, 0xBD	; 189
    5660:	ff e1       	ldi	r31, 0x1F	; 31
    5662:	89 e1       	ldi	r24, 0x19	; 25
    5664:	01 90       	ld	r0, Z+
    5666:	0d 92       	st	X+, r0
    5668:	81 50       	subi	r24, 0x01	; 1
    566a:	e1 f7       	brne	.-8      	; 0x5664 <evaluate_wired_data+0x7c>
#if   (NODETYPE == COORD)
      nodeInfoFrame->nodeType = 1;
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	8b 8f       	std	Y+27, r24	; 0x1b
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	be 01       	movw	r22, r28
    5674:	4c e1       	ldi	r20, 0x1C	; 28
    5676:	50 e0       	ldi	r21, 0x00	; 0
    5678:	0e 94 ba 2c 	call	0x5974	; 0x5974 <protocol_send>
    567c:	25 c0       	rjmp	.+74     	; 0x56c8 <evaluate_wired_data+0xe0>
      nodeInfoFrame->nodeType = 0;
#endif
      send_data_wired((uint8_t*)nodeInfoFrame, sizeof(nodeInfo_t));
   }
#if NODETYPE == COORD
   else if(*pData ==  COMMAND_CHILD_TABLE_REQUEST)
    567e:	81 30       	cpi	r24, 0x01	; 1
    5680:	11 f4       	brne	.+4      	; 0x5686 <evaluate_wired_data+0x9e>
   {
      send_node_info(COMMAND_CHILD_TABLE_RESPONSE);
    5682:	82 e0       	ldi	r24, 0x02	; 2
    5684:	03 c0       	rjmp	.+6      	; 0x568c <evaluate_wired_data+0xa4>
   }
   else if(*pData == COMMAND_LINK_QUALITY_REQUEST)
    5686:	80 31       	cpi	r24, 0x10	; 16
    5688:	21 f4       	brne	.+8      	; 0x5692 <evaluate_wired_data+0xaa>
   {
      send_node_info(COMMAND_LINK_QUALITY_RESPONSE);
    568a:	81 e1       	ldi	r24, 0x11	; 17
    568c:	0e 94 4b 29 	call	0x5296	; 0x5296 <send_node_info>
    5690:	1b c0       	rjmp	.+54     	; 0x56c8 <evaluate_wired_data+0xe0>
   }
   else if(*pData == COMMAND_PING_REQUEST)
    5692:	85 30       	cpi	r24, 0x05	; 5
    5694:	41 f4       	brne	.+16     	; 0x56a6 <evaluate_wired_data+0xbe>
   {
      payloadPingFrame_t* pingFrame = (payloadPingFrame_t*)&(((deRFprotocol_t*)pData)->payload);
      uint8_t shortAddress = getNodeAddressByMAC((uint8_t*)&pingFrame->mac); // send pointer
    5696:	ce 01       	movw	r24, r28
    5698:	02 96       	adiw	r24, 0x02	; 2
    569a:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <getNodeAddressByMAC>

      if(shortAddress != 0)
    569e:	88 23       	and	r24, r24
    56a0:	99 f0       	breq	.+38     	; 0x56c8 <evaluate_wired_data+0xe0>
      {
         send_data_wireless(shortAddress, pData, sizeof(deRFprotocol_t), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	09 c0       	rjmp	.+18     	; 0x56b8 <evaluate_wired_data+0xd0>
      }
   }
   else if(*pData == COMMAND_DATA_FRAME_REQUEST)
    56a6:	83 30       	cpi	r24, 0x03	; 3
    56a8:	79 f4       	brne	.+30     	; 0x56c8 <evaluate_wired_data+0xe0>
   {
      payloadDataFrame_t* dataFrame = (payloadDataFrame_t*)&(((deRFprotocol_t*)pData)->payload);
      int16_t shortAddress = getNodeAddressByMAC((uint8_t*)&dataFrame->mac); // send pointer
    56aa:	ce 01       	movw	r24, r28
    56ac:	02 96       	adiw	r24, 0x02	; 2
    56ae:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <getNodeAddressByMAC>

      // if shortAddress == -1 , than MAC does not exist and shortAddress == 0 is coord address
      if(shortAddress > 0)
    56b2:	18 16       	cp	r1, r24
    56b4:	19 06       	cpc	r1, r25
    56b6:	44 f4       	brge	.+16     	; 0x56c8 <evaluate_wired_data+0xe0>
      {
         send_data_wireless(shortAddress, pData, sizeof(deRFprotocol_t), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    56b8:	be 01       	movw	r22, r28
    56ba:	4b e3       	ldi	r20, 0x3B	; 59
    56bc:	2c eb       	ldi	r18, 0xBC	; 188
    56be:	30 ef       	ldi	r19, 0xF0	; 240
    56c0:	0b eb       	ldi	r16, 0xBB	; 187
    56c2:	10 ef       	ldi	r17, 0xF0	; 240
    56c4:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
      }
   }
#endif // NODETYPE == COORD

   return 0;
}
    56c8:	80 e0       	ldi	r24, 0x00	; 0
    56ca:	df 91       	pop	r29
    56cc:	cf 91       	pop	r28
    56ce:	1f 91       	pop	r17
    56d0:	0f 91       	pop	r16
    56d2:	08 95       	ret

000056d4 <wired_packet_task>:
 * This function have to be called periodically. It checks serial interface (USB/RS232) for
 * new incoming messages. If not called periodically, messages can be lost.
 */
void wired_packet_task(void)
{
   protocol_receive(1);
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <protocol_receive>
}
    56da:	08 95       	ret

000056dc <hdlc_init>:
/*
 * @brief Initialize HDLC layer (frame tagging unit).
 */
void hdlc_init(void)
{
   protocol_init();
    56dc:	0e 94 a3 2b 	call	0x5746	; 0x5746 <protocol_init>
   );

   protocol_set_buffer(1, (uint8_t*)hdlcDataBufferReceive, DATA_BUFFER_SIZE);
#endif

}
    56e0:	08 95       	ret

000056e2 <process_coord_udp_packet>:
 *
 * @param   pUDPpacket  pointer to udp packet (length of packet depends on evaluation of command)
 * @param   originAddr  short address from originating node (this is the node where the message is originally from)
 */
void process_coord_udp_packet(uint8_t* pUDPpacket, uint16_t originAddr)
{
    56e2:	0f 93       	push	r16
    56e4:	1f 93       	push	r17
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	ec 01       	movw	r28, r24
    56ec:	8b 01       	movw	r16, r22
#if NODETYPE == COORD
   if(*pUDPpacket == COMMAND_DATA_FRAME_RESPONSE)
    56ee:	88 81       	ld	r24, Y
    56f0:	84 30       	cpi	r24, 0x04	; 4
    56f2:	19 f4       	brne	.+6      	; 0x56fa <process_coord_udp_packet+0x18>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" data frame\n");
    56f4:	80 eb       	ldi	r24, 0xB0	; 176
    56f6:	9b e0       	ldi	r25, 0x0B	; 11
    56f8:	04 c0       	rjmp	.+8      	; 0x5702 <process_coord_udp_packet+0x20>
#endif
      // send received frame from arbitrary node out to serial interface (USB/RS232)
      send_data_wired(pUDPpacket, sizeof(deRFprotocol_t));
   }
   else if(*pUDPpacket == COMMAND_PING_RESPONSE)
    56fa:	86 30       	cpi	r24, 0x06	; 6
    56fc:	59 f4       	brne	.+22     	; 0x5714 <process_coord_udp_packet+0x32>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" ping frame\n");
    56fe:	8c eb       	ldi	r24, 0xBC	; 188
    5700:	9b e0       	ldi	r25, 0x0B	; 11
    5702:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	be 01       	movw	r22, r28
    570a:	4b e3       	ldi	r20, 0x3B	; 59
    570c:	50 e0       	ldi	r21, 0x00	; 0
    570e:	0e 94 ba 2c 	call	0x5974	; 0x5974 <protocol_send>
    5712:	14 c0       	rjmp	.+40     	; 0x573c <process_coord_udp_packet+0x5a>
      UART_PRINT(" ping frame\n");
#endif
      // send received frame from arbitrary node out to serial interface (USB/RS232)
      send_data_wired(pUDPpacket, sizeof(deRFprotocol_t));
   }
   else if(*pUDPpacket == COMMAND_INTERN_LINK_QUALITY_RESPONSE)
    5714:	81 32       	cpi	r24, 0x21	; 33
    5716:	41 f4       	brne	.+16     	; 0x5728 <process_coord_udp_packet+0x46>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" lq frame\n");
    5718:	88 ec       	ldi	r24, 0xC8	; 200
    571a:	9b e0       	ldi	r25, 0x0B	; 11
    571c:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
#endif
      evaluate_quality_response(pUDPpacket);
    5720:	ce 01       	movw	r24, r28
    5722:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <evaluate_quality_response>
    5726:	0a c0       	rjmp	.+20     	; 0x573c <process_coord_udp_packet+0x5a>
   }
   else if(*pUDPpacket == COMMAND_USER_DATA_REQUEST)
    5728:	80 37       	cpi	r24, 0x70	; 112
    572a:	41 f4       	brne	.+16     	; 0x573c <process_coord_udp_packet+0x5a>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" user data frame\n");
    572c:	82 ed       	ldi	r24, 0xD2	; 210
    572e:	9b e0       	ldi	r25, 0x0B	; 11
    5730:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
#endif
      process_incoming_user_data(pUDPpacket, originAddr);
    5734:	ce 01       	movw	r24, r28
    5736:	b8 01       	movw	r22, r16
    5738:	0e 94 46 2a 	call	0x548c	; 0x548c <process_incoming_user_data>
      // there is no request, status message is send periodically
   }
#endif //STATUS_DEBUG

#endif // NODETYPE == COORD
}
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	1f 91       	pop	r17
    5742:	0f 91       	pop	r16
    5744:	08 95       	ret

00005746 <protocol_init>:
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    5746:	10 92 02 1e 	sts	0x1E02, r1
      arDevices[i].u8Escaped = 0;
    574a:	10 92 ff 1d 	sts	0x1DFF, r1
      arDevices[i].pGetC = NULL;
    574e:	10 92 04 1e 	sts	0x1E04, r1
    5752:	10 92 03 1e 	sts	0x1E03, r1
      arDevices[i].pIsC = NULL;
    5756:	10 92 06 1e 	sts	0x1E06, r1
    575a:	10 92 05 1e 	sts	0x1E05, r1
      arDevices[i].pPutC = NULL;
    575e:	10 92 08 1e 	sts	0x1E08, r1
    5762:	10 92 07 1e 	sts	0x1E07, r1
      arDevices[i].pPacket = NULL;
    5766:	10 92 0c 1e 	sts	0x1E0C, r1
    576a:	10 92 0b 1e 	sts	0x1E0B, r1

      arDevices[i].pBuffer = NULL;
    576e:	10 92 0e 1e 	sts	0x1E0E, r1
    5772:	10 92 0d 1e 	sts	0x1E0D, r1
      arDevices[i].u16BufferLen = 0;
    5776:	10 92 10 1e 	sts	0x1E10, r1
    577a:	10 92 0f 1e 	sts	0x1E0F, r1
      arDevices[i].u16BufferPos = 0;
    577e:	10 92 12 1e 	sts	0x1E12, r1
    5782:	10 92 11 1e 	sts	0x1E11, r1
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    5786:	10 92 16 1e 	sts	0x1E16, r1
      arDevices[i].u8Escaped = 0;
    578a:	10 92 13 1e 	sts	0x1E13, r1
      arDevices[i].pGetC = NULL;
    578e:	10 92 18 1e 	sts	0x1E18, r1
    5792:	10 92 17 1e 	sts	0x1E17, r1
      arDevices[i].pIsC = NULL;
    5796:	10 92 1a 1e 	sts	0x1E1A, r1
    579a:	10 92 19 1e 	sts	0x1E19, r1
      arDevices[i].pPutC = NULL;
    579e:	10 92 1c 1e 	sts	0x1E1C, r1
    57a2:	10 92 1b 1e 	sts	0x1E1B, r1
      arDevices[i].pPacket = NULL;
    57a6:	10 92 20 1e 	sts	0x1E20, r1
    57aa:	10 92 1f 1e 	sts	0x1E1F, r1

      arDevices[i].pBuffer = NULL;
    57ae:	10 92 22 1e 	sts	0x1E22, r1
    57b2:	10 92 21 1e 	sts	0x1E21, r1
      arDevices[i].u16BufferLen = 0;
    57b6:	10 92 24 1e 	sts	0x1E24, r1
    57ba:	10 92 23 1e 	sts	0x1E23, r1
      arDevices[i].u16BufferPos = 0;
    57be:	10 92 26 1e 	sts	0x1E26, r1
    57c2:	10 92 25 1e 	sts	0x1E25, r1
   }

   bInit = TTRUE;
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	80 93 fe 1d 	sts	0x1DFE, r24
}
    57cc:	08 95       	ret

000057ce <protocol_exit>:
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    57ce:	10 92 02 1e 	sts	0x1E02, r1
    57d2:	10 92 16 1e 	sts	0x1E16, r1
   }

   bInit = TFALSE;
    57d6:	10 92 fe 1d 	sts	0x1DFE, r1
}
    57da:	08 95       	ret

000057dc <protocol_add>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
uint8_t protocol_add(uint8_t u8Options, tGetCFN pGetC, tIsCFN pIsC, tPutCFN pPutC, tFlushFN pFlush, tPacketFN pPacket)
{
    57dc:	cf 92       	push	r12
    57de:	df 92       	push	r13
    57e0:	ef 92       	push	r14
    57e2:	ff 92       	push	r15
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	e8 2f       	mov	r30, r24
    57ee:	ea 01       	movw	r28, r20
    57f0:	69 01       	movw	r12, r18
   uint8_t  i;

   // get a free device
   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      if (arDevices[i].u8Options == 0)
    57f2:	80 91 02 1e 	lds	r24, 0x1E02
    57f6:	88 23       	and	r24, r24
    57f8:	21 f4       	brne	.+8      	; 0x5802 <protocol_add+0x26>
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	30 e0       	ldi	r19, 0x00	; 0
    57fe:	40 e0       	ldi	r20, 0x00	; 0
    5800:	08 c0       	rjmp	.+16     	; 0x5812 <protocol_add+0x36>
    5802:	80 91 16 1e 	lds	r24, 0x1E16
    5806:	88 23       	and	r24, r24
    5808:	09 f0       	breq	.+2      	; 0x580c <protocol_add+0x30>
    580a:	4e c0       	rjmp	.+156    	; 0x58a8 <protocol_add+0xcc>
    580c:	21 e0       	ldi	r18, 0x01	; 1
    580e:	30 e0       	ldi	r19, 0x00	; 0
    5810:	41 e0       	ldi	r20, 0x01	; 1
      {
         if (pGetC && pIsC && pPutC && pPacket && (u8Options != 0))
    5812:	61 15       	cp	r22, r1
    5814:	71 05       	cpc	r23, r1
    5816:	09 f4       	brne	.+2      	; 0x581a <protocol_add+0x3e>
    5818:	47 c0       	rjmp	.+142    	; 0x58a8 <protocol_add+0xcc>
    581a:	20 97       	sbiw	r28, 0x00	; 0
    581c:	09 f4       	brne	.+2      	; 0x5820 <protocol_add+0x44>
    581e:	44 c0       	rjmp	.+136    	; 0x58a8 <protocol_add+0xcc>
    5820:	c1 14       	cp	r12, r1
    5822:	d1 04       	cpc	r13, r1
    5824:	09 f4       	brne	.+2      	; 0x5828 <protocol_add+0x4c>
    5826:	40 c0       	rjmp	.+128    	; 0x58a8 <protocol_add+0xcc>
    5828:	e1 14       	cp	r14, r1
    582a:	f1 04       	cpc	r15, r1
    582c:	e9 f1       	breq	.+122    	; 0x58a8 <protocol_add+0xcc>
    582e:	ee 23       	and	r30, r30
    5830:	d9 f1       	breq	.+118    	; 0x58a8 <protocol_add+0xcc>
         {
            arDevices[i].u8Options = u8Options;
    5832:	84 e1       	ldi	r24, 0x14	; 20
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	28 9f       	mul	r18, r24
    5838:	d0 01       	movw	r26, r0
    583a:	29 9f       	mul	r18, r25
    583c:	b0 0d       	add	r27, r0
    583e:	38 9f       	mul	r19, r24
    5840:	b0 0d       	add	r27, r0
    5842:	11 24       	eor	r1, r1
    5844:	a1 50       	subi	r26, 0x01	; 1
    5846:	b2 4e       	sbci	r27, 0xE2	; 226
    5848:	13 96       	adiw	r26, 0x03	; 3
    584a:	ec 93       	st	X, r30
    584c:	13 97       	sbiw	r26, 0x03	; 3
            arDevices[i].u8Escaped = 0;
    584e:	1c 92       	st	X, r1

            arDevices[i].pBuffer = NULL;
    5850:	1f 96       	adiw	r26, 0x0f	; 15
    5852:	1c 92       	st	X, r1
    5854:	1e 92       	st	-X, r1
    5856:	1e 97       	sbiw	r26, 0x0e	; 14
            arDevices[i].u16BufferLen = 0;
    5858:	51 96       	adiw	r26, 0x11	; 17
    585a:	1c 92       	st	X, r1
    585c:	1e 92       	st	-X, r1
    585e:	50 97       	sbiw	r26, 0x10	; 16
            arDevices[i].u16BufferPos = 0;
    5860:	53 96       	adiw	r26, 0x13	; 19
    5862:	1c 92       	st	X, r1
    5864:	1e 92       	st	-X, r1
    5866:	52 97       	sbiw	r26, 0x12	; 18

            arDevices[i].pGetC = pGetC;
    5868:	f9 01       	movw	r30, r18
    586a:	ee 0f       	add	r30, r30
    586c:	ff 1f       	adc	r31, r31
    586e:	ee 0f       	add	r30, r30
    5870:	ff 1f       	adc	r31, r31
    5872:	e2 0f       	add	r30, r18
    5874:	f3 1f       	adc	r31, r19
    5876:	ee 0f       	add	r30, r30
    5878:	ff 1f       	adc	r31, r31
    587a:	ee 0f       	add	r30, r30
    587c:	ff 1f       	adc	r31, r31
    587e:	ed 5f       	subi	r30, 0xFD	; 253
    5880:	f1 4e       	sbci	r31, 0xE1	; 225
    5882:	71 83       	std	Z+1, r23	; 0x01
    5884:	60 83       	st	Z, r22
            arDevices[i].pIsC = pIsC;
    5886:	17 96       	adiw	r26, 0x07	; 7
    5888:	dc 93       	st	X, r29
    588a:	ce 93       	st	-X, r28
    588c:	16 97       	sbiw	r26, 0x06	; 6
            arDevices[i].pPutC = pPutC;
    588e:	19 96       	adiw	r26, 0x09	; 9
    5890:	dc 92       	st	X, r13
    5892:	ce 92       	st	-X, r12
    5894:	18 97       	sbiw	r26, 0x08	; 8
            arDevices[i].pFlush = pFlush;
    5896:	1b 96       	adiw	r26, 0x0b	; 11
    5898:	1c 93       	st	X, r17
    589a:	0e 93       	st	-X, r16
    589c:	1a 97       	sbiw	r26, 0x0a	; 10
            arDevices[i].pPacket = pPacket;
    589e:	1d 96       	adiw	r26, 0x0d	; 13
    58a0:	fc 92       	st	X, r15
    58a2:	ee 92       	st	-X, r14
    58a4:	1c 97       	sbiw	r26, 0x0c	; 12
    58a6:	01 c0       	rjmp	.+2      	; 0x58aa <protocol_add+0xce>
            return i;
    58a8:	4f ef       	ldi	r20, 0xFF	; 255
         }
         break;
      }
   }
   return PROTO_NO_PROTOCOL;
}
    58aa:	84 2f       	mov	r24, r20
    58ac:	df 91       	pop	r29
    58ae:	cf 91       	pop	r28
    58b0:	1f 91       	pop	r17
    58b2:	0f 91       	pop	r16
    58b4:	ff 90       	pop	r15
    58b6:	ef 90       	pop	r14
    58b8:	df 90       	pop	r13
    58ba:	cf 90       	pop	r12
    58bc:	08 95       	ret

000058be <protocol_remove>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
tbool protocol_remove(uint8_t u8Instance)
{
    58be:	28 2f       	mov	r18, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    58c0:	80 91 fe 1d 	lds	r24, 0x1DFE
    58c4:	88 23       	and	r24, r24
    58c6:	89 f0       	breq	.+34     	; 0x58ea <protocol_remove+0x2c>
    58c8:	22 30       	cpi	r18, 0x02	; 2
    58ca:	78 f4       	brcc	.+30     	; 0x58ea <protocol_remove+0x2c>
   {
      arDevices[u8Instance].u8Options = 0;
    58cc:	30 e0       	ldi	r19, 0x00	; 0
    58ce:	84 e1       	ldi	r24, 0x14	; 20
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	28 9f       	mul	r18, r24
    58d4:	f0 01       	movw	r30, r0
    58d6:	29 9f       	mul	r18, r25
    58d8:	f0 0d       	add	r31, r0
    58da:	38 9f       	mul	r19, r24
    58dc:	f0 0d       	add	r31, r0
    58de:	11 24       	eor	r1, r1
    58e0:	e1 50       	subi	r30, 0x01	; 1
    58e2:	f2 4e       	sbci	r31, 0xE2	; 226
    58e4:	13 82       	std	Z+3, r1	; 0x03
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	08 95       	ret
      return TTRUE;
    58ea:	80 e0       	ldi	r24, 0x00	; 0
   }
   return TFALSE;
}
    58ec:	08 95       	ret

000058ee <protocol_set_buffer>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
tbool protocol_set_buffer(uint8_t u8Instance, uint8_t* pBuffer, uint16_t u16Len)
{
    58ee:	a8 2f       	mov	r26, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    58f0:	80 91 fe 1d 	lds	r24, 0x1DFE
    58f4:	88 23       	and	r24, r24
    58f6:	e1 f1       	breq	.+120    	; 0x5970 <protocol_set_buffer+0x82>
    58f8:	a2 30       	cpi	r26, 0x02	; 2
    58fa:	d0 f5       	brcc	.+116    	; 0x5970 <protocol_set_buffer+0x82>
   {
      if (pBuffer && (u16Len > 0))
    58fc:	61 15       	cp	r22, r1
    58fe:	71 05       	cpc	r23, r1
    5900:	a9 f0       	breq	.+42     	; 0x592c <protocol_set_buffer+0x3e>
    5902:	41 15       	cp	r20, r1
    5904:	51 05       	cpc	r21, r1
    5906:	91 f0       	breq	.+36     	; 0x592c <protocol_set_buffer+0x3e>
      {
         arDevices[u8Instance].pBuffer = pBuffer;
    5908:	2a 2f       	mov	r18, r26
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	84 e1       	ldi	r24, 0x14	; 20
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	28 9f       	mul	r18, r24
    5912:	f0 01       	movw	r30, r0
    5914:	29 9f       	mul	r18, r25
    5916:	f0 0d       	add	r31, r0
    5918:	38 9f       	mul	r19, r24
    591a:	f0 0d       	add	r31, r0
    591c:	11 24       	eor	r1, r1
    591e:	e1 50       	subi	r30, 0x01	; 1
    5920:	f2 4e       	sbci	r31, 0xE2	; 226
    5922:	77 87       	std	Z+15, r23	; 0x0f
    5924:	66 87       	std	Z+14, r22	; 0x0e
         arDevices[u8Instance].u16BufferLen = u16Len;
    5926:	51 8b       	std	Z+17, r21	; 0x11
    5928:	40 8b       	std	Z+16, r20	; 0x10
    592a:	11 c0       	rjmp	.+34     	; 0x594e <protocol_set_buffer+0x60>
      }
      else
      {
         arDevices[u8Instance].pBuffer = NULL;
    592c:	2a 2f       	mov	r18, r26
    592e:	30 e0       	ldi	r19, 0x00	; 0
    5930:	84 e1       	ldi	r24, 0x14	; 20
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	28 9f       	mul	r18, r24
    5936:	f0 01       	movw	r30, r0
    5938:	29 9f       	mul	r18, r25
    593a:	f0 0d       	add	r31, r0
    593c:	38 9f       	mul	r19, r24
    593e:	f0 0d       	add	r31, r0
    5940:	11 24       	eor	r1, r1
    5942:	e1 50       	subi	r30, 0x01	; 1
    5944:	f2 4e       	sbci	r31, 0xE2	; 226
    5946:	17 86       	std	Z+15, r1	; 0x0f
    5948:	16 86       	std	Z+14, r1	; 0x0e
         arDevices[u8Instance].u16BufferLen = 0;
    594a:	11 8a       	std	Z+17, r1	; 0x11
    594c:	10 8a       	std	Z+16, r1	; 0x10
      }

      arDevices[u8Instance].u16BufferPos = 0;
    594e:	2a 2f       	mov	r18, r26
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	84 e1       	ldi	r24, 0x14	; 20
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	28 9f       	mul	r18, r24
    5958:	f0 01       	movw	r30, r0
    595a:	29 9f       	mul	r18, r25
    595c:	f0 0d       	add	r31, r0
    595e:	38 9f       	mul	r19, r24
    5960:	f0 0d       	add	r31, r0
    5962:	11 24       	eor	r1, r1
    5964:	e1 50       	subi	r30, 0x01	; 1
    5966:	f2 4e       	sbci	r31, 0xE2	; 226
    5968:	13 8a       	std	Z+19, r1	; 0x13
    596a:	12 8a       	std	Z+18, r1	; 0x12
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	08 95       	ret
      return TTRUE;
    5970:	80 e0       	ldi	r24, 0x00	; 0
   }
   return TFALSE;
}
    5972:	08 95       	ret

00005974 <protocol_send>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
void protocol_send(uint8_t u8Instance, uint8_t* pData, uint16_t u16Len)
{
    5974:	8f 92       	push	r8
    5976:	9f 92       	push	r9
    5978:	af 92       	push	r10
    597a:	bf 92       	push	r11
    597c:	cf 92       	push	r12
    597e:	df 92       	push	r13
    5980:	ff 92       	push	r15
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	a8 2f       	mov	r26, r24
    598c:	4b 01       	movw	r8, r22
    598e:	5a 01       	movw	r10, r20
   if (bInit && (u8Instance < PROTO_MAX_DEV) && pData && (u16Len > 0))
    5990:	80 91 fe 1d 	lds	r24, 0x1DFE
    5994:	88 23       	and	r24, r24
    5996:	09 f4       	brne	.+2      	; 0x599a <protocol_send+0x26>
    5998:	85 c0       	rjmp	.+266    	; 0x5aa4 <protocol_send+0x130>
    599a:	a2 30       	cpi	r26, 0x02	; 2
    599c:	08 f0       	brcs	.+2      	; 0x59a0 <protocol_send+0x2c>
    599e:	82 c0       	rjmp	.+260    	; 0x5aa4 <protocol_send+0x130>
    59a0:	61 15       	cp	r22, r1
    59a2:	71 05       	cpc	r23, r1
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <protocol_send+0x34>
    59a6:	7e c0       	rjmp	.+252    	; 0x5aa4 <protocol_send+0x130>
    59a8:	41 15       	cp	r20, r1
    59aa:	51 05       	cpc	r21, r1
    59ac:	09 f4       	brne	.+2      	; 0x59b0 <protocol_send+0x3c>
    59ae:	7a c0       	rjmp	.+244    	; 0x5aa4 <protocol_send+0x130>
   {
      if (arDevices[u8Instance].u8Options & PROTO_TX)
    59b0:	2a 2f       	mov	r18, r26
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	84 e1       	ldi	r24, 0x14	; 20
    59b6:	90 e0       	ldi	r25, 0x00	; 0
    59b8:	28 9f       	mul	r18, r24
    59ba:	f0 01       	movw	r30, r0
    59bc:	29 9f       	mul	r18, r25
    59be:	f0 0d       	add	r31, r0
    59c0:	38 9f       	mul	r19, r24
    59c2:	f0 0d       	add	r31, r0
    59c4:	11 24       	eor	r1, r1
    59c6:	e1 50       	subi	r30, 0x01	; 1
    59c8:	f2 4e       	sbci	r31, 0xE2	; 226
    59ca:	83 81       	ldd	r24, Z+3	; 0x03
    59cc:	82 ff       	sbrs	r24, 2
    59ce:	6a c0       	rjmp	.+212    	; 0x5aa4 <protocol_send+0x130>
      {
         uint8_t c;
         tProtocol* pDev = &arDevices[u8Instance];
    59d0:	84 e1       	ldi	r24, 0x14	; 20
    59d2:	a8 9f       	mul	r26, r24
    59d4:	e0 01       	movw	r28, r0
    59d6:	11 24       	eor	r1, r1
    59d8:	c1 50       	subi	r28, 0x01	; 1
    59da:	d2 4e       	sbci	r29, 0xE2	; 226
         uint16_t i = 0;
         uint16_t u16Crc = 0;

         // put an end before the packet
         pDev->pPutC(FR_END);
    59dc:	e8 85       	ldd	r30, Y+8	; 0x08
    59de:	f9 85       	ldd	r31, Y+9	; 0x09
    59e0:	80 ec       	ldi	r24, 0xC0	; 192
    59e2:	09 95       	icall
    59e4:	00 e0       	ldi	r16, 0x00	; 0
    59e6:	10 e0       	ldi	r17, 0x00	; 0
    59e8:	cc 24       	eor	r12, r12
    59ea:	dd 24       	eor	r13, r13
    59ec:	20 c0       	rjmp	.+64     	; 0x5a2e <protocol_send+0xba>
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
         {
            c = pData[i++];
    59ee:	f4 01       	movw	r30, r8
    59f0:	e0 0f       	add	r30, r16
    59f2:	f1 1f       	adc	r31, r17
    59f4:	f0 80       	ld	r15, Z
            u16Crc += c;
#if HDLC_DEBUG_ENABLE
            UART_PRINT("%02X " , c);
#endif
            switch (c)
    59f6:	80 ec       	ldi	r24, 0xC0	; 192
    59f8:	f8 16       	cp	r15, r24
    59fa:	59 f0       	breq	.+22     	; 0x5a12 <protocol_send+0x9e>
    59fc:	e8 85       	ldd	r30, Y+8	; 0x08
    59fe:	f9 85       	ldd	r31, Y+9	; 0x09
    5a00:	8b ed       	ldi	r24, 0xDB	; 219
    5a02:	f8 16       	cp	r15, r24
    5a04:	71 f4       	brne	.+28     	; 0x5a22 <protocol_send+0xae>
            {
            case FR_ESC:
               pDev->pPutC(FR_ESC);
    5a06:	8b ed       	ldi	r24, 0xDB	; 219
    5a08:	09 95       	icall
               pDev->pPutC(T_FR_ESC);
    5a0a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a0c:	f9 85       	ldd	r31, Y+9	; 0x09
    5a0e:	8d ed       	ldi	r24, 0xDD	; 221
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <protocol_send+0xb0>
               break;
            case FR_END:
               pDev->pPutC(FR_ESC);
    5a12:	e8 85       	ldd	r30, Y+8	; 0x08
    5a14:	f9 85       	ldd	r31, Y+9	; 0x09
    5a16:	8b ed       	ldi	r24, 0xDB	; 219
    5a18:	09 95       	icall
               pDev->pPutC(T_FR_END);
    5a1a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a1c:	f9 85       	ldd	r31, Y+9	; 0x09
    5a1e:	8c ed       	ldi	r24, 0xDC	; 220
    5a20:	01 c0       	rjmp	.+2      	; 0x5a24 <protocol_send+0xb0>
               break;
            default:
               pDev->pPutC(c);
    5a22:	8f 2d       	mov	r24, r15
    5a24:	09 95       	icall
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
         {
            c = pData[i++];
    5a26:	0f 5f       	subi	r16, 0xFF	; 255
    5a28:	1f 4f       	sbci	r17, 0xFF	; 255
            u16Crc += c;
    5a2a:	cf 0c       	add	r12, r15
    5a2c:	d1 1c       	adc	r13, r1
         // put an end before the packet
         pDev->pPutC(FR_END);
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
    5a2e:	0a 15       	cp	r16, r10
    5a30:	1b 05       	cpc	r17, r11
    5a32:	e8 f2       	brcs	.-70     	; 0x59ee <protocol_send+0x7a>
               pDev->pPutC(c);
               break;
            }
         }

         c = (~u16Crc + 1) & 0xFF;
    5a34:	8c 2d       	mov	r24, r12
    5a36:	81 95       	neg	r24
         if (c == FR_ESC)
    5a38:	8b 3d       	cpi	r24, 0xDB	; 219
    5a3a:	39 f4       	brne	.+14     	; 0x5a4a <protocol_send+0xd6>
         {
            pDev->pPutC(FR_ESC);
    5a3c:	e8 85       	ldd	r30, Y+8	; 0x08
    5a3e:	f9 85       	ldd	r31, Y+9	; 0x09
    5a40:	09 95       	icall
            pDev->pPutC(T_FR_ESC);
    5a42:	e8 85       	ldd	r30, Y+8	; 0x08
    5a44:	f9 85       	ldd	r31, Y+9	; 0x09
    5a46:	8d ed       	ldi	r24, 0xDD	; 221
    5a48:	09 c0       	rjmp	.+18     	; 0x5a5c <protocol_send+0xe8>
    5a4a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a4c:	f9 85       	ldd	r31, Y+9	; 0x09
         }
         else if (c == FR_END)
    5a4e:	80 3c       	cpi	r24, 0xC0	; 192
    5a50:	29 f4       	brne	.+10     	; 0x5a5c <protocol_send+0xe8>
         {
            pDev->pPutC(FR_ESC);
    5a52:	8b ed       	ldi	r24, 0xDB	; 219
    5a54:	09 95       	icall
            pDev->pPutC(T_FR_END);
    5a56:	e8 85       	ldd	r30, Y+8	; 0x08
    5a58:	f9 85       	ldd	r31, Y+9	; 0x09
    5a5a:	8c ed       	ldi	r24, 0xDC	; 220
         }
         else
         {
            pDev->pPutC(c);
    5a5c:	09 95       	icall
         }

         c = ((~u16Crc + 1) >> 8)   & 0xFF;
    5a5e:	88 27       	eor	r24, r24
    5a60:	99 27       	eor	r25, r25
    5a62:	8c 19       	sub	r24, r12
    5a64:	9d 09       	sbc	r25, r13
         if (c == FR_ESC)
    5a66:	9b 3d       	cpi	r25, 0xDB	; 219
    5a68:	41 f4       	brne	.+16     	; 0x5a7a <protocol_send+0x106>
         {
            pDev->pPutC(FR_ESC);
    5a6a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a6c:	f9 85       	ldd	r31, Y+9	; 0x09
    5a6e:	8b ed       	ldi	r24, 0xDB	; 219
    5a70:	09 95       	icall
            pDev->pPutC(T_FR_ESC);
    5a72:	e8 85       	ldd	r30, Y+8	; 0x08
    5a74:	f9 85       	ldd	r31, Y+9	; 0x09
    5a76:	8d ed       	ldi	r24, 0xDD	; 221
    5a78:	0b c0       	rjmp	.+22     	; 0x5a90 <protocol_send+0x11c>
    5a7a:	e8 85       	ldd	r30, Y+8	; 0x08
    5a7c:	f9 85       	ldd	r31, Y+9	; 0x09
         }
         else if (c == FR_END)
    5a7e:	90 3c       	cpi	r25, 0xC0	; 192
    5a80:	31 f4       	brne	.+12     	; 0x5a8e <protocol_send+0x11a>
         {
            pDev->pPutC(FR_ESC);
    5a82:	8b ed       	ldi	r24, 0xDB	; 219
    5a84:	09 95       	icall
            pDev->pPutC(T_FR_END);
    5a86:	e8 85       	ldd	r30, Y+8	; 0x08
    5a88:	f9 85       	ldd	r31, Y+9	; 0x09
    5a8a:	8c ed       	ldi	r24, 0xDC	; 220
    5a8c:	01 c0       	rjmp	.+2      	; 0x5a90 <protocol_send+0x11c>
         }
         else
         {
            pDev->pPutC(c);
    5a8e:	89 2f       	mov	r24, r25
    5a90:	09 95       	icall
         }
#if HDLC_DEBUG_ENABLE
         UART_PRINT(("\n"));
#endif
         // tie off the packet
         pDev->pPutC(FR_END);
    5a92:	e8 85       	ldd	r30, Y+8	; 0x08
    5a94:	f9 85       	ldd	r31, Y+9	; 0x09
    5a96:	80 ec       	ldi	r24, 0xC0	; 192
    5a98:	09 95       	icall

         if (pDev->pFlush)
    5a9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5a9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5a9e:	30 97       	sbiw	r30, 0x00	; 0
    5aa0:	09 f0       	breq	.+2      	; 0x5aa4 <protocol_send+0x130>
         {
            pDev->pFlush();
    5aa2:	09 95       	icall
         }
      }
   }
}
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	ff 90       	pop	r15
    5aae:	df 90       	pop	r13
    5ab0:	cf 90       	pop	r12
    5ab2:	bf 90       	pop	r11
    5ab4:	af 90       	pop	r10
    5ab6:	9f 90       	pop	r9
    5ab8:	8f 90       	pop	r8
    5aba:	08 95       	ret

00005abc <protocol_receive>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
void protocol_receive(uint8_t u8Instance)
{
    5abc:	cf 93       	push	r28
    5abe:	df 93       	push	r29
    5ac0:	98 2f       	mov	r25, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    5ac2:	80 91 fe 1d 	lds	r24, 0x1DFE
    5ac6:	88 23       	and	r24, r24
    5ac8:	09 f4       	brne	.+2      	; 0x5acc <protocol_receive+0x10>
    5aca:	75 c0       	rjmp	.+234    	; 0x5bb6 <protocol_receive+0xfa>
    5acc:	92 30       	cpi	r25, 0x02	; 2
    5ace:	08 f0       	brcs	.+2      	; 0x5ad2 <protocol_receive+0x16>
    5ad0:	72 c0       	rjmp	.+228    	; 0x5bb6 <protocol_receive+0xfa>
   {
     tProtocol* pDev = &arDevices[u8Instance];
    5ad2:	84 e1       	ldi	r24, 0x14	; 20
    5ad4:	98 9f       	mul	r25, r24
    5ad6:	e0 01       	movw	r28, r0
    5ad8:	11 24       	eor	r1, r1
    5ada:	c1 50       	subi	r28, 0x01	; 1
    5adc:	d2 4e       	sbci	r29, 0xE2	; 226
      if ((pDev->u8Options & PROTO_RX) && pDev->pIsC())
    5ade:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae0:	81 ff       	sbrs	r24, 1
    5ae2:	69 c0       	rjmp	.+210    	; 0x5bb6 <protocol_receive+0xfa>
    5ae4:	ee 81       	ldd	r30, Y+6	; 0x06
    5ae6:	ff 81       	ldd	r31, Y+7	; 0x07
    5ae8:	09 95       	icall
    5aea:	88 23       	and	r24, r24
    5aec:	09 f4       	brne	.+2      	; 0x5af0 <protocol_receive+0x34>
    5aee:	63 c0       	rjmp	.+198    	; 0x5bb6 <protocol_receive+0xfa>
      {
         uint8_t c;
         if (pDev->u8Options & PROTO_TX_ON_RX)
    5af0:	8b 81       	ldd	r24, Y+3	; 0x03
    5af2:	83 ff       	sbrs	r24, 3
    5af4:	02 c0       	rjmp	.+4      	; 0x5afa <protocol_receive+0x3e>
         {
            // enable TX
            pDev->u8Options |= PROTO_TX;
    5af6:	84 60       	ori	r24, 0x04	; 4
    5af8:	8b 83       	std	Y+3, r24	; 0x03
#if HDLC_DEBUG_ENABLE
         UART_PRINT("IN[%d] ", u8Instance);
#endif
         do
         {
            c = pDev->pGetC();
    5afa:	ec 81       	ldd	r30, Y+4	; 0x04
    5afc:	fd 81       	ldd	r31, Y+5	; 0x05
    5afe:	09 95       	icall
    5b00:	48 2f       	mov	r20, r24
#if HDLC_DEBUG_ENABLE
            UART_PRINT("%02X " , c);
#endif
            switch (c)
    5b02:	80 3c       	cpi	r24, 0xC0	; 192
    5b04:	21 f0       	breq	.+8      	; 0x5b0e <protocol_receive+0x52>
    5b06:	88 81       	ld	r24, Y
    5b08:	4b 3d       	cpi	r20, 0xDB	; 219
    5b0a:	61 f5       	brne	.+88     	; 0x5b64 <protocol_receive+0xa8>
    5b0c:	28 c0       	rjmp	.+80     	; 0x5b5e <protocol_receive+0xa2>
            {
            case FR_END:
               if (pDev->u8Escaped)
    5b0e:	88 81       	ld	r24, Y
    5b10:	88 23       	and	r24, r24
    5b12:	f1 f4       	brne	.+60     	; 0x5b50 <protocol_receive+0x94>
                  pDev->u16BufferPos = 0;
                  pDev->u16Crc = 0;
               }
               else
               {
                  if (pDev->u16BufferPos >= 2)
    5b14:	6a 89       	ldd	r22, Y+18	; 0x12
    5b16:	7b 89       	ldd	r23, Y+19	; 0x13
    5b18:	62 30       	cpi	r22, 0x02	; 2
    5b1a:	71 05       	cpc	r23, r1
    5b1c:	c8 f0       	brcs	.+50     	; 0x5b50 <protocol_receive+0x94>
                  {
                     tbool bCRCok = TFALSE;
                     // Checksum bytes are added to the checksum pDev->u16Crc - substract them here
                     pDev->u16Crc -= pDev->pBuffer[pDev->u16BufferPos - 1];
    5b1e:	4e 85       	ldd	r20, Y+14	; 0x0e
    5b20:	5f 85       	ldd	r21, Y+15	; 0x0f
    5b22:	fa 01       	movw	r30, r20
    5b24:	e6 0f       	add	r30, r22
    5b26:	f7 1f       	adc	r31, r23
    5b28:	22 91       	ld	r18, -Z
    5b2a:	89 81       	ldd	r24, Y+1	; 0x01
    5b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b2e:	82 1b       	sub	r24, r18
    5b30:	91 09       	sbc	r25, r1
    5b32:	9a 83       	std	Y+2, r25	; 0x02
    5b34:	89 83       	std	Y+1, r24	; 0x01
                     pDev->u16Crc -= pDev->pBuffer[pDev->u16BufferPos - 2];
    5b36:	22 91       	ld	r18, -Z
    5b38:	82 1b       	sub	r24, r18
    5b3a:	91 09       	sbc	r25, r1
    5b3c:	9a 83       	std	Y+2, r25	; 0x02
    5b3e:	89 83       	std	Y+1, r24	; 0x01
                     if (1)   // handle the packet even for invalid CRC
#else
                     if (bCRCok)
#endif
                     {
                        if (pDev->pPacket)
    5b40:	ec 85       	ldd	r30, Y+12	; 0x0c
    5b42:	fd 85       	ldd	r31, Y+13	; 0x0d
    5b44:	30 97       	sbiw	r30, 0x00	; 0
    5b46:	21 f0       	breq	.+8      	; 0x5b50 <protocol_receive+0x94>
                        {
                           pDev->pPacket(&pDev->pBuffer[0], (uint16_t)(pDev->u16BufferPos - 2));
    5b48:	62 50       	subi	r22, 0x02	; 2
    5b4a:	70 40       	sbci	r23, 0x00	; 0
    5b4c:	ca 01       	movw	r24, r20
    5b4e:	09 95       	icall
#if HDLC_DEBUG_ENABLE
                        UART_PRINT((("PROTO: CRC error")));
#endif
                     }
                  }
                  pDev->u16BufferPos = 0;
    5b50:	1b 8a       	std	Y+19, r1	; 0x13
    5b52:	1a 8a       	std	Y+18, r1	; 0x12
                  pDev->u16Crc = 0;
    5b54:	1a 82       	std	Y+2, r1	; 0x02
    5b56:	19 82       	std	Y+1, r1	; 0x01
               }
               pDev->u8Escaped &= ~ASC_FLAG;
    5b58:	88 81       	ld	r24, Y
    5b5a:	8e 7f       	andi	r24, 0xFE	; 254
    5b5c:	01 c0       	rjmp	.+2      	; 0x5b60 <protocol_receive+0xa4>
               return;
            case FR_ESC:
               pDev->u8Escaped |= ASC_FLAG;
    5b5e:	81 60       	ori	r24, 0x01	; 1
    5b60:	88 83       	st	Y, r24
    5b62:	29 c0       	rjmp	.+82     	; 0x5bb6 <protocol_receive+0xfa>
               return;
            }

            if (pDev->u8Escaped & ASC_FLAG)
    5b64:	80 ff       	sbrs	r24, 0
    5b66:	09 c0       	rjmp	.+18     	; 0x5b7a <protocol_receive+0xbe>
            {
               // translate the 2 byte escape sequence back to original char
               pDev->u8Escaped &= ~ASC_FLAG;
    5b68:	8e 7f       	andi	r24, 0xFE	; 254
    5b6a:	88 83       	st	Y, r24

               switch (c)
    5b6c:	4c 3d       	cpi	r20, 0xDC	; 220
    5b6e:	21 f0       	breq	.+8      	; 0x5b78 <protocol_receive+0xbc>
    5b70:	4d 3d       	cpi	r20, 0xDD	; 221
    5b72:	19 f4       	brne	.+6      	; 0x5b7a <protocol_receive+0xbe>
    5b74:	4b ed       	ldi	r20, 0xDB	; 219
    5b76:	01 c0       	rjmp	.+2      	; 0x5b7a <protocol_receive+0xbe>
    5b78:	40 ec       	ldi	r20, 0xC0	; 192
               }
            }

            // we reach here with every byte for the buffer
            // BUG: checksum bytes are added but should not be
            if (pDev->pBuffer && (pDev->u16BufferPos < pDev->u16BufferLen))
    5b7a:	ee 85       	ldd	r30, Y+14	; 0x0e
    5b7c:	ff 85       	ldd	r31, Y+15	; 0x0f
    5b7e:	30 97       	sbiw	r30, 0x00	; 0
    5b80:	a1 f0       	breq	.+40     	; 0x5baa <protocol_receive+0xee>
    5b82:	2a 89       	ldd	r18, Y+18	; 0x12
    5b84:	3b 89       	ldd	r19, Y+19	; 0x13
    5b86:	88 89       	ldd	r24, Y+16	; 0x10
    5b88:	99 89       	ldd	r25, Y+17	; 0x11
    5b8a:	28 17       	cp	r18, r24
    5b8c:	39 07       	cpc	r19, r25
    5b8e:	68 f4       	brcc	.+26     	; 0x5baa <protocol_receive+0xee>
            {
               pDev->pBuffer[pDev->u16BufferPos++] = c;
    5b90:	e2 0f       	add	r30, r18
    5b92:	f3 1f       	adc	r31, r19
    5b94:	40 83       	st	Z, r20
    5b96:	2f 5f       	subi	r18, 0xFF	; 255
    5b98:	3f 4f       	sbci	r19, 0xFF	; 255
    5b9a:	3b 8b       	std	Y+19, r19	; 0x13
    5b9c:	2a 8b       	std	Y+18, r18	; 0x12
               pDev->u16Crc += c;
    5b9e:	89 81       	ldd	r24, Y+1	; 0x01
    5ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ba2:	84 0f       	add	r24, r20
    5ba4:	91 1d       	adc	r25, r1
    5ba6:	9a 83       	std	Y+2, r25	; 0x02
    5ba8:	89 83       	std	Y+1, r24	; 0x01
            }
         }
         while(pDev->pIsC());
    5baa:	ee 81       	ldd	r30, Y+6	; 0x06
    5bac:	ff 81       	ldd	r31, Y+7	; 0x07
    5bae:	09 95       	icall
    5bb0:	88 23       	and	r24, r24
    5bb2:	09 f0       	breq	.+2      	; 0x5bb6 <protocol_receive+0xfa>
    5bb4:	a2 cf       	rjmp	.-188    	; 0x5afa <protocol_receive+0x3e>
#if HDLC_DEBUG_ENABLE
         UART_PRINT(("\n"));
#endif
      }
   }
}
    5bb6:	df 91       	pop	r29
    5bb8:	cf 91       	pop	r28
    5bba:	08 95       	ret

00005bbc <button_pressed>:
 *
 * @return           button state pressed (1) or unpressed (0)
 */
uint8_t button_pressed(uint8_t platform)
{
   if(platform == PLATFORM_RCB)
    5bbc:	81 30       	cpi	r24, 0x01	; 1
    5bbe:	41 f4       	brne	.+16     	; 0x5bd0 <button_pressed+0x14>
   {
      /* Switch port to input. */
      RCB_BUTTON_PORT |= (1 << RCB_BUTTON_0);
    5bc0:	75 9a       	sbi	0x0e, 5	; 14
      RCB_BUTTON_DDR  &= ~(1 << RCB_BUTTON_0);
    5bc2:	6d 98       	cbi	0x0d, 5	; 13

      return (!(RCB_BUTTON_PINS & (1 << RCB_BUTTON_0)) ? 1 : 0);
    5bc4:	2c b1       	in	r18, 0x0c	; 12
    5bc6:	22 95       	swap	r18
    5bc8:	26 95       	lsr	r18
    5bca:	27 70       	andi	r18, 0x07	; 7
    5bcc:	20 95       	com	r18
    5bce:	1a c0       	rjmp	.+52     	; 0x5c04 <button_pressed+0x48>
   }
   else if(platform == PLATFORM_STB)
    5bd0:	82 30       	cpi	r24, 0x02	; 2
    5bd2:	11 f0       	breq	.+4      	; 0x5bd8 <button_pressed+0x1c>
    5bd4:	20 e0       	ldi	r18, 0x00	; 0
    5bd6:	17 c0       	rjmp	.+46     	; 0x5c06 <button_pressed+0x4a>
   {
#ifdef SINGLE_CHIP
      uint8_t data = 0;

      // save registers to restore later
      uint8_t sControlPORT = STB_CONTROL_PORT;
    5bd8:	8e b1       	in	r24, 0x0e	; 14
      uint8_t sControlDDR  = STB_CONTROL_DDR;
    5bda:	9d b1       	in	r25, 0x0d	; 13

      // set #WR bit inactive
      STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5bdc:	74 9a       	sbi	0x0e, 4	; 14
      STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5bde:	6c 9a       	sbi	0x0d, 4	; 13

      // prepare chip select for io
      STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5be0:	5e 9a       	sbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5be2:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    5be4:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5be6:	57 9a       	sbi	0x0a, 7	; 10

      // generate a single low / hi edge RD
      STB_CONTROL_PORT |= _BV(STB_RD_BIT); // #RD bit
    5be8:	75 9a       	sbi	0x0e, 5	; 14
      STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    5bea:	6d 9a       	sbi	0x0d, 5	; 13
      // and now back ...
      STB_CONTROL_PORT &= ~_BV(STB_RD_BIT);
    5bec:	75 98       	cbi	0x0e, 5	; 14

      // Switch port to input
      STB_DATA_DDR  &= ~_BV(STB_BUTTON_0);
    5bee:	20 98       	cbi	0x04, 0	; 4
      STB_DATA_PORT |=  _BV(STB_BUTTON_0);
    5bf0:	28 9a       	sbi	0x05, 0	; 5

      // read input pin
      data = STB_DATA_PINS;
    5bf2:	23 b1       	in	r18, 0x03	; 3

      // disable input read
      STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    5bf4:	75 9a       	sbi	0x0e, 5	; 14

      // Switch port back to output
      STB_DATA_DDR |= _BV(STB_BUTTON_0);
    5bf6:	20 9a       	sbi	0x04, 0	; 4

      // disable chip select
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5bf8:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5bfa:	5e 98       	cbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5bfc:	57 9a       	sbi	0x0a, 7	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    5bfe:	5f 98       	cbi	0x0b, 7	; 11

      // restore registers
      STB_CONTROL_PORT  = sControlPORT;
    5c00:	8e b9       	out	0x0e, r24	; 14
      STB_CONTROL_DDR   = sControlDDR;
    5c02:	9d b9       	out	0x0d, r25	; 13

      return ((data & _BV(STB_BUTTON_0)) ? 1 : 0);
    5c04:	21 70       	andi	r18, 0x01	; 1
#endif
      return 0;
   }

   return 0;
}
    5c06:	82 2f       	mov	r24, r18
    5c08:	08 95       	ret

00005c0a <led_set>:
 * @param led LED which should set
 * @param mode switch mode from LED (PLATFORM_LED_ON, PLATFORM_LED_OFF and PLATFORM_LED_TOGGLE)
 */
void led_set (uint8_t platform, uint8_t led, uint8_t mode)
{
   if(platform == PLATFORM_RCB)
    5c0a:	81 30       	cpi	r24, 0x01	; 1
    5c0c:	79 f5       	brne	.+94     	; 0x5c6c <led_set+0x62>
   {
      switch(mode)
    5c0e:	42 30       	cpi	r20, 0x02	; 2
    5c10:	a9 f0       	breq	.+42     	; 0x5c3c <led_set+0x32>
    5c12:	43 30       	cpi	r20, 0x03	; 3
    5c14:	e9 f0       	breq	.+58     	; 0x5c50 <led_set+0x46>
    5c16:	41 30       	cpi	r20, 0x01	; 1
    5c18:	09 f0       	breq	.+2      	; 0x5c1c <led_set+0x12>
    5c1a:	62 c0       	rjmp	.+196    	; 0x5ce0 <led_set+0xd6>
      {
      case PLATFORM_LED_ON:
         RCB_LED_PORT &= ~(1 << (led));
    5c1c:	3e b1       	in	r19, 0x0e	; 14
    5c1e:	81 e0       	ldi	r24, 0x01	; 1
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	02 c0       	rjmp	.+4      	; 0x5c28 <led_set+0x1e>
    5c24:	88 0f       	add	r24, r24
    5c26:	99 1f       	adc	r25, r25
    5c28:	6a 95       	dec	r22
    5c2a:	e2 f7       	brpl	.-8      	; 0x5c24 <led_set+0x1a>
    5c2c:	28 2f       	mov	r18, r24
    5c2e:	20 95       	com	r18
    5c30:	23 23       	and	r18, r19
    5c32:	2e b9       	out	0x0e, r18	; 14
         RCB_LED_DDR  |=  (1 << (led));
    5c34:	2d b1       	in	r18, 0x0d	; 13
    5c36:	82 2b       	or	r24, r18
    5c38:	8d b9       	out	0x0d, r24	; 13
    5c3a:	08 95       	ret
         break;
      case PLATFORM_LED_OFF:
         RCB_LED_PORT |= (1 << (led));
    5c3c:	8e b1       	in	r24, 0x0e	; 14
    5c3e:	21 e0       	ldi	r18, 0x01	; 1
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	02 c0       	rjmp	.+4      	; 0x5c48 <led_set+0x3e>
    5c44:	22 0f       	add	r18, r18
    5c46:	33 1f       	adc	r19, r19
    5c48:	6a 95       	dec	r22
    5c4a:	e2 f7       	brpl	.-8      	; 0x5c44 <led_set+0x3a>
    5c4c:	82 2b       	or	r24, r18
    5c4e:	09 c0       	rjmp	.+18     	; 0x5c62 <led_set+0x58>
         RCB_LED_DDR  |= (1 << (led));
         break;
      case PLATFORM_LED_TOGGLE:
         RCB_LED_PORT ^= (1 << (led));
    5c50:	8e b1       	in	r24, 0x0e	; 14
    5c52:	21 e0       	ldi	r18, 0x01	; 1
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	02 c0       	rjmp	.+4      	; 0x5c5c <led_set+0x52>
    5c58:	22 0f       	add	r18, r18
    5c5a:	33 1f       	adc	r19, r19
    5c5c:	6a 95       	dec	r22
    5c5e:	e2 f7       	brpl	.-8      	; 0x5c58 <led_set+0x4e>
    5c60:	82 27       	eor	r24, r18
    5c62:	8e b9       	out	0x0e, r24	; 14
         RCB_LED_DDR  |= (1 << (led));
    5c64:	8d b1       	in	r24, 0x0d	; 13
    5c66:	28 2b       	or	r18, r24
    5c68:	2d b9       	out	0x0d, r18	; 13
    5c6a:	08 95       	ret
         break;
      }
   }
   else if(platform == PLATFORM_STB)
    5c6c:	82 30       	cpi	r24, 0x02	; 2
    5c6e:	c1 f5       	brne	.+112    	; 0x5ce0 <led_set+0xd6>
   {
#ifdef SINGLE_CHIP
      switch(mode)
    5c70:	41 30       	cpi	r20, 0x01	; 1
    5c72:	19 f0       	breq	.+6      	; 0x5c7a <led_set+0x70>
    5c74:	42 30       	cpi	r20, 0x02	; 2
    5c76:	c9 f4       	brne	.+50     	; 0x5caa <led_set+0xa0>
    5c78:	0c c0       	rjmp	.+24     	; 0x5c92 <led_set+0x88>
      {
      case PLATFORM_LED_ON:
         PERIPHERAL &= ~_BV(led);
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	02 c0       	rjmp	.+4      	; 0x5c84 <led_set+0x7a>
    5c80:	88 0f       	add	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	6a 95       	dec	r22
    5c86:	e2 f7       	brpl	.-8      	; 0x5c80 <led_set+0x76>
    5c88:	80 95       	com	r24
    5c8a:	20 91 27 1e 	lds	r18, 0x1E27
    5c8e:	28 23       	and	r18, r24
    5c90:	0a c0       	rjmp	.+20     	; 0x5ca6 <led_set+0x9c>
         break;
      case PLATFORM_LED_OFF:
         PERIPHERAL |= _BV(led);
    5c92:	81 e0       	ldi	r24, 0x01	; 1
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	02 c0       	rjmp	.+4      	; 0x5c9c <led_set+0x92>
    5c98:	88 0f       	add	r24, r24
    5c9a:	99 1f       	adc	r25, r25
    5c9c:	6a 95       	dec	r22
    5c9e:	e2 f7       	brpl	.-8      	; 0x5c98 <led_set+0x8e>
    5ca0:	20 91 27 1e 	lds	r18, 0x1E27
    5ca4:	28 2b       	or	r18, r24
    5ca6:	20 93 27 1e 	sts	0x1E27, r18
         break;
      }
      // save registers to restore later
      uint8_t sControlPORT = STB_CONTROL_PORT;
    5caa:	9e b1       	in	r25, 0x0e	; 14
      uint8_t sControlDDR  = STB_CONTROL_DDR;
    5cac:	2d b1       	in	r18, 0x0d	; 13
      uint8_t sDataPORT    = STB_DATA_PORT;
    5cae:	35 b1       	in	r19, 0x05	; 5
      uint8_t sDataDDR     = STB_DATA_DDR;
    5cb0:	44 b1       	in	r20, 0x04	; 4

      // set #RD bit inactive
      STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    5cb2:	75 9a       	sbi	0x0e, 5	; 14
      STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    5cb4:	6d 9a       	sbi	0x0d, 5	; 13

      STB_DATA_PORT = PERIPHERAL; // low active
    5cb6:	80 91 27 1e 	lds	r24, 0x1E27
    5cba:	85 b9       	out	0x05, r24	; 5
      STB_DATA_DDR |= _BV(STB_LED_0); // set LED0 output active
    5cbc:	20 9a       	sbi	0x04, 0	; 4
      STB_DATA_DDR |= _BV(STB_LED_1); // set LED1 output active
    5cbe:	21 9a       	sbi	0x04, 1	; 4

      // prepare chip select for io
      STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5cc0:	5e 9a       	sbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5cc2:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    5cc4:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5cc6:	57 9a       	sbi	0x0a, 7	; 10

      // generate a single low / hi edge WR
      STB_CONTROL_PORT |= _BV(STB_WR_BIT); // #WR bit
    5cc8:	74 9a       	sbi	0x0e, 4	; 14
      STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5cca:	6c 9a       	sbi	0x0d, 4	; 13
      // and now back ...
      STB_CONTROL_PORT &= ~_BV(STB_WR_BIT);
    5ccc:	74 98       	cbi	0x0e, 4	; 14
      STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5cce:	74 9a       	sbi	0x0e, 4	; 14

      // disable chip select
      STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5cd0:	5e 98       	cbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5cd2:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    5cd4:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5cd6:	57 9a       	sbi	0x0a, 7	; 10

      // restore registers
      STB_CONTROL_PORT  = sControlPORT;
    5cd8:	9e b9       	out	0x0e, r25	; 14
      STB_CONTROL_DDR   = sControlDDR;
    5cda:	2d b9       	out	0x0d, r18	; 13
      STB_DATA_PORT     = sDataPORT;
    5cdc:	35 b9       	out	0x05, r19	; 5
      STB_DATA_DDR      = sDataDDR;
    5cde:	44 b9       	out	0x04, r20	; 4
    5ce0:	08 95       	ret

00005ce2 <stb_status_temperature>:
 *
 * @param mode activate/deactivate temperature sensor (STB_TEMPERATURE_ON and STB_TEMPERATURE_OFF)
 */
void stb_status_temperature(uint8_t mode)
{
   if(mode == STB_TEMPERATURE_ON)
    5ce2:	81 30       	cpi	r24, 0x01	; 1
    5ce4:	21 f4       	brne	.+8      	; 0x5cee <stb_status_temperature+0xc>
   {
#ifdef SINGLE_CHIP
      PERIPHERAL &= ~_BV(2);
    5ce6:	80 91 27 1e 	lds	r24, 0x1E27
    5cea:	8b 7f       	andi	r24, 0xFB	; 251
    5cec:	05 c0       	rjmp	.+10     	; 0x5cf8 <stb_status_temperature+0x16>
#else
      PERIPHERAL |= _BV(2);
#endif
   }
   else if(mode == STB_TEMPERATURE_OFF)
    5cee:	82 30       	cpi	r24, 0x02	; 2
    5cf0:	29 f4       	brne	.+10     	; 0x5cfc <stb_status_temperature+0x1a>
   {
#ifdef SINGLE_CHIP
      PERIPHERAL |= _BV(2);
    5cf2:	80 91 27 1e 	lds	r24, 0x1E27
    5cf6:	84 60       	ori	r24, 0x04	; 4
    5cf8:	80 93 27 1e 	sts	0x1E27, r24
      PERIPHERAL &= ~_BV(2);
#endif
   }
#ifdef SINGLE_CHIP
   // save registers to restore later
   uint8_t sControlPORT = STB_CONTROL_PORT;
    5cfc:	9e b1       	in	r25, 0x0e	; 14
   uint8_t sControlDDR  = STB_CONTROL_DDR;
    5cfe:	2d b1       	in	r18, 0x0d	; 13
   uint8_t sDataPORT    = STB_DATA_PORT;
    5d00:	35 b1       	in	r19, 0x05	; 5
   uint8_t sDataDDR     = STB_DATA_DDR;
    5d02:	44 b1       	in	r20, 0x04	; 4

   // set #RD bit inactive
   STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    5d04:	75 9a       	sbi	0x0e, 5	; 14
   STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    5d06:	6d 9a       	sbi	0x0d, 5	; 13

   STB_DATA_PORT   = PERIPHERAL; // low active
    5d08:	80 91 27 1e 	lds	r24, 0x1E27
    5d0c:	85 b9       	out	0x05, r24	; 5
   STB_DATA_DDR   |= _BV(STB_TEMPERATURE); // set temperature output active
    5d0e:	22 9a       	sbi	0x04, 2	; 4

   // prepare chip select for io
   STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5d10:	5e 9a       	sbi	0x0b, 6	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5d12:	56 9a       	sbi	0x0a, 6	; 10
   STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    5d14:	5f 98       	cbi	0x0b, 7	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5d16:	57 9a       	sbi	0x0a, 7	; 10

   // generate a single low / hi edge WR
   STB_CONTROL_PORT |= _BV(STB_WR_BIT); // #WR bit
    5d18:	74 9a       	sbi	0x0e, 4	; 14
   STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5d1a:	6c 9a       	sbi	0x0d, 4	; 13
   // and now back ...
   STB_CONTROL_PORT &= ~_BV(STB_WR_BIT);
    5d1c:	74 98       	cbi	0x0e, 4	; 14
   STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5d1e:	74 9a       	sbi	0x0e, 4	; 14

   // disable chip select
   STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5d20:	5e 98       	cbi	0x0b, 6	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5d22:	56 9a       	sbi	0x0a, 6	; 10
   STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    5d24:	5f 98       	cbi	0x0b, 7	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5d26:	57 9a       	sbi	0x0a, 7	; 10

   // set temperature output inactive
   STB_DATA_DDR    &= ~_BV(STB_TEMPERATURE);
    5d28:	22 98       	cbi	0x04, 2	; 4

   // restore registers
   STB_CONTROL_PORT  = sControlPORT;
    5d2a:	9e b9       	out	0x0e, r25	; 14
   STB_CONTROL_DDR   = sControlDDR;
    5d2c:	2d b9       	out	0x0d, r18	; 13
   STB_DATA_PORT     = sDataPORT;
    5d2e:	35 b9       	out	0x05, r19	; 5
   STB_DATA_DDR      = sDataDDR;
    5d30:	44 b9       	out	0x04, r20	; 4
#else
   *pPERIPHERAL = ~PERIPHERAL | ~0x07; // Memory mapped IO
#endif
}
    5d32:	08 95       	ret

00005d34 <setup_info_for_request>:
      }
   }
#endif

   return 0;
}
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	08 95       	ret

00005d38 <evaluate_quality_request>:
      frame.option = numberOfNodes;

      send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t*)&frame, sizeof(frame), UDP_PORT_END_ROUTER, UDP_PORT_COORD);
   }
#endif
}
    5d38:	08 95       	ret

00005d3a <send_quality_request>:

/**
 * @brief Executed by Coordinator to send 'GET_QUALITY' request to all router nodes
 */
void send_quality_request(void)
{
    5d3a:	af 92       	push	r10
    5d3c:	bf 92       	push	r11
    5d3e:	cf 92       	push	r12
    5d40:	df 92       	push	r13
    5d42:	ef 92       	push	r14
    5d44:	ff 92       	push	r15
    5d46:	0f 93       	push	r16
    5d48:	1f 93       	push	r17
    5d4a:	df 93       	push	r29
    5d4c:	cf 93       	push	r28
    5d4e:	cd b7       	in	r28, 0x3d	; 61
    5d50:	de b7       	in	r29, 0x3e	; 62
    5d52:	eb 97       	sbiw	r28, 0x3b	; 59
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	f8 94       	cli
    5d58:	de bf       	out	0x3e, r29	; 62
    5d5a:	0f be       	out	0x3f, r0	; 63
    5d5c:	cd bf       	out	0x3d, r28	; 61
#if (NODETYPE == COORD)

   associatedNodes_t* nodes = (associatedNodes_t*)getChildTable();
    5d5e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
   associatedNodes_t* node;

   deRFprotocol_t frame;
   frame.command = COMMAND_INTERN_LINK_QUALITY_REQUEST;
    5d62:	20 e2       	ldi	r18, 0x20	; 32
    5d64:	29 83       	std	Y+1, r18	; 0x01
   frame.option = NO_OPTION;
    5d66:	1a 82       	std	Y+2, r1	; 0x02
    5d68:	6c 01       	movw	r12, r24
    5d6a:	81 e0       	ldi	r24, 0x01	; 1
    5d6c:	e8 2e       	mov	r14, r24
    5d6e:	f1 2c       	mov	r15, r1
   {
      node = &nodes[i];
      // find out all router nodes
      if ((node->nodeType) == ROUTER)
      {
         send_data_wireless(i, (uint8_t*)&frame, sizeof(frame), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    5d70:	5e 01       	movw	r10, r28
    5d72:	08 94       	sec
    5d74:	a1 1c       	adc	r10, r1
    5d76:	b1 1c       	adc	r11, r1
   uint8_t i;
   for(i = 1; i < MAXNODES; i++)
   {
      node = &nodes[i];
      // find out all router nodes
      if ((node->nodeType) == ROUTER)
    5d78:	f6 01       	movw	r30, r12
    5d7a:	80 89       	ldd	r24, Z+16	; 0x10
    5d7c:	82 30       	cpi	r24, 0x02	; 2
    5d7e:	49 f4       	brne	.+18     	; 0x5d92 <send_quality_request+0x58>
      {
         send_data_wireless(i, (uint8_t*)&frame, sizeof(frame), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    5d80:	c7 01       	movw	r24, r14
    5d82:	b5 01       	movw	r22, r10
    5d84:	4b e3       	ldi	r20, 0x3B	; 59
    5d86:	2c eb       	ldi	r18, 0xBC	; 188
    5d88:	30 ef       	ldi	r19, 0xF0	; 240
    5d8a:	0b eb       	ldi	r16, 0xBB	; 187
    5d8c:	10 ef       	ldi	r17, 0xF0	; 240
    5d8e:	0e 94 20 2a 	call	0x5440	; 0x5440 <send_data_wireless>
    5d92:	80 e1       	ldi	r24, 0x10	; 16
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	c8 0e       	add	r12, r24
    5d98:	d9 1e       	adc	r13, r25
    5d9a:	08 94       	sec
    5d9c:	e1 1c       	adc	r14, r1
    5d9e:	f1 1c       	adc	r15, r1
   deRFprotocol_t frame;
   frame.command = COMMAND_INTERN_LINK_QUALITY_REQUEST;
   frame.option = NO_OPTION;

   uint8_t i;
   for(i = 1; i < MAXNODES; i++)
    5da0:	94 e6       	ldi	r25, 0x64	; 100
    5da2:	e9 16       	cp	r14, r25
    5da4:	f1 04       	cpc	r15, r1
    5da6:	41 f7       	brne	.-48     	; 0x5d78 <send_quality_request+0x3e>
         send_data_wireless(i, (uint8_t*)&frame, sizeof(frame), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
      }
   }

   // call function again after timer with preloaded value ITERATION_TIME_QUALITY is expired
   macSetAlarm(ITERATION_TIME_QUALITY, send_quality_request);
    5da8:	80 e1       	ldi	r24, 0x10	; 16
    5daa:	97 e2       	ldi	r25, 0x27	; 39
    5dac:	6d e9       	ldi	r22, 0x9D	; 157
    5dae:	7e e2       	ldi	r23, 0x2E	; 46
    5db0:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
#endif
}
    5db4:	eb 96       	adiw	r28, 0x3b	; 59
    5db6:	0f b6       	in	r0, 0x3f	; 63
    5db8:	f8 94       	cli
    5dba:	de bf       	out	0x3e, r29	; 62
    5dbc:	0f be       	out	0x3f, r0	; 63
    5dbe:	cd bf       	out	0x3d, r28	; 61
    5dc0:	cf 91       	pop	r28
    5dc2:	df 91       	pop	r29
    5dc4:	1f 91       	pop	r17
    5dc6:	0f 91       	pop	r16
    5dc8:	ff 90       	pop	r15
    5dca:	ef 90       	pop	r14
    5dcc:	df 90       	pop	r13
    5dce:	cf 90       	pop	r12
    5dd0:	bf 90       	pop	r11
    5dd2:	af 90       	pop	r10
    5dd4:	08 95       	ret

00005dd6 <evaluate_quality_response>:
 * child node. The storage place is the child table from coordinator.
 *
 * @param   pFrame   pointer to frame which contains quality response data
 */
void evaluate_quality_response(uint8_t* pFrame)
{
    5dd6:	cf 92       	push	r12
    5dd8:	df 92       	push	r13
    5dda:	ef 92       	push	r14
    5ddc:	ff 92       	push	r15
    5dde:	0f 93       	push	r16
    5de0:	1f 93       	push	r17
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	18 2f       	mov	r17, r24
    5de8:	09 2f       	mov	r16, r25
#if (NODETYPE == COORD)

#if LQ_DEBUG_ENABLE
   UART_PRINT("lq response\r\n");
    5dea:	83 ee       	ldi	r24, 0xE3	; 227
    5dec:	9b e0       	ldi	r25, 0x0B	; 11
    5dee:	0e 94 76 35 	call	0x6aec	; 0x6aec <puts>
#endif

   // option field contains number of nodes
   uint8_t numberOfNodes = ((deRFprotocol_t*)pFrame)->option;
    5df2:	c1 2f       	mov	r28, r17
    5df4:	d0 2f       	mov	r29, r16
    5df6:	e9 80       	ldd	r14, Y+1	; 0x01
   if(numberOfNodes > MAX_DATA_QUALITY_PAYLOAD || numberOfNodes == 0)
    5df8:	8e 2d       	mov	r24, r14
    5dfa:	81 50       	subi	r24, 0x01	; 1
    5dfc:	8e 30       	cpi	r24, 0x0E	; 14
    5dfe:	08 f0       	brcs	.+2      	; 0x5e02 <evaluate_quality_response+0x2c>
    5e00:	4a c0       	rjmp	.+148    	; 0x5e96 <evaluate_quality_response+0xc0>
   {
      return; // do not evaluate this message, it make's no sense
   }

   associatedNodes_t* nodes = (associatedNodes_t*)getChildTable();
    5e02:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
    5e06:	8c 01       	movw	r16, r24
   associatedNodes_t* node;

   uint8_t* pPayload = (uint8_t*)&(((deRFprotocol_t*)pFrame)->payload);
    5e08:	22 96       	adiw	r28, 0x02	; 2
    5e0a:	ff 24       	eor	r15, r15
         {
            node->lqi = qualityFrame->lqi;
            node->ed  = qualityFrame->ed;

#if LQ_DEBUG_ENABLE
            UART_PRINT("  -> (%u) LQI: %i  -  ED: %i\r\n", qualityFrame->short_address, qualityFrame->lqi, qualityFrame->ed);
    5e0c:	20 ef       	ldi	r18, 0xF0	; 240
    5e0e:	c2 2e       	mov	r12, r18
    5e10:	2b e0       	ldi	r18, 0x0B	; 11
    5e12:	d2 2e       	mov	r13, r18
    5e14:	3d c0       	rjmp	.+122    	; 0x5e90 <evaluate_quality_response+0xba>
   for(i = 0; i < numberOfNodes; i++)
   {
      payloadQualityFrame_t* qualityFrame = (payloadQualityFrame_t*)pPayload;
      // make sure, short address is not coordinator address (>0) and short address is not
      // greater than max. possible address (router can not have more than MAXCHILDREN nodes)
      if(qualityFrame->short_address > 0 && qualityFrame->short_address < MAXCHILDREN)
    5e16:	28 81       	ld	r18, Y
    5e18:	39 81       	ldd	r19, Y+1	; 0x01
    5e1a:	c9 01       	movw	r24, r18
    5e1c:	01 97       	sbiw	r24, 0x01	; 1
    5e1e:	c1 97       	sbiw	r24, 0x31	; 49
    5e20:	a8 f5       	brcc	.+106    	; 0x5e8c <evaluate_quality_response+0xb6>
      {
         node = &nodes[(uint8_t)(qualityFrame->short_address)];
    5e22:	e2 2f       	mov	r30, r18
    5e24:	f0 e0       	ldi	r31, 0x00	; 0
    5e26:	94 e0       	ldi	r25, 0x04	; 4
    5e28:	ee 0f       	add	r30, r30
    5e2a:	ff 1f       	adc	r31, r31
    5e2c:	9a 95       	dec	r25
    5e2e:	e1 f7       	brne	.-8      	; 0x5e28 <evaluate_quality_response+0x52>
    5e30:	e0 0f       	add	r30, r16
    5e32:	f1 1f       	adc	r31, r17

         if (node->nodeType != 0)
    5e34:	80 81       	ld	r24, Z
    5e36:	88 23       	and	r24, r24
    5e38:	49 f1       	breq	.+82     	; 0x5e8c <evaluate_quality_response+0xb6>
         {
            node->lqi = qualityFrame->lqi;
    5e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3c:	85 87       	std	Z+13, r24	; 0x0d
            node->ed  = qualityFrame->ed;
    5e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e40:	86 87       	std	Z+14, r24	; 0x0e

#if LQ_DEBUG_ENABLE
            UART_PRINT("  -> (%u) LQI: %i  -  ED: %i\r\n", qualityFrame->short_address, qualityFrame->lqi, qualityFrame->ed);
    5e42:	8d b7       	in	r24, 0x3d	; 61
    5e44:	9e b7       	in	r25, 0x3e	; 62
    5e46:	08 97       	sbiw	r24, 0x08	; 8
    5e48:	0f b6       	in	r0, 0x3f	; 63
    5e4a:	f8 94       	cli
    5e4c:	9e bf       	out	0x3e, r25	; 62
    5e4e:	0f be       	out	0x3f, r0	; 63
    5e50:	8d bf       	out	0x3d, r24	; 61
    5e52:	ed b7       	in	r30, 0x3d	; 61
    5e54:	fe b7       	in	r31, 0x3e	; 62
    5e56:	31 96       	adiw	r30, 0x01	; 1
    5e58:	ad b7       	in	r26, 0x3d	; 61
    5e5a:	be b7       	in	r27, 0x3e	; 62
    5e5c:	12 96       	adiw	r26, 0x02	; 2
    5e5e:	dc 92       	st	X, r13
    5e60:	ce 92       	st	-X, r12
    5e62:	11 97       	sbiw	r26, 0x01	; 1
    5e64:	88 81       	ld	r24, Y
    5e66:	99 81       	ldd	r25, Y+1	; 0x01
    5e68:	93 83       	std	Z+3, r25	; 0x03
    5e6a:	82 83       	std	Z+2, r24	; 0x02
    5e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e6e:	84 83       	std	Z+4, r24	; 0x04
    5e70:	15 82       	std	Z+5, r1	; 0x05
    5e72:	8b 81       	ldd	r24, Y+3	; 0x03
    5e74:	86 83       	std	Z+6, r24	; 0x06
    5e76:	17 82       	std	Z+7, r1	; 0x07
    5e78:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <printf>
    5e7c:	8d b7       	in	r24, 0x3d	; 61
    5e7e:	9e b7       	in	r25, 0x3e	; 62
    5e80:	08 96       	adiw	r24, 0x08	; 8
    5e82:	0f b6       	in	r0, 0x3f	; 63
    5e84:	f8 94       	cli
    5e86:	9e bf       	out	0x3e, r25	; 62
    5e88:	0f be       	out	0x3f, r0	; 63
    5e8a:	8d bf       	out	0x3d, r24	; 61
#endif
         }
      }
      pPayload += sizeof(payloadQualityFrame_t);
    5e8c:	24 96       	adiw	r28, 0x04	; 4
   associatedNodes_t* node;

   uint8_t* pPayload = (uint8_t*)&(((deRFprotocol_t*)pFrame)->payload);

   uint8_t i;
   for(i = 0; i < numberOfNodes; i++)
    5e8e:	f3 94       	inc	r15
    5e90:	fe 14       	cp	r15, r14
    5e92:	08 f4       	brcc	.+2      	; 0x5e96 <evaluate_quality_response+0xc0>
    5e94:	c0 cf       	rjmp	.-128    	; 0x5e16 <evaluate_quality_response+0x40>
         }
      }
      pPayload += sizeof(payloadQualityFrame_t);
   }
#endif
}
    5e96:	df 91       	pop	r29
    5e98:	cf 91       	pop	r28
    5e9a:	1f 91       	pop	r17
    5e9c:	0f 91       	pop	r16
    5e9e:	ff 90       	pop	r15
    5ea0:	ef 90       	pop	r14
    5ea2:	df 90       	pop	r13
    5ea4:	cf 90       	pop	r12
    5ea6:	08 95       	ret

00005ea8 <check_and_save_quality_values>:
 * ability to save values inside a their table.
 *
 * @param   pFrame   pointer to receiving frame
 */
void check_and_save_quality_values(uint8_t* pFrame)
{
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
   u8 shortAddress = ((ftData*)(((rx_frame_t*)pFrame)->data))->srcAddr;
    5eae:	fc 01       	movw	r30, r24
    5eb0:	10 85       	ldd	r17, Z+8	; 0x08

#if (NODETYPE == COORD)
   associatedNodes_t* nodes = (associatedNodes_t*)getChildTable();
    5eb2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <getChildTable>
   associatedNodes_t* node = &nodes[shortAddress];
    5eb6:	c1 2f       	mov	r28, r17
    5eb8:	d0 e0       	ldi	r29, 0x00	; 0
    5eba:	34 e0       	ldi	r19, 0x04	; 4
    5ebc:	cc 0f       	add	r28, r28
    5ebe:	dd 1f       	adc	r29, r29
    5ec0:	3a 95       	dec	r19
    5ec2:	e1 f7       	brne	.-8      	; 0x5ebc <check_and_save_quality_values+0x14>
    5ec4:	c8 0f       	add	r28, r24
    5ec6:	d9 1f       	adc	r29, r25

   // check if node is associated with coordinator (node type is not zero)
   if(node->nodeType)
    5ec8:	88 81       	ld	r24, Y
    5eca:	88 23       	and	r24, r24
    5ecc:	51 f0       	breq	.+20     	; 0x5ee2 <check_and_save_quality_values+0x3a>
   {
      // check if node is direct child from coordinator -> parentShortAddress = Coordinator Short Address
      if((node->parentShortAddress) == DEFAULT_COORD_ADDR)
    5ece:	89 85       	ldd	r24, Y+9	; 0x09
    5ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ed2:	89 2b       	or	r24, r25
    5ed4:	31 f4       	brne	.+12     	; 0x5ee2 <check_and_save_quality_values+0x3a>
      {
         node->lqi = radioGetSavedLqiValue();
    5ed6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <radioGetSavedLqiValue>
    5eda:	8d 87       	std	Y+13, r24	; 0x0d
         node->ed  = radioGetSavedEDValue();
    5edc:	0e 94 ef 18 	call	0x31de	; 0x31de <radioGetSavedEDValue>
    5ee0:	8e 87       	std	Y+14, r24	; 0x0e
#endif

#if (NODETYPE == ENDDEVICE)
   shortAddress = shortAddress; // make compiler happy
#endif
}
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	1f 91       	pop	r17
    5ee8:	08 95       	ret

00005eea <queue_char_pending>:
 *
 * @return if any char is available it return 1, else 0
 */
uint8_t queue_char_pending(void)
{
   return (uart_queue.head != uart_queue.tail);
    5eea:	90 91 b2 22 	lds	r25, 0x22B2
    5eee:	80 91 b3 22 	lds	r24, 0x22B3
    5ef2:	20 e0       	ldi	r18, 0x00	; 0
    5ef4:	98 13       	cpse	r25, r24
    5ef6:	21 e0       	ldi	r18, 0x01	; 1
}
    5ef8:	82 2f       	mov	r24, r18
    5efa:	08 95       	ret

00005efc <queue_put_char>:
 * @brief Put char into buffer
 *
 * @param   c  character for buffer
 */
void queue_put_char(uint8_t c)
{
    5efc:	df 93       	push	r29
    5efe:	cf 93       	push	r28
    5f00:	0f 92       	push	r0
    5f02:	cd b7       	in	r28, 0x3d	; 61
    5f04:	de b7       	in	r29, 0x3e	; 62
    5f06:	48 2f       	mov	r20, r24
   AVR_ENTER_CRITICAL_REGION();
    5f08:	8f b7       	in	r24, 0x3f	; 63
    5f0a:	89 83       	std	Y+1, r24	; 0x01
    5f0c:	f8 94       	cli
   uint8_t newhead;

   if ((uart_queue.head + 1) % MAX_CHARS == uart_queue.tail)
    5f0e:	80 91 b2 22 	lds	r24, 0x22B2
    5f12:	20 91 b3 22 	lds	r18, 0x22B3
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	01 96       	adiw	r24, 0x01	; 1
    5f1a:	68 ee       	ldi	r22, 0xE8	; 232
    5f1c:	73 e0       	ldi	r23, 0x03	; 3
    5f1e:	0e 94 1d 34 	call	0x683a	; 0x683a <__divmodhi4>
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	82 17       	cp	r24, r18
    5f26:	93 07       	cpc	r25, r19
    5f28:	61 f0       	breq	.+24     	; 0x5f42 <queue_put_char+0x46>
   {
      // queue full, get outta here
      return;
   }

   newhead = uart_queue.head;
    5f2a:	80 91 b2 22 	lds	r24, 0x22B2

   // store in queue
   uart_queue.buffer[newhead] = c;
    5f2e:	e8 2f       	mov	r30, r24
    5f30:	f0 e0       	ldi	r31, 0x00	; 0
    5f32:	ee 54       	subi	r30, 0x4E	; 78
    5f34:	fd 4d       	sbci	r31, 0xDD	; 221
    5f36:	42 83       	std	Z+2, r20	; 0x02

   // calculate new head index
   newhead++;
    5f38:	8f 5f       	subi	r24, 0xFF	; 255
   if (newhead >= MAX_CHARS)
   {
      newhead = 0;
   }
   uart_queue.head = newhead;
    5f3a:	80 93 b2 22 	sts	0x22B2, r24
   AVR_LEAVE_CRITICAL_REGION();
    5f3e:	89 81       	ldd	r24, Y+1	; 0x01
    5f40:	8f bf       	out	0x3f, r24	; 63
}
    5f42:	0f 90       	pop	r0
    5f44:	cf 91       	pop	r28
    5f46:	df 91       	pop	r29
    5f48:	08 95       	ret

00005f4a <queue_put_char_std>:
 *
 * @param   c           character for buffer
 * @param   dummy_file  not used
 */
int queue_put_char_std (char c, FILE *dummy_file)
{
    5f4a:	1f 93       	push	r17
    5f4c:	18 2f       	mov	r17, r24
   queue_put_char((uint8_t)c);
    5f4e:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <queue_put_char>
   return c;
}
    5f52:	81 2f       	mov	r24, r17
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	1f 91       	pop	r17
    5f58:	08 95       	ret

00005f5a <queue_get_char>:
 * @brief Return oldest character
 *
 * @return  oldest character
 */
uint8_t queue_get_char(void)
{
    5f5a:	df 93       	push	r29
    5f5c:	cf 93       	push	r28
    5f5e:	00 d0       	rcall	.+0      	; 0x5f60 <queue_get_char+0x6>
    5f60:	cd b7       	in	r28, 0x3d	; 61
    5f62:	de b7       	in	r29, 0x3e	; 62
   uint8_t c;
   AVR_ENTER_CRITICAL_REGION();
    5f64:	8f b7       	in	r24, 0x3f	; 63
    5f66:	89 83       	std	Y+1, r24	; 0x01
    5f68:	f8 94       	cli
   volatile uint8_t newtail;

   newtail = uart_queue.tail;
    5f6a:	80 91 b3 22 	lds	r24, 0x22B3
    5f6e:	8a 83       	std	Y+2, r24	; 0x02

   c = uart_queue.buffer[newtail];
    5f70:	8a 81       	ldd	r24, Y+2	; 0x02
    5f72:	e2 eb       	ldi	r30, 0xB2	; 178
    5f74:	f2 e2       	ldi	r31, 0x22	; 34
    5f76:	e8 0f       	add	r30, r24
    5f78:	f1 1d       	adc	r31, r1
    5f7a:	82 81       	ldd	r24, Z+2	; 0x02

   // calculate new tail
   newtail++;
    5f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f7e:	9f 5f       	subi	r25, 0xFF	; 255
    5f80:	9a 83       	std	Y+2, r25	; 0x02
   if (newtail >= MAX_CHARS)
    5f82:	9a 81       	ldd	r25, Y+2	; 0x02
   {
      newtail = 0;
   }

   uart_queue.tail = newtail;
    5f84:	9a 81       	ldd	r25, Y+2	; 0x02
    5f86:	90 93 b3 22 	sts	0x22B3, r25

   AVR_LEAVE_CRITICAL_REGION();
    5f8a:	99 81       	ldd	r25, Y+1	; 0x01
    5f8c:	9f bf       	out	0x3f, r25	; 63
   return(c);
}
    5f8e:	0f 90       	pop	r0
    5f90:	0f 90       	pop	r0
    5f92:	cf 91       	pop	r28
    5f94:	df 91       	pop	r29
    5f96:	08 95       	ret

00005f98 <queue_get_char_std>:
 *
 * @return  oldest character
 */
int queue_get_char_std(FILE* dummy_file)
{
   return queue_get_char();
    5f98:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <queue_get_char>
}
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	08 95       	ret

00005fa0 <queue_put_string>:
 *
 * @param str  Pointer to String
 * @param len  length of String
 */
void queue_put_string(char* str, uint8_t len)
{
    5fa0:	1f 93       	push	r17
    5fa2:	cf 93       	push	r28
    5fa4:	df 93       	push	r29
    5fa6:	ec 01       	movw	r28, r24
    5fa8:	16 2f       	mov	r17, r22
    5faa:	04 c0       	rjmp	.+8      	; 0x5fb4 <queue_put_string+0x14>
   while(len > 0)
   {
      queue_put_char(*str);
    5fac:	89 91       	ld	r24, Y+
    5fae:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <queue_put_char>
      str++;
      len--;
    5fb2:	11 50       	subi	r17, 0x01	; 1
 * @param str  Pointer to String
 * @param len  length of String
 */
void queue_put_string(char* str, uint8_t len)
{
   while(len > 0)
    5fb4:	11 23       	and	r17, r17
    5fb6:	d1 f7       	brne	.-12     	; 0x5fac <queue_put_string+0xc>
   {
      queue_put_char(*str);
      i++;
   }
   */
}
    5fb8:	df 91       	pop	r29
    5fba:	cf 91       	pop	r28
    5fbc:	1f 91       	pop	r17
    5fbe:	08 95       	ret

00005fc0 <queue_task>:
/*
 * @brief Task which is executed in free time, to send out all saved chars from queue.
 *
 */
void queue_task(void)
{
    5fc0:	06 c0       	rjmp	.+12     	; 0x5fce <queue_task+0xe>
   while(queue_char_pending())
   {
      uart_putc(queue_get_char(), NULL);
    5fc2:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <queue_get_char>
    5fc6:	60 e0       	ldi	r22, 0x00	; 0
    5fc8:	70 e0       	ldi	r23, 0x00	; 0
    5fca:	0e 94 b6 30 	call	0x616c	; 0x616c <uart_putc>
 *
 * @return if any char is available it return 1, else 0
 */
uint8_t queue_char_pending(void)
{
   return (uart_queue.head != uart_queue.tail);
    5fce:	90 91 b2 22 	lds	r25, 0x22B2
    5fd2:	80 91 b3 22 	lds	r24, 0x22B3
 * @brief Task which is executed in free time, to send out all saved chars from queue.
 *
 */
void queue_task(void)
{
   while(queue_char_pending())
    5fd6:	98 17       	cp	r25, r24
    5fd8:	a1 f7       	brne	.-24     	; 0x5fc2 <queue_task+0x2>
   {
      uart_putc(queue_get_char(), NULL);
   }
}
    5fda:	08 95       	ret

00005fdc <queue_put_dec32>:
 * @brief Convert long int to string and push on queue
 *
 * @param n unsigned long integer
 */
void queue_put_dec32(uint32_t n)
{
    5fdc:	0f 93       	push	r16
    5fde:	1f 93       	push	r17
    5fe0:	df 93       	push	r29
    5fe2:	cf 93       	push	r28
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	2b 97       	sbiw	r28, 0x0b	; 11
    5fea:	0f b6       	in	r0, 0x3f	; 63
    5fec:	f8 94       	cli
    5fee:	de bf       	out	0x3e, r29	; 62
    5ff0:	0f be       	out	0x3f, r0	; 63
    5ff2:	cd bf       	out	0x3d, r28	; 61
    5ff4:	fe 01       	movw	r30, r28
    5ff6:	31 96       	adiw	r30, 0x01	; 1
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
   {
      buf[i] = 32; // 32 = space character
    5ff8:	40 e2       	ldi	r20, 0x20	; 32
 */
void queue_put_dec32(uint32_t n)
{
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
    5ffa:	9e 01       	movw	r18, r28
    5ffc:	24 5f       	subi	r18, 0xF4	; 244
    5ffe:	3f 4f       	sbci	r19, 0xFF	; 255
   {
      buf[i] = 32; // 32 = space character
    6000:	41 93       	st	Z+, r20
 */
void queue_put_dec32(uint32_t n)
{
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
    6002:	e2 17       	cp	r30, r18
    6004:	f3 07       	cpc	r31, r19
    6006:	e1 f7       	brne	.-8      	; 0x6000 <queue_put_dec32+0x24>
   {
      buf[i] = 32; // 32 = space character
   }
   itoa(n, buf, 10);
    6008:	cb 01       	movw	r24, r22
    600a:	8e 01       	movw	r16, r28
    600c:	0f 5f       	subi	r16, 0xFF	; 255
    600e:	1f 4f       	sbci	r17, 0xFF	; 255
    6010:	b8 01       	movw	r22, r16
    6012:	4a e0       	ldi	r20, 0x0A	; 10
    6014:	50 e0       	ldi	r21, 0x00	; 0
    6016:	0e 94 ff 34 	call	0x69fe	; 0x69fe <itoa>
   queue_put_string(buf, sizeof(buf));
    601a:	c8 01       	movw	r24, r16
    601c:	6b e0       	ldi	r22, 0x0B	; 11
    601e:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <queue_put_string>
}
    6022:	2b 96       	adiw	r28, 0x0b	; 11
    6024:	0f b6       	in	r0, 0x3f	; 63
    6026:	f8 94       	cli
    6028:	de bf       	out	0x3e, r29	; 62
    602a:	0f be       	out	0x3f, r0	; 63
    602c:	cd bf       	out	0x3d, r28	; 61
    602e:	cf 91       	pop	r28
    6030:	df 91       	pop	r29
    6032:	1f 91       	pop	r17
    6034:	0f 91       	pop	r16
    6036:	08 95       	ret

00006038 <queue_put_dec16>:
 * @brief Convert int to string and push on queue
 *
 * @param n unsigned integer
 */
void queue_put_dec16(uint16_t n)
{
    6038:	0f 93       	push	r16
    603a:	1f 93       	push	r17
    603c:	df 93       	push	r29
    603e:	cf 93       	push	r28
    6040:	00 d0       	rcall	.+0      	; 0x6042 <queue_put_dec16+0xa>
    6042:	00 d0       	rcall	.+0      	; 0x6044 <queue_put_dec16+0xc>
    6044:	00 d0       	rcall	.+0      	; 0x6046 <queue_put_dec16+0xe>
    6046:	cd b7       	in	r28, 0x3d	; 61
    6048:	de b7       	in	r29, 0x3e	; 62
   char buf[6]; // 5*max number (65536) + 1* zero terminated string [+ 1* minus sign]
   // 32 = space character
   buf[0] = 32; buf[1] = 32; buf[2] = 32; buf[3] = 32; buf[4] = 32; buf[5] = 32;
    604a:	20 e2       	ldi	r18, 0x20	; 32
    604c:	29 83       	std	Y+1, r18	; 0x01
    604e:	2a 83       	std	Y+2, r18	; 0x02
    6050:	2b 83       	std	Y+3, r18	; 0x03
    6052:	2c 83       	std	Y+4, r18	; 0x04
    6054:	2d 83       	std	Y+5, r18	; 0x05
    6056:	2e 83       	std	Y+6, r18	; 0x06
   itoa(n, buf, 10);
    6058:	8e 01       	movw	r16, r28
    605a:	0f 5f       	subi	r16, 0xFF	; 255
    605c:	1f 4f       	sbci	r17, 0xFF	; 255
    605e:	b8 01       	movw	r22, r16
    6060:	4a e0       	ldi	r20, 0x0A	; 10
    6062:	50 e0       	ldi	r21, 0x00	; 0
    6064:	0e 94 ff 34 	call	0x69fe	; 0x69fe <itoa>
   queue_put_string(buf, sizeof(buf));
    6068:	c8 01       	movw	r24, r16
    606a:	66 e0       	ldi	r22, 0x06	; 6
    606c:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <queue_put_string>
}
    6070:	26 96       	adiw	r28, 0x06	; 6
    6072:	0f b6       	in	r0, 0x3f	; 63
    6074:	f8 94       	cli
    6076:	de bf       	out	0x3e, r29	; 62
    6078:	0f be       	out	0x3f, r0	; 63
    607a:	cd bf       	out	0x3d, r28	; 61
    607c:	cf 91       	pop	r28
    607e:	df 91       	pop	r29
    6080:	1f 91       	pop	r17
    6082:	0f 91       	pop	r16
    6084:	08 95       	ret

00006086 <queue_put_dec8>:
 * @brief Convert byte to string and push on queue
 *
 * @param n unsigned byte
 */
void queue_put_dec8(uint8_t n)
{
    6086:	0f 93       	push	r16
    6088:	1f 93       	push	r17
    608a:	df 93       	push	r29
    608c:	cf 93       	push	r28
    608e:	00 d0       	rcall	.+0      	; 0x6090 <queue_put_dec8+0xa>
    6090:	00 d0       	rcall	.+0      	; 0x6092 <queue_put_dec8+0xc>
    6092:	cd b7       	in	r28, 0x3d	; 61
    6094:	de b7       	in	r29, 0x3e	; 62
   char buf[4]; // 3*max number (256) + 1* zero terminated string [+ 1* minus sign]
   // 32 = space character
   buf[0] = 32; buf[1] = 32; buf[2] = 32; buf[3] = 32;
    6096:	90 e2       	ldi	r25, 0x20	; 32
    6098:	99 83       	std	Y+1, r25	; 0x01
    609a:	9a 83       	std	Y+2, r25	; 0x02
    609c:	9b 83       	std	Y+3, r25	; 0x03
    609e:	9c 83       	std	Y+4, r25	; 0x04
   itoa(n, buf, 10);
    60a0:	90 e0       	ldi	r25, 0x00	; 0
    60a2:	8e 01       	movw	r16, r28
    60a4:	0f 5f       	subi	r16, 0xFF	; 255
    60a6:	1f 4f       	sbci	r17, 0xFF	; 255
    60a8:	b8 01       	movw	r22, r16
    60aa:	4a e0       	ldi	r20, 0x0A	; 10
    60ac:	50 e0       	ldi	r21, 0x00	; 0
    60ae:	0e 94 ff 34 	call	0x69fe	; 0x69fe <itoa>
   queue_put_string(buf, sizeof(buf));
    60b2:	c8 01       	movw	r24, r16
    60b4:	64 e0       	ldi	r22, 0x04	; 4
    60b6:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <queue_put_string>
}
    60ba:	0f 90       	pop	r0
    60bc:	0f 90       	pop	r0
    60be:	0f 90       	pop	r0
    60c0:	0f 90       	pop	r0
    60c2:	cf 91       	pop	r28
    60c4:	df 91       	pop	r29
    60c6:	1f 91       	pop	r17
    60c8:	0f 91       	pop	r16
    60ca:	08 95       	ret

000060cc <led_3_off>:
void led_3_off(void)
{
#ifdef STATUS_DEBUG
   led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);
#endif
}
    60cc:	08 95       	ret

000060ce <blink_led_3>:
{
#ifdef STATUS_DEBUG
   led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_ON);
   macSetAlarm(30, led_3_off);
#endif
}
    60ce:	08 95       	ret

000060d0 <evaluate_status_request>:

   blink_led_3();
   macSetAlarm(STATUS_ALARM_TIMER, evaluate_status_request);
#endif
#endif
}
    60d0:	08 95       	ret

000060d2 <evaluate_status_response>:

   // send frame out to serial interface
   send_data_wired(pFrame, sizeof(deRFprotocol_t));
#endif
#endif
}
    60d2:	08 95       	ret

000060d4 <init_status_timer>:
   TCCR4B |= (1 << CS41) | (1 << WGM42);  //prescaler to 8, free running, output compare
   OCR4A   = (MS_PER_TICK * 1000 / (8000000UL/F_CPU)); // compare every 1ms

   running_timer = 0;
#endif
}
    60d4:	08 95       	ret

000060d6 <status_timer_enable>:
{
#ifdef STATUS_DEBUG
   TIMSK4 |= (1 << OCIE4A);
   status_active = 1;
#endif
}
    60d6:	08 95       	ret

000060d8 <status_timer_disable>:
{
#ifdef STATUS_DEBUG
   TIMSK4 &= ~(1 << OCIE4A);
   status_active = 0;
#endif
}
    60d8:	08 95       	ret

000060da <is_status_active>:
{
#ifdef STATUS_DEBUG
   return status_active;
#endif
   return 0;
}
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	08 95       	ret

000060de <uart_init>:
/**
 * @brief Initialize UART interface
 *
 */
void uart_init (unsigned long BaudRate)
{
    60de:	9b 01       	movw	r18, r22
    60e0:	ac 01       	movw	r20, r24
   UCSR0A = (1<<U2X0);                              // enable double speed
    60e2:	82 e0       	ldi	r24, 0x02	; 2
    60e4:	80 93 c0 00 	sts	0x00C0, r24

   UBRR0L = (UART_BAUD(BaudRate)) & 0xFF;           // set the baudrate register
    60e8:	ca 01       	movw	r24, r20
    60ea:	b9 01       	movw	r22, r18
    60ec:	60 58       	subi	r22, 0x80	; 128
    60ee:	7b 47       	sbci	r23, 0x7B	; 123
    60f0:	81 4e       	sbci	r24, 0xE1	; 225
    60f2:	9f 4f       	sbci	r25, 0xFF	; 255
    60f4:	f2 e0       	ldi	r31, 0x02	; 2
    60f6:	66 0f       	add	r22, r22
    60f8:	77 1f       	adc	r23, r23
    60fa:	88 1f       	adc	r24, r24
    60fc:	99 1f       	adc	r25, r25
    60fe:	fa 95       	dec	r31
    6100:	d1 f7       	brne	.-12     	; 0x60f6 <uart_init+0x18>
    6102:	e3 e0       	ldi	r30, 0x03	; 3
    6104:	22 0f       	add	r18, r18
    6106:	33 1f       	adc	r19, r19
    6108:	44 1f       	adc	r20, r20
    610a:	55 1f       	adc	r21, r21
    610c:	ea 95       	dec	r30
    610e:	d1 f7       	brne	.-12     	; 0x6104 <uart_init+0x26>
    6110:	0e 94 30 34 	call	0x6860	; 0x6860 <__udivmodsi4>
    6114:	21 50       	subi	r18, 0x01	; 1
    6116:	20 93 c4 00 	sts	0x00C4, r18
   UBRR0H = 0;
    611a:	10 92 c5 00 	sts	0x00C5, r1

   UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);                // enable Receiver and Transmitter
    611e:	88 e9       	ldi	r24, 0x98	; 152
    6120:	80 93 c1 00 	sts	0x00C1, r24
   UCSR0C = (3<<UCSZ00);                            // 8 Data, No Parity, 1 Stop bit
    6124:	86 e0       	ldi	r24, 0x06	; 6
    6126:	80 93 c2 00 	sts	0x00C2, r24

#if UART_QUEUED
   stderr = &debug_stream;
#endif

   stdout = &uart_stream;                           // init standard output over UART
    612a:	8f e0       	ldi	r24, 0x0F	; 15
    612c:	9c e0       	ldi	r25, 0x0C	; 12
    612e:	90 93 9f 26 	sts	0x269F, r25
    6132:	80 93 9e 26 	sts	0x269E, r24
   stdin  = &uart_stream;                           // init standard input over UART
    6136:	90 93 9d 26 	sts	0x269D, r25
    613a:	80 93 9c 26 	sts	0x269C, r24
//UART_QUEUED

}
    613e:	08 95       	ret

00006140 <uart_keypressed>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    6140:	80 91 c0 00 	lds	r24, 0x00C0
}
    6144:	88 1f       	adc	r24, r24
    6146:	88 27       	eor	r24, r24
    6148:	88 1f       	adc	r24, r24
    614a:	08 95       	ret

0000614c <uart_getc>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    614c:	80 91 c0 00 	lds	r24, 0x00C0
 * @return  character on the UART
 *
 */
int uart_getc (FILE *dummy_file)
{
   while (!uart_keypressed());  // check for incomming data
    6150:	87 ff       	sbrs	r24, 7
    6152:	fc cf       	rjmp	.-8      	; 0x614c <uart_getc>

   return UDR0;  // Return the data
    6154:	80 91 c6 00 	lds	r24, 0x00C6

}
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	08 95       	ret

0000615c <uart_getc_std>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    615c:	80 91 c0 00 	lds	r24, 0x00C0
 * @return  character on the UART
 *
 */
int uart_getc (FILE *dummy_file)
{
   while (!uart_keypressed());  // check for incomming data
    6160:	87 ff       	sbrs	r24, 7
    6162:	fc cf       	rjmp	.-8      	; 0x615c <uart_getc_std>

   return UDR0;  // Return the data
    6164:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
int16_t uart_getc_std (void)
{
   return uart_getc(NULL);
}
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	08 95       	ret

0000616c <uart_putc>:
 * @param     c          the char to send
 * @param     dummy_file not used
 *
 */
int uart_putc (char c, FILE *dummy_file)
{
    616c:	98 2f       	mov	r25, r24
   while ( !(UCSR0A & _BV(UDRE0)) );                // wait for empty tx buffer
    616e:	80 91 c0 00 	lds	r24, 0x00C0
    6172:	85 ff       	sbrs	r24, 5
    6174:	fc cf       	rjmp	.-8      	; 0x616e <uart_putc+0x2>
   UDR0 = c;                                        // Start transmittion
    6176:	90 93 c6 00 	sts	0x00C6, r25
   return c;                                        // return the char
}
    617a:	89 2f       	mov	r24, r25
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	08 95       	ret

00006180 <uart_putc_std>:
 *
 * @param     val        the char to send
 *
 */
uint8_t uart_putc_std (uint8_t val)
{
    6180:	98 2f       	mov	r25, r24
 * @param     dummy_file not used
 *
 */
int uart_putc (char c, FILE *dummy_file)
{
   while ( !(UCSR0A & _BV(UDRE0)) );                // wait for empty tx buffer
    6182:	80 91 c0 00 	lds	r24, 0x00C0
    6186:	85 ff       	sbrs	r24, 5
    6188:	fc cf       	rjmp	.-8      	; 0x6182 <uart_putc_std+0x2>
   UDR0 = c;                                        // Start transmittion
    618a:	90 93 c6 00 	sts	0x00C6, r25
 *
 */
uint8_t uart_putc_std (uint8_t val)
{
   return (uint8_t)uart_putc((uint8_t)val, NULL);
}
    618e:	89 2f       	mov	r24, r25
    6190:	08 95       	ret

00006192 <usb_init>:
#ifdef COMMUNICATION_USB
	/* Make sure USB_RXF and USB_TXE are inputs */
	USB_DDR  &= ~(USB_RXF | USB_TXE);           // USB's status signals are inputs
	USB_PORT |=  (USB_RXF | USB_TXE);           // switch internal pull up resitors on
#endif
}
    6192:	08 95       	ret

00006194 <usb_keypressed>:
	//USB_DDR  &= ~(USB_RXF | USB_TXE);               // USB's status signals are inputs
	//USB_PORT |=  (USB_RXF | USB_TXE);               // switch internal pull up resitors on
	return (!(USB_PIN & USB_RXF)) ? 0x01 : 0x00;   // FIFO is not full? return true
#endif // COMMUNICATION_USB
	return 0;
}
    6194:	80 e0       	ldi	r24, 0x00	; 0
    6196:	08 95       	ret

00006198 <usb_putc_std>:
   *pUSB_Fifo = c;                                  // write the byte into the USB FIFO
#endif
   return c;                                        // return the char
#endif // COMMUNICATION_USB
   return 0;
}
    6198:	80 e0       	ldi	r24, 0x00	; 0
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	08 95       	ret

0000619e <usb_putc>:
#ifdef COMMUNICATION_USB
   return usb_putc_std(c, NULL);
#endif // COMMUNICATION_USB
   return 0;

}
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	08 95       	ret

000061a2 <usb_getc_std>:
#else
	return *pUSB_Fifo;                     // return received char
#endif // SINGLE_CHIP
#endif // COMMUNICATION_USB
	return 0;
}
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	08 95       	ret

000061a8 <pwr_read_adc>:
  *
  */
uint32_t pwr_read_adc (uint8_t measurement)
{
#ifdef SINGLE_CHIP
  if(measurement == VOLTAGE_MEASUREMENT)
    61a8:	81 30       	cpi	r24, 0x01	; 1
    61aa:	29 f4       	brne	.+10     	; 0x61b6 <pwr_read_adc+0xe>
    61ac:	20 e0       	ldi	r18, 0x00	; 0
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	40 e0       	ldi	r20, 0x00	; 0
    61b2:	50 e0       	ldi	r21, 0x00	; 0
    61b4:	24 c0       	rjmp	.+72     	; 0x61fe <pwr_read_adc+0x56>
  {
    return 0; // Single Chip does not provide an external VCC reference on ADC
  }
  else if(measurement == TEMPERATURE_MEASUREMENT)
    61b6:	82 30       	cpi	r24, 0x02	; 2
    61b8:	69 f4       	brne	.+26     	; 0x61d4 <pwr_read_adc+0x2c>
  {
    ADMUX = (1 << MUX3) | (1 << MUX0);   // preselect temperatur sensor
    61ba:	89 e0       	ldi	r24, 0x09	; 9
    61bc:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB |= (1 << MUX5);               // select temperature sensor
    61c0:	80 91 7b 00 	lds	r24, 0x007B
    61c4:	88 60       	ori	r24, 0x08	; 8
    61c6:	80 93 7b 00 	sts	0x007B, r24
    ADMUX |= _BV(REFS1) | _BV(REFS0);    // reference is 1.6V intern
    61ca:	80 91 7c 00 	lds	r24, 0x007C
    61ce:	80 6c       	ori	r24, 0xC0	; 192
    61d0:	80 93 7c 00 	sts	0x007C, r24
    ADMUX = _BV(MUX1) | _BV(MUX0); // external temperature sensor
    ADMUX |= (1<<REFS0);           // reference is 3,3V VCC
  }
#endif
  
  ADCSRA |= (1<<ADEN);             // enable ADC
    61d4:	80 91 7a 00 	lds	r24, 0x007A
    61d8:	80 68       	ori	r24, 0x80	; 128
    61da:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA |= (1<<ADSC);             // single ADC conversion
    61de:	80 91 7a 00 	lds	r24, 0x007A
    61e2:	80 64       	ori	r24, 0x40	; 64
    61e4:	80 93 7a 00 	sts	0x007A, r24
  while ( ADCSRA & (1<<ADSC) ) {;} // wait until conversion is completed
    61e8:	80 91 7a 00 	lds	r24, 0x007A
    61ec:	86 fd       	sbrc	r24, 6
    61ee:	fc cf       	rjmp	.-8      	; 0x61e8 <pwr_read_adc+0x40>

  return ADC;
    61f0:	80 91 78 00 	lds	r24, 0x0078
    61f4:	90 91 79 00 	lds	r25, 0x0079
    61f8:	9c 01       	movw	r18, r24
    61fa:	40 e0       	ldi	r20, 0x00	; 0
    61fc:	50 e0       	ldi	r21, 0x00	; 0
}
    61fe:	b9 01       	movw	r22, r18
    6200:	ca 01       	movw	r24, r20
    6202:	08 95       	ret

00006204 <init_adc>:
  * be used.
  *
  */
void init_adc (void)
{
  PRR0 &= ~(1 << PRADC);                 // power up ADC
    6204:	e4 e6       	ldi	r30, 0x64	; 100
    6206:	f0 e0       	ldi	r31, 0x00	; 0
    6208:	80 81       	ld	r24, Z
    620a:	8e 7f       	andi	r24, 0xFE	; 254
    620c:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // divider 64 (250 kHz clock frequency)
    620e:	ea e7       	ldi	r30, 0x7A	; 122
    6210:	f0 e0       	ldi	r31, 0x00	; 0
    6212:	80 81       	ld	r24, Z
    6214:	86 60       	ori	r24, 0x06	; 6
    6216:	80 83       	st	Z, r24
}
    6218:	08 95       	ret

0000621a <temp_get_degrcelc>:
int32_t temp_get_degrcelc (void)
{
  static int32_t temp;

#ifdef SINGLE_CHIP
  uint32_t t = pwr_read_adc(TEMPERATURE_MEASUREMENT);
    621a:	82 e0       	ldi	r24, 0x02	; 2
    621c:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <pwr_read_adc>
  temp = (int32_t)(((float)1.13*(float)t - 272.8) * 1000);
    6220:	0e 94 f9 32 	call	0x65f2	; 0x65f2 <__floatunsisf>
    6224:	27 ed       	ldi	r18, 0xD7	; 215
    6226:	33 ea       	ldi	r19, 0xA3	; 163
    6228:	40 e9       	ldi	r20, 0x90	; 144
    622a:	5f e3       	ldi	r21, 0x3F	; 63
    622c:	0e 94 87 33 	call	0x670e	; 0x670e <__mulsf3>
    6230:	26 e6       	ldi	r18, 0x66	; 102
    6232:	36 e6       	ldi	r19, 0x66	; 102
    6234:	48 e8       	ldi	r20, 0x88	; 136
    6236:	53 e4       	ldi	r21, 0x43	; 67
    6238:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__subsf3>
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	4a e7       	ldi	r20, 0x7A	; 122
    6242:	54 e4       	ldi	r21, 0x44	; 68
    6244:	0e 94 87 33 	call	0x670e	; 0x670e <__mulsf3>
    6248:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fixsfsi>
    624c:	9b 01       	movw	r18, r22
    624e:	ac 01       	movw	r20, r24
    6250:	60 93 2c 1e 	sts	0x1E2C, r22
    6254:	70 93 2d 1e 	sts	0x1E2D, r23
    6258:	80 93 2e 1e 	sts	0x1E2E, r24
    625c:	90 93 2f 1e 	sts	0x1E2F, r25
      break;
    }
  }
#endif
  return temp; // give back the temperature
}
    6260:	ca 01       	movw	r24, r20
    6262:	08 95       	ret

00006264 <get_vcc>:
   static uint32_t volt;

// Single Chip does not provide conversion via ADC, so the Batmon is choosen instead
#ifdef SINGLE_CHIP
   uint8_t val;
   uint8_t batmon = BATMON;        // backup
    6264:	90 91 51 01 	lds	r25, 0x0151

   BATMON &= ~_BV(BAT_LOW_EN);     // disable the interrupt
    6268:	80 91 51 01 	lds	r24, 0x0151
    626c:	8f 7b       	andi	r24, 0xBF	; 191
    626e:	80 93 51 01 	sts	0x0151, r24
    6272:	2f e1       	ldi	r18, 0x1F	; 31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6274:	32 e0       	ldi	r19, 0x02	; 2

   // linear search, starting at the maximum value
   // The high range switch bit is interpreted as the MSB
   val = 0x1F;
   do{
       BATMON = (BATMON & ~0x1F) | val;
    6276:	80 91 51 01 	lds	r24, 0x0151
    627a:	80 7e       	andi	r24, 0xE0	; 224
    627c:	82 2b       	or	r24, r18
    627e:	80 93 51 01 	sts	0x0151, r24
    6282:	83 2f       	mov	r24, r19
    6284:	8a 95       	dec	r24
    6286:	f1 f7       	brne	.-4      	; 0x6284 <get_vcc+0x20>
       _delay_us(1); // wait until conversion is completed
   }while( !(BATMON & _BV(BATMON_OK)) && (--val > 0) );
    6288:	80 91 51 01 	lds	r24, 0x0151
    628c:	85 fd       	sbrc	r24, 5
    628e:	02 c0       	rjmp	.+4      	; 0x6294 <get_vcc+0x30>
    6290:	21 50       	subi	r18, 0x01	; 1
    6292:	89 f7       	brne	.-30     	; 0x6276 <get_vcc+0x12>

   BATMON = batmon;        // restore previuos value
    6294:	90 93 51 01 	sts	0x0151, r25
    6298:	62 2f       	mov	r22, r18
    629a:	70 e0       	ldi	r23, 0x00	; 0
    629c:	80 e0       	ldi	r24, 0x00	; 0
    629e:	90 e0       	ldi	r25, 0x00	; 0

   if( val & 0x10 ) // BATMON_HR is set
    62a0:	24 ff       	sbrs	r18, 4
    62a2:	0f c0       	rjmp	.+30     	; 0x62c2 <get_vcc+0x5e>
   {        
       volt = (uint32_t)(2550000UL+(val&0x0F)*75UL); // result in uV
    62a4:	6f 70       	andi	r22, 0x0F	; 15
    62a6:	70 70       	andi	r23, 0x00	; 0
    62a8:	80 70       	andi	r24, 0x00	; 0
    62aa:	90 70       	andi	r25, 0x00	; 0
    62ac:	2b e4       	ldi	r18, 0x4B	; 75
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	40 e0       	ldi	r20, 0x00	; 0
    62b2:	50 e0       	ldi	r21, 0x00	; 0
    62b4:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__mulsi3>
    62b8:	60 51       	subi	r22, 0x10	; 16
    62ba:	77 41       	sbci	r23, 0x17	; 23
    62bc:	89 4d       	sbci	r24, 0xD9	; 217
    62be:	9f 4f       	sbci	r25, 0xFF	; 255
    62c0:	0a c0       	rjmp	.+20     	; 0x62d6 <get_vcc+0x72>
   }
   else
   {
       volt = (uint32_t)(1700000UL+val*50UL);        // result in uV
    62c2:	22 e3       	ldi	r18, 0x32	; 50
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	40 e0       	ldi	r20, 0x00	; 0
    62c8:	50 e0       	ldi	r21, 0x00	; 0
    62ca:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__mulsi3>
    62ce:	60 56       	subi	r22, 0x60	; 96
    62d0:	7f 40       	sbci	r23, 0x0F	; 15
    62d2:	86 4e       	sbci	r24, 0xE6	; 230
    62d4:	9f 4f       	sbci	r25, 0xFF	; 255
    62d6:	60 93 28 1e 	sts	0x1E28, r22
    62da:	70 93 29 1e 	sts	0x1E29, r23
    62de:	80 93 2a 1e 	sts	0x1E2A, r24
    62e2:	90 93 2b 1e 	sts	0x1E2B, r25
    62e6:	60 91 28 1e 	lds	r22, 0x1E28
    62ea:	70 91 29 1e 	lds	r23, 0x1E29
  volt = pwr_read_adc(VOLTAGE_MEASUREMENT); // read RAW ADC data
  volt = ((float)(1024 * 1.1) / (float)volt) * 1000000; // 1.1V reference selection
#endif

  return volt;
}
    62ee:	80 91 2a 1e 	lds	r24, 0x1E2A
    62f2:	90 91 2b 1e 	lds	r25, 0x1E2B
    62f6:	08 95       	ret

000062f8 <__lshrdi3>:
    62f8:	ef 92       	push	r14
    62fa:	ff 92       	push	r15
    62fc:	0f 93       	push	r16
    62fe:	df 93       	push	r29
    6300:	cf 93       	push	r28
    6302:	cd b7       	in	r28, 0x3d	; 61
    6304:	de b7       	in	r29, 0x3e	; 62
    6306:	60 97       	sbiw	r28, 0x10	; 16
    6308:	0f b6       	in	r0, 0x3f	; 63
    630a:	f8 94       	cli
    630c:	de bf       	out	0x3e, r29	; 62
    630e:	0f be       	out	0x3f, r0	; 63
    6310:	cd bf       	out	0x3d, r28	; 61
    6312:	a8 2f       	mov	r26, r24
    6314:	00 23       	and	r16, r16
    6316:	09 f4       	brne	.+2      	; 0x631a <__lshrdi3+0x22>
    6318:	61 c0       	rjmp	.+194    	; 0x63dc <__lshrdi3+0xe4>
    631a:	7e 01       	movw	r14, r28
    631c:	08 94       	sec
    631e:	e1 1c       	adc	r14, r1
    6320:	f1 1c       	adc	r15, r1
    6322:	88 e0       	ldi	r24, 0x08	; 8
    6324:	f7 01       	movw	r30, r14
    6326:	11 92       	st	Z+, r1
    6328:	8a 95       	dec	r24
    632a:	e9 f7       	brne	.-6      	; 0x6326 <__lshrdi3+0x2e>
    632c:	29 83       	std	Y+1, r18	; 0x01
    632e:	3a 83       	std	Y+2, r19	; 0x02
    6330:	4b 83       	std	Y+3, r20	; 0x03
    6332:	5c 83       	std	Y+4, r21	; 0x04
    6334:	6d 83       	std	Y+5, r22	; 0x05
    6336:	7e 83       	std	Y+6, r23	; 0x06
    6338:	af 83       	std	Y+7, r26	; 0x07
    633a:	98 87       	std	Y+8, r25	; 0x08
    633c:	80 e2       	ldi	r24, 0x20	; 32
    633e:	80 1b       	sub	r24, r16
    6340:	e8 2f       	mov	r30, r24
    6342:	ff 27       	eor	r31, r31
    6344:	e7 fd       	sbrc	r30, 7
    6346:	f0 95       	com	r31
    6348:	4d 81       	ldd	r20, Y+5	; 0x05
    634a:	5e 81       	ldd	r21, Y+6	; 0x06
    634c:	6f 81       	ldd	r22, Y+7	; 0x07
    634e:	78 85       	ldd	r23, Y+8	; 0x08
    6350:	18 16       	cp	r1, r24
    6352:	84 f0       	brlt	.+32     	; 0x6374 <__lshrdi3+0x7c>
    6354:	1d 86       	std	Y+13, r1	; 0x0d
    6356:	1e 86       	std	Y+14, r1	; 0x0e
    6358:	1f 86       	std	Y+15, r1	; 0x0f
    635a:	18 8a       	std	Y+16, r1	; 0x10
    635c:	88 27       	eor	r24, r24
    635e:	99 27       	eor	r25, r25
    6360:	8e 1b       	sub	r24, r30
    6362:	9f 0b       	sbc	r25, r31
    6364:	04 c0       	rjmp	.+8      	; 0x636e <__lshrdi3+0x76>
    6366:	76 95       	lsr	r23
    6368:	67 95       	ror	r22
    636a:	57 95       	ror	r21
    636c:	47 95       	ror	r20
    636e:	8a 95       	dec	r24
    6370:	d2 f7       	brpl	.-12     	; 0x6366 <__lshrdi3+0x6e>
    6372:	28 c0       	rjmp	.+80     	; 0x63c4 <__lshrdi3+0xcc>
    6374:	20 2f       	mov	r18, r16
    6376:	33 27       	eor	r19, r19
    6378:	27 fd       	sbrc	r18, 7
    637a:	30 95       	com	r19
    637c:	db 01       	movw	r26, r22
    637e:	ca 01       	movw	r24, r20
    6380:	02 2e       	mov	r0, r18
    6382:	04 c0       	rjmp	.+8      	; 0x638c <__lshrdi3+0x94>
    6384:	b6 95       	lsr	r27
    6386:	a7 95       	ror	r26
    6388:	97 95       	ror	r25
    638a:	87 95       	ror	r24
    638c:	0a 94       	dec	r0
    638e:	d2 f7       	brpl	.-12     	; 0x6384 <__lshrdi3+0x8c>
    6390:	8d 87       	std	Y+13, r24	; 0x0d
    6392:	9e 87       	std	Y+14, r25	; 0x0e
    6394:	af 87       	std	Y+15, r26	; 0x0f
    6396:	b8 8b       	std	Y+16, r27	; 0x10
    6398:	04 c0       	rjmp	.+8      	; 0x63a2 <__lshrdi3+0xaa>
    639a:	44 0f       	add	r20, r20
    639c:	55 1f       	adc	r21, r21
    639e:	66 1f       	adc	r22, r22
    63a0:	77 1f       	adc	r23, r23
    63a2:	ea 95       	dec	r30
    63a4:	d2 f7       	brpl	.-12     	; 0x639a <__lshrdi3+0xa2>
    63a6:	89 81       	ldd	r24, Y+1	; 0x01
    63a8:	9a 81       	ldd	r25, Y+2	; 0x02
    63aa:	ab 81       	ldd	r26, Y+3	; 0x03
    63ac:	bc 81       	ldd	r27, Y+4	; 0x04
    63ae:	04 c0       	rjmp	.+8      	; 0x63b8 <__lshrdi3+0xc0>
    63b0:	b6 95       	lsr	r27
    63b2:	a7 95       	ror	r26
    63b4:	97 95       	ror	r25
    63b6:	87 95       	ror	r24
    63b8:	2a 95       	dec	r18
    63ba:	d2 f7       	brpl	.-12     	; 0x63b0 <__lshrdi3+0xb8>
    63bc:	48 2b       	or	r20, r24
    63be:	59 2b       	or	r21, r25
    63c0:	6a 2b       	or	r22, r26
    63c2:	7b 2b       	or	r23, r27
    63c4:	49 87       	std	Y+9, r20	; 0x09
    63c6:	5a 87       	std	Y+10, r21	; 0x0a
    63c8:	6b 87       	std	Y+11, r22	; 0x0b
    63ca:	7c 87       	std	Y+12, r23	; 0x0c
    63cc:	29 85       	ldd	r18, Y+9	; 0x09
    63ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    63d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    63d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    63d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    63d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    63d8:	af 85       	ldd	r26, Y+15	; 0x0f
    63da:	98 89       	ldd	r25, Y+16	; 0x10
    63dc:	8a 2f       	mov	r24, r26
    63de:	60 96       	adiw	r28, 0x10	; 16
    63e0:	0f b6       	in	r0, 0x3f	; 63
    63e2:	f8 94       	cli
    63e4:	de bf       	out	0x3e, r29	; 62
    63e6:	0f be       	out	0x3f, r0	; 63
    63e8:	cd bf       	out	0x3d, r28	; 61
    63ea:	cf 91       	pop	r28
    63ec:	df 91       	pop	r29
    63ee:	0f 91       	pop	r16
    63f0:	ff 90       	pop	r15
    63f2:	ef 90       	pop	r14
    63f4:	08 95       	ret

000063f6 <__subsf3>:
    63f6:	50 58       	subi	r21, 0x80	; 128

000063f8 <__addsf3>:
    63f8:	bb 27       	eor	r27, r27
    63fa:	aa 27       	eor	r26, r26
    63fc:	0e d0       	rcall	.+28     	; 0x641a <__addsf3x>
    63fe:	4d c1       	rjmp	.+666    	; 0x669a <__fp_round>
    6400:	3e d1       	rcall	.+636    	; 0x667e <__fp_pscA>
    6402:	30 f0       	brcs	.+12     	; 0x6410 <__addsf3+0x18>
    6404:	43 d1       	rcall	.+646    	; 0x668c <__fp_pscB>
    6406:	20 f0       	brcs	.+8      	; 0x6410 <__addsf3+0x18>
    6408:	31 f4       	brne	.+12     	; 0x6416 <__addsf3+0x1e>
    640a:	9f 3f       	cpi	r25, 0xFF	; 255
    640c:	11 f4       	brne	.+4      	; 0x6412 <__addsf3+0x1a>
    640e:	1e f4       	brtc	.+6      	; 0x6416 <__addsf3+0x1e>
    6410:	33 c1       	rjmp	.+614    	; 0x6678 <__fp_nan>
    6412:	0e f4       	brtc	.+2      	; 0x6416 <__addsf3+0x1e>
    6414:	e0 95       	com	r30
    6416:	e7 fb       	bst	r30, 7
    6418:	29 c1       	rjmp	.+594    	; 0x666c <__fp_inf>

0000641a <__addsf3x>:
    641a:	e9 2f       	mov	r30, r25
    641c:	4f d1       	rcall	.+670    	; 0x66bc <__fp_split3>
    641e:	80 f3       	brcs	.-32     	; 0x6400 <__addsf3+0x8>
    6420:	ba 17       	cp	r27, r26
    6422:	62 07       	cpc	r22, r18
    6424:	73 07       	cpc	r23, r19
    6426:	84 07       	cpc	r24, r20
    6428:	95 07       	cpc	r25, r21
    642a:	18 f0       	brcs	.+6      	; 0x6432 <__addsf3x+0x18>
    642c:	71 f4       	brne	.+28     	; 0x644a <__addsf3x+0x30>
    642e:	9e f5       	brtc	.+102    	; 0x6496 <__addsf3x+0x7c>
    6430:	67 c1       	rjmp	.+718    	; 0x6700 <__fp_zero>
    6432:	0e f4       	brtc	.+2      	; 0x6436 <__addsf3x+0x1c>
    6434:	e0 95       	com	r30
    6436:	0b 2e       	mov	r0, r27
    6438:	ba 2f       	mov	r27, r26
    643a:	a0 2d       	mov	r26, r0
    643c:	0b 01       	movw	r0, r22
    643e:	b9 01       	movw	r22, r18
    6440:	90 01       	movw	r18, r0
    6442:	0c 01       	movw	r0, r24
    6444:	ca 01       	movw	r24, r20
    6446:	a0 01       	movw	r20, r0
    6448:	11 24       	eor	r1, r1
    644a:	ff 27       	eor	r31, r31
    644c:	59 1b       	sub	r21, r25
    644e:	99 f0       	breq	.+38     	; 0x6476 <__addsf3x+0x5c>
    6450:	59 3f       	cpi	r21, 0xF9	; 249
    6452:	50 f4       	brcc	.+20     	; 0x6468 <__addsf3x+0x4e>
    6454:	50 3e       	cpi	r21, 0xE0	; 224
    6456:	68 f1       	brcs	.+90     	; 0x64b2 <__addsf3x+0x98>
    6458:	1a 16       	cp	r1, r26
    645a:	f0 40       	sbci	r31, 0x00	; 0
    645c:	a2 2f       	mov	r26, r18
    645e:	23 2f       	mov	r18, r19
    6460:	34 2f       	mov	r19, r20
    6462:	44 27       	eor	r20, r20
    6464:	58 5f       	subi	r21, 0xF8	; 248
    6466:	f3 cf       	rjmp	.-26     	; 0x644e <__addsf3x+0x34>
    6468:	46 95       	lsr	r20
    646a:	37 95       	ror	r19
    646c:	27 95       	ror	r18
    646e:	a7 95       	ror	r26
    6470:	f0 40       	sbci	r31, 0x00	; 0
    6472:	53 95       	inc	r21
    6474:	c9 f7       	brne	.-14     	; 0x6468 <__addsf3x+0x4e>
    6476:	7e f4       	brtc	.+30     	; 0x6496 <__addsf3x+0x7c>
    6478:	1f 16       	cp	r1, r31
    647a:	ba 0b       	sbc	r27, r26
    647c:	62 0b       	sbc	r22, r18
    647e:	73 0b       	sbc	r23, r19
    6480:	84 0b       	sbc	r24, r20
    6482:	ba f0       	brmi	.+46     	; 0x64b2 <__addsf3x+0x98>
    6484:	91 50       	subi	r25, 0x01	; 1
    6486:	a1 f0       	breq	.+40     	; 0x64b0 <__addsf3x+0x96>
    6488:	ff 0f       	add	r31, r31
    648a:	bb 1f       	adc	r27, r27
    648c:	66 1f       	adc	r22, r22
    648e:	77 1f       	adc	r23, r23
    6490:	88 1f       	adc	r24, r24
    6492:	c2 f7       	brpl	.-16     	; 0x6484 <__addsf3x+0x6a>
    6494:	0e c0       	rjmp	.+28     	; 0x64b2 <__addsf3x+0x98>
    6496:	ba 0f       	add	r27, r26
    6498:	62 1f       	adc	r22, r18
    649a:	73 1f       	adc	r23, r19
    649c:	84 1f       	adc	r24, r20
    649e:	48 f4       	brcc	.+18     	; 0x64b2 <__addsf3x+0x98>
    64a0:	87 95       	ror	r24
    64a2:	77 95       	ror	r23
    64a4:	67 95       	ror	r22
    64a6:	b7 95       	ror	r27
    64a8:	f7 95       	ror	r31
    64aa:	9e 3f       	cpi	r25, 0xFE	; 254
    64ac:	08 f0       	brcs	.+2      	; 0x64b0 <__addsf3x+0x96>
    64ae:	b3 cf       	rjmp	.-154    	; 0x6416 <__addsf3+0x1e>
    64b0:	93 95       	inc	r25
    64b2:	88 0f       	add	r24, r24
    64b4:	08 f0       	brcs	.+2      	; 0x64b8 <__addsf3x+0x9e>
    64b6:	99 27       	eor	r25, r25
    64b8:	ee 0f       	add	r30, r30
    64ba:	97 95       	ror	r25
    64bc:	87 95       	ror	r24
    64be:	08 95       	ret

000064c0 <__divsf3>:
    64c0:	0c d0       	rcall	.+24     	; 0x64da <__divsf3x>
    64c2:	eb c0       	rjmp	.+470    	; 0x669a <__fp_round>
    64c4:	e3 d0       	rcall	.+454    	; 0x668c <__fp_pscB>
    64c6:	40 f0       	brcs	.+16     	; 0x64d8 <__divsf3+0x18>
    64c8:	da d0       	rcall	.+436    	; 0x667e <__fp_pscA>
    64ca:	30 f0       	brcs	.+12     	; 0x64d8 <__divsf3+0x18>
    64cc:	21 f4       	brne	.+8      	; 0x64d6 <__divsf3+0x16>
    64ce:	5f 3f       	cpi	r21, 0xFF	; 255
    64d0:	19 f0       	breq	.+6      	; 0x64d8 <__divsf3+0x18>
    64d2:	cc c0       	rjmp	.+408    	; 0x666c <__fp_inf>
    64d4:	51 11       	cpse	r21, r1
    64d6:	15 c1       	rjmp	.+554    	; 0x6702 <__fp_szero>
    64d8:	cf c0       	rjmp	.+414    	; 0x6678 <__fp_nan>

000064da <__divsf3x>:
    64da:	f0 d0       	rcall	.+480    	; 0x66bc <__fp_split3>
    64dc:	98 f3       	brcs	.-26     	; 0x64c4 <__divsf3+0x4>

000064de <__divsf3_pse>:
    64de:	99 23       	and	r25, r25
    64e0:	c9 f3       	breq	.-14     	; 0x64d4 <__divsf3+0x14>
    64e2:	55 23       	and	r21, r21
    64e4:	b1 f3       	breq	.-20     	; 0x64d2 <__divsf3+0x12>
    64e6:	95 1b       	sub	r25, r21
    64e8:	55 0b       	sbc	r21, r21
    64ea:	bb 27       	eor	r27, r27
    64ec:	aa 27       	eor	r26, r26
    64ee:	62 17       	cp	r22, r18
    64f0:	73 07       	cpc	r23, r19
    64f2:	84 07       	cpc	r24, r20
    64f4:	38 f0       	brcs	.+14     	; 0x6504 <__divsf3_pse+0x26>
    64f6:	9f 5f       	subi	r25, 0xFF	; 255
    64f8:	5f 4f       	sbci	r21, 0xFF	; 255
    64fa:	22 0f       	add	r18, r18
    64fc:	33 1f       	adc	r19, r19
    64fe:	44 1f       	adc	r20, r20
    6500:	aa 1f       	adc	r26, r26
    6502:	a9 f3       	breq	.-22     	; 0x64ee <__divsf3_pse+0x10>
    6504:	33 d0       	rcall	.+102    	; 0x656c <__divsf3_pse+0x8e>
    6506:	0e 2e       	mov	r0, r30
    6508:	3a f0       	brmi	.+14     	; 0x6518 <__divsf3_pse+0x3a>
    650a:	e0 e8       	ldi	r30, 0x80	; 128
    650c:	30 d0       	rcall	.+96     	; 0x656e <__divsf3_pse+0x90>
    650e:	91 50       	subi	r25, 0x01	; 1
    6510:	50 40       	sbci	r21, 0x00	; 0
    6512:	e6 95       	lsr	r30
    6514:	00 1c       	adc	r0, r0
    6516:	ca f7       	brpl	.-14     	; 0x650a <__divsf3_pse+0x2c>
    6518:	29 d0       	rcall	.+82     	; 0x656c <__divsf3_pse+0x8e>
    651a:	fe 2f       	mov	r31, r30
    651c:	27 d0       	rcall	.+78     	; 0x656c <__divsf3_pse+0x8e>
    651e:	66 0f       	add	r22, r22
    6520:	77 1f       	adc	r23, r23
    6522:	88 1f       	adc	r24, r24
    6524:	bb 1f       	adc	r27, r27
    6526:	26 17       	cp	r18, r22
    6528:	37 07       	cpc	r19, r23
    652a:	48 07       	cpc	r20, r24
    652c:	ab 07       	cpc	r26, r27
    652e:	b0 e8       	ldi	r27, 0x80	; 128
    6530:	09 f0       	breq	.+2      	; 0x6534 <__divsf3_pse+0x56>
    6532:	bb 0b       	sbc	r27, r27
    6534:	80 2d       	mov	r24, r0
    6536:	bf 01       	movw	r22, r30
    6538:	ff 27       	eor	r31, r31
    653a:	93 58       	subi	r25, 0x83	; 131
    653c:	5f 4f       	sbci	r21, 0xFF	; 255
    653e:	2a f0       	brmi	.+10     	; 0x654a <__divsf3_pse+0x6c>
    6540:	9e 3f       	cpi	r25, 0xFE	; 254
    6542:	51 05       	cpc	r21, r1
    6544:	68 f0       	brcs	.+26     	; 0x6560 <__divsf3_pse+0x82>
    6546:	92 c0       	rjmp	.+292    	; 0x666c <__fp_inf>
    6548:	dc c0       	rjmp	.+440    	; 0x6702 <__fp_szero>
    654a:	5f 3f       	cpi	r21, 0xFF	; 255
    654c:	ec f3       	brlt	.-6      	; 0x6548 <__divsf3_pse+0x6a>
    654e:	98 3e       	cpi	r25, 0xE8	; 232
    6550:	dc f3       	brlt	.-10     	; 0x6548 <__divsf3_pse+0x6a>
    6552:	86 95       	lsr	r24
    6554:	77 95       	ror	r23
    6556:	67 95       	ror	r22
    6558:	b7 95       	ror	r27
    655a:	f7 95       	ror	r31
    655c:	9f 5f       	subi	r25, 0xFF	; 255
    655e:	c9 f7       	brne	.-14     	; 0x6552 <__divsf3_pse+0x74>
    6560:	88 0f       	add	r24, r24
    6562:	91 1d       	adc	r25, r1
    6564:	96 95       	lsr	r25
    6566:	87 95       	ror	r24
    6568:	97 f9       	bld	r25, 7
    656a:	08 95       	ret
    656c:	e1 e0       	ldi	r30, 0x01	; 1
    656e:	66 0f       	add	r22, r22
    6570:	77 1f       	adc	r23, r23
    6572:	88 1f       	adc	r24, r24
    6574:	bb 1f       	adc	r27, r27
    6576:	62 17       	cp	r22, r18
    6578:	73 07       	cpc	r23, r19
    657a:	84 07       	cpc	r24, r20
    657c:	ba 07       	cpc	r27, r26
    657e:	20 f0       	brcs	.+8      	; 0x6588 <__divsf3_pse+0xaa>
    6580:	62 1b       	sub	r22, r18
    6582:	73 0b       	sbc	r23, r19
    6584:	84 0b       	sbc	r24, r20
    6586:	ba 0b       	sbc	r27, r26
    6588:	ee 1f       	adc	r30, r30
    658a:	88 f7       	brcc	.-30     	; 0x656e <__divsf3_pse+0x90>
    658c:	e0 95       	com	r30
    658e:	08 95       	ret

00006590 <__fixsfsi>:
    6590:	04 d0       	rcall	.+8      	; 0x659a <__fixunssfsi>
    6592:	68 94       	set
    6594:	b1 11       	cpse	r27, r1
    6596:	b5 c0       	rjmp	.+362    	; 0x6702 <__fp_szero>
    6598:	08 95       	ret

0000659a <__fixunssfsi>:
    659a:	98 d0       	rcall	.+304    	; 0x66cc <__fp_splitA>
    659c:	88 f0       	brcs	.+34     	; 0x65c0 <__fixunssfsi+0x26>
    659e:	9f 57       	subi	r25, 0x7F	; 127
    65a0:	90 f0       	brcs	.+36     	; 0x65c6 <__fixunssfsi+0x2c>
    65a2:	b9 2f       	mov	r27, r25
    65a4:	99 27       	eor	r25, r25
    65a6:	b7 51       	subi	r27, 0x17	; 23
    65a8:	a0 f0       	brcs	.+40     	; 0x65d2 <__fixunssfsi+0x38>
    65aa:	d1 f0       	breq	.+52     	; 0x65e0 <__fixunssfsi+0x46>
    65ac:	66 0f       	add	r22, r22
    65ae:	77 1f       	adc	r23, r23
    65b0:	88 1f       	adc	r24, r24
    65b2:	99 1f       	adc	r25, r25
    65b4:	1a f0       	brmi	.+6      	; 0x65bc <__fixunssfsi+0x22>
    65b6:	ba 95       	dec	r27
    65b8:	c9 f7       	brne	.-14     	; 0x65ac <__fixunssfsi+0x12>
    65ba:	12 c0       	rjmp	.+36     	; 0x65e0 <__fixunssfsi+0x46>
    65bc:	b1 30       	cpi	r27, 0x01	; 1
    65be:	81 f0       	breq	.+32     	; 0x65e0 <__fixunssfsi+0x46>
    65c0:	9f d0       	rcall	.+318    	; 0x6700 <__fp_zero>
    65c2:	b1 e0       	ldi	r27, 0x01	; 1
    65c4:	08 95       	ret
    65c6:	9c c0       	rjmp	.+312    	; 0x6700 <__fp_zero>
    65c8:	67 2f       	mov	r22, r23
    65ca:	78 2f       	mov	r23, r24
    65cc:	88 27       	eor	r24, r24
    65ce:	b8 5f       	subi	r27, 0xF8	; 248
    65d0:	39 f0       	breq	.+14     	; 0x65e0 <__fixunssfsi+0x46>
    65d2:	b9 3f       	cpi	r27, 0xF9	; 249
    65d4:	cc f3       	brlt	.-14     	; 0x65c8 <__fixunssfsi+0x2e>
    65d6:	86 95       	lsr	r24
    65d8:	77 95       	ror	r23
    65da:	67 95       	ror	r22
    65dc:	b3 95       	inc	r27
    65de:	d9 f7       	brne	.-10     	; 0x65d6 <__fixunssfsi+0x3c>
    65e0:	3e f4       	brtc	.+14     	; 0x65f0 <__fixunssfsi+0x56>
    65e2:	90 95       	com	r25
    65e4:	80 95       	com	r24
    65e6:	70 95       	com	r23
    65e8:	61 95       	neg	r22
    65ea:	7f 4f       	sbci	r23, 0xFF	; 255
    65ec:	8f 4f       	sbci	r24, 0xFF	; 255
    65ee:	9f 4f       	sbci	r25, 0xFF	; 255
    65f0:	08 95       	ret

000065f2 <__floatunsisf>:
    65f2:	e8 94       	clt
    65f4:	09 c0       	rjmp	.+18     	; 0x6608 <__floatsisf+0x12>

000065f6 <__floatsisf>:
    65f6:	97 fb       	bst	r25, 7
    65f8:	3e f4       	brtc	.+14     	; 0x6608 <__floatsisf+0x12>
    65fa:	90 95       	com	r25
    65fc:	80 95       	com	r24
    65fe:	70 95       	com	r23
    6600:	61 95       	neg	r22
    6602:	7f 4f       	sbci	r23, 0xFF	; 255
    6604:	8f 4f       	sbci	r24, 0xFF	; 255
    6606:	9f 4f       	sbci	r25, 0xFF	; 255
    6608:	99 23       	and	r25, r25
    660a:	a9 f0       	breq	.+42     	; 0x6636 <__floatsisf+0x40>
    660c:	f9 2f       	mov	r31, r25
    660e:	96 e9       	ldi	r25, 0x96	; 150
    6610:	bb 27       	eor	r27, r27
    6612:	93 95       	inc	r25
    6614:	f6 95       	lsr	r31
    6616:	87 95       	ror	r24
    6618:	77 95       	ror	r23
    661a:	67 95       	ror	r22
    661c:	b7 95       	ror	r27
    661e:	f1 11       	cpse	r31, r1
    6620:	f8 cf       	rjmp	.-16     	; 0x6612 <__floatsisf+0x1c>
    6622:	fa f4       	brpl	.+62     	; 0x6662 <__floatsisf+0x6c>
    6624:	bb 0f       	add	r27, r27
    6626:	11 f4       	brne	.+4      	; 0x662c <__floatsisf+0x36>
    6628:	60 ff       	sbrs	r22, 0
    662a:	1b c0       	rjmp	.+54     	; 0x6662 <__floatsisf+0x6c>
    662c:	6f 5f       	subi	r22, 0xFF	; 255
    662e:	7f 4f       	sbci	r23, 0xFF	; 255
    6630:	8f 4f       	sbci	r24, 0xFF	; 255
    6632:	9f 4f       	sbci	r25, 0xFF	; 255
    6634:	16 c0       	rjmp	.+44     	; 0x6662 <__floatsisf+0x6c>
    6636:	88 23       	and	r24, r24
    6638:	11 f0       	breq	.+4      	; 0x663e <__floatsisf+0x48>
    663a:	96 e9       	ldi	r25, 0x96	; 150
    663c:	11 c0       	rjmp	.+34     	; 0x6660 <__floatsisf+0x6a>
    663e:	77 23       	and	r23, r23
    6640:	21 f0       	breq	.+8      	; 0x664a <__floatsisf+0x54>
    6642:	9e e8       	ldi	r25, 0x8E	; 142
    6644:	87 2f       	mov	r24, r23
    6646:	76 2f       	mov	r23, r22
    6648:	05 c0       	rjmp	.+10     	; 0x6654 <__floatsisf+0x5e>
    664a:	66 23       	and	r22, r22
    664c:	71 f0       	breq	.+28     	; 0x666a <__floatsisf+0x74>
    664e:	96 e8       	ldi	r25, 0x86	; 134
    6650:	86 2f       	mov	r24, r22
    6652:	70 e0       	ldi	r23, 0x00	; 0
    6654:	60 e0       	ldi	r22, 0x00	; 0
    6656:	2a f0       	brmi	.+10     	; 0x6662 <__floatsisf+0x6c>
    6658:	9a 95       	dec	r25
    665a:	66 0f       	add	r22, r22
    665c:	77 1f       	adc	r23, r23
    665e:	88 1f       	adc	r24, r24
    6660:	da f7       	brpl	.-10     	; 0x6658 <__floatsisf+0x62>
    6662:	88 0f       	add	r24, r24
    6664:	96 95       	lsr	r25
    6666:	87 95       	ror	r24
    6668:	97 f9       	bld	r25, 7
    666a:	08 95       	ret

0000666c <__fp_inf>:
    666c:	97 f9       	bld	r25, 7
    666e:	9f 67       	ori	r25, 0x7F	; 127
    6670:	80 e8       	ldi	r24, 0x80	; 128
    6672:	70 e0       	ldi	r23, 0x00	; 0
    6674:	60 e0       	ldi	r22, 0x00	; 0
    6676:	08 95       	ret

00006678 <__fp_nan>:
    6678:	9f ef       	ldi	r25, 0xFF	; 255
    667a:	80 ec       	ldi	r24, 0xC0	; 192
    667c:	08 95       	ret

0000667e <__fp_pscA>:
    667e:	00 24       	eor	r0, r0
    6680:	0a 94       	dec	r0
    6682:	16 16       	cp	r1, r22
    6684:	17 06       	cpc	r1, r23
    6686:	18 06       	cpc	r1, r24
    6688:	09 06       	cpc	r0, r25
    668a:	08 95       	ret

0000668c <__fp_pscB>:
    668c:	00 24       	eor	r0, r0
    668e:	0a 94       	dec	r0
    6690:	12 16       	cp	r1, r18
    6692:	13 06       	cpc	r1, r19
    6694:	14 06       	cpc	r1, r20
    6696:	05 06       	cpc	r0, r21
    6698:	08 95       	ret

0000669a <__fp_round>:
    669a:	09 2e       	mov	r0, r25
    669c:	03 94       	inc	r0
    669e:	00 0c       	add	r0, r0
    66a0:	11 f4       	brne	.+4      	; 0x66a6 <__fp_round+0xc>
    66a2:	88 23       	and	r24, r24
    66a4:	52 f0       	brmi	.+20     	; 0x66ba <__fp_round+0x20>
    66a6:	bb 0f       	add	r27, r27
    66a8:	40 f4       	brcc	.+16     	; 0x66ba <__fp_round+0x20>
    66aa:	bf 2b       	or	r27, r31
    66ac:	11 f4       	brne	.+4      	; 0x66b2 <__fp_round+0x18>
    66ae:	60 ff       	sbrs	r22, 0
    66b0:	04 c0       	rjmp	.+8      	; 0x66ba <__fp_round+0x20>
    66b2:	6f 5f       	subi	r22, 0xFF	; 255
    66b4:	7f 4f       	sbci	r23, 0xFF	; 255
    66b6:	8f 4f       	sbci	r24, 0xFF	; 255
    66b8:	9f 4f       	sbci	r25, 0xFF	; 255
    66ba:	08 95       	ret

000066bc <__fp_split3>:
    66bc:	57 fd       	sbrc	r21, 7
    66be:	90 58       	subi	r25, 0x80	; 128
    66c0:	44 0f       	add	r20, r20
    66c2:	55 1f       	adc	r21, r21
    66c4:	59 f0       	breq	.+22     	; 0x66dc <__fp_splitA+0x10>
    66c6:	5f 3f       	cpi	r21, 0xFF	; 255
    66c8:	71 f0       	breq	.+28     	; 0x66e6 <__fp_splitA+0x1a>
    66ca:	47 95       	ror	r20

000066cc <__fp_splitA>:
    66cc:	88 0f       	add	r24, r24
    66ce:	97 fb       	bst	r25, 7
    66d0:	99 1f       	adc	r25, r25
    66d2:	61 f0       	breq	.+24     	; 0x66ec <__fp_splitA+0x20>
    66d4:	9f 3f       	cpi	r25, 0xFF	; 255
    66d6:	79 f0       	breq	.+30     	; 0x66f6 <__fp_splitA+0x2a>
    66d8:	87 95       	ror	r24
    66da:	08 95       	ret
    66dc:	12 16       	cp	r1, r18
    66de:	13 06       	cpc	r1, r19
    66e0:	14 06       	cpc	r1, r20
    66e2:	55 1f       	adc	r21, r21
    66e4:	f2 cf       	rjmp	.-28     	; 0x66ca <__fp_split3+0xe>
    66e6:	46 95       	lsr	r20
    66e8:	f1 df       	rcall	.-30     	; 0x66cc <__fp_splitA>
    66ea:	08 c0       	rjmp	.+16     	; 0x66fc <__fp_splitA+0x30>
    66ec:	16 16       	cp	r1, r22
    66ee:	17 06       	cpc	r1, r23
    66f0:	18 06       	cpc	r1, r24
    66f2:	99 1f       	adc	r25, r25
    66f4:	f1 cf       	rjmp	.-30     	; 0x66d8 <__fp_splitA+0xc>
    66f6:	86 95       	lsr	r24
    66f8:	71 05       	cpc	r23, r1
    66fa:	61 05       	cpc	r22, r1
    66fc:	08 94       	sec
    66fe:	08 95       	ret

00006700 <__fp_zero>:
    6700:	e8 94       	clt

00006702 <__fp_szero>:
    6702:	bb 27       	eor	r27, r27
    6704:	66 27       	eor	r22, r22
    6706:	77 27       	eor	r23, r23
    6708:	cb 01       	movw	r24, r22
    670a:	97 f9       	bld	r25, 7
    670c:	08 95       	ret

0000670e <__mulsf3>:
    670e:	0b d0       	rcall	.+22     	; 0x6726 <__mulsf3x>
    6710:	c4 cf       	rjmp	.-120    	; 0x669a <__fp_round>
    6712:	b5 df       	rcall	.-150    	; 0x667e <__fp_pscA>
    6714:	28 f0       	brcs	.+10     	; 0x6720 <__mulsf3+0x12>
    6716:	ba df       	rcall	.-140    	; 0x668c <__fp_pscB>
    6718:	18 f0       	brcs	.+6      	; 0x6720 <__mulsf3+0x12>
    671a:	95 23       	and	r25, r21
    671c:	09 f0       	breq	.+2      	; 0x6720 <__mulsf3+0x12>
    671e:	a6 cf       	rjmp	.-180    	; 0x666c <__fp_inf>
    6720:	ab cf       	rjmp	.-170    	; 0x6678 <__fp_nan>
    6722:	11 24       	eor	r1, r1
    6724:	ee cf       	rjmp	.-36     	; 0x6702 <__fp_szero>

00006726 <__mulsf3x>:
    6726:	ca df       	rcall	.-108    	; 0x66bc <__fp_split3>
    6728:	a0 f3       	brcs	.-24     	; 0x6712 <__mulsf3+0x4>

0000672a <__mulsf3_pse>:
    672a:	95 9f       	mul	r25, r21
    672c:	d1 f3       	breq	.-12     	; 0x6722 <__mulsf3+0x14>
    672e:	95 0f       	add	r25, r21
    6730:	50 e0       	ldi	r21, 0x00	; 0
    6732:	55 1f       	adc	r21, r21
    6734:	62 9f       	mul	r22, r18
    6736:	f0 01       	movw	r30, r0
    6738:	72 9f       	mul	r23, r18
    673a:	bb 27       	eor	r27, r27
    673c:	f0 0d       	add	r31, r0
    673e:	b1 1d       	adc	r27, r1
    6740:	63 9f       	mul	r22, r19
    6742:	aa 27       	eor	r26, r26
    6744:	f0 0d       	add	r31, r0
    6746:	b1 1d       	adc	r27, r1
    6748:	aa 1f       	adc	r26, r26
    674a:	64 9f       	mul	r22, r20
    674c:	66 27       	eor	r22, r22
    674e:	b0 0d       	add	r27, r0
    6750:	a1 1d       	adc	r26, r1
    6752:	66 1f       	adc	r22, r22
    6754:	82 9f       	mul	r24, r18
    6756:	22 27       	eor	r18, r18
    6758:	b0 0d       	add	r27, r0
    675a:	a1 1d       	adc	r26, r1
    675c:	62 1f       	adc	r22, r18
    675e:	73 9f       	mul	r23, r19
    6760:	b0 0d       	add	r27, r0
    6762:	a1 1d       	adc	r26, r1
    6764:	62 1f       	adc	r22, r18
    6766:	83 9f       	mul	r24, r19
    6768:	a0 0d       	add	r26, r0
    676a:	61 1d       	adc	r22, r1
    676c:	22 1f       	adc	r18, r18
    676e:	74 9f       	mul	r23, r20
    6770:	33 27       	eor	r19, r19
    6772:	a0 0d       	add	r26, r0
    6774:	61 1d       	adc	r22, r1
    6776:	23 1f       	adc	r18, r19
    6778:	84 9f       	mul	r24, r20
    677a:	60 0d       	add	r22, r0
    677c:	21 1d       	adc	r18, r1
    677e:	82 2f       	mov	r24, r18
    6780:	76 2f       	mov	r23, r22
    6782:	6a 2f       	mov	r22, r26
    6784:	11 24       	eor	r1, r1
    6786:	9f 57       	subi	r25, 0x7F	; 127
    6788:	50 40       	sbci	r21, 0x00	; 0
    678a:	8a f0       	brmi	.+34     	; 0x67ae <__mulsf3_pse+0x84>
    678c:	e1 f0       	breq	.+56     	; 0x67c6 <__mulsf3_pse+0x9c>
    678e:	88 23       	and	r24, r24
    6790:	4a f0       	brmi	.+18     	; 0x67a4 <__mulsf3_pse+0x7a>
    6792:	ee 0f       	add	r30, r30
    6794:	ff 1f       	adc	r31, r31
    6796:	bb 1f       	adc	r27, r27
    6798:	66 1f       	adc	r22, r22
    679a:	77 1f       	adc	r23, r23
    679c:	88 1f       	adc	r24, r24
    679e:	91 50       	subi	r25, 0x01	; 1
    67a0:	50 40       	sbci	r21, 0x00	; 0
    67a2:	a9 f7       	brne	.-22     	; 0x678e <__mulsf3_pse+0x64>
    67a4:	9e 3f       	cpi	r25, 0xFE	; 254
    67a6:	51 05       	cpc	r21, r1
    67a8:	70 f0       	brcs	.+28     	; 0x67c6 <__mulsf3_pse+0x9c>
    67aa:	60 cf       	rjmp	.-320    	; 0x666c <__fp_inf>
    67ac:	aa cf       	rjmp	.-172    	; 0x6702 <__fp_szero>
    67ae:	5f 3f       	cpi	r21, 0xFF	; 255
    67b0:	ec f3       	brlt	.-6      	; 0x67ac <__mulsf3_pse+0x82>
    67b2:	98 3e       	cpi	r25, 0xE8	; 232
    67b4:	dc f3       	brlt	.-10     	; 0x67ac <__mulsf3_pse+0x82>
    67b6:	86 95       	lsr	r24
    67b8:	77 95       	ror	r23
    67ba:	67 95       	ror	r22
    67bc:	b7 95       	ror	r27
    67be:	f7 95       	ror	r31
    67c0:	e7 95       	ror	r30
    67c2:	9f 5f       	subi	r25, 0xFF	; 255
    67c4:	c1 f7       	brne	.-16     	; 0x67b6 <__mulsf3_pse+0x8c>
    67c6:	fe 2b       	or	r31, r30
    67c8:	88 0f       	add	r24, r24
    67ca:	91 1d       	adc	r25, r1
    67cc:	96 95       	lsr	r25
    67ce:	87 95       	ror	r24
    67d0:	97 f9       	bld	r25, 7
    67d2:	08 95       	ret

000067d4 <__mulsi3>:
    67d4:	62 9f       	mul	r22, r18
    67d6:	d0 01       	movw	r26, r0
    67d8:	73 9f       	mul	r23, r19
    67da:	f0 01       	movw	r30, r0
    67dc:	82 9f       	mul	r24, r18
    67de:	e0 0d       	add	r30, r0
    67e0:	f1 1d       	adc	r31, r1
    67e2:	64 9f       	mul	r22, r20
    67e4:	e0 0d       	add	r30, r0
    67e6:	f1 1d       	adc	r31, r1
    67e8:	92 9f       	mul	r25, r18
    67ea:	f0 0d       	add	r31, r0
    67ec:	83 9f       	mul	r24, r19
    67ee:	f0 0d       	add	r31, r0
    67f0:	74 9f       	mul	r23, r20
    67f2:	f0 0d       	add	r31, r0
    67f4:	65 9f       	mul	r22, r21
    67f6:	f0 0d       	add	r31, r0
    67f8:	99 27       	eor	r25, r25
    67fa:	72 9f       	mul	r23, r18
    67fc:	b0 0d       	add	r27, r0
    67fe:	e1 1d       	adc	r30, r1
    6800:	f9 1f       	adc	r31, r25
    6802:	63 9f       	mul	r22, r19
    6804:	b0 0d       	add	r27, r0
    6806:	e1 1d       	adc	r30, r1
    6808:	f9 1f       	adc	r31, r25
    680a:	bd 01       	movw	r22, r26
    680c:	cf 01       	movw	r24, r30
    680e:	11 24       	eor	r1, r1
    6810:	08 95       	ret

00006812 <__udivmodhi4>:
    6812:	aa 1b       	sub	r26, r26
    6814:	bb 1b       	sub	r27, r27
    6816:	51 e1       	ldi	r21, 0x11	; 17
    6818:	07 c0       	rjmp	.+14     	; 0x6828 <__udivmodhi4_ep>

0000681a <__udivmodhi4_loop>:
    681a:	aa 1f       	adc	r26, r26
    681c:	bb 1f       	adc	r27, r27
    681e:	a6 17       	cp	r26, r22
    6820:	b7 07       	cpc	r27, r23
    6822:	10 f0       	brcs	.+4      	; 0x6828 <__udivmodhi4_ep>
    6824:	a6 1b       	sub	r26, r22
    6826:	b7 0b       	sbc	r27, r23

00006828 <__udivmodhi4_ep>:
    6828:	88 1f       	adc	r24, r24
    682a:	99 1f       	adc	r25, r25
    682c:	5a 95       	dec	r21
    682e:	a9 f7       	brne	.-22     	; 0x681a <__udivmodhi4_loop>
    6830:	80 95       	com	r24
    6832:	90 95       	com	r25
    6834:	bc 01       	movw	r22, r24
    6836:	cd 01       	movw	r24, r26
    6838:	08 95       	ret

0000683a <__divmodhi4>:
    683a:	97 fb       	bst	r25, 7
    683c:	09 2e       	mov	r0, r25
    683e:	07 26       	eor	r0, r23
    6840:	0a d0       	rcall	.+20     	; 0x6856 <__divmodhi4_neg1>
    6842:	77 fd       	sbrc	r23, 7
    6844:	04 d0       	rcall	.+8      	; 0x684e <__divmodhi4_neg2>
    6846:	e5 df       	rcall	.-54     	; 0x6812 <__udivmodhi4>
    6848:	06 d0       	rcall	.+12     	; 0x6856 <__divmodhi4_neg1>
    684a:	00 20       	and	r0, r0
    684c:	1a f4       	brpl	.+6      	; 0x6854 <__divmodhi4_exit>

0000684e <__divmodhi4_neg2>:
    684e:	70 95       	com	r23
    6850:	61 95       	neg	r22
    6852:	7f 4f       	sbci	r23, 0xFF	; 255

00006854 <__divmodhi4_exit>:
    6854:	08 95       	ret

00006856 <__divmodhi4_neg1>:
    6856:	f6 f7       	brtc	.-4      	; 0x6854 <__divmodhi4_exit>
    6858:	90 95       	com	r25
    685a:	81 95       	neg	r24
    685c:	9f 4f       	sbci	r25, 0xFF	; 255
    685e:	08 95       	ret

00006860 <__udivmodsi4>:
    6860:	a1 e2       	ldi	r26, 0x21	; 33
    6862:	1a 2e       	mov	r1, r26
    6864:	aa 1b       	sub	r26, r26
    6866:	bb 1b       	sub	r27, r27
    6868:	fd 01       	movw	r30, r26
    686a:	0d c0       	rjmp	.+26     	; 0x6886 <__udivmodsi4_ep>

0000686c <__udivmodsi4_loop>:
    686c:	aa 1f       	adc	r26, r26
    686e:	bb 1f       	adc	r27, r27
    6870:	ee 1f       	adc	r30, r30
    6872:	ff 1f       	adc	r31, r31
    6874:	a2 17       	cp	r26, r18
    6876:	b3 07       	cpc	r27, r19
    6878:	e4 07       	cpc	r30, r20
    687a:	f5 07       	cpc	r31, r21
    687c:	20 f0       	brcs	.+8      	; 0x6886 <__udivmodsi4_ep>
    687e:	a2 1b       	sub	r26, r18
    6880:	b3 0b       	sbc	r27, r19
    6882:	e4 0b       	sbc	r30, r20
    6884:	f5 0b       	sbc	r31, r21

00006886 <__udivmodsi4_ep>:
    6886:	66 1f       	adc	r22, r22
    6888:	77 1f       	adc	r23, r23
    688a:	88 1f       	adc	r24, r24
    688c:	99 1f       	adc	r25, r25
    688e:	1a 94       	dec	r1
    6890:	69 f7       	brne	.-38     	; 0x686c <__udivmodsi4_loop>
    6892:	60 95       	com	r22
    6894:	70 95       	com	r23
    6896:	80 95       	com	r24
    6898:	90 95       	com	r25
    689a:	9b 01       	movw	r18, r22
    689c:	ac 01       	movw	r20, r24
    689e:	bd 01       	movw	r22, r26
    68a0:	cf 01       	movw	r24, r30
    68a2:	08 95       	ret

000068a4 <do_rand>:
    68a4:	af 92       	push	r10
    68a6:	bf 92       	push	r11
    68a8:	cf 92       	push	r12
    68aa:	df 92       	push	r13
    68ac:	ef 92       	push	r14
    68ae:	ff 92       	push	r15
    68b0:	0f 93       	push	r16
    68b2:	1f 93       	push	r17
    68b4:	cf 93       	push	r28
    68b6:	df 93       	push	r29
    68b8:	ec 01       	movw	r28, r24
    68ba:	a8 80       	ld	r10, Y
    68bc:	b9 80       	ldd	r11, Y+1	; 0x01
    68be:	ca 80       	ldd	r12, Y+2	; 0x02
    68c0:	db 80       	ldd	r13, Y+3	; 0x03
    68c2:	a1 14       	cp	r10, r1
    68c4:	b1 04       	cpc	r11, r1
    68c6:	c1 04       	cpc	r12, r1
    68c8:	d1 04       	cpc	r13, r1
    68ca:	41 f4       	brne	.+16     	; 0x68dc <do_rand+0x38>
    68cc:	84 e2       	ldi	r24, 0x24	; 36
    68ce:	a8 2e       	mov	r10, r24
    68d0:	89 ed       	ldi	r24, 0xD9	; 217
    68d2:	b8 2e       	mov	r11, r24
    68d4:	8b e5       	ldi	r24, 0x5B	; 91
    68d6:	c8 2e       	mov	r12, r24
    68d8:	87 e0       	ldi	r24, 0x07	; 7
    68da:	d8 2e       	mov	r13, r24
    68dc:	c6 01       	movw	r24, r12
    68de:	b5 01       	movw	r22, r10
    68e0:	2d e1       	ldi	r18, 0x1D	; 29
    68e2:	33 ef       	ldi	r19, 0xF3	; 243
    68e4:	41 e0       	ldi	r20, 0x01	; 1
    68e6:	50 e0       	ldi	r21, 0x00	; 0
    68e8:	0e 94 21 3c 	call	0x7842	; 0x7842 <__divmodsi4>
    68ec:	27 ea       	ldi	r18, 0xA7	; 167
    68ee:	31 e4       	ldi	r19, 0x41	; 65
    68f0:	40 e0       	ldi	r20, 0x00	; 0
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__mulsi3>
    68f8:	7b 01       	movw	r14, r22
    68fa:	8c 01       	movw	r16, r24
    68fc:	c6 01       	movw	r24, r12
    68fe:	b5 01       	movw	r22, r10
    6900:	2d e1       	ldi	r18, 0x1D	; 29
    6902:	33 ef       	ldi	r19, 0xF3	; 243
    6904:	41 e0       	ldi	r20, 0x01	; 1
    6906:	50 e0       	ldi	r21, 0x00	; 0
    6908:	0e 94 21 3c 	call	0x7842	; 0x7842 <__divmodsi4>
    690c:	ca 01       	movw	r24, r20
    690e:	b9 01       	movw	r22, r18
    6910:	2c ee       	ldi	r18, 0xEC	; 236
    6912:	34 ef       	ldi	r19, 0xF4	; 244
    6914:	4f ef       	ldi	r20, 0xFF	; 255
    6916:	5f ef       	ldi	r21, 0xFF	; 255
    6918:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <__mulsi3>
    691c:	6e 0d       	add	r22, r14
    691e:	7f 1d       	adc	r23, r15
    6920:	80 1f       	adc	r24, r16
    6922:	91 1f       	adc	r25, r17
    6924:	97 ff       	sbrs	r25, 7
    6926:	04 c0       	rjmp	.+8      	; 0x6930 <do_rand+0x8c>
    6928:	61 50       	subi	r22, 0x01	; 1
    692a:	70 40       	sbci	r23, 0x00	; 0
    692c:	80 40       	sbci	r24, 0x00	; 0
    692e:	90 48       	sbci	r25, 0x80	; 128
    6930:	68 83       	st	Y, r22
    6932:	79 83       	std	Y+1, r23	; 0x01
    6934:	8a 83       	std	Y+2, r24	; 0x02
    6936:	9b 83       	std	Y+3, r25	; 0x03
    6938:	9b 01       	movw	r18, r22
    693a:	3f 77       	andi	r19, 0x7F	; 127
    693c:	c9 01       	movw	r24, r18
    693e:	df 91       	pop	r29
    6940:	cf 91       	pop	r28
    6942:	1f 91       	pop	r17
    6944:	0f 91       	pop	r16
    6946:	ff 90       	pop	r15
    6948:	ef 90       	pop	r14
    694a:	df 90       	pop	r13
    694c:	cf 90       	pop	r12
    694e:	bf 90       	pop	r11
    6950:	af 90       	pop	r10
    6952:	08 95       	ret

00006954 <rand_r>:
    6954:	0e 94 52 34 	call	0x68a4	; 0x68a4 <do_rand>
    6958:	08 95       	ret

0000695a <rand>:
    695a:	8d e1       	ldi	r24, 0x1D	; 29
    695c:	9c e0       	ldi	r25, 0x0C	; 12
    695e:	0e 94 52 34 	call	0x68a4	; 0x68a4 <do_rand>
    6962:	08 95       	ret

00006964 <srand>:
    6964:	a0 e0       	ldi	r26, 0x00	; 0
    6966:	b0 e0       	ldi	r27, 0x00	; 0
    6968:	80 93 1d 0c 	sts	0x0C1D, r24
    696c:	90 93 1e 0c 	sts	0x0C1E, r25
    6970:	a0 93 1f 0c 	sts	0x0C1F, r26
    6974:	b0 93 20 0c 	sts	0x0C20, r27
    6978:	08 95       	ret

0000697a <atoi>:
    697a:	fc 01       	movw	r30, r24
    697c:	88 27       	eor	r24, r24
    697e:	99 27       	eor	r25, r25
    6980:	e8 94       	clt
    6982:	21 91       	ld	r18, Z+
    6984:	20 32       	cpi	r18, 0x20	; 32
    6986:	e9 f3       	breq	.-6      	; 0x6982 <atoi+0x8>
    6988:	29 30       	cpi	r18, 0x09	; 9
    698a:	10 f0       	brcs	.+4      	; 0x6990 <atoi+0x16>
    698c:	2e 30       	cpi	r18, 0x0E	; 14
    698e:	c8 f3       	brcs	.-14     	; 0x6982 <atoi+0x8>
    6990:	2b 32       	cpi	r18, 0x2B	; 43
    6992:	41 f0       	breq	.+16     	; 0x69a4 <atoi+0x2a>
    6994:	2d 32       	cpi	r18, 0x2D	; 45
    6996:	39 f4       	brne	.+14     	; 0x69a6 <atoi+0x2c>
    6998:	68 94       	set
    699a:	04 c0       	rjmp	.+8      	; 0x69a4 <atoi+0x2a>
    699c:	0e 94 20 35 	call	0x6a40	; 0x6a40 <__mulhi_const_10>
    69a0:	82 0f       	add	r24, r18
    69a2:	91 1d       	adc	r25, r1
    69a4:	21 91       	ld	r18, Z+
    69a6:	20 53       	subi	r18, 0x30	; 48
    69a8:	2a 30       	cpi	r18, 0x0A	; 10
    69aa:	c0 f3       	brcs	.-16     	; 0x699c <atoi+0x22>
    69ac:	1e f4       	brtc	.+6      	; 0x69b4 <atoi+0x3a>
    69ae:	90 95       	com	r25
    69b0:	81 95       	neg	r24
    69b2:	9f 4f       	sbci	r25, 0xFF	; 255
    69b4:	08 95       	ret

000069b6 <memcpy>:
    69b6:	fb 01       	movw	r30, r22
    69b8:	dc 01       	movw	r26, r24
    69ba:	02 c0       	rjmp	.+4      	; 0x69c0 <memcpy+0xa>
    69bc:	01 90       	ld	r0, Z+
    69be:	0d 92       	st	X+, r0
    69c0:	41 50       	subi	r20, 0x01	; 1
    69c2:	50 40       	sbci	r21, 0x00	; 0
    69c4:	d8 f7       	brcc	.-10     	; 0x69bc <memcpy+0x6>
    69c6:	08 95       	ret

000069c8 <strchr>:
    69c8:	fc 01       	movw	r30, r24
    69ca:	81 91       	ld	r24, Z+
    69cc:	86 17       	cp	r24, r22
    69ce:	21 f0       	breq	.+8      	; 0x69d8 <strchr+0x10>
    69d0:	88 23       	and	r24, r24
    69d2:	d9 f7       	brne	.-10     	; 0x69ca <strchr+0x2>
    69d4:	99 27       	eor	r25, r25
    69d6:	08 95       	ret
    69d8:	31 97       	sbiw	r30, 0x01	; 1
    69da:	cf 01       	movw	r24, r30
    69dc:	08 95       	ret

000069de <strcmp>:
    69de:	fb 01       	movw	r30, r22
    69e0:	dc 01       	movw	r26, r24
    69e2:	8d 91       	ld	r24, X+
    69e4:	01 90       	ld	r0, Z+
    69e6:	80 19       	sub	r24, r0
    69e8:	01 10       	cpse	r0, r1
    69ea:	d9 f3       	breq	.-10     	; 0x69e2 <strcmp+0x4>
    69ec:	99 0b       	sbc	r25, r25
    69ee:	08 95       	ret

000069f0 <strcpy>:
    69f0:	fb 01       	movw	r30, r22
    69f2:	dc 01       	movw	r26, r24
    69f4:	01 90       	ld	r0, Z+
    69f6:	0d 92       	st	X+, r0
    69f8:	00 20       	and	r0, r0
    69fa:	e1 f7       	brne	.-8      	; 0x69f4 <strcpy+0x4>
    69fc:	08 95       	ret

000069fe <itoa>:
    69fe:	fb 01       	movw	r30, r22
    6a00:	9f 01       	movw	r18, r30
    6a02:	e8 94       	clt
    6a04:	42 30       	cpi	r20, 0x02	; 2
    6a06:	c4 f0       	brlt	.+48     	; 0x6a38 <itoa+0x3a>
    6a08:	45 32       	cpi	r20, 0x25	; 37
    6a0a:	b4 f4       	brge	.+44     	; 0x6a38 <itoa+0x3a>
    6a0c:	4a 30       	cpi	r20, 0x0A	; 10
    6a0e:	29 f4       	brne	.+10     	; 0x6a1a <itoa+0x1c>
    6a10:	97 fb       	bst	r25, 7
    6a12:	1e f4       	brtc	.+6      	; 0x6a1a <itoa+0x1c>
    6a14:	90 95       	com	r25
    6a16:	81 95       	neg	r24
    6a18:	9f 4f       	sbci	r25, 0xFF	; 255
    6a1a:	64 2f       	mov	r22, r20
    6a1c:	77 27       	eor	r23, r23
    6a1e:	0e 94 09 34 	call	0x6812	; 0x6812 <__udivmodhi4>
    6a22:	80 5d       	subi	r24, 0xD0	; 208
    6a24:	8a 33       	cpi	r24, 0x3A	; 58
    6a26:	0c f0       	brlt	.+2      	; 0x6a2a <itoa+0x2c>
    6a28:	89 5d       	subi	r24, 0xD9	; 217
    6a2a:	81 93       	st	Z+, r24
    6a2c:	cb 01       	movw	r24, r22
    6a2e:	00 97       	sbiw	r24, 0x00	; 0
    6a30:	a1 f7       	brne	.-24     	; 0x6a1a <itoa+0x1c>
    6a32:	16 f4       	brtc	.+4      	; 0x6a38 <itoa+0x3a>
    6a34:	5d e2       	ldi	r21, 0x2D	; 45
    6a36:	51 93       	st	Z+, r21
    6a38:	10 82       	st	Z, r1
    6a3a:	c9 01       	movw	r24, r18
    6a3c:	0c 94 28 3b 	jmp	0x7650	; 0x7650 <strrev>

00006a40 <__mulhi_const_10>:
    6a40:	7a e0       	ldi	r23, 0x0A	; 10
    6a42:	97 9f       	mul	r25, r23
    6a44:	90 2d       	mov	r25, r0
    6a46:	87 9f       	mul	r24, r23
    6a48:	80 2d       	mov	r24, r0
    6a4a:	91 0d       	add	r25, r1
    6a4c:	11 24       	eor	r1, r1
    6a4e:	08 95       	ret

00006a50 <fprintf>:
    6a50:	df 93       	push	r29
    6a52:	cf 93       	push	r28
    6a54:	cd b7       	in	r28, 0x3d	; 61
    6a56:	de b7       	in	r29, 0x3e	; 62
    6a58:	9e 01       	movw	r18, r28
    6a5a:	27 5f       	subi	r18, 0xF7	; 247
    6a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    6a60:	9e 81       	ldd	r25, Y+6	; 0x06
    6a62:	6f 81       	ldd	r22, Y+7	; 0x07
    6a64:	78 85       	ldd	r23, Y+8	; 0x08
    6a66:	a9 01       	movw	r20, r18
    6a68:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <vfprintf>
    6a6c:	cf 91       	pop	r28
    6a6e:	df 91       	pop	r29
    6a70:	08 95       	ret

00006a72 <fputs>:
    6a72:	ef 92       	push	r14
    6a74:	ff 92       	push	r15
    6a76:	0f 93       	push	r16
    6a78:	1f 93       	push	r17
    6a7a:	cf 93       	push	r28
    6a7c:	df 93       	push	r29
    6a7e:	7c 01       	movw	r14, r24
    6a80:	8b 01       	movw	r16, r22
    6a82:	db 01       	movw	r26, r22
    6a84:	13 96       	adiw	r26, 0x03	; 3
    6a86:	8c 91       	ld	r24, X
    6a88:	81 fd       	sbrc	r24, 1
    6a8a:	03 c0       	rjmp	.+6      	; 0x6a92 <fputs+0x20>
    6a8c:	cf ef       	ldi	r28, 0xFF	; 255
    6a8e:	df ef       	ldi	r29, 0xFF	; 255
    6a90:	13 c0       	rjmp	.+38     	; 0x6ab8 <fputs+0x46>
    6a92:	c0 e0       	ldi	r28, 0x00	; 0
    6a94:	d0 e0       	ldi	r29, 0x00	; 0
    6a96:	0b c0       	rjmp	.+22     	; 0x6aae <fputs+0x3c>
    6a98:	d8 01       	movw	r26, r16
    6a9a:	18 96       	adiw	r26, 0x08	; 8
    6a9c:	ed 91       	ld	r30, X+
    6a9e:	fc 91       	ld	r31, X
    6aa0:	19 97       	sbiw	r26, 0x09	; 9
    6aa2:	b8 01       	movw	r22, r16
    6aa4:	09 95       	icall
    6aa6:	89 2b       	or	r24, r25
    6aa8:	11 f0       	breq	.+4      	; 0x6aae <fputs+0x3c>
    6aaa:	cf ef       	ldi	r28, 0xFF	; 255
    6aac:	df ef       	ldi	r29, 0xFF	; 255
    6aae:	f7 01       	movw	r30, r14
    6ab0:	81 91       	ld	r24, Z+
    6ab2:	7f 01       	movw	r14, r30
    6ab4:	88 23       	and	r24, r24
    6ab6:	81 f7       	brne	.-32     	; 0x6a98 <fputs+0x26>
    6ab8:	ce 01       	movw	r24, r28
    6aba:	df 91       	pop	r29
    6abc:	cf 91       	pop	r28
    6abe:	1f 91       	pop	r17
    6ac0:	0f 91       	pop	r16
    6ac2:	ff 90       	pop	r15
    6ac4:	ef 90       	pop	r14
    6ac6:	08 95       	ret

00006ac8 <printf>:
    6ac8:	df 93       	push	r29
    6aca:	cf 93       	push	r28
    6acc:	cd b7       	in	r28, 0x3d	; 61
    6ace:	de b7       	in	r29, 0x3e	; 62
    6ad0:	fe 01       	movw	r30, r28
    6ad2:	35 96       	adiw	r30, 0x05	; 5
    6ad4:	61 91       	ld	r22, Z+
    6ad6:	71 91       	ld	r23, Z+
    6ad8:	80 91 9e 26 	lds	r24, 0x269E
    6adc:	90 91 9f 26 	lds	r25, 0x269F
    6ae0:	af 01       	movw	r20, r30
    6ae2:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <vfprintf>
    6ae6:	cf 91       	pop	r28
    6ae8:	df 91       	pop	r29
    6aea:	08 95       	ret

00006aec <puts>:
    6aec:	0f 93       	push	r16
    6aee:	1f 93       	push	r17
    6af0:	cf 93       	push	r28
    6af2:	df 93       	push	r29
    6af4:	8c 01       	movw	r16, r24
    6af6:	e0 91 9e 26 	lds	r30, 0x269E
    6afa:	f0 91 9f 26 	lds	r31, 0x269F
    6afe:	83 81       	ldd	r24, Z+3	; 0x03
    6b00:	81 ff       	sbrs	r24, 1
    6b02:	21 c0       	rjmp	.+66     	; 0x6b46 <puts+0x5a>
    6b04:	c0 e0       	ldi	r28, 0x00	; 0
    6b06:	d0 e0       	ldi	r29, 0x00	; 0
    6b08:	0d c0       	rjmp	.+26     	; 0x6b24 <puts+0x38>
    6b0a:	e0 91 9e 26 	lds	r30, 0x269E
    6b0e:	f0 91 9f 26 	lds	r31, 0x269F
    6b12:	20 85       	ldd	r18, Z+8	; 0x08
    6b14:	31 85       	ldd	r19, Z+9	; 0x09
    6b16:	bf 01       	movw	r22, r30
    6b18:	f9 01       	movw	r30, r18
    6b1a:	09 95       	icall
    6b1c:	89 2b       	or	r24, r25
    6b1e:	11 f0       	breq	.+4      	; 0x6b24 <puts+0x38>
    6b20:	cf ef       	ldi	r28, 0xFF	; 255
    6b22:	df ef       	ldi	r29, 0xFF	; 255
    6b24:	f8 01       	movw	r30, r16
    6b26:	81 91       	ld	r24, Z+
    6b28:	8f 01       	movw	r16, r30
    6b2a:	88 23       	and	r24, r24
    6b2c:	71 f7       	brne	.-36     	; 0x6b0a <puts+0x1e>
    6b2e:	e0 91 9e 26 	lds	r30, 0x269E
    6b32:	f0 91 9f 26 	lds	r31, 0x269F
    6b36:	20 85       	ldd	r18, Z+8	; 0x08
    6b38:	31 85       	ldd	r19, Z+9	; 0x09
    6b3a:	8a e0       	ldi	r24, 0x0A	; 10
    6b3c:	bf 01       	movw	r22, r30
    6b3e:	f9 01       	movw	r30, r18
    6b40:	09 95       	icall
    6b42:	89 2b       	or	r24, r25
    6b44:	11 f0       	breq	.+4      	; 0x6b4a <puts+0x5e>
    6b46:	cf ef       	ldi	r28, 0xFF	; 255
    6b48:	df ef       	ldi	r29, 0xFF	; 255
    6b4a:	ce 01       	movw	r24, r28
    6b4c:	df 91       	pop	r29
    6b4e:	cf 91       	pop	r28
    6b50:	1f 91       	pop	r17
    6b52:	0f 91       	pop	r16
    6b54:	08 95       	ret

00006b56 <sprintf>:
    6b56:	0f 93       	push	r16
    6b58:	1f 93       	push	r17
    6b5a:	df 93       	push	r29
    6b5c:	cf 93       	push	r28
    6b5e:	cd b7       	in	r28, 0x3d	; 61
    6b60:	de b7       	in	r29, 0x3e	; 62
    6b62:	2e 97       	sbiw	r28, 0x0e	; 14
    6b64:	0f b6       	in	r0, 0x3f	; 63
    6b66:	f8 94       	cli
    6b68:	de bf       	out	0x3e, r29	; 62
    6b6a:	0f be       	out	0x3f, r0	; 63
    6b6c:	cd bf       	out	0x3d, r28	; 61
    6b6e:	0d 89       	ldd	r16, Y+21	; 0x15
    6b70:	1e 89       	ldd	r17, Y+22	; 0x16
    6b72:	86 e0       	ldi	r24, 0x06	; 6
    6b74:	8c 83       	std	Y+4, r24	; 0x04
    6b76:	1a 83       	std	Y+2, r17	; 0x02
    6b78:	09 83       	std	Y+1, r16	; 0x01
    6b7a:	8f ef       	ldi	r24, 0xFF	; 255
    6b7c:	9f e7       	ldi	r25, 0x7F	; 127
    6b7e:	9e 83       	std	Y+6, r25	; 0x06
    6b80:	8d 83       	std	Y+5, r24	; 0x05
    6b82:	9e 01       	movw	r18, r28
    6b84:	27 5e       	subi	r18, 0xE7	; 231
    6b86:	3f 4f       	sbci	r19, 0xFF	; 255
    6b88:	ce 01       	movw	r24, r28
    6b8a:	01 96       	adiw	r24, 0x01	; 1
    6b8c:	6f 89       	ldd	r22, Y+23	; 0x17
    6b8e:	78 8d       	ldd	r23, Y+24	; 0x18
    6b90:	a9 01       	movw	r20, r18
    6b92:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <vfprintf>
    6b96:	2f 81       	ldd	r18, Y+7	; 0x07
    6b98:	38 85       	ldd	r19, Y+8	; 0x08
    6b9a:	02 0f       	add	r16, r18
    6b9c:	13 1f       	adc	r17, r19
    6b9e:	f8 01       	movw	r30, r16
    6ba0:	10 82       	st	Z, r1
    6ba2:	2e 96       	adiw	r28, 0x0e	; 14
    6ba4:	0f b6       	in	r0, 0x3f	; 63
    6ba6:	f8 94       	cli
    6ba8:	de bf       	out	0x3e, r29	; 62
    6baa:	0f be       	out	0x3f, r0	; 63
    6bac:	cd bf       	out	0x3d, r28	; 61
    6bae:	cf 91       	pop	r28
    6bb0:	df 91       	pop	r29
    6bb2:	1f 91       	pop	r17
    6bb4:	0f 91       	pop	r16
    6bb6:	08 95       	ret

00006bb8 <sscanf>:
    6bb8:	df 93       	push	r29
    6bba:	cf 93       	push	r28
    6bbc:	cd b7       	in	r28, 0x3d	; 61
    6bbe:	de b7       	in	r29, 0x3e	; 62
    6bc0:	2e 97       	sbiw	r28, 0x0e	; 14
    6bc2:	0f b6       	in	r0, 0x3f	; 63
    6bc4:	f8 94       	cli
    6bc6:	de bf       	out	0x3e, r29	; 62
    6bc8:	0f be       	out	0x3f, r0	; 63
    6bca:	cd bf       	out	0x3d, r28	; 61
    6bcc:	85 e0       	ldi	r24, 0x05	; 5
    6bce:	8c 83       	std	Y+4, r24	; 0x04
    6bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    6bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    6bd4:	9a 83       	std	Y+2, r25	; 0x02
    6bd6:	89 83       	std	Y+1, r24	; 0x01
    6bd8:	9e 01       	movw	r18, r28
    6bda:	29 5e       	subi	r18, 0xE9	; 233
    6bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6bde:	ce 01       	movw	r24, r28
    6be0:	01 96       	adiw	r24, 0x01	; 1
    6be2:	6d 89       	ldd	r22, Y+21	; 0x15
    6be4:	7e 89       	ldd	r23, Y+22	; 0x16
    6be6:	a9 01       	movw	r20, r18
    6be8:	0e 94 b4 39 	call	0x7368	; 0x7368 <vfscanf>
    6bec:	2e 96       	adiw	r28, 0x0e	; 14
    6bee:	0f b6       	in	r0, 0x3f	; 63
    6bf0:	f8 94       	cli
    6bf2:	de bf       	out	0x3e, r29	; 62
    6bf4:	0f be       	out	0x3f, r0	; 63
    6bf6:	cd bf       	out	0x3d, r28	; 61
    6bf8:	cf 91       	pop	r28
    6bfa:	df 91       	pop	r29
    6bfc:	08 95       	ret

00006bfe <vfprintf>:
    6bfe:	2f 92       	push	r2
    6c00:	3f 92       	push	r3
    6c02:	4f 92       	push	r4
    6c04:	5f 92       	push	r5
    6c06:	6f 92       	push	r6
    6c08:	7f 92       	push	r7
    6c0a:	8f 92       	push	r8
    6c0c:	9f 92       	push	r9
    6c0e:	af 92       	push	r10
    6c10:	bf 92       	push	r11
    6c12:	cf 92       	push	r12
    6c14:	df 92       	push	r13
    6c16:	ef 92       	push	r14
    6c18:	ff 92       	push	r15
    6c1a:	0f 93       	push	r16
    6c1c:	1f 93       	push	r17
    6c1e:	df 93       	push	r29
    6c20:	cf 93       	push	r28
    6c22:	cd b7       	in	r28, 0x3d	; 61
    6c24:	de b7       	in	r29, 0x3e	; 62
    6c26:	2b 97       	sbiw	r28, 0x0b	; 11
    6c28:	0f b6       	in	r0, 0x3f	; 63
    6c2a:	f8 94       	cli
    6c2c:	de bf       	out	0x3e, r29	; 62
    6c2e:	0f be       	out	0x3f, r0	; 63
    6c30:	cd bf       	out	0x3d, r28	; 61
    6c32:	3c 01       	movw	r6, r24
    6c34:	2b 01       	movw	r4, r22
    6c36:	5a 01       	movw	r10, r20
    6c38:	fc 01       	movw	r30, r24
    6c3a:	17 82       	std	Z+7, r1	; 0x07
    6c3c:	16 82       	std	Z+6, r1	; 0x06
    6c3e:	83 81       	ldd	r24, Z+3	; 0x03
    6c40:	81 fd       	sbrc	r24, 1
    6c42:	03 c0       	rjmp	.+6      	; 0x6c4a <vfprintf+0x4c>
    6c44:	6f ef       	ldi	r22, 0xFF	; 255
    6c46:	7f ef       	ldi	r23, 0xFF	; 255
    6c48:	c6 c1       	rjmp	.+908    	; 0x6fd6 <vfprintf+0x3d8>
    6c4a:	9a e0       	ldi	r25, 0x0A	; 10
    6c4c:	89 2e       	mov	r8, r25
    6c4e:	1e 01       	movw	r2, r28
    6c50:	08 94       	sec
    6c52:	21 1c       	adc	r2, r1
    6c54:	31 1c       	adc	r3, r1
    6c56:	f3 01       	movw	r30, r6
    6c58:	23 81       	ldd	r18, Z+3	; 0x03
    6c5a:	f2 01       	movw	r30, r4
    6c5c:	23 fd       	sbrc	r18, 3
    6c5e:	85 91       	lpm	r24, Z+
    6c60:	23 ff       	sbrs	r18, 3
    6c62:	81 91       	ld	r24, Z+
    6c64:	2f 01       	movw	r4, r30
    6c66:	88 23       	and	r24, r24
    6c68:	09 f4       	brne	.+2      	; 0x6c6c <vfprintf+0x6e>
    6c6a:	b2 c1       	rjmp	.+868    	; 0x6fd0 <vfprintf+0x3d2>
    6c6c:	85 32       	cpi	r24, 0x25	; 37
    6c6e:	39 f4       	brne	.+14     	; 0x6c7e <vfprintf+0x80>
    6c70:	23 fd       	sbrc	r18, 3
    6c72:	85 91       	lpm	r24, Z+
    6c74:	23 ff       	sbrs	r18, 3
    6c76:	81 91       	ld	r24, Z+
    6c78:	2f 01       	movw	r4, r30
    6c7a:	85 32       	cpi	r24, 0x25	; 37
    6c7c:	29 f4       	brne	.+10     	; 0x6c88 <vfprintf+0x8a>
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	b3 01       	movw	r22, r6
    6c82:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6c86:	e7 cf       	rjmp	.-50     	; 0x6c56 <vfprintf+0x58>
    6c88:	98 2f       	mov	r25, r24
    6c8a:	ff 24       	eor	r15, r15
    6c8c:	ee 24       	eor	r14, r14
    6c8e:	99 24       	eor	r9, r9
    6c90:	ff e1       	ldi	r31, 0x1F	; 31
    6c92:	ff 15       	cp	r31, r15
    6c94:	d0 f0       	brcs	.+52     	; 0x6cca <vfprintf+0xcc>
    6c96:	9b 32       	cpi	r25, 0x2B	; 43
    6c98:	69 f0       	breq	.+26     	; 0x6cb4 <vfprintf+0xb6>
    6c9a:	9c 32       	cpi	r25, 0x2C	; 44
    6c9c:	28 f4       	brcc	.+10     	; 0x6ca8 <vfprintf+0xaa>
    6c9e:	90 32       	cpi	r25, 0x20	; 32
    6ca0:	59 f0       	breq	.+22     	; 0x6cb8 <vfprintf+0xba>
    6ca2:	93 32       	cpi	r25, 0x23	; 35
    6ca4:	91 f4       	brne	.+36     	; 0x6cca <vfprintf+0xcc>
    6ca6:	0e c0       	rjmp	.+28     	; 0x6cc4 <vfprintf+0xc6>
    6ca8:	9d 32       	cpi	r25, 0x2D	; 45
    6caa:	49 f0       	breq	.+18     	; 0x6cbe <vfprintf+0xc0>
    6cac:	90 33       	cpi	r25, 0x30	; 48
    6cae:	69 f4       	brne	.+26     	; 0x6cca <vfprintf+0xcc>
    6cb0:	41 e0       	ldi	r20, 0x01	; 1
    6cb2:	24 c0       	rjmp	.+72     	; 0x6cfc <vfprintf+0xfe>
    6cb4:	52 e0       	ldi	r21, 0x02	; 2
    6cb6:	f5 2a       	or	r15, r21
    6cb8:	84 e0       	ldi	r24, 0x04	; 4
    6cba:	f8 2a       	or	r15, r24
    6cbc:	28 c0       	rjmp	.+80     	; 0x6d0e <vfprintf+0x110>
    6cbe:	98 e0       	ldi	r25, 0x08	; 8
    6cc0:	f9 2a       	or	r15, r25
    6cc2:	25 c0       	rjmp	.+74     	; 0x6d0e <vfprintf+0x110>
    6cc4:	e0 e1       	ldi	r30, 0x10	; 16
    6cc6:	fe 2a       	or	r15, r30
    6cc8:	22 c0       	rjmp	.+68     	; 0x6d0e <vfprintf+0x110>
    6cca:	f7 fc       	sbrc	r15, 7
    6ccc:	29 c0       	rjmp	.+82     	; 0x6d20 <vfprintf+0x122>
    6cce:	89 2f       	mov	r24, r25
    6cd0:	80 53       	subi	r24, 0x30	; 48
    6cd2:	8a 30       	cpi	r24, 0x0A	; 10
    6cd4:	70 f4       	brcc	.+28     	; 0x6cf2 <vfprintf+0xf4>
    6cd6:	f6 fe       	sbrs	r15, 6
    6cd8:	05 c0       	rjmp	.+10     	; 0x6ce4 <vfprintf+0xe6>
    6cda:	98 9c       	mul	r9, r8
    6cdc:	90 2c       	mov	r9, r0
    6cde:	11 24       	eor	r1, r1
    6ce0:	98 0e       	add	r9, r24
    6ce2:	15 c0       	rjmp	.+42     	; 0x6d0e <vfprintf+0x110>
    6ce4:	e8 9c       	mul	r14, r8
    6ce6:	e0 2c       	mov	r14, r0
    6ce8:	11 24       	eor	r1, r1
    6cea:	e8 0e       	add	r14, r24
    6cec:	f0 e2       	ldi	r31, 0x20	; 32
    6cee:	ff 2a       	or	r15, r31
    6cf0:	0e c0       	rjmp	.+28     	; 0x6d0e <vfprintf+0x110>
    6cf2:	9e 32       	cpi	r25, 0x2E	; 46
    6cf4:	29 f4       	brne	.+10     	; 0x6d00 <vfprintf+0x102>
    6cf6:	f6 fc       	sbrc	r15, 6
    6cf8:	6b c1       	rjmp	.+726    	; 0x6fd0 <vfprintf+0x3d2>
    6cfa:	40 e4       	ldi	r20, 0x40	; 64
    6cfc:	f4 2a       	or	r15, r20
    6cfe:	07 c0       	rjmp	.+14     	; 0x6d0e <vfprintf+0x110>
    6d00:	9c 36       	cpi	r25, 0x6C	; 108
    6d02:	19 f4       	brne	.+6      	; 0x6d0a <vfprintf+0x10c>
    6d04:	50 e8       	ldi	r21, 0x80	; 128
    6d06:	f5 2a       	or	r15, r21
    6d08:	02 c0       	rjmp	.+4      	; 0x6d0e <vfprintf+0x110>
    6d0a:	98 36       	cpi	r25, 0x68	; 104
    6d0c:	49 f4       	brne	.+18     	; 0x6d20 <vfprintf+0x122>
    6d0e:	f2 01       	movw	r30, r4
    6d10:	23 fd       	sbrc	r18, 3
    6d12:	95 91       	lpm	r25, Z+
    6d14:	23 ff       	sbrs	r18, 3
    6d16:	91 91       	ld	r25, Z+
    6d18:	2f 01       	movw	r4, r30
    6d1a:	99 23       	and	r25, r25
    6d1c:	09 f0       	breq	.+2      	; 0x6d20 <vfprintf+0x122>
    6d1e:	b8 cf       	rjmp	.-144    	; 0x6c90 <vfprintf+0x92>
    6d20:	89 2f       	mov	r24, r25
    6d22:	85 54       	subi	r24, 0x45	; 69
    6d24:	83 30       	cpi	r24, 0x03	; 3
    6d26:	18 f0       	brcs	.+6      	; 0x6d2e <vfprintf+0x130>
    6d28:	80 52       	subi	r24, 0x20	; 32
    6d2a:	83 30       	cpi	r24, 0x03	; 3
    6d2c:	38 f4       	brcc	.+14     	; 0x6d3c <vfprintf+0x13e>
    6d2e:	44 e0       	ldi	r20, 0x04	; 4
    6d30:	50 e0       	ldi	r21, 0x00	; 0
    6d32:	a4 0e       	add	r10, r20
    6d34:	b5 1e       	adc	r11, r21
    6d36:	5f e3       	ldi	r21, 0x3F	; 63
    6d38:	59 83       	std	Y+1, r21	; 0x01
    6d3a:	0f c0       	rjmp	.+30     	; 0x6d5a <vfprintf+0x15c>
    6d3c:	93 36       	cpi	r25, 0x63	; 99
    6d3e:	31 f0       	breq	.+12     	; 0x6d4c <vfprintf+0x14e>
    6d40:	93 37       	cpi	r25, 0x73	; 115
    6d42:	79 f0       	breq	.+30     	; 0x6d62 <vfprintf+0x164>
    6d44:	93 35       	cpi	r25, 0x53	; 83
    6d46:	09 f0       	breq	.+2      	; 0x6d4a <vfprintf+0x14c>
    6d48:	56 c0       	rjmp	.+172    	; 0x6df6 <vfprintf+0x1f8>
    6d4a:	20 c0       	rjmp	.+64     	; 0x6d8c <vfprintf+0x18e>
    6d4c:	f5 01       	movw	r30, r10
    6d4e:	80 81       	ld	r24, Z
    6d50:	89 83       	std	Y+1, r24	; 0x01
    6d52:	42 e0       	ldi	r20, 0x02	; 2
    6d54:	50 e0       	ldi	r21, 0x00	; 0
    6d56:	a4 0e       	add	r10, r20
    6d58:	b5 1e       	adc	r11, r21
    6d5a:	61 01       	movw	r12, r2
    6d5c:	01 e0       	ldi	r16, 0x01	; 1
    6d5e:	10 e0       	ldi	r17, 0x00	; 0
    6d60:	12 c0       	rjmp	.+36     	; 0x6d86 <vfprintf+0x188>
    6d62:	f5 01       	movw	r30, r10
    6d64:	c0 80       	ld	r12, Z
    6d66:	d1 80       	ldd	r13, Z+1	; 0x01
    6d68:	f6 fc       	sbrc	r15, 6
    6d6a:	03 c0       	rjmp	.+6      	; 0x6d72 <vfprintf+0x174>
    6d6c:	6f ef       	ldi	r22, 0xFF	; 255
    6d6e:	7f ef       	ldi	r23, 0xFF	; 255
    6d70:	02 c0       	rjmp	.+4      	; 0x6d76 <vfprintf+0x178>
    6d72:	69 2d       	mov	r22, r9
    6d74:	70 e0       	ldi	r23, 0x00	; 0
    6d76:	42 e0       	ldi	r20, 0x02	; 2
    6d78:	50 e0       	ldi	r21, 0x00	; 0
    6d7a:	a4 0e       	add	r10, r20
    6d7c:	b5 1e       	adc	r11, r21
    6d7e:	c6 01       	movw	r24, r12
    6d80:	0e 94 1d 3b 	call	0x763a	; 0x763a <strnlen>
    6d84:	8c 01       	movw	r16, r24
    6d86:	5f e7       	ldi	r21, 0x7F	; 127
    6d88:	f5 22       	and	r15, r21
    6d8a:	14 c0       	rjmp	.+40     	; 0x6db4 <vfprintf+0x1b6>
    6d8c:	f5 01       	movw	r30, r10
    6d8e:	c0 80       	ld	r12, Z
    6d90:	d1 80       	ldd	r13, Z+1	; 0x01
    6d92:	f6 fc       	sbrc	r15, 6
    6d94:	03 c0       	rjmp	.+6      	; 0x6d9c <vfprintf+0x19e>
    6d96:	6f ef       	ldi	r22, 0xFF	; 255
    6d98:	7f ef       	ldi	r23, 0xFF	; 255
    6d9a:	02 c0       	rjmp	.+4      	; 0x6da0 <vfprintf+0x1a2>
    6d9c:	69 2d       	mov	r22, r9
    6d9e:	70 e0       	ldi	r23, 0x00	; 0
    6da0:	42 e0       	ldi	r20, 0x02	; 2
    6da2:	50 e0       	ldi	r21, 0x00	; 0
    6da4:	a4 0e       	add	r10, r20
    6da6:	b5 1e       	adc	r11, r21
    6da8:	c6 01       	movw	r24, r12
    6daa:	0e 94 12 3b 	call	0x7624	; 0x7624 <strnlen_P>
    6dae:	8c 01       	movw	r16, r24
    6db0:	50 e8       	ldi	r21, 0x80	; 128
    6db2:	f5 2a       	or	r15, r21
    6db4:	f3 fe       	sbrs	r15, 3
    6db6:	07 c0       	rjmp	.+14     	; 0x6dc6 <vfprintf+0x1c8>
    6db8:	1a c0       	rjmp	.+52     	; 0x6dee <vfprintf+0x1f0>
    6dba:	80 e2       	ldi	r24, 0x20	; 32
    6dbc:	90 e0       	ldi	r25, 0x00	; 0
    6dbe:	b3 01       	movw	r22, r6
    6dc0:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6dc4:	ea 94       	dec	r14
    6dc6:	8e 2d       	mov	r24, r14
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	08 17       	cp	r16, r24
    6dcc:	19 07       	cpc	r17, r25
    6dce:	a8 f3       	brcs	.-22     	; 0x6dba <vfprintf+0x1bc>
    6dd0:	0e c0       	rjmp	.+28     	; 0x6dee <vfprintf+0x1f0>
    6dd2:	f6 01       	movw	r30, r12
    6dd4:	f7 fc       	sbrc	r15, 7
    6dd6:	85 91       	lpm	r24, Z+
    6dd8:	f7 fe       	sbrs	r15, 7
    6dda:	81 91       	ld	r24, Z+
    6ddc:	6f 01       	movw	r12, r30
    6dde:	90 e0       	ldi	r25, 0x00	; 0
    6de0:	b3 01       	movw	r22, r6
    6de2:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6de6:	e1 10       	cpse	r14, r1
    6de8:	ea 94       	dec	r14
    6dea:	01 50       	subi	r16, 0x01	; 1
    6dec:	10 40       	sbci	r17, 0x00	; 0
    6dee:	01 15       	cp	r16, r1
    6df0:	11 05       	cpc	r17, r1
    6df2:	79 f7       	brne	.-34     	; 0x6dd2 <vfprintf+0x1d4>
    6df4:	ea c0       	rjmp	.+468    	; 0x6fca <vfprintf+0x3cc>
    6df6:	94 36       	cpi	r25, 0x64	; 100
    6df8:	11 f0       	breq	.+4      	; 0x6dfe <vfprintf+0x200>
    6dfa:	99 36       	cpi	r25, 0x69	; 105
    6dfc:	69 f5       	brne	.+90     	; 0x6e58 <vfprintf+0x25a>
    6dfe:	f7 fe       	sbrs	r15, 7
    6e00:	08 c0       	rjmp	.+16     	; 0x6e12 <vfprintf+0x214>
    6e02:	f5 01       	movw	r30, r10
    6e04:	20 81       	ld	r18, Z
    6e06:	31 81       	ldd	r19, Z+1	; 0x01
    6e08:	42 81       	ldd	r20, Z+2	; 0x02
    6e0a:	53 81       	ldd	r21, Z+3	; 0x03
    6e0c:	84 e0       	ldi	r24, 0x04	; 4
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	0a c0       	rjmp	.+20     	; 0x6e26 <vfprintf+0x228>
    6e12:	f5 01       	movw	r30, r10
    6e14:	80 81       	ld	r24, Z
    6e16:	91 81       	ldd	r25, Z+1	; 0x01
    6e18:	9c 01       	movw	r18, r24
    6e1a:	44 27       	eor	r20, r20
    6e1c:	37 fd       	sbrc	r19, 7
    6e1e:	40 95       	com	r20
    6e20:	54 2f       	mov	r21, r20
    6e22:	82 e0       	ldi	r24, 0x02	; 2
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	a8 0e       	add	r10, r24
    6e28:	b9 1e       	adc	r11, r25
    6e2a:	9f e6       	ldi	r25, 0x6F	; 111
    6e2c:	f9 22       	and	r15, r25
    6e2e:	57 ff       	sbrs	r21, 7
    6e30:	09 c0       	rjmp	.+18     	; 0x6e44 <vfprintf+0x246>
    6e32:	50 95       	com	r21
    6e34:	40 95       	com	r20
    6e36:	30 95       	com	r19
    6e38:	21 95       	neg	r18
    6e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e3c:	4f 4f       	sbci	r20, 0xFF	; 255
    6e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e40:	e0 e8       	ldi	r30, 0x80	; 128
    6e42:	fe 2a       	or	r15, r30
    6e44:	ca 01       	movw	r24, r20
    6e46:	b9 01       	movw	r22, r18
    6e48:	a1 01       	movw	r20, r2
    6e4a:	2a e0       	ldi	r18, 0x0A	; 10
    6e4c:	30 e0       	ldi	r19, 0x00	; 0
    6e4e:	0e 94 c0 3b 	call	0x7780	; 0x7780 <__ultoa_invert>
    6e52:	d8 2e       	mov	r13, r24
    6e54:	d2 18       	sub	r13, r2
    6e56:	40 c0       	rjmp	.+128    	; 0x6ed8 <vfprintf+0x2da>
    6e58:	95 37       	cpi	r25, 0x75	; 117
    6e5a:	29 f4       	brne	.+10     	; 0x6e66 <vfprintf+0x268>
    6e5c:	1f 2d       	mov	r17, r15
    6e5e:	1f 7e       	andi	r17, 0xEF	; 239
    6e60:	2a e0       	ldi	r18, 0x0A	; 10
    6e62:	30 e0       	ldi	r19, 0x00	; 0
    6e64:	1d c0       	rjmp	.+58     	; 0x6ea0 <vfprintf+0x2a2>
    6e66:	1f 2d       	mov	r17, r15
    6e68:	19 7f       	andi	r17, 0xF9	; 249
    6e6a:	9f 36       	cpi	r25, 0x6F	; 111
    6e6c:	61 f0       	breq	.+24     	; 0x6e86 <vfprintf+0x288>
    6e6e:	90 37       	cpi	r25, 0x70	; 112
    6e70:	20 f4       	brcc	.+8      	; 0x6e7a <vfprintf+0x27c>
    6e72:	98 35       	cpi	r25, 0x58	; 88
    6e74:	09 f0       	breq	.+2      	; 0x6e78 <vfprintf+0x27a>
    6e76:	ac c0       	rjmp	.+344    	; 0x6fd0 <vfprintf+0x3d2>
    6e78:	0f c0       	rjmp	.+30     	; 0x6e98 <vfprintf+0x29a>
    6e7a:	90 37       	cpi	r25, 0x70	; 112
    6e7c:	39 f0       	breq	.+14     	; 0x6e8c <vfprintf+0x28e>
    6e7e:	98 37       	cpi	r25, 0x78	; 120
    6e80:	09 f0       	breq	.+2      	; 0x6e84 <vfprintf+0x286>
    6e82:	a6 c0       	rjmp	.+332    	; 0x6fd0 <vfprintf+0x3d2>
    6e84:	04 c0       	rjmp	.+8      	; 0x6e8e <vfprintf+0x290>
    6e86:	28 e0       	ldi	r18, 0x08	; 8
    6e88:	30 e0       	ldi	r19, 0x00	; 0
    6e8a:	0a c0       	rjmp	.+20     	; 0x6ea0 <vfprintf+0x2a2>
    6e8c:	10 61       	ori	r17, 0x10	; 16
    6e8e:	14 fd       	sbrc	r17, 4
    6e90:	14 60       	ori	r17, 0x04	; 4
    6e92:	20 e1       	ldi	r18, 0x10	; 16
    6e94:	30 e0       	ldi	r19, 0x00	; 0
    6e96:	04 c0       	rjmp	.+8      	; 0x6ea0 <vfprintf+0x2a2>
    6e98:	14 fd       	sbrc	r17, 4
    6e9a:	16 60       	ori	r17, 0x06	; 6
    6e9c:	20 e1       	ldi	r18, 0x10	; 16
    6e9e:	32 e0       	ldi	r19, 0x02	; 2
    6ea0:	17 ff       	sbrs	r17, 7
    6ea2:	08 c0       	rjmp	.+16     	; 0x6eb4 <vfprintf+0x2b6>
    6ea4:	f5 01       	movw	r30, r10
    6ea6:	60 81       	ld	r22, Z
    6ea8:	71 81       	ldd	r23, Z+1	; 0x01
    6eaa:	82 81       	ldd	r24, Z+2	; 0x02
    6eac:	93 81       	ldd	r25, Z+3	; 0x03
    6eae:	44 e0       	ldi	r20, 0x04	; 4
    6eb0:	50 e0       	ldi	r21, 0x00	; 0
    6eb2:	08 c0       	rjmp	.+16     	; 0x6ec4 <vfprintf+0x2c6>
    6eb4:	f5 01       	movw	r30, r10
    6eb6:	80 81       	ld	r24, Z
    6eb8:	91 81       	ldd	r25, Z+1	; 0x01
    6eba:	bc 01       	movw	r22, r24
    6ebc:	80 e0       	ldi	r24, 0x00	; 0
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	42 e0       	ldi	r20, 0x02	; 2
    6ec2:	50 e0       	ldi	r21, 0x00	; 0
    6ec4:	a4 0e       	add	r10, r20
    6ec6:	b5 1e       	adc	r11, r21
    6ec8:	a1 01       	movw	r20, r2
    6eca:	0e 94 c0 3b 	call	0x7780	; 0x7780 <__ultoa_invert>
    6ece:	d8 2e       	mov	r13, r24
    6ed0:	d2 18       	sub	r13, r2
    6ed2:	8f e7       	ldi	r24, 0x7F	; 127
    6ed4:	f8 2e       	mov	r15, r24
    6ed6:	f1 22       	and	r15, r17
    6ed8:	f6 fe       	sbrs	r15, 6
    6eda:	0b c0       	rjmp	.+22     	; 0x6ef2 <vfprintf+0x2f4>
    6edc:	5e ef       	ldi	r21, 0xFE	; 254
    6ede:	f5 22       	and	r15, r21
    6ee0:	d9 14       	cp	r13, r9
    6ee2:	38 f4       	brcc	.+14     	; 0x6ef2 <vfprintf+0x2f4>
    6ee4:	f4 fe       	sbrs	r15, 4
    6ee6:	07 c0       	rjmp	.+14     	; 0x6ef6 <vfprintf+0x2f8>
    6ee8:	f2 fc       	sbrc	r15, 2
    6eea:	05 c0       	rjmp	.+10     	; 0x6ef6 <vfprintf+0x2f8>
    6eec:	8f ee       	ldi	r24, 0xEF	; 239
    6eee:	f8 22       	and	r15, r24
    6ef0:	02 c0       	rjmp	.+4      	; 0x6ef6 <vfprintf+0x2f8>
    6ef2:	1d 2d       	mov	r17, r13
    6ef4:	01 c0       	rjmp	.+2      	; 0x6ef8 <vfprintf+0x2fa>
    6ef6:	19 2d       	mov	r17, r9
    6ef8:	f4 fe       	sbrs	r15, 4
    6efa:	0d c0       	rjmp	.+26     	; 0x6f16 <vfprintf+0x318>
    6efc:	fe 01       	movw	r30, r28
    6efe:	ed 0d       	add	r30, r13
    6f00:	f1 1d       	adc	r31, r1
    6f02:	80 81       	ld	r24, Z
    6f04:	80 33       	cpi	r24, 0x30	; 48
    6f06:	19 f4       	brne	.+6      	; 0x6f0e <vfprintf+0x310>
    6f08:	99 ee       	ldi	r25, 0xE9	; 233
    6f0a:	f9 22       	and	r15, r25
    6f0c:	08 c0       	rjmp	.+16     	; 0x6f1e <vfprintf+0x320>
    6f0e:	1f 5f       	subi	r17, 0xFF	; 255
    6f10:	f2 fe       	sbrs	r15, 2
    6f12:	05 c0       	rjmp	.+10     	; 0x6f1e <vfprintf+0x320>
    6f14:	03 c0       	rjmp	.+6      	; 0x6f1c <vfprintf+0x31e>
    6f16:	8f 2d       	mov	r24, r15
    6f18:	86 78       	andi	r24, 0x86	; 134
    6f1a:	09 f0       	breq	.+2      	; 0x6f1e <vfprintf+0x320>
    6f1c:	1f 5f       	subi	r17, 0xFF	; 255
    6f1e:	0f 2d       	mov	r16, r15
    6f20:	f3 fc       	sbrc	r15, 3
    6f22:	14 c0       	rjmp	.+40     	; 0x6f4c <vfprintf+0x34e>
    6f24:	f0 fe       	sbrs	r15, 0
    6f26:	0f c0       	rjmp	.+30     	; 0x6f46 <vfprintf+0x348>
    6f28:	1e 15       	cp	r17, r14
    6f2a:	10 f0       	brcs	.+4      	; 0x6f30 <vfprintf+0x332>
    6f2c:	9d 2c       	mov	r9, r13
    6f2e:	0b c0       	rjmp	.+22     	; 0x6f46 <vfprintf+0x348>
    6f30:	9d 2c       	mov	r9, r13
    6f32:	9e 0c       	add	r9, r14
    6f34:	91 1a       	sub	r9, r17
    6f36:	1e 2d       	mov	r17, r14
    6f38:	06 c0       	rjmp	.+12     	; 0x6f46 <vfprintf+0x348>
    6f3a:	80 e2       	ldi	r24, 0x20	; 32
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	b3 01       	movw	r22, r6
    6f40:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6f44:	1f 5f       	subi	r17, 0xFF	; 255
    6f46:	1e 15       	cp	r17, r14
    6f48:	c0 f3       	brcs	.-16     	; 0x6f3a <vfprintf+0x33c>
    6f4a:	04 c0       	rjmp	.+8      	; 0x6f54 <vfprintf+0x356>
    6f4c:	1e 15       	cp	r17, r14
    6f4e:	10 f4       	brcc	.+4      	; 0x6f54 <vfprintf+0x356>
    6f50:	e1 1a       	sub	r14, r17
    6f52:	01 c0       	rjmp	.+2      	; 0x6f56 <vfprintf+0x358>
    6f54:	ee 24       	eor	r14, r14
    6f56:	04 ff       	sbrs	r16, 4
    6f58:	0f c0       	rjmp	.+30     	; 0x6f78 <vfprintf+0x37a>
    6f5a:	80 e3       	ldi	r24, 0x30	; 48
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	b3 01       	movw	r22, r6
    6f60:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6f64:	02 ff       	sbrs	r16, 2
    6f66:	1d c0       	rjmp	.+58     	; 0x6fa2 <vfprintf+0x3a4>
    6f68:	01 fd       	sbrc	r16, 1
    6f6a:	03 c0       	rjmp	.+6      	; 0x6f72 <vfprintf+0x374>
    6f6c:	88 e7       	ldi	r24, 0x78	; 120
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	0e c0       	rjmp	.+28     	; 0x6f8e <vfprintf+0x390>
    6f72:	88 e5       	ldi	r24, 0x58	; 88
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	0b c0       	rjmp	.+22     	; 0x6f8e <vfprintf+0x390>
    6f78:	80 2f       	mov	r24, r16
    6f7a:	86 78       	andi	r24, 0x86	; 134
    6f7c:	91 f0       	breq	.+36     	; 0x6fa2 <vfprintf+0x3a4>
    6f7e:	01 ff       	sbrs	r16, 1
    6f80:	02 c0       	rjmp	.+4      	; 0x6f86 <vfprintf+0x388>
    6f82:	8b e2       	ldi	r24, 0x2B	; 43
    6f84:	01 c0       	rjmp	.+2      	; 0x6f88 <vfprintf+0x38a>
    6f86:	80 e2       	ldi	r24, 0x20	; 32
    6f88:	f7 fc       	sbrc	r15, 7
    6f8a:	8d e2       	ldi	r24, 0x2D	; 45
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	b3 01       	movw	r22, r6
    6f90:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6f94:	06 c0       	rjmp	.+12     	; 0x6fa2 <vfprintf+0x3a4>
    6f96:	80 e3       	ldi	r24, 0x30	; 48
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	b3 01       	movw	r22, r6
    6f9c:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6fa0:	9a 94       	dec	r9
    6fa2:	d9 14       	cp	r13, r9
    6fa4:	c0 f3       	brcs	.-16     	; 0x6f96 <vfprintf+0x398>
    6fa6:	da 94       	dec	r13
    6fa8:	f1 01       	movw	r30, r2
    6faa:	ed 0d       	add	r30, r13
    6fac:	f1 1d       	adc	r31, r1
    6fae:	80 81       	ld	r24, Z
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	b3 01       	movw	r22, r6
    6fb4:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6fb8:	dd 20       	and	r13, r13
    6fba:	a9 f7       	brne	.-22     	; 0x6fa6 <vfprintf+0x3a8>
    6fbc:	06 c0       	rjmp	.+12     	; 0x6fca <vfprintf+0x3cc>
    6fbe:	80 e2       	ldi	r24, 0x20	; 32
    6fc0:	90 e0       	ldi	r25, 0x00	; 0
    6fc2:	b3 01       	movw	r22, r6
    6fc4:	0e 94 7a 3b 	call	0x76f4	; 0x76f4 <fputc>
    6fc8:	ea 94       	dec	r14
    6fca:	ee 20       	and	r14, r14
    6fcc:	c1 f7       	brne	.-16     	; 0x6fbe <vfprintf+0x3c0>
    6fce:	43 ce       	rjmp	.-890    	; 0x6c56 <vfprintf+0x58>
    6fd0:	f3 01       	movw	r30, r6
    6fd2:	66 81       	ldd	r22, Z+6	; 0x06
    6fd4:	77 81       	ldd	r23, Z+7	; 0x07
    6fd6:	cb 01       	movw	r24, r22
    6fd8:	2b 96       	adiw	r28, 0x0b	; 11
    6fda:	0f b6       	in	r0, 0x3f	; 63
    6fdc:	f8 94       	cli
    6fde:	de bf       	out	0x3e, r29	; 62
    6fe0:	0f be       	out	0x3f, r0	; 63
    6fe2:	cd bf       	out	0x3d, r28	; 61
    6fe4:	cf 91       	pop	r28
    6fe6:	df 91       	pop	r29
    6fe8:	1f 91       	pop	r17
    6fea:	0f 91       	pop	r16
    6fec:	ff 90       	pop	r15
    6fee:	ef 90       	pop	r14
    6ff0:	df 90       	pop	r13
    6ff2:	cf 90       	pop	r12
    6ff4:	bf 90       	pop	r11
    6ff6:	af 90       	pop	r10
    6ff8:	9f 90       	pop	r9
    6ffa:	8f 90       	pop	r8
    6ffc:	7f 90       	pop	r7
    6ffe:	6f 90       	pop	r6
    7000:	5f 90       	pop	r5
    7002:	4f 90       	pop	r4
    7004:	3f 90       	pop	r3
    7006:	2f 90       	pop	r2
    7008:	08 95       	ret

0000700a <putval>:
    700a:	fc 01       	movw	r30, r24
    700c:	20 fd       	sbrc	r18, 0
    700e:	08 c0       	rjmp	.+16     	; 0x7020 <putval+0x16>
    7010:	23 fd       	sbrc	r18, 3
    7012:	05 c0       	rjmp	.+10     	; 0x701e <putval+0x14>
    7014:	22 ff       	sbrs	r18, 2
    7016:	02 c0       	rjmp	.+4      	; 0x701c <putval+0x12>
    7018:	73 83       	std	Z+3, r23	; 0x03
    701a:	62 83       	std	Z+2, r22	; 0x02
    701c:	51 83       	std	Z+1, r21	; 0x01
    701e:	40 83       	st	Z, r20
    7020:	08 95       	ret

00007022 <mulacc>:
    7022:	ef 92       	push	r14
    7024:	ff 92       	push	r15
    7026:	0f 93       	push	r16
    7028:	1f 93       	push	r17
    702a:	44 ff       	sbrs	r20, 4
    702c:	02 c0       	rjmp	.+4      	; 0x7032 <mulacc+0x10>
    702e:	33 e0       	ldi	r19, 0x03	; 3
    7030:	11 c0       	rjmp	.+34     	; 0x7054 <mulacc+0x32>
    7032:	46 ff       	sbrs	r20, 6
    7034:	02 c0       	rjmp	.+4      	; 0x703a <mulacc+0x18>
    7036:	34 e0       	ldi	r19, 0x04	; 4
    7038:	0d c0       	rjmp	.+26     	; 0x7054 <mulacc+0x32>
    703a:	db 01       	movw	r26, r22
    703c:	fc 01       	movw	r30, r24
    703e:	aa 0f       	add	r26, r26
    7040:	bb 1f       	adc	r27, r27
    7042:	ee 1f       	adc	r30, r30
    7044:	ff 1f       	adc	r31, r31
    7046:	10 94       	com	r1
    7048:	d1 f7       	brne	.-12     	; 0x703e <mulacc+0x1c>
    704a:	6a 0f       	add	r22, r26
    704c:	7b 1f       	adc	r23, r27
    704e:	8e 1f       	adc	r24, r30
    7050:	9f 1f       	adc	r25, r31
    7052:	31 e0       	ldi	r19, 0x01	; 1
    7054:	66 0f       	add	r22, r22
    7056:	77 1f       	adc	r23, r23
    7058:	88 1f       	adc	r24, r24
    705a:	99 1f       	adc	r25, r25
    705c:	31 50       	subi	r19, 0x01	; 1
    705e:	d1 f7       	brne	.-12     	; 0x7054 <mulacc+0x32>
    7060:	7b 01       	movw	r14, r22
    7062:	8c 01       	movw	r16, r24
    7064:	e2 0e       	add	r14, r18
    7066:	f1 1c       	adc	r15, r1
    7068:	01 1d       	adc	r16, r1
    706a:	11 1d       	adc	r17, r1
    706c:	a8 01       	movw	r20, r16
    706e:	97 01       	movw	r18, r14
    7070:	b7 01       	movw	r22, r14
    7072:	ca 01       	movw	r24, r20
    7074:	1f 91       	pop	r17
    7076:	0f 91       	pop	r16
    7078:	ff 90       	pop	r15
    707a:	ef 90       	pop	r14
    707c:	08 95       	ret

0000707e <skip_spaces>:
    707e:	0f 93       	push	r16
    7080:	1f 93       	push	r17
    7082:	cf 93       	push	r28
    7084:	df 93       	push	r29
    7086:	8c 01       	movw	r16, r24
    7088:	c8 01       	movw	r24, r16
    708a:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    708e:	ec 01       	movw	r28, r24
    7090:	97 fd       	sbrc	r25, 7
    7092:	08 c0       	rjmp	.+16     	; 0x70a4 <skip_spaces+0x26>
    7094:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <isspace>
    7098:	89 2b       	or	r24, r25
    709a:	b1 f7       	brne	.-20     	; 0x7088 <skip_spaces+0xa>
    709c:	ce 01       	movw	r24, r28
    709e:	b8 01       	movw	r22, r16
    70a0:	0e 94 a6 3b 	call	0x774c	; 0x774c <ungetc>
    70a4:	ce 01       	movw	r24, r28
    70a6:	df 91       	pop	r29
    70a8:	cf 91       	pop	r28
    70aa:	1f 91       	pop	r17
    70ac:	0f 91       	pop	r16
    70ae:	08 95       	ret

000070b0 <conv_int>:
    70b0:	af 92       	push	r10
    70b2:	bf 92       	push	r11
    70b4:	cf 92       	push	r12
    70b6:	df 92       	push	r13
    70b8:	ef 92       	push	r14
    70ba:	ff 92       	push	r15
    70bc:	0f 93       	push	r16
    70be:	1f 93       	push	r17
    70c0:	cf 93       	push	r28
    70c2:	df 93       	push	r29
    70c4:	ec 01       	movw	r28, r24
    70c6:	c6 2e       	mov	r12, r22
    70c8:	5a 01       	movw	r10, r20
    70ca:	12 2f       	mov	r17, r18
    70cc:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    70d0:	ac 01       	movw	r20, r24
    70d2:	8b 32       	cpi	r24, 0x2B	; 43
    70d4:	19 f0       	breq	.+6      	; 0x70dc <conv_int+0x2c>
    70d6:	8d 32       	cpi	r24, 0x2D	; 45
    70d8:	51 f4       	brne	.+20     	; 0x70ee <conv_int+0x3e>
    70da:	10 68       	ori	r17, 0x80	; 128
    70dc:	ca 94       	dec	r12
    70de:	09 f4       	brne	.+2      	; 0x70e2 <conv_int+0x32>
    70e0:	6d c0       	rjmp	.+218    	; 0x71bc <conv_int+0x10c>
    70e2:	ce 01       	movw	r24, r28
    70e4:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    70e8:	ac 01       	movw	r20, r24
    70ea:	97 fd       	sbrc	r25, 7
    70ec:	67 c0       	rjmp	.+206    	; 0x71bc <conv_int+0x10c>
    70ee:	6d ef       	ldi	r22, 0xFD	; 253
    70f0:	d6 2e       	mov	r13, r22
    70f2:	d1 22       	and	r13, r17
    70f4:	8d 2d       	mov	r24, r13
    70f6:	80 73       	andi	r24, 0x30	; 48
    70f8:	01 f5       	brne	.+64     	; 0x713a <conv_int+0x8a>
    70fa:	40 33       	cpi	r20, 0x30	; 48
    70fc:	f1 f4       	brne	.+60     	; 0x713a <conv_int+0x8a>
    70fe:	ca 94       	dec	r12
    7100:	09 f4       	brne	.+2      	; 0x7104 <conv_int+0x54>
    7102:	47 c0       	rjmp	.+142    	; 0x7192 <conv_int+0xe2>
    7104:	ce 01       	movw	r24, r28
    7106:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    710a:	ac 01       	movw	r20, r24
    710c:	97 fd       	sbrc	r25, 7
    710e:	41 c0       	rjmp	.+130    	; 0x7192 <conv_int+0xe2>
    7110:	82 e0       	ldi	r24, 0x02	; 2
    7112:	d8 2a       	or	r13, r24
    7114:	48 37       	cpi	r20, 0x78	; 120
    7116:	11 f0       	breq	.+4      	; 0x711c <conv_int+0x6c>
    7118:	48 35       	cpi	r20, 0x58	; 88
    711a:	59 f4       	brne	.+22     	; 0x7132 <conv_int+0x82>
    711c:	80 e4       	ldi	r24, 0x40	; 64
    711e:	d8 2a       	or	r13, r24
    7120:	ca 94       	dec	r12
    7122:	b9 f1       	breq	.+110    	; 0x7192 <conv_int+0xe2>
    7124:	ce 01       	movw	r24, r28
    7126:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    712a:	ac 01       	movw	r20, r24
    712c:	99 23       	and	r25, r25
    712e:	2c f4       	brge	.+10     	; 0x713a <conv_int+0x8a>
    7130:	30 c0       	rjmp	.+96     	; 0x7192 <conv_int+0xe2>
    7132:	d6 fc       	sbrc	r13, 6
    7134:	02 c0       	rjmp	.+4      	; 0x713a <conv_int+0x8a>
    7136:	80 e1       	ldi	r24, 0x10	; 16
    7138:	d8 2a       	or	r13, r24
    713a:	ee 24       	eor	r14, r14
    713c:	ff 24       	eor	r15, r15
    713e:	87 01       	movw	r16, r14
    7140:	24 2f       	mov	r18, r20
    7142:	20 53       	subi	r18, 0x30	; 48
    7144:	28 30       	cpi	r18, 0x08	; 8
    7146:	88 f0       	brcs	.+34     	; 0x716a <conv_int+0xba>
    7148:	d4 fc       	sbrc	r13, 4
    714a:	09 c0       	rjmp	.+18     	; 0x715e <conv_int+0xae>
    714c:	2a 30       	cpi	r18, 0x0A	; 10
    714e:	68 f0       	brcs	.+26     	; 0x716a <conv_int+0xba>
    7150:	d6 fe       	sbrs	r13, 6
    7152:	05 c0       	rjmp	.+10     	; 0x715e <conv_int+0xae>
    7154:	2f 7d       	andi	r18, 0xDF	; 223
    7156:	82 2f       	mov	r24, r18
    7158:	81 51       	subi	r24, 0x11	; 17
    715a:	86 30       	cpi	r24, 0x06	; 6
    715c:	28 f0       	brcs	.+10     	; 0x7168 <conv_int+0xb8>
    715e:	ca 01       	movw	r24, r20
    7160:	be 01       	movw	r22, r28
    7162:	0e 94 a6 3b 	call	0x774c	; 0x774c <ungetc>
    7166:	12 c0       	rjmp	.+36     	; 0x718c <conv_int+0xdc>
    7168:	27 50       	subi	r18, 0x07	; 7
    716a:	c8 01       	movw	r24, r16
    716c:	b7 01       	movw	r22, r14
    716e:	4d 2d       	mov	r20, r13
    7170:	0e 94 11 38 	call	0x7022	; 0x7022 <mulacc>
    7174:	7b 01       	movw	r14, r22
    7176:	8c 01       	movw	r16, r24
    7178:	82 e0       	ldi	r24, 0x02	; 2
    717a:	d8 2a       	or	r13, r24
    717c:	ca 94       	dec	r12
    717e:	61 f0       	breq	.+24     	; 0x7198 <conv_int+0xe8>
    7180:	ce 01       	movw	r24, r28
    7182:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    7186:	ac 01       	movw	r20, r24
    7188:	97 ff       	sbrs	r25, 7
    718a:	da cf       	rjmp	.-76     	; 0x7140 <conv_int+0x90>
    718c:	d1 fc       	sbrc	r13, 1
    718e:	04 c0       	rjmp	.+8      	; 0x7198 <conv_int+0xe8>
    7190:	15 c0       	rjmp	.+42     	; 0x71bc <conv_int+0x10c>
    7192:	ee 24       	eor	r14, r14
    7194:	ff 24       	eor	r15, r15
    7196:	87 01       	movw	r16, r14
    7198:	d7 fe       	sbrs	r13, 7
    719a:	08 c0       	rjmp	.+16     	; 0x71ac <conv_int+0xfc>
    719c:	10 95       	com	r17
    719e:	00 95       	com	r16
    71a0:	f0 94       	com	r15
    71a2:	e0 94       	com	r14
    71a4:	e1 1c       	adc	r14, r1
    71a6:	f1 1c       	adc	r15, r1
    71a8:	01 1d       	adc	r16, r1
    71aa:	11 1d       	adc	r17, r1
    71ac:	c5 01       	movw	r24, r10
    71ae:	b8 01       	movw	r22, r16
    71b0:	a7 01       	movw	r20, r14
    71b2:	2d 2d       	mov	r18, r13
    71b4:	0e 94 05 38 	call	0x700a	; 0x700a <putval>
    71b8:	81 e0       	ldi	r24, 0x01	; 1
    71ba:	01 c0       	rjmp	.+2      	; 0x71be <conv_int+0x10e>
    71bc:	80 e0       	ldi	r24, 0x00	; 0
    71be:	df 91       	pop	r29
    71c0:	cf 91       	pop	r28
    71c2:	1f 91       	pop	r17
    71c4:	0f 91       	pop	r16
    71c6:	ff 90       	pop	r15
    71c8:	ef 90       	pop	r14
    71ca:	df 90       	pop	r13
    71cc:	cf 90       	pop	r12
    71ce:	bf 90       	pop	r11
    71d0:	af 90       	pop	r10
    71d2:	08 95       	ret

000071d4 <conv_brk>:
    71d4:	6f 92       	push	r6
    71d6:	7f 92       	push	r7
    71d8:	8f 92       	push	r8
    71da:	9f 92       	push	r9
    71dc:	af 92       	push	r10
    71de:	bf 92       	push	r11
    71e0:	cf 92       	push	r12
    71e2:	df 92       	push	r13
    71e4:	ef 92       	push	r14
    71e6:	ff 92       	push	r15
    71e8:	0f 93       	push	r16
    71ea:	1f 93       	push	r17
    71ec:	df 93       	push	r29
    71ee:	cf 93       	push	r28
    71f0:	cd b7       	in	r28, 0x3d	; 61
    71f2:	de b7       	in	r29, 0x3e	; 62
    71f4:	a0 97       	sbiw	r28, 0x20	; 32
    71f6:	0f b6       	in	r0, 0x3f	; 63
    71f8:	f8 94       	cli
    71fa:	de bf       	out	0x3e, r29	; 62
    71fc:	0f be       	out	0x3f, r0	; 63
    71fe:	cd bf       	out	0x3d, r28	; 61
    7200:	6c 01       	movw	r12, r24
    7202:	a6 2e       	mov	r10, r22
    7204:	8a 01       	movw	r16, r20
    7206:	79 01       	movw	r14, r18
    7208:	fe 01       	movw	r30, r28
    720a:	31 96       	adiw	r30, 0x01	; 1
    720c:	80 e2       	ldi	r24, 0x20	; 32
    720e:	df 01       	movw	r26, r30
    7210:	1d 92       	st	X+, r1
    7212:	8a 95       	dec	r24
    7214:	e9 f7       	brne	.-6      	; 0x7210 <conv_brk+0x3c>
    7216:	70 e0       	ldi	r23, 0x00	; 0
    7218:	30 e0       	ldi	r19, 0x00	; 0
    721a:	60 e0       	ldi	r22, 0x00	; 0
    721c:	40 e0       	ldi	r20, 0x00	; 0
    721e:	50 e0       	ldi	r21, 0x00	; 0
    7220:	4f 01       	movw	r8, r30
    7222:	a1 e0       	ldi	r26, 0x01	; 1
    7224:	b0 e0       	ldi	r27, 0x00	; 0
    7226:	f6 01       	movw	r30, r12
    7228:	83 81       	ldd	r24, Z+3	; 0x03
    722a:	f7 01       	movw	r30, r14
    722c:	83 fd       	sbrc	r24, 3
    722e:	25 91       	lpm	r18, Z+
    7230:	83 ff       	sbrs	r24, 3
    7232:	21 91       	ld	r18, Z+
    7234:	7f 01       	movw	r14, r30
    7236:	22 23       	and	r18, r18
    7238:	09 f4       	brne	.+2      	; 0x723c <conv_brk+0x68>
    723a:	7e c0       	rjmp	.+252    	; 0x7338 <conv_brk+0x164>
    723c:	2e 35       	cpi	r18, 0x5E	; 94
    723e:	19 f4       	brne	.+6      	; 0x7246 <conv_brk+0x72>
    7240:	41 15       	cp	r20, r1
    7242:	51 05       	cpc	r21, r1
    7244:	69 f1       	breq	.+90     	; 0x72a0 <conv_brk+0xcc>
    7246:	87 2f       	mov	r24, r23
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	84 17       	cp	r24, r20
    724c:	95 07       	cpc	r25, r21
    724e:	44 f4       	brge	.+16     	; 0x7260 <conv_brk+0x8c>
    7250:	2d 35       	cpi	r18, 0x5D	; 93
    7252:	51 f1       	breq	.+84     	; 0x72a8 <conv_brk+0xd4>
    7254:	2d 32       	cpi	r18, 0x2D	; 45
    7256:	21 f4       	brne	.+8      	; 0x7260 <conv_brk+0x8c>
    7258:	33 23       	and	r19, r19
    725a:	29 f4       	brne	.+10     	; 0x7266 <conv_brk+0x92>
    725c:	31 e0       	ldi	r19, 0x01	; 1
    725e:	21 c0       	rjmp	.+66     	; 0x72a2 <conv_brk+0xce>
    7260:	33 23       	and	r19, r19
    7262:	09 f4       	brne	.+2      	; 0x7266 <conv_brk+0x92>
    7264:	62 2f       	mov	r22, r18
    7266:	32 2f       	mov	r19, r18
    7268:	83 2f       	mov	r24, r19
    726a:	86 95       	lsr	r24
    726c:	86 95       	lsr	r24
    726e:	86 95       	lsr	r24
    7270:	f4 01       	movw	r30, r8
    7272:	e8 0f       	add	r30, r24
    7274:	f1 1d       	adc	r31, r1
    7276:	83 2f       	mov	r24, r19
    7278:	87 70       	andi	r24, 0x07	; 7
    727a:	3d 01       	movw	r6, r26
    727c:	02 c0       	rjmp	.+4      	; 0x7282 <conv_brk+0xae>
    727e:	66 0c       	add	r6, r6
    7280:	77 1c       	adc	r7, r7
    7282:	8a 95       	dec	r24
    7284:	e2 f7       	brpl	.-8      	; 0x727e <conv_brk+0xaa>
    7286:	20 81       	ld	r18, Z
    7288:	26 29       	or	r18, r6
    728a:	20 83       	st	Z, r18
    728c:	36 17       	cp	r19, r22
    728e:	11 f4       	brne	.+4      	; 0x7294 <conv_brk+0xc0>
    7290:	30 e0       	ldi	r19, 0x00	; 0
    7292:	07 c0       	rjmp	.+14     	; 0x72a2 <conv_brk+0xce>
    7294:	36 17       	cp	r19, r22
    7296:	10 f4       	brcc	.+4      	; 0x729c <conv_brk+0xc8>
    7298:	3f 5f       	subi	r19, 0xFF	; 255
    729a:	e6 cf       	rjmp	.-52     	; 0x7268 <conv_brk+0x94>
    729c:	31 50       	subi	r19, 0x01	; 1
    729e:	e4 cf       	rjmp	.-56     	; 0x7268 <conv_brk+0x94>
    72a0:	71 e0       	ldi	r23, 0x01	; 1
    72a2:	4f 5f       	subi	r20, 0xFF	; 255
    72a4:	5f 4f       	sbci	r21, 0xFF	; 255
    72a6:	bf cf       	rjmp	.-130    	; 0x7226 <conv_brk+0x52>
    72a8:	33 23       	and	r19, r19
    72aa:	19 f0       	breq	.+6      	; 0x72b2 <conv_brk+0xde>
    72ac:	8e 81       	ldd	r24, Y+6	; 0x06
    72ae:	80 62       	ori	r24, 0x20	; 32
    72b0:	8e 83       	std	Y+6, r24	; 0x06
    72b2:	77 23       	and	r23, r23
    72b4:	59 f0       	breq	.+22     	; 0x72cc <conv_brk+0xf8>
    72b6:	fe 01       	movw	r30, r28
    72b8:	31 96       	adiw	r30, 0x01	; 1
    72ba:	9e 01       	movw	r18, r28
    72bc:	2f 5d       	subi	r18, 0xDF	; 223
    72be:	3f 4f       	sbci	r19, 0xFF	; 255
    72c0:	80 81       	ld	r24, Z
    72c2:	80 95       	com	r24
    72c4:	81 93       	st	Z+, r24
    72c6:	e2 17       	cp	r30, r18
    72c8:	f3 07       	cpc	r31, r19
    72ca:	d1 f7       	brne	.-12     	; 0x72c0 <conv_brk+0xec>
    72cc:	bb 24       	eor	r11, r11
    72ce:	b3 94       	inc	r11
    72d0:	4e 01       	movw	r8, r28
    72d2:	08 94       	sec
    72d4:	81 1c       	adc	r8, r1
    72d6:	91 1c       	adc	r9, r1
    72d8:	c6 01       	movw	r24, r12
    72da:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    72de:	ac 01       	movw	r20, r24
    72e0:	97 fd       	sbrc	r25, 7
    72e2:	22 c0       	rjmp	.+68     	; 0x7328 <conv_brk+0x154>
    72e4:	86 95       	lsr	r24
    72e6:	86 95       	lsr	r24
    72e8:	86 95       	lsr	r24
    72ea:	f4 01       	movw	r30, r8
    72ec:	e8 0f       	add	r30, r24
    72ee:	f1 1d       	adc	r31, r1
    72f0:	80 81       	ld	r24, Z
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	9a 01       	movw	r18, r20
    72f6:	27 70       	andi	r18, 0x07	; 7
    72f8:	30 70       	andi	r19, 0x00	; 0
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <conv_brk+0x12c>
    72fc:	95 95       	asr	r25
    72fe:	87 95       	ror	r24
    7300:	2a 95       	dec	r18
    7302:	e2 f7       	brpl	.-8      	; 0x72fc <conv_brk+0x128>
    7304:	80 fd       	sbrc	r24, 0
    7306:	05 c0       	rjmp	.+10     	; 0x7312 <conv_brk+0x13e>
    7308:	ca 01       	movw	r24, r20
    730a:	b6 01       	movw	r22, r12
    730c:	0e 94 a6 3b 	call	0x774c	; 0x774c <ungetc>
    7310:	0b c0       	rjmp	.+22     	; 0x7328 <conv_brk+0x154>
    7312:	01 15       	cp	r16, r1
    7314:	11 05       	cpc	r17, r1
    7316:	19 f0       	breq	.+6      	; 0x731e <conv_brk+0x14a>
    7318:	d8 01       	movw	r26, r16
    731a:	4d 93       	st	X+, r20
    731c:	8d 01       	movw	r16, r26
    731e:	aa 94       	dec	r10
    7320:	bb 24       	eor	r11, r11
    7322:	aa 20       	and	r10, r10
    7324:	c9 f6       	brne	.-78     	; 0x72d8 <conv_brk+0x104>
    7326:	02 c0       	rjmp	.+4      	; 0x732c <conv_brk+0x158>
    7328:	bb 20       	and	r11, r11
    732a:	31 f4       	brne	.+12     	; 0x7338 <conv_brk+0x164>
    732c:	01 15       	cp	r16, r1
    732e:	11 05       	cpc	r17, r1
    7330:	29 f0       	breq	.+10     	; 0x733c <conv_brk+0x168>
    7332:	f8 01       	movw	r30, r16
    7334:	10 82       	st	Z, r1
    7336:	02 c0       	rjmp	.+4      	; 0x733c <conv_brk+0x168>
    7338:	ee 24       	eor	r14, r14
    733a:	ff 24       	eor	r15, r15
    733c:	c7 01       	movw	r24, r14
    733e:	a0 96       	adiw	r28, 0x20	; 32
    7340:	0f b6       	in	r0, 0x3f	; 63
    7342:	f8 94       	cli
    7344:	de bf       	out	0x3e, r29	; 62
    7346:	0f be       	out	0x3f, r0	; 63
    7348:	cd bf       	out	0x3d, r28	; 61
    734a:	cf 91       	pop	r28
    734c:	df 91       	pop	r29
    734e:	1f 91       	pop	r17
    7350:	0f 91       	pop	r16
    7352:	ff 90       	pop	r15
    7354:	ef 90       	pop	r14
    7356:	df 90       	pop	r13
    7358:	cf 90       	pop	r12
    735a:	bf 90       	pop	r11
    735c:	af 90       	pop	r10
    735e:	9f 90       	pop	r9
    7360:	8f 90       	pop	r8
    7362:	7f 90       	pop	r7
    7364:	6f 90       	pop	r6
    7366:	08 95       	ret

00007368 <vfscanf>:
    7368:	6f 92       	push	r6
    736a:	7f 92       	push	r7
    736c:	8f 92       	push	r8
    736e:	9f 92       	push	r9
    7370:	af 92       	push	r10
    7372:	bf 92       	push	r11
    7374:	cf 92       	push	r12
    7376:	df 92       	push	r13
    7378:	ef 92       	push	r14
    737a:	ff 92       	push	r15
    737c:	0f 93       	push	r16
    737e:	1f 93       	push	r17
    7380:	cf 93       	push	r28
    7382:	df 93       	push	r29
    7384:	5c 01       	movw	r10, r24
    7386:	6b 01       	movw	r12, r22
    7388:	3a 01       	movw	r6, r20
    738a:	fc 01       	movw	r30, r24
    738c:	17 82       	std	Z+7, r1	; 0x07
    738e:	16 82       	std	Z+6, r1	; 0x06
    7390:	88 24       	eor	r8, r8
    7392:	ea c0       	rjmp	.+468    	; 0x7568 <vfscanf+0x200>
    7394:	81 2f       	mov	r24, r17
    7396:	90 e0       	ldi	r25, 0x00	; 0
    7398:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <isspace>
    739c:	89 2b       	or	r24, r25
    739e:	21 f0       	breq	.+8      	; 0x73a8 <vfscanf+0x40>
    73a0:	c5 01       	movw	r24, r10
    73a2:	0e 94 3f 38 	call	0x707e	; 0x707e <skip_spaces>
    73a6:	e0 c0       	rjmp	.+448    	; 0x7568 <vfscanf+0x200>
    73a8:	15 32       	cpi	r17, 0x25	; 37
    73aa:	49 f4       	brne	.+18     	; 0x73be <vfscanf+0x56>
    73ac:	f6 01       	movw	r30, r12
    73ae:	f3 fc       	sbrc	r15, 3
    73b0:	65 91       	lpm	r22, Z+
    73b2:	f3 fe       	sbrs	r15, 3
    73b4:	61 91       	ld	r22, Z+
    73b6:	6f 01       	movw	r12, r30
    73b8:	65 32       	cpi	r22, 0x25	; 37
    73ba:	69 f4       	brne	.+26     	; 0x73d6 <vfscanf+0x6e>
    73bc:	15 e2       	ldi	r17, 0x25	; 37
    73be:	c5 01       	movw	r24, r10
    73c0:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    73c4:	97 fd       	sbrc	r25, 7
    73c6:	dc c0       	rjmp	.+440    	; 0x7580 <vfscanf+0x218>
    73c8:	18 17       	cp	r17, r24
    73ca:	09 f4       	brne	.+2      	; 0x73ce <vfscanf+0x66>
    73cc:	cd c0       	rjmp	.+410    	; 0x7568 <vfscanf+0x200>
    73ce:	b5 01       	movw	r22, r10
    73d0:	0e 94 a6 3b 	call	0x774c	; 0x774c <ungetc>
    73d4:	da c0       	rjmp	.+436    	; 0x758a <vfscanf+0x222>
    73d6:	6a 32       	cpi	r22, 0x2A	; 42
    73d8:	19 f0       	breq	.+6      	; 0x73e0 <vfscanf+0x78>
    73da:	16 2f       	mov	r17, r22
    73dc:	00 e0       	ldi	r16, 0x00	; 0
    73de:	06 c0       	rjmp	.+12     	; 0x73ec <vfscanf+0x84>
    73e0:	f3 fc       	sbrc	r15, 3
    73e2:	15 91       	lpm	r17, Z+
    73e4:	f3 fe       	sbrs	r15, 3
    73e6:	11 91       	ld	r17, Z+
    73e8:	6f 01       	movw	r12, r30
    73ea:	01 e0       	ldi	r16, 0x01	; 1
    73ec:	99 24       	eor	r9, r9
    73ee:	0f c0       	rjmp	.+30     	; 0x740e <vfscanf+0xa6>
    73f0:	02 60       	ori	r16, 0x02	; 2
    73f2:	69 2d       	mov	r22, r9
    73f4:	70 e0       	ldi	r23, 0x00	; 0
    73f6:	80 e0       	ldi	r24, 0x00	; 0
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	40 e2       	ldi	r20, 0x20	; 32
    73fc:	0e 94 11 38 	call	0x7022	; 0x7022 <mulacc>
    7400:	96 2e       	mov	r9, r22
    7402:	f6 01       	movw	r30, r12
    7404:	f3 fc       	sbrc	r15, 3
    7406:	15 91       	lpm	r17, Z+
    7408:	f3 fe       	sbrs	r15, 3
    740a:	11 91       	ld	r17, Z+
    740c:	6f 01       	movw	r12, r30
    740e:	21 2f       	mov	r18, r17
    7410:	20 53       	subi	r18, 0x30	; 48
    7412:	2a 30       	cpi	r18, 0x0A	; 10
    7414:	68 f3       	brcs	.-38     	; 0x73f0 <vfscanf+0x88>
    7416:	01 fd       	sbrc	r16, 1
    7418:	03 c0       	rjmp	.+6      	; 0x7420 <vfscanf+0xb8>
    741a:	99 24       	eor	r9, r9
    741c:	9a 94       	dec	r9
    741e:	03 c0       	rjmp	.+6      	; 0x7426 <vfscanf+0xbe>
    7420:	99 20       	and	r9, r9
    7422:	09 f4       	brne	.+2      	; 0x7426 <vfscanf+0xbe>
    7424:	b2 c0       	rjmp	.+356    	; 0x758a <vfscanf+0x222>
    7426:	18 36       	cpi	r17, 0x68	; 104
    7428:	21 f0       	breq	.+8      	; 0x7432 <vfscanf+0xca>
    742a:	1c 36       	cpi	r17, 0x6C	; 108
    742c:	99 f4       	brne	.+38     	; 0x7454 <vfscanf+0xec>
    742e:	f6 01       	movw	r30, r12
    7430:	0b c0       	rjmp	.+22     	; 0x7448 <vfscanf+0xe0>
    7432:	f6 01       	movw	r30, r12
    7434:	f3 fc       	sbrc	r15, 3
    7436:	65 91       	lpm	r22, Z+
    7438:	f3 fe       	sbrs	r15, 3
    743a:	61 91       	ld	r22, Z+
    743c:	68 36       	cpi	r22, 0x68	; 104
    743e:	19 f0       	breq	.+6      	; 0x7446 <vfscanf+0xde>
    7440:	6f 01       	movw	r12, r30
    7442:	16 2f       	mov	r17, r22
    7444:	07 c0       	rjmp	.+14     	; 0x7454 <vfscanf+0xec>
    7446:	08 60       	ori	r16, 0x08	; 8
    7448:	04 60       	ori	r16, 0x04	; 4
    744a:	f3 fc       	sbrc	r15, 3
    744c:	15 91       	lpm	r17, Z+
    744e:	f3 fe       	sbrs	r15, 3
    7450:	11 91       	ld	r17, Z+
    7452:	6f 01       	movw	r12, r30
    7454:	11 23       	and	r17, r17
    7456:	09 f4       	brne	.+2      	; 0x745a <vfscanf+0xf2>
    7458:	98 c0       	rjmp	.+304    	; 0x758a <vfscanf+0x222>
    745a:	80 e2       	ldi	r24, 0x20	; 32
    745c:	91 e0       	ldi	r25, 0x01	; 1
    745e:	61 2f       	mov	r22, r17
    7460:	70 e0       	ldi	r23, 0x00	; 0
    7462:	0e 94 07 3b 	call	0x760e	; 0x760e <strchr_P>
    7466:	89 2b       	or	r24, r25
    7468:	09 f4       	brne	.+2      	; 0x746c <vfscanf+0x104>
    746a:	8f c0       	rjmp	.+286    	; 0x758a <vfscanf+0x222>
    746c:	80 2f       	mov	r24, r16
    746e:	00 ff       	sbrs	r16, 0
    7470:	03 c0       	rjmp	.+6      	; 0x7478 <vfscanf+0x110>
    7472:	ee 24       	eor	r14, r14
    7474:	ff 24       	eor	r15, r15
    7476:	07 c0       	rjmp	.+14     	; 0x7486 <vfscanf+0x11e>
    7478:	f3 01       	movw	r30, r6
    747a:	e0 80       	ld	r14, Z
    747c:	f1 80       	ldd	r15, Z+1	; 0x01
    747e:	22 e0       	ldi	r18, 0x02	; 2
    7480:	30 e0       	ldi	r19, 0x00	; 0
    7482:	62 0e       	add	r6, r18
    7484:	73 1e       	adc	r7, r19
    7486:	1e 36       	cpi	r17, 0x6E	; 110
    7488:	51 f4       	brne	.+20     	; 0x749e <vfscanf+0x136>
    748a:	f5 01       	movw	r30, r10
    748c:	46 81       	ldd	r20, Z+6	; 0x06
    748e:	57 81       	ldd	r21, Z+7	; 0x07
    7490:	60 e0       	ldi	r22, 0x00	; 0
    7492:	70 e0       	ldi	r23, 0x00	; 0
    7494:	c7 01       	movw	r24, r14
    7496:	20 2f       	mov	r18, r16
    7498:	0e 94 05 38 	call	0x700a	; 0x700a <putval>
    749c:	65 c0       	rjmp	.+202    	; 0x7568 <vfscanf+0x200>
    749e:	13 36       	cpi	r17, 0x63	; 99
    74a0:	91 f4       	brne	.+36     	; 0x74c6 <vfscanf+0x15e>
    74a2:	81 fd       	sbrc	r24, 1
    74a4:	02 c0       	rjmp	.+4      	; 0x74aa <vfscanf+0x142>
    74a6:	99 24       	eor	r9, r9
    74a8:	93 94       	inc	r9
    74aa:	c5 01       	movw	r24, r10
    74ac:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    74b0:	97 fd       	sbrc	r25, 7
    74b2:	66 c0       	rjmp	.+204    	; 0x7580 <vfscanf+0x218>
    74b4:	e1 14       	cp	r14, r1
    74b6:	f1 04       	cpc	r15, r1
    74b8:	19 f0       	breq	.+6      	; 0x74c0 <vfscanf+0x158>
    74ba:	f7 01       	movw	r30, r14
    74bc:	81 93       	st	Z+, r24
    74be:	7f 01       	movw	r14, r30
    74c0:	9a 94       	dec	r9
    74c2:	99 f7       	brne	.-26     	; 0x74aa <vfscanf+0x142>
    74c4:	4f c0       	rjmp	.+158    	; 0x7564 <vfscanf+0x1fc>
    74c6:	1b 35       	cpi	r17, 0x5B	; 91
    74c8:	59 f4       	brne	.+22     	; 0x74e0 <vfscanf+0x178>
    74ca:	c5 01       	movw	r24, r10
    74cc:	69 2d       	mov	r22, r9
    74ce:	a7 01       	movw	r20, r14
    74d0:	96 01       	movw	r18, r12
    74d2:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <conv_brk>
    74d6:	6c 01       	movw	r12, r24
    74d8:	00 97       	sbiw	r24, 0x00	; 0
    74da:	09 f0       	breq	.+2      	; 0x74de <vfscanf+0x176>
    74dc:	43 c0       	rjmp	.+134    	; 0x7564 <vfscanf+0x1fc>
    74de:	3d c0       	rjmp	.+122    	; 0x755a <vfscanf+0x1f2>
    74e0:	c5 01       	movw	r24, r10
    74e2:	0e 94 3f 38 	call	0x707e	; 0x707e <skip_spaces>
    74e6:	97 fd       	sbrc	r25, 7
    74e8:	4b c0       	rjmp	.+150    	; 0x7580 <vfscanf+0x218>
    74ea:	1f 36       	cpi	r17, 0x6F	; 111
    74ec:	59 f1       	breq	.+86     	; 0x7544 <vfscanf+0x1dc>
    74ee:	10 37       	cpi	r17, 0x70	; 112
    74f0:	28 f4       	brcc	.+10     	; 0x74fc <vfscanf+0x194>
    74f2:	14 36       	cpi	r17, 0x64	; 100
    74f4:	29 f1       	breq	.+74     	; 0x7540 <vfscanf+0x1d8>
    74f6:	19 36       	cpi	r17, 0x69	; 105
    74f8:	39 f5       	brne	.+78     	; 0x7548 <vfscanf+0x1e0>
    74fa:	27 c0       	rjmp	.+78     	; 0x754a <vfscanf+0x1e2>
    74fc:	13 37       	cpi	r17, 0x73	; 115
    74fe:	19 f0       	breq	.+6      	; 0x7506 <vfscanf+0x19e>
    7500:	15 37       	cpi	r17, 0x75	; 117
    7502:	11 f5       	brne	.+68     	; 0x7548 <vfscanf+0x1e0>
    7504:	1d c0       	rjmp	.+58     	; 0x7540 <vfscanf+0x1d8>
    7506:	c5 01       	movw	r24, r10
    7508:	0e 94 38 3b 	call	0x7670	; 0x7670 <fgetc>
    750c:	ec 01       	movw	r28, r24
    750e:	97 fd       	sbrc	r25, 7
    7510:	11 c0       	rjmp	.+34     	; 0x7534 <vfscanf+0x1cc>
    7512:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <isspace>
    7516:	89 2b       	or	r24, r25
    7518:	29 f0       	breq	.+10     	; 0x7524 <vfscanf+0x1bc>
    751a:	ce 01       	movw	r24, r28
    751c:	b5 01       	movw	r22, r10
    751e:	0e 94 a6 3b 	call	0x774c	; 0x774c <ungetc>
    7522:	08 c0       	rjmp	.+16     	; 0x7534 <vfscanf+0x1cc>
    7524:	e1 14       	cp	r14, r1
    7526:	f1 04       	cpc	r15, r1
    7528:	19 f0       	breq	.+6      	; 0x7530 <vfscanf+0x1c8>
    752a:	f7 01       	movw	r30, r14
    752c:	c1 93       	st	Z+, r28
    752e:	7f 01       	movw	r14, r30
    7530:	9a 94       	dec	r9
    7532:	49 f7       	brne	.-46     	; 0x7506 <vfscanf+0x19e>
    7534:	e1 14       	cp	r14, r1
    7536:	f1 04       	cpc	r15, r1
    7538:	a9 f0       	breq	.+42     	; 0x7564 <vfscanf+0x1fc>
    753a:	f7 01       	movw	r30, r14
    753c:	10 82       	st	Z, r1
    753e:	12 c0       	rjmp	.+36     	; 0x7564 <vfscanf+0x1fc>
    7540:	00 62       	ori	r16, 0x20	; 32
    7542:	03 c0       	rjmp	.+6      	; 0x754a <vfscanf+0x1e2>
    7544:	00 61       	ori	r16, 0x10	; 16
    7546:	01 c0       	rjmp	.+2      	; 0x754a <vfscanf+0x1e2>
    7548:	00 64       	ori	r16, 0x40	; 64
    754a:	c5 01       	movw	r24, r10
    754c:	69 2d       	mov	r22, r9
    754e:	a7 01       	movw	r20, r14
    7550:	20 2f       	mov	r18, r16
    7552:	0e 94 58 38 	call	0x70b0	; 0x70b0 <conv_int>
    7556:	88 23       	and	r24, r24
    7558:	29 f4       	brne	.+10     	; 0x7564 <vfscanf+0x1fc>
    755a:	f5 01       	movw	r30, r10
    755c:	83 81       	ldd	r24, Z+3	; 0x03
    755e:	80 73       	andi	r24, 0x30	; 48
    7560:	79 f4       	brne	.+30     	; 0x7580 <vfscanf+0x218>
    7562:	13 c0       	rjmp	.+38     	; 0x758a <vfscanf+0x222>
    7564:	00 ff       	sbrs	r16, 0
    7566:	83 94       	inc	r8
    7568:	f5 01       	movw	r30, r10
    756a:	f3 80       	ldd	r15, Z+3	; 0x03
    756c:	f6 01       	movw	r30, r12
    756e:	f3 fc       	sbrc	r15, 3
    7570:	15 91       	lpm	r17, Z+
    7572:	f3 fe       	sbrs	r15, 3
    7574:	11 91       	ld	r17, Z+
    7576:	6f 01       	movw	r12, r30
    7578:	11 23       	and	r17, r17
    757a:	09 f0       	breq	.+2      	; 0x757e <vfscanf+0x216>
    757c:	0b cf       	rjmp	.-490    	; 0x7394 <vfscanf+0x2c>
    757e:	05 c0       	rjmp	.+10     	; 0x758a <vfscanf+0x222>
    7580:	88 20       	and	r8, r8
    7582:	19 f4       	brne	.+6      	; 0x758a <vfscanf+0x222>
    7584:	2f ef       	ldi	r18, 0xFF	; 255
    7586:	3f ef       	ldi	r19, 0xFF	; 255
    7588:	02 c0       	rjmp	.+4      	; 0x758e <vfscanf+0x226>
    758a:	28 2d       	mov	r18, r8
    758c:	30 e0       	ldi	r19, 0x00	; 0
    758e:	c9 01       	movw	r24, r18
    7590:	df 91       	pop	r29
    7592:	cf 91       	pop	r28
    7594:	1f 91       	pop	r17
    7596:	0f 91       	pop	r16
    7598:	ff 90       	pop	r15
    759a:	ef 90       	pop	r14
    759c:	df 90       	pop	r13
    759e:	cf 90       	pop	r12
    75a0:	bf 90       	pop	r11
    75a2:	af 90       	pop	r10
    75a4:	9f 90       	pop	r9
    75a6:	8f 90       	pop	r8
    75a8:	7f 90       	pop	r7
    75aa:	6f 90       	pop	r6
    75ac:	08 95       	ret

000075ae <__eerd_block_m128rfa1>:
    75ae:	dc 01       	movw	r26, r24
    75b0:	cb 01       	movw	r24, r22

000075b2 <__eerd_blraw_m128rfa1>:
    75b2:	fc 01       	movw	r30, r24
    75b4:	f9 99       	sbic	0x1f, 1	; 31
    75b6:	fe cf       	rjmp	.-4      	; 0x75b4 <__eerd_blraw_m128rfa1+0x2>
    75b8:	06 c0       	rjmp	.+12     	; 0x75c6 <__eerd_blraw_m128rfa1+0x14>
    75ba:	f2 bd       	out	0x22, r31	; 34
    75bc:	e1 bd       	out	0x21, r30	; 33
    75be:	f8 9a       	sbi	0x1f, 0	; 31
    75c0:	31 96       	adiw	r30, 0x01	; 1
    75c2:	00 b4       	in	r0, 0x20	; 32
    75c4:	0d 92       	st	X+, r0
    75c6:	41 50       	subi	r20, 0x01	; 1
    75c8:	50 40       	sbci	r21, 0x00	; 0
    75ca:	b8 f7       	brcc	.-18     	; 0x75ba <__eerd_blraw_m128rfa1+0x8>
    75cc:	08 95       	ret

000075ce <__eewr_block_m128rfa1>:
    75ce:	dc 01       	movw	r26, r24
    75d0:	cb 01       	movw	r24, r22
    75d2:	03 c0       	rjmp	.+6      	; 0x75da <__eewr_block_m128rfa1+0xc>
    75d4:	2d 91       	ld	r18, X+
    75d6:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <__eewr_r18_m128rfa1>
    75da:	41 50       	subi	r20, 0x01	; 1
    75dc:	50 40       	sbci	r21, 0x00	; 0
    75de:	d0 f7       	brcc	.-12     	; 0x75d4 <__eewr_block_m128rfa1+0x6>
    75e0:	08 95       	ret

000075e2 <__eewr_byte_m128rfa1>:
    75e2:	26 2f       	mov	r18, r22

000075e4 <__eewr_r18_m128rfa1>:
    75e4:	f9 99       	sbic	0x1f, 1	; 31
    75e6:	fe cf       	rjmp	.-4      	; 0x75e4 <__eewr_r18_m128rfa1>
    75e8:	1f ba       	out	0x1f, r1	; 31
    75ea:	92 bd       	out	0x22, r25	; 34
    75ec:	81 bd       	out	0x21, r24	; 33
    75ee:	20 bd       	out	0x20, r18	; 32
    75f0:	0f b6       	in	r0, 0x3f	; 63
    75f2:	f8 94       	cli
    75f4:	fa 9a       	sbi	0x1f, 2	; 31
    75f6:	f9 9a       	sbi	0x1f, 1	; 31
    75f8:	0f be       	out	0x3f, r0	; 63
    75fa:	01 96       	adiw	r24, 0x01	; 1
    75fc:	08 95       	ret

000075fe <isspace>:
    75fe:	91 11       	cpse	r25, r1
    7600:	1d c1       	rjmp	.+570    	; 0x783c <__ctype_isfalse>
    7602:	80 32       	cpi	r24, 0x20	; 32
    7604:	19 f0       	breq	.+6      	; 0x760c <isspace+0xe>
    7606:	89 50       	subi	r24, 0x09	; 9
    7608:	85 50       	subi	r24, 0x05	; 5
    760a:	d0 f7       	brcc	.-12     	; 0x7600 <isspace+0x2>
    760c:	08 95       	ret

0000760e <strchr_P>:
    760e:	fc 01       	movw	r30, r24
    7610:	05 90       	lpm	r0, Z+
    7612:	06 16       	cp	r0, r22
    7614:	21 f0       	breq	.+8      	; 0x761e <strchr_P+0x10>
    7616:	00 20       	and	r0, r0
    7618:	d9 f7       	brne	.-10     	; 0x7610 <strchr_P+0x2>
    761a:	c0 01       	movw	r24, r0
    761c:	08 95       	ret
    761e:	31 97       	sbiw	r30, 0x01	; 1
    7620:	cf 01       	movw	r24, r30
    7622:	08 95       	ret

00007624 <strnlen_P>:
    7624:	fc 01       	movw	r30, r24
    7626:	05 90       	lpm	r0, Z+
    7628:	61 50       	subi	r22, 0x01	; 1
    762a:	70 40       	sbci	r23, 0x00	; 0
    762c:	01 10       	cpse	r0, r1
    762e:	d8 f7       	brcc	.-10     	; 0x7626 <strnlen_P+0x2>
    7630:	80 95       	com	r24
    7632:	90 95       	com	r25
    7634:	8e 0f       	add	r24, r30
    7636:	9f 1f       	adc	r25, r31
    7638:	08 95       	ret

0000763a <strnlen>:
    763a:	fc 01       	movw	r30, r24
    763c:	61 50       	subi	r22, 0x01	; 1
    763e:	70 40       	sbci	r23, 0x00	; 0
    7640:	01 90       	ld	r0, Z+
    7642:	01 10       	cpse	r0, r1
    7644:	d8 f7       	brcc	.-10     	; 0x763c <strnlen+0x2>
    7646:	80 95       	com	r24
    7648:	90 95       	com	r25
    764a:	8e 0f       	add	r24, r30
    764c:	9f 1f       	adc	r25, r31
    764e:	08 95       	ret

00007650 <strrev>:
    7650:	dc 01       	movw	r26, r24
    7652:	fc 01       	movw	r30, r24
    7654:	67 2f       	mov	r22, r23
    7656:	71 91       	ld	r23, Z+
    7658:	77 23       	and	r23, r23
    765a:	e1 f7       	brne	.-8      	; 0x7654 <strrev+0x4>
    765c:	32 97       	sbiw	r30, 0x02	; 2
    765e:	04 c0       	rjmp	.+8      	; 0x7668 <strrev+0x18>
    7660:	7c 91       	ld	r23, X
    7662:	6d 93       	st	X+, r22
    7664:	70 83       	st	Z, r23
    7666:	62 91       	ld	r22, -Z
    7668:	ae 17       	cp	r26, r30
    766a:	bf 07       	cpc	r27, r31
    766c:	c8 f3       	brcs	.-14     	; 0x7660 <strrev+0x10>
    766e:	08 95       	ret

00007670 <fgetc>:
    7670:	cf 93       	push	r28
    7672:	df 93       	push	r29
    7674:	ec 01       	movw	r28, r24
    7676:	4b 81       	ldd	r20, Y+3	; 0x03
    7678:	40 ff       	sbrs	r20, 0
    767a:	1a c0       	rjmp	.+52     	; 0x76b0 <fgetc+0x40>
    767c:	46 ff       	sbrs	r20, 6
    767e:	0a c0       	rjmp	.+20     	; 0x7694 <fgetc+0x24>
    7680:	4f 7b       	andi	r20, 0xBF	; 191
    7682:	4b 83       	std	Y+3, r20	; 0x03
    7684:	8e 81       	ldd	r24, Y+6	; 0x06
    7686:	9f 81       	ldd	r25, Y+7	; 0x07
    7688:	01 96       	adiw	r24, 0x01	; 1
    768a:	9f 83       	std	Y+7, r25	; 0x07
    768c:	8e 83       	std	Y+6, r24	; 0x06
    768e:	8a 81       	ldd	r24, Y+2	; 0x02
    7690:	28 2f       	mov	r18, r24
    7692:	2b c0       	rjmp	.+86     	; 0x76ea <fgetc+0x7a>
    7694:	42 ff       	sbrs	r20, 2
    7696:	13 c0       	rjmp	.+38     	; 0x76be <fgetc+0x4e>
    7698:	e8 81       	ld	r30, Y
    769a:	f9 81       	ldd	r31, Y+1	; 0x01
    769c:	80 81       	ld	r24, Z
    769e:	28 2f       	mov	r18, r24
    76a0:	33 27       	eor	r19, r19
    76a2:	27 fd       	sbrc	r18, 7
    76a4:	30 95       	com	r19
    76a6:	21 15       	cp	r18, r1
    76a8:	31 05       	cpc	r19, r1
    76aa:	29 f4       	brne	.+10     	; 0x76b6 <fgetc+0x46>
    76ac:	40 62       	ori	r20, 0x20	; 32
    76ae:	4b 83       	std	Y+3, r20	; 0x03
    76b0:	2f ef       	ldi	r18, 0xFF	; 255
    76b2:	3f ef       	ldi	r19, 0xFF	; 255
    76b4:	1b c0       	rjmp	.+54     	; 0x76ec <fgetc+0x7c>
    76b6:	31 96       	adiw	r30, 0x01	; 1
    76b8:	f9 83       	std	Y+1, r31	; 0x01
    76ba:	e8 83       	st	Y, r30
    76bc:	11 c0       	rjmp	.+34     	; 0x76e0 <fgetc+0x70>
    76be:	ea 85       	ldd	r30, Y+10	; 0x0a
    76c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    76c2:	ce 01       	movw	r24, r28
    76c4:	09 95       	icall
    76c6:	9c 01       	movw	r18, r24
    76c8:	97 ff       	sbrs	r25, 7
    76ca:	0a c0       	rjmp	.+20     	; 0x76e0 <fgetc+0x70>
    76cc:	9b 81       	ldd	r25, Y+3	; 0x03
    76ce:	2f 5f       	subi	r18, 0xFF	; 255
    76d0:	3f 4f       	sbci	r19, 0xFF	; 255
    76d2:	11 f0       	breq	.+4      	; 0x76d8 <fgetc+0x68>
    76d4:	80 e2       	ldi	r24, 0x20	; 32
    76d6:	01 c0       	rjmp	.+2      	; 0x76da <fgetc+0x6a>
    76d8:	80 e1       	ldi	r24, 0x10	; 16
    76da:	89 2b       	or	r24, r25
    76dc:	8b 83       	std	Y+3, r24	; 0x03
    76de:	e8 cf       	rjmp	.-48     	; 0x76b0 <fgetc+0x40>
    76e0:	8e 81       	ldd	r24, Y+6	; 0x06
    76e2:	9f 81       	ldd	r25, Y+7	; 0x07
    76e4:	01 96       	adiw	r24, 0x01	; 1
    76e6:	9f 83       	std	Y+7, r25	; 0x07
    76e8:	8e 83       	std	Y+6, r24	; 0x06
    76ea:	30 e0       	ldi	r19, 0x00	; 0
    76ec:	c9 01       	movw	r24, r18
    76ee:	df 91       	pop	r29
    76f0:	cf 91       	pop	r28
    76f2:	08 95       	ret

000076f4 <fputc>:
    76f4:	0f 93       	push	r16
    76f6:	1f 93       	push	r17
    76f8:	cf 93       	push	r28
    76fa:	df 93       	push	r29
    76fc:	8c 01       	movw	r16, r24
    76fe:	eb 01       	movw	r28, r22
    7700:	8b 81       	ldd	r24, Y+3	; 0x03
    7702:	81 ff       	sbrs	r24, 1
    7704:	1b c0       	rjmp	.+54     	; 0x773c <fputc+0x48>
    7706:	82 ff       	sbrs	r24, 2
    7708:	0d c0       	rjmp	.+26     	; 0x7724 <fputc+0x30>
    770a:	2e 81       	ldd	r18, Y+6	; 0x06
    770c:	3f 81       	ldd	r19, Y+7	; 0x07
    770e:	8c 81       	ldd	r24, Y+4	; 0x04
    7710:	9d 81       	ldd	r25, Y+5	; 0x05
    7712:	28 17       	cp	r18, r24
    7714:	39 07       	cpc	r19, r25
    7716:	64 f4       	brge	.+24     	; 0x7730 <fputc+0x3c>
    7718:	e8 81       	ld	r30, Y
    771a:	f9 81       	ldd	r31, Y+1	; 0x01
    771c:	01 93       	st	Z+, r16
    771e:	f9 83       	std	Y+1, r31	; 0x01
    7720:	e8 83       	st	Y, r30
    7722:	06 c0       	rjmp	.+12     	; 0x7730 <fputc+0x3c>
    7724:	e8 85       	ldd	r30, Y+8	; 0x08
    7726:	f9 85       	ldd	r31, Y+9	; 0x09
    7728:	80 2f       	mov	r24, r16
    772a:	09 95       	icall
    772c:	89 2b       	or	r24, r25
    772e:	31 f4       	brne	.+12     	; 0x773c <fputc+0x48>
    7730:	8e 81       	ldd	r24, Y+6	; 0x06
    7732:	9f 81       	ldd	r25, Y+7	; 0x07
    7734:	01 96       	adiw	r24, 0x01	; 1
    7736:	9f 83       	std	Y+7, r25	; 0x07
    7738:	8e 83       	std	Y+6, r24	; 0x06
    773a:	02 c0       	rjmp	.+4      	; 0x7740 <fputc+0x4c>
    773c:	0f ef       	ldi	r16, 0xFF	; 255
    773e:	1f ef       	ldi	r17, 0xFF	; 255
    7740:	c8 01       	movw	r24, r16
    7742:	df 91       	pop	r29
    7744:	cf 91       	pop	r28
    7746:	1f 91       	pop	r17
    7748:	0f 91       	pop	r16
    774a:	08 95       	ret

0000774c <ungetc>:
    774c:	9c 01       	movw	r18, r24
    774e:	fb 01       	movw	r30, r22
    7750:	83 81       	ldd	r24, Z+3	; 0x03
    7752:	80 ff       	sbrs	r24, 0
    7754:	11 c0       	rjmp	.+34     	; 0x7778 <ungetc+0x2c>
    7756:	86 fd       	sbrc	r24, 6
    7758:	0f c0       	rjmp	.+30     	; 0x7778 <ungetc+0x2c>
    775a:	9f ef       	ldi	r25, 0xFF	; 255
    775c:	2f 3f       	cpi	r18, 0xFF	; 255
    775e:	39 07       	cpc	r19, r25
    7760:	59 f0       	breq	.+22     	; 0x7778 <ungetc+0x2c>
    7762:	22 83       	std	Z+2, r18	; 0x02
    7764:	80 64       	ori	r24, 0x40	; 64
    7766:	8f 7d       	andi	r24, 0xDF	; 223
    7768:	83 83       	std	Z+3, r24	; 0x03
    776a:	86 81       	ldd	r24, Z+6	; 0x06
    776c:	97 81       	ldd	r25, Z+7	; 0x07
    776e:	01 97       	sbiw	r24, 0x01	; 1
    7770:	97 83       	std	Z+7, r25	; 0x07
    7772:	86 83       	std	Z+6, r24	; 0x06
    7774:	30 e0       	ldi	r19, 0x00	; 0
    7776:	02 c0       	rjmp	.+4      	; 0x777c <ungetc+0x30>
    7778:	2f ef       	ldi	r18, 0xFF	; 255
    777a:	3f ef       	ldi	r19, 0xFF	; 255
    777c:	c9 01       	movw	r24, r18
    777e:	08 95       	ret

00007780 <__ultoa_invert>:
    7780:	fa 01       	movw	r30, r20
    7782:	aa 27       	eor	r26, r26
    7784:	28 30       	cpi	r18, 0x08	; 8
    7786:	51 f1       	breq	.+84     	; 0x77dc <__ultoa_invert+0x5c>
    7788:	20 31       	cpi	r18, 0x10	; 16
    778a:	81 f1       	breq	.+96     	; 0x77ec <__ultoa_invert+0x6c>
    778c:	e8 94       	clt
    778e:	6f 93       	push	r22
    7790:	6e 7f       	andi	r22, 0xFE	; 254
    7792:	6e 5f       	subi	r22, 0xFE	; 254
    7794:	7f 4f       	sbci	r23, 0xFF	; 255
    7796:	8f 4f       	sbci	r24, 0xFF	; 255
    7798:	9f 4f       	sbci	r25, 0xFF	; 255
    779a:	af 4f       	sbci	r26, 0xFF	; 255
    779c:	b1 e0       	ldi	r27, 0x01	; 1
    779e:	3e d0       	rcall	.+124    	; 0x781c <__ultoa_invert+0x9c>
    77a0:	b4 e0       	ldi	r27, 0x04	; 4
    77a2:	3c d0       	rcall	.+120    	; 0x781c <__ultoa_invert+0x9c>
    77a4:	67 0f       	add	r22, r23
    77a6:	78 1f       	adc	r23, r24
    77a8:	89 1f       	adc	r24, r25
    77aa:	9a 1f       	adc	r25, r26
    77ac:	a1 1d       	adc	r26, r1
    77ae:	68 0f       	add	r22, r24
    77b0:	79 1f       	adc	r23, r25
    77b2:	8a 1f       	adc	r24, r26
    77b4:	91 1d       	adc	r25, r1
    77b6:	a1 1d       	adc	r26, r1
    77b8:	6a 0f       	add	r22, r26
    77ba:	71 1d       	adc	r23, r1
    77bc:	81 1d       	adc	r24, r1
    77be:	91 1d       	adc	r25, r1
    77c0:	a1 1d       	adc	r26, r1
    77c2:	20 d0       	rcall	.+64     	; 0x7804 <__ultoa_invert+0x84>
    77c4:	09 f4       	brne	.+2      	; 0x77c8 <__ultoa_invert+0x48>
    77c6:	68 94       	set
    77c8:	3f 91       	pop	r19
    77ca:	2a e0       	ldi	r18, 0x0A	; 10
    77cc:	26 9f       	mul	r18, r22
    77ce:	11 24       	eor	r1, r1
    77d0:	30 19       	sub	r19, r0
    77d2:	30 5d       	subi	r19, 0xD0	; 208
    77d4:	31 93       	st	Z+, r19
    77d6:	de f6       	brtc	.-74     	; 0x778e <__ultoa_invert+0xe>
    77d8:	cf 01       	movw	r24, r30
    77da:	08 95       	ret
    77dc:	46 2f       	mov	r20, r22
    77de:	47 70       	andi	r20, 0x07	; 7
    77e0:	40 5d       	subi	r20, 0xD0	; 208
    77e2:	41 93       	st	Z+, r20
    77e4:	b3 e0       	ldi	r27, 0x03	; 3
    77e6:	0f d0       	rcall	.+30     	; 0x7806 <__ultoa_invert+0x86>
    77e8:	c9 f7       	brne	.-14     	; 0x77dc <__ultoa_invert+0x5c>
    77ea:	f6 cf       	rjmp	.-20     	; 0x77d8 <__ultoa_invert+0x58>
    77ec:	46 2f       	mov	r20, r22
    77ee:	4f 70       	andi	r20, 0x0F	; 15
    77f0:	40 5d       	subi	r20, 0xD0	; 208
    77f2:	4a 33       	cpi	r20, 0x3A	; 58
    77f4:	18 f0       	brcs	.+6      	; 0x77fc <__ultoa_invert+0x7c>
    77f6:	49 5d       	subi	r20, 0xD9	; 217
    77f8:	31 fd       	sbrc	r19, 1
    77fa:	40 52       	subi	r20, 0x20	; 32
    77fc:	41 93       	st	Z+, r20
    77fe:	02 d0       	rcall	.+4      	; 0x7804 <__ultoa_invert+0x84>
    7800:	a9 f7       	brne	.-22     	; 0x77ec <__ultoa_invert+0x6c>
    7802:	ea cf       	rjmp	.-44     	; 0x77d8 <__ultoa_invert+0x58>
    7804:	b4 e0       	ldi	r27, 0x04	; 4
    7806:	a6 95       	lsr	r26
    7808:	97 95       	ror	r25
    780a:	87 95       	ror	r24
    780c:	77 95       	ror	r23
    780e:	67 95       	ror	r22
    7810:	ba 95       	dec	r27
    7812:	c9 f7       	brne	.-14     	; 0x7806 <__ultoa_invert+0x86>
    7814:	00 97       	sbiw	r24, 0x00	; 0
    7816:	61 05       	cpc	r22, r1
    7818:	71 05       	cpc	r23, r1
    781a:	08 95       	ret
    781c:	9b 01       	movw	r18, r22
    781e:	ac 01       	movw	r20, r24
    7820:	0a 2e       	mov	r0, r26
    7822:	06 94       	lsr	r0
    7824:	57 95       	ror	r21
    7826:	47 95       	ror	r20
    7828:	37 95       	ror	r19
    782a:	27 95       	ror	r18
    782c:	ba 95       	dec	r27
    782e:	c9 f7       	brne	.-14     	; 0x7822 <__ultoa_invert+0xa2>
    7830:	62 0f       	add	r22, r18
    7832:	73 1f       	adc	r23, r19
    7834:	84 1f       	adc	r24, r20
    7836:	95 1f       	adc	r25, r21
    7838:	a0 1d       	adc	r26, r0
    783a:	08 95       	ret

0000783c <__ctype_isfalse>:
    783c:	99 27       	eor	r25, r25
    783e:	88 27       	eor	r24, r24

00007840 <__ctype_istrue>:
    7840:	08 95       	ret

00007842 <__divmodsi4>:
    7842:	97 fb       	bst	r25, 7
    7844:	09 2e       	mov	r0, r25
    7846:	05 26       	eor	r0, r21
    7848:	0e d0       	rcall	.+28     	; 0x7866 <__divmodsi4_neg1>
    784a:	57 fd       	sbrc	r21, 7
    784c:	04 d0       	rcall	.+8      	; 0x7856 <__divmodsi4_neg2>
    784e:	08 d8       	rcall	.-4080   	; 0x6860 <__udivmodsi4>
    7850:	0a d0       	rcall	.+20     	; 0x7866 <__divmodsi4_neg1>
    7852:	00 1c       	adc	r0, r0
    7854:	38 f4       	brcc	.+14     	; 0x7864 <__divmodsi4_exit>

00007856 <__divmodsi4_neg2>:
    7856:	50 95       	com	r21
    7858:	40 95       	com	r20
    785a:	30 95       	com	r19
    785c:	21 95       	neg	r18
    785e:	3f 4f       	sbci	r19, 0xFF	; 255
    7860:	4f 4f       	sbci	r20, 0xFF	; 255
    7862:	5f 4f       	sbci	r21, 0xFF	; 255

00007864 <__divmodsi4_exit>:
    7864:	08 95       	ret

00007866 <__divmodsi4_neg1>:
    7866:	f6 f7       	brtc	.-4      	; 0x7864 <__divmodsi4_exit>
    7868:	90 95       	com	r25
    786a:	80 95       	com	r24
    786c:	70 95       	com	r23
    786e:	61 95       	neg	r22
    7870:	7f 4f       	sbci	r23, 0xFF	; 255
    7872:	8f 4f       	sbci	r24, 0xFF	; 255
    7874:	9f 4f       	sbci	r25, 0xFF	; 255
    7876:	08 95       	ret

00007878 <_exit>:
    7878:	f8 94       	cli

0000787a <__stop_program>:
    787a:	ff cf       	rjmp	.-2      	; 0x787a <__stop_program>
