
6loWPAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000092e  00800200  00006c0e  00006ca2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001408  00800b2e  00800b2e  000075d0  2**0
                  ALLOC
  3 .stab         00014874  00000000  00000000  000075d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001265f  00000000  00000000  0001be44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__vector_25>
      68:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      6c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      70:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      74:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      78:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      7c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      80:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_32>
      84:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      88:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      8c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      90:	0c 94 4d 1d 	jmp	0x3a9a	; 0x3a9a <__vector_36>
      94:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <__vector_37>
      98:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      9c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      a8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      ac:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      b8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      bc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      c8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      cc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      d8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      dc:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      e0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      e4:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_57>
      e8:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_58>
      ec:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__vector_59>
      f0:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_60>
      f4:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_61>
      f8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      fc:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_63>
     100:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_64>
     104:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     108:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     10c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     110:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     114:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     118:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
     11c:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_71>

00000120 <__c.1988>:
     120:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d1 e4       	ldi	r29, 0x41	; 65
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <disable_wdt>:
     138:	14 be       	out	0x34, r1	; 52
     13a:	88 e1       	ldi	r24, 0x18	; 24
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	80 93 60 00 	sts	0x0060, r24
     144:	10 92 60 00 	sts	0x0060, r1
     148:	0f be       	out	0x3f, r0	; 63

0000014a <__do_copy_data>:
     14a:	1b e0       	ldi	r17, 0x0B	; 11
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b2 e0       	ldi	r27, 0x02	; 2
     150:	ee e0       	ldi	r30, 0x0E	; 14
     152:	fc e6       	ldi	r31, 0x6C	; 108
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	0b bf       	out	0x3b, r16	; 59
     158:	02 c0       	rjmp	.+4      	; 0x15e <__do_copy_data+0x14>
     15a:	07 90       	elpm	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	ae 32       	cpi	r26, 0x2E	; 46
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <__do_copy_data+0x10>

00000164 <__do_clear_bss>:
     164:	1f e1       	ldi	r17, 0x1F	; 31
     166:	ae e2       	ldi	r26, 0x2E	; 46
     168:	bb e0       	ldi	r27, 0x0B	; 11
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	a6 33       	cpi	r26, 0x36	; 54
     170:	b1 07       	cpc	r27, r17
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 70 12 	call	0x24e0	; 0x24e0 <main>
     178:	0c 94 05 36 	jmp	0x6c0a	; 0x6c0a <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <sixlowpan_init>:
 *  Performs any needed setup of variables / functions.
 *  Call before using any 6lowpan stuff.
 */
void sixlowpan_init(void) {
	//UART_PRINT("sixlowpan_init\r\n");
	context_prefix[0].checksum = 0xfe80;
     180:	80 e8       	ldi	r24, 0x80	; 128
     182:	9e ef       	ldi	r25, 0xFE	; 254
     184:	90 93 c5 16 	sts	0x16C5, r25
     188:	80 93 c4 16 	sts	0x16C4, r24
	context_prefix[0].is_used = 1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 c6 16 	sts	0x16C6, r24

	//    sixlowpanSleep_init();
}
     192:	08 95       	ret

00000194 <sixlowpan_hc01_ping_setup_ipglobal>:
 *
 */
uint8_t * sixlowpan_hc01_ping_setup_ipglobal(uint8_t sequence) {
	//UART_PRINT("sixlowpan_hc01_ping_setup_ipglobal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     194:	28 ed       	ldi	r18, 0xD8	; 216
     196:	36 e1       	ldi	r19, 0x16	; 22
     198:	30 93 4a 17 	sts	0x174A, r19
     19c:	20 93 49 17 	sts	0x1749, r18

	uint8_t * ipptr;

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	90 93 d8 16 	sts	0x16D8, r25
	IPHC_BUF->encoding[1] = 0;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     1a6:	9a e3       	ldi	r25, 0x3A	; 58
     1a8:	90 93 db 16 	sts	0x16DB, r25
	hc01_ptr += 1;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     1ac:	90 ed       	ldi	r25, 0xD0	; 208
     1ae:	90 93 d9 16 	sts	0x16D9, r25
	IPHC_BUF->encoding[1] |= 1 << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is fancy-boy address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_I;
     1b2:	90 93 da 16 	sts	0x16DA, r25

	ipptr = hc01_ptr;

	hc01_ptr += 16;
	mac_hdr_len = 20;
     1b6:	94 e1       	ldi	r25, 0x14	; 20
     1b8:	90 93 4b 17 	sts	0x174B, r25

	/* Send echo reply */
	UIP_ICMP_BUF->type = ICMP6_ECHO_REQUEST;
     1bc:	f9 01       	movw	r30, r18
     1be:	74 96       	adiw	r30, 0x14	; 20
     1c0:	90 e8       	ldi	r25, 0x80	; 128
     1c2:	90 93 ec 16 	sts	0x16EC, r25
	UIP_ICMP_BUF->icmpchksum = 0;
     1c6:	13 82       	std	Z+3, r1	; 0x03
     1c8:	12 82       	std	Z+2, r1	; 0x02
	UIP_ICMP_BUF->icode = 0;
     1ca:	11 82       	std	Z+1, r1	; 0x01

	/* ICMP Header */
	hc01_ptr += 4;

	*hc01_ptr++ = 0; /* Identifier - not used */
     1cc:	10 92 f0 16 	sts	0x16F0, r1
	*hc01_ptr++ = 0;
     1d0:	10 92 f1 16 	sts	0x16F1, r1

	*hc01_ptr++ = 0; /* Sequence number */
     1d4:	10 92 f2 16 	sts	0x16F2, r1
	*hc01_ptr++ = sequence;
     1d8:	80 93 f3 16 	sts	0x16F3, r24
     1dc:	24 5e       	subi	r18, 0xE4	; 228
     1de:	3f 4f       	sbci	r19, 0xFF	; 255
     1e0:	30 93 31 0b 	sts	0x0B31, r19
     1e4:	20 93 30 0b 	sts	0x0B30, r18

	/* Just send echo request, no data with it */
	mac_len = mac_hdr_len + 8;
     1e8:	8c e1       	ldi	r24, 0x1C	; 28
     1ea:	80 93 4c 17 	sts	0x174C, r24

	return ipptr;
}
     1ee:	c9 01       	movw	r24, r18
     1f0:	48 97       	sbiw	r24, 0x18	; 24
     1f2:	08 95       	ret

000001f4 <sixlowpan_hc01_udp_setup_ipglobal>:
 *  @endcode
 */
uint8_t * sixlowpan_hc01_udp_setup_ipglobal(void) {
	//UART_PRINT("sixlowpan_hc01_udp_setup_ipglobal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     1f4:	88 ed       	ldi	r24, 0xD8	; 216
     1f6:	96 e1       	ldi	r25, 0x16	; 22
     1f8:	90 93 4a 17 	sts	0x174A, r25
     1fc:	80 93 49 17 	sts	0x1749, r24

	uint8_t * ipptr;

	udpLocalAddr = DEFAULT_COORD_ADDR;
     200:	10 92 35 0b 	sts	0x0B35, r1
     204:	10 92 34 0b 	sts	0x0B34, r1

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	20 93 d8 16 	sts	0x16D8, r18
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_NH_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     20e:	20 ef       	ldi	r18, 0xF0	; 240
     210:	20 93 d9 16 	sts	0x16D9, r18
	IPHC_BUF->encoding[1] |= 1 << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is fancy-boy address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_I;
     214:	20 ed       	ldi	r18, 0xD0	; 208
     216:	20 93 da 16 	sts	0x16DA, r18

	ipptr = hc01_ptr;

	hc01_ptr += 16;
     21a:	43 96       	adiw	r24, 0x13	; 19
     21c:	90 93 31 0b 	sts	0x0B31, r25
     220:	80 93 30 0b 	sts	0x0B30, r24
	mac_hdr_len = 19;
     224:	23 e1       	ldi	r18, 0x13	; 19
     226:	20 93 4b 17 	sts	0x174B, r18
	mac_len = mac_hdr_len;
     22a:	20 93 4c 17 	sts	0x174C, r18

	return ipptr;
}
     22e:	40 97       	sbiw	r24, 0x10	; 16
     230:	08 95       	ret

00000232 <sixlowpan_hc01_udp_setup_iplocal>:
 *
 */
void sixlowpan_hc01_udp_setup_iplocal(uint16_t addr) {
	//UART_PRINT("sixlowpan_hc01_udp_setup_iplocal\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     232:	28 ed       	ldi	r18, 0xD8	; 216
     234:	36 e1       	ldi	r19, 0x16	; 22
     236:	30 93 4a 17 	sts	0x174A, r19
     23a:	20 93 49 17 	sts	0x1749, r18

	udpLocalAddr = addr;
     23e:	90 93 35 0b 	sts	0x0B35, r25
     242:	80 93 34 0b 	sts	0x0B34, r24

	hc01_ptr = mac_ptr + 3;
     246:	2d 5f       	subi	r18, 0xFD	; 253
     248:	3f 4f       	sbci	r19, 0xFF	; 255
     24a:	30 93 31 0b 	sts	0x0B31, r19
     24e:	20 93 30 0b 	sts	0x0B30, r18

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     252:	93 e0       	ldi	r25, 0x03	; 3
     254:	90 93 d8 16 	sts	0x16D8, r25
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_NH_C;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_64;
     258:	80 ef       	ldi	r24, 0xF0	; 240
     25a:	80 93 d9 16 	sts	0x16D9, r24
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Source IP address: Global prefix */
	IPHC_BUF->encoding[1] |= 1;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_0;
     25e:	8d ed       	ldi	r24, 0xDD	; 221
     260:	80 93 da 16 	sts	0x16DA, r24

	mac_hdr_len = 3;
     264:	90 93 4b 17 	sts	0x174B, r25
	mac_len = mac_hdr_len;
     268:	90 93 4c 17 	sts	0x174C, r25

	return;
}
     26c:	08 95       	ret

0000026e <sixlowpan_hc01_udp_setup_ports>:
 *  The UDP packet must already have been set up with
 *  a call to sixlowpan_hc01_setup_ipxxx(), or the hc01_ptr
 *  must be manually set to point to the proper point in the
 *  6lowpan buffer.
 */
void sixlowpan_hc01_udp_setup_ports(uint16_t srcport, uint16_t destport) {
     26e:	9c 01       	movw	r18, r24
	//UART_PRINT("sixlowpan_hc01_udp_setup_ports\r\n");
	/* UDP Port Calculations */
	if (srcport >= SIXLOWPAN_UDP_PORT_MIN && srcport < SIXLOWPAN_UDP_PORT_MAX
     270:	80 5b       	subi	r24, 0xB0	; 176
     272:	90 4f       	sbci	r25, 0xF0	; 240
     274:	0f 97       	sbiw	r24, 0x0f	; 15
     276:	f0 f4       	brcc	.+60     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
     278:	80 ef       	ldi	r24, 0xF0	; 240
     27a:	60 3b       	cpi	r22, 0xB0	; 176
     27c:	78 07       	cpc	r23, r24
     27e:	d0 f0       	brcs	.+52     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
     280:	80 ef       	ldi	r24, 0xF0	; 240
     282:	6f 3b       	cpi	r22, 0xBF	; 191
     284:	78 07       	cpc	r23, r24
     286:	b0 f4       	brcc	.+44     	; 0x2b4 <sixlowpan_hc01_udp_setup_ports+0x46>
			&& destport >= SIXLOWPAN_UDP_PORT_MIN && destport
			< SIXLOWPAN_UDP_PORT_MAX) {
		/* we can compress. Copy compressed ports, full chcksum */
		*hc01_ptr = SIXLOWPAN_NHC_UDP_C;
     288:	e0 91 30 0b 	lds	r30, 0x0B30
     28c:	f0 91 31 0b 	lds	r31, 0x0B31
     290:	8b ef       	ldi	r24, 0xFB	; 251
     292:	80 83       	st	Z, r24
		*(hc01_ptr + 1) = (u8_t) ((srcport - SIXLOWPAN_UDP_PORT_MIN) << 4)
     294:	86 2f       	mov	r24, r22
     296:	80 5b       	subi	r24, 0xB0	; 176
     298:	92 2f       	mov	r25, r18
     29a:	92 95       	swap	r25
     29c:	90 7f       	andi	r25, 0xF0	; 240
     29e:	89 0f       	add	r24, r25
     2a0:	81 83       	std	Z+1, r24	; 0x01
				+ (u8_t) ((destport - SIXLOWPAN_UDP_PORT_MIN));

		hc01_ptr += 2;
     2a2:	32 96       	adiw	r30, 0x02	; 2
     2a4:	f0 93 31 0b 	sts	0x0B31, r31
     2a8:	e0 93 30 0b 	sts	0x0B30, r30
		mac_hdr_len += 2;
     2ac:	80 91 4b 17 	lds	r24, 0x174B
     2b0:	8e 5f       	subi	r24, 0xFE	; 254
     2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <sixlowpan_hc01_udp_setup_ports+0x6a>
	} else {
		/* we cannot compress. Copy uncompressed ports, full chcksum */
		*hc01_ptr = SIXLOWPAN_NHC_UDP_I;
     2b4:	e0 91 30 0b 	lds	r30, 0x0B30
     2b8:	f0 91 31 0b 	lds	r31, 0x0B31
     2bc:	88 ef       	ldi	r24, 0xF8	; 248
     2be:	80 83       	st	Z, r24
		*((uint16_t *) (hc01_ptr + 1)) = HTONS(srcport);
     2c0:	31 83       	std	Z+1, r19	; 0x01
     2c2:	22 83       	std	Z+2, r18	; 0x02
		*((uint16_t *) (hc01_ptr + 3)) = HTONS(destport);
     2c4:	73 83       	std	Z+3, r23	; 0x03
     2c6:	64 83       	std	Z+4, r22	; 0x04

		hc01_ptr += 5;
     2c8:	35 96       	adiw	r30, 0x05	; 5
     2ca:	f0 93 31 0b 	sts	0x0B31, r31
     2ce:	e0 93 30 0b 	sts	0x0B30, r30
		mac_hdr_len += 5;
     2d2:	80 91 4b 17 	lds	r24, 0x174B
     2d6:	8b 5f       	subi	r24, 0xFB	; 251
     2d8:	80 93 4b 17 	sts	0x174B, r24
	}

	hc01_chksum_ptr = (uint16_t *) hc01_ptr;
     2dc:	e0 91 30 0b 	lds	r30, 0x0B30
     2e0:	f0 91 31 0b 	lds	r31, 0x0B31
     2e4:	f0 93 33 0b 	sts	0x0B33, r31
     2e8:	e0 93 32 0b 	sts	0x0B32, r30

	/* Add checksum of source and destination */
	*hc01_chksum_ptr = srcport + destport;
     2ec:	cb 01       	movw	r24, r22
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	91 83       	std	Z+1, r25	; 0x01
     2f4:	80 83       	st	Z, r24

	/* Check for overflow... */
	if ((*hc01_chksum_ptr < srcport) || (*hc01_chksum_ptr < destport)) {
     2f6:	82 17       	cp	r24, r18
     2f8:	93 07       	cpc	r25, r19
     2fa:	18 f0       	brcs	.+6      	; 0x302 <sixlowpan_hc01_udp_setup_ports+0x94>
     2fc:	86 17       	cp	r24, r22
     2fe:	97 07       	cpc	r25, r23
     300:	18 f4       	brcc	.+6      	; 0x308 <sixlowpan_hc01_udp_setup_ports+0x9a>
		(*hc01_chksum_ptr)++;
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	80 83       	st	Z, r24
	}

	hc01_ptr += 2;
     308:	32 96       	adiw	r30, 0x02	; 2
     30a:	f0 93 31 0b 	sts	0x0B31, r31
     30e:	e0 93 30 0b 	sts	0x0B30, r30
	mac_hdr_len += 2;
     312:	80 91 4b 17 	lds	r24, 0x174B
     316:	8e 5f       	subi	r24, 0xFE	; 254
     318:	80 93 4b 17 	sts	0x174B, r24

	mac_len = mac_hdr_len;
     31c:	80 93 4c 17 	sts	0x174C, r24
}
     320:	08 95       	ret

00000322 <sixlowpan_hc01_udp_get_payloadptr>:
 *  The use can use this to load a payload into the sixlowpan
 *  buffer directly.
 */
uint8_t * sixlowpan_hc01_udp_get_payloadptr(void) {
	return hc01_ptr;
}
     322:	80 91 30 0b 	lds	r24, 0x0B30
     326:	90 91 31 0b 	lds	r25, 0x0B31
     32a:	08 95       	ret

0000032c <sixlowpan_hc01_udp_set_payloadsize>:

/** @brief Set amount of data user has loaded into payload section
 *
 */
void sixlowpan_hc01_udp_set_payloadsize(uint8_t size) {
	hc01_ptr += size;
     32c:	20 91 30 0b 	lds	r18, 0x0B30
     330:	30 91 31 0b 	lds	r19, 0x0B31
     334:	28 0f       	add	r18, r24
     336:	31 1d       	adc	r19, r1
     338:	30 93 31 0b 	sts	0x0B31, r19
     33c:	20 93 30 0b 	sts	0x0B30, r18
	mac_len += size;
     340:	90 91 4c 17 	lds	r25, 0x174C
     344:	98 0f       	add	r25, r24
     346:	90 93 4c 17 	sts	0x174C, r25
}
     34a:	08 95       	ret

0000034c <sixlowpan_hc01_pseudochksum>:
 * next-header field, and packet length. This
 * routine calculates what the checksum should be for
 * a HC01 packet, but without actually decompressing
 * the entire packet (which would waste space).
 */
uint16_t sixlowpan_hc01_pseudochksum(void) {
     34c:	7f 92       	push	r7
     34e:	8f 92       	push	r8
     350:	9f 92       	push	r9
     352:	af 92       	push	r10
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29

	uint8_t * hc01_ptr_temp;
	uint8_t mac_hdr_len_temp;

	/* This will be restored at the end */
	mac_hdr_len_temp = mac_hdr_len;
     366:	70 90 4b 17 	lds	r7, 0x174B
	hc01_ptr_temp = hc01_ptr;
     36a:	80 90 30 0b 	lds	r8, 0x0B30
     36e:	90 90 31 0b 	lds	r9, 0x0B31

	hc01_ptr = mac_ptr + 3;
     372:	a0 91 49 17 	lds	r26, 0x1749
     376:	b0 91 4a 17 	lds	r27, 0x174A
     37a:	13 96       	adiw	r26, 0x03	; 3
     37c:	b0 93 31 0b 	sts	0x0B31, r27
     380:	a0 93 30 0b 	sts	0x0B30, r26
     384:	13 97       	sbiw	r26, 0x03	; 3
	mac_hdr_len = 0;
     386:	10 92 4b 17 	sts	0x174B, r1

	/* These don't affect checksum, just location */
	/* Version & Flow Uncompressed */
	if ((IPHC_BUF->encoding[0] & 0x40) == 0) {
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	8c 91       	ld	r24, X
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	68 2f       	mov	r22, r24
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	86 fd       	sbrc	r24, 6
     396:	10 c0       	rjmp	.+32     	; 0x3b8 <sixlowpan_hc01_pseudochksum+0x6c>
		if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     398:	87 fd       	sbrc	r24, 7
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <sixlowpan_hc01_pseudochksum+0x5e>
			/* Traffic class is carried inline */
			hc01_ptr += 4;
     39c:	17 96       	adiw	r26, 0x07	; 7
     39e:	b0 93 31 0b 	sts	0x0B31, r27
     3a2:	a0 93 30 0b 	sts	0x0B30, r26
     3a6:	17 97       	sbiw	r26, 0x07	; 7
     3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
		} else {
			/* Traffic class is compressed */
			hc01_ptr += 3;
     3aa:	16 96       	adiw	r26, 0x06	; 6
     3ac:	b0 93 31 0b 	sts	0x0B31, r27
     3b0:	a0 93 30 0b 	sts	0x0B30, r26
     3b4:	16 97       	sbiw	r26, 0x06	; 6
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
		}
	} else
	/* Version & Flow Compressed */
	{
		if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     3b8:	87 fd       	sbrc	r24, 7
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <sixlowpan_hc01_pseudochksum+0x7c>
			/* Traffic class is carried inline */
			hc01_ptr += 1;
     3bc:	14 96       	adiw	r26, 0x04	; 4
     3be:	b0 93 31 0b 	sts	0x0B31, r27
     3c2:	a0 93 30 0b 	sts	0x0B30, r26
     3c6:	14 97       	sbiw	r26, 0x04	; 4
			;
		}
	}

	/* Next-header field */
	if (IPHC_BUF->encoding[0] & SIXLOWPAN_IPHC_NH_C) {
     3c8:	65 ff       	sbrs	r22, 5
     3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <sixlowpan_hc01_pseudochksum+0x8a>
     3cc:	29 e1       	ldi	r18, 0x19	; 25
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <sixlowpan_hc01_pseudochksum+0xa4>
		checksum += UIP_PROTO_UDP; /* Currently only UDP compressed like that */
		checksum += 8; /* UDP has 8 bytes in UDP header, this will not be calculated
		 properly later when 'upper layer length' is found, so we
		 add them here */
	} else {
		checksum += *hc01_ptr;
     3d6:	e0 91 30 0b 	lds	r30, 0x0B30
     3da:	f0 91 31 0b 	lds	r31, 0x0B31
     3de:	81 91       	ld	r24, Z+
     3e0:	28 2f       	mov	r18, r24
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
		hc01_ptr++;
     3e8:	f0 93 31 0b 	sts	0x0B31, r31
     3ec:	e0 93 30 0b 	sts	0x0B30, r30
	}

	/* Source address IID is ALWAYS based on MAC address */
	checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x30) >> 4].checksum;
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	8c 91       	ld	r24, X
     3f4:	c8 2f       	mov	r28, r24
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
	checksum += (macConfig.panId | (uint16_t) 0x0200);
     3f8:	80 91 5c 18 	lds	r24, 0x185C
     3fc:	90 91 5d 18 	lds	r25, 0x185D
     400:	92 60       	ori	r25, 0x02	; 2
     402:	5c 01       	movw	r10, r24
     404:	cc 24       	eor	r12, r12
     406:	dd 24       	eor	r13, r13
     408:	ce 01       	movw	r24, r28
     40a:	80 73       	andi	r24, 0x30	; 48
     40c:	90 70       	andi	r25, 0x00	; 0
     40e:	b4 e0       	ldi	r27, 0x04	; 4
     410:	95 95       	asr	r25
     412:	87 95       	ror	r24
     414:	ba 95       	dec	r27
     416:	e1 f7       	brne	.-8      	; 0x410 <sixlowpan_hc01_pseudochksum+0xc4>
     418:	fc 01       	movw	r30, r24
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	e8 0f       	add	r30, r24
     420:	f9 1f       	adc	r31, r25
     422:	ec 53       	subi	r30, 0x3C	; 60
     424:	f9 4e       	sbci	r31, 0xE9	; 233
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	7c 01       	movw	r14, r24
     42c:	00 e0       	ldi	r16, 0x00	; 0
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	80 91 5e 18 	lds	r24, 0x185E
     434:	90 91 5f 18 	lds	r25, 0x185F
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	e8 0e       	add	r14, r24
     43e:	f9 1e       	adc	r15, r25
     440:	0a 1f       	adc	r16, r26
     442:	1b 1f       	adc	r17, r27
	checksum += 0xfe00;
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	9e ef       	ldi	r25, 0xFE	; 254
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e8 0e       	add	r14, r24
     44e:	f9 1e       	adc	r15, r25
     450:	0a 1f       	adc	r16, r26
     452:	1b 1f       	adc	r17, r27
	checksum += 0x00ff;
     454:	ea 0c       	add	r14, r10
     456:	fb 1c       	adc	r15, r11
     458:	0c 1d       	adc	r16, r12
     45a:	1d 1d       	adc	r17, r13
	checksum += macConfig.shortAddress;
     45c:	e2 0e       	add	r14, r18
     45e:	f3 1e       	adc	r15, r19
     460:	04 1f       	adc	r16, r20
     462:	15 1f       	adc	r17, r21

	/* Check if TTL is uncompressed... */
	if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     464:	68 71       	andi	r22, 0x18	; 24
     466:	70 70       	andi	r23, 0x00	; 0
     468:	67 2b       	or	r22, r23
     46a:	49 f4       	brne	.+18     	; 0x47e <sixlowpan_hc01_pseudochksum+0x132>
		hc01_ptr++;
     46c:	80 91 30 0b 	lds	r24, 0x0B30
     470:	90 91 31 0b 	lds	r25, 0x0B31
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	90 93 31 0b 	sts	0x0B31, r25
     47a:	80 93 30 0b 	sts	0x0B30, r24
	}

	/* Dest address could be anything... more complicated! */
	switch (IPHC_BUF->encoding[1] & 0x0C) {
     47e:	ce 01       	movw	r24, r28
     480:	8c 70       	andi	r24, 0x0C	; 12
     482:	90 70       	andi	r25, 0x00	; 0
     484:	84 30       	cpi	r24, 0x04	; 4
     486:	91 05       	cpc	r25, r1
     488:	09 f4       	brne	.+2      	; 0x48c <sixlowpan_hc01_pseudochksum+0x140>
     48a:	5f c0       	rjmp	.+190    	; 0x54a <sixlowpan_hc01_pseudochksum+0x1fe>
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	91 05       	cpc	r25, r1
     490:	24 f4       	brge	.+8      	; 0x49a <sixlowpan_hc01_pseudochksum+0x14e>
     492:	89 2b       	or	r24, r25
     494:	09 f4       	brne	.+2      	; 0x498 <sixlowpan_hc01_pseudochksum+0x14c>
     496:	82 c0       	rjmp	.+260    	; 0x59c <sixlowpan_hc01_pseudochksum+0x250>
     498:	97 c0       	rjmp	.+302    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
     49a:	88 30       	cpi	r24, 0x08	; 8
     49c:	91 05       	cpc	r25, r1
     49e:	d1 f0       	breq	.+52     	; 0x4d4 <sixlowpan_hc01_pseudochksum+0x188>
     4a0:	0c 97       	sbiw	r24, 0x0c	; 12
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <sixlowpan_hc01_pseudochksum+0x15a>
     4a4:	91 c0       	rjmp	.+290    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
	case SIXLOWPAN_IPHC_DAM_0:

		/* IID Based on MAC Address */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
		checksum += (macConfig.panId | (uint16_t) 0x0200);
     4a6:	ce 01       	movw	r24, r28
     4a8:	83 70       	andi	r24, 0x03	; 3
     4aa:	90 70       	andi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e8 0f       	add	r30, r24
     4b4:	f9 1f       	adc	r31, r25
     4b6:	ec 53       	subi	r30, 0x3C	; 60
     4b8:	f9 4e       	sbci	r31, 0xE9	; 233
     4ba:	80 81       	ld	r24, Z
     4bc:	91 81       	ldd	r25, Z+1	; 0x01
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	91 40       	sbci	r25, 0x01	; 1
     4c6:	af 4f       	sbci	r26, 0xFF	; 255
     4c8:	bf 4f       	sbci	r27, 0xFF	; 255
		checksum += 0xfe00;
     4ca:	8a 0d       	add	r24, r10
     4cc:	9b 1d       	adc	r25, r11
     4ce:	ac 1d       	adc	r26, r12
     4d0:	bd 1d       	adc	r27, r13
     4d2:	36 c0       	rjmp	.+108    	; 0x540 <sixlowpan_hc01_pseudochksum+0x1f4>
		checksum += 0x00ff;
		checksum += 0x0000; /* Router is always address 0 we assume!! */
		break;

	case SIXLOWPAN_IPHC_DAM_16:
		if ((*hc01_ptr & 0x80) == 0) {
     4d4:	e0 91 30 0b 	lds	r30, 0x0B30
     4d8:	f0 91 31 0b 	lds	r31, 0x0B31
     4dc:	40 81       	ld	r20, Z
     4de:	21 81       	ldd	r18, Z+1	; 0x01
     4e0:	47 fd       	sbrc	r20, 7
     4e2:	20 c0       	rjmp	.+64     	; 0x524 <sixlowpan_hc01_pseudochksum+0x1d8>
			/* unicast address */
			checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	94 2f       	mov	r25, r20
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	28 2b       	or	r18, r24
     4ec:	39 2b       	or	r19, r25
     4ee:	44 27       	eor	r20, r20
     4f0:	37 fd       	sbrc	r19, 7
     4f2:	40 95       	com	r20
     4f4:	54 2f       	mov	r21, r20
     4f6:	ce 01       	movw	r24, r28
     4f8:	83 70       	andi	r24, 0x03	; 3
     4fa:	90 70       	andi	r25, 0x00	; 0
     4fc:	fc 01       	movw	r30, r24
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	e8 0f       	add	r30, r24
     504:	f9 1f       	adc	r31, r25
     506:	ec 53       	subi	r30, 0x3C	; 60
     508:	f9 4e       	sbci	r31, 0xE9	; 233
     50a:	80 81       	ld	r24, Z
     50c:	91 81       	ldd	r25, Z+1	; 0x01
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	28 0f       	add	r18, r24
     514:	39 1f       	adc	r19, r25
     516:	4a 1f       	adc	r20, r26
     518:	5b 1f       	adc	r21, r27
			checksum += (*hc01_ptr << 8) | (*(hc01_ptr + 1));
     51a:	e2 0e       	add	r14, r18
     51c:	f3 1e       	adc	r15, r19
     51e:	04 1f       	adc	r16, r20
     520:	15 1f       	adc	r17, r21
     522:	52 c0       	rjmp	.+164    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
			hc01_ptr += 2;
		} else {
			/* Multicast address - we just assume we know the multicast group */
			checksum += 0xFF00;
     524:	82 2f       	mov	r24, r18
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a0 e0       	ldi	r26, 0x00	; 0
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	80 50       	subi	r24, 0x00	; 0
     52e:	91 40       	sbci	r25, 0x01	; 1
     530:	af 4f       	sbci	r26, 0xFF	; 255
     532:	bf 4f       	sbci	r27, 0xFF	; 255
			checksum += ((*hc01_ptr >> 1) & 0x0F);
     534:	46 95       	lsr	r20
     536:	4f 70       	andi	r20, 0x0F	; 15
     538:	84 0f       	add	r24, r20
     53a:	91 1d       	adc	r25, r1
     53c:	a1 1d       	adc	r26, r1
     53e:	b1 1d       	adc	r27, r1
			checksum += *(hc01_ptr + 1);
     540:	e8 0e       	add	r14, r24
     542:	f9 1e       	adc	r15, r25
     544:	0a 1f       	adc	r16, r26
     546:	1b 1f       	adc	r17, r27
     548:	3f c0       	rjmp	.+126    	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>
			hc01_ptr += 2;
		}
		break;
	case SIXLOWPAN_IPHC_DAM_64:
		/* Add lower 64-bits */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
     54a:	ce 01       	movw	r24, r28
     54c:	83 70       	andi	r24, 0x03	; 3
     54e:	90 70       	andi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	ee 0f       	add	r30, r30
     554:	ff 1f       	adc	r31, r31
     556:	e8 0f       	add	r30, r24
     558:	f9 1f       	adc	r31, r25
     55a:	ec 53       	subi	r30, 0x3C	; 60
     55c:	f9 4e       	sbci	r31, 0xE9	; 233
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e8 0e       	add	r14, r24
     568:	f9 1e       	adc	r15, r25
     56a:	0a 1f       	adc	r16, r26
     56c:	1b 1f       	adc	r17, r27
		for (i = 0; i < 8; i += 2) {
			checksum += (uint16_t) (*(hc01_ptr + i) << 8)
     56e:	e0 91 30 0b 	lds	r30, 0x0B30
     572:	f0 91 31 0b 	lds	r31, 0x0B31
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	30 81       	ld	r19, Z
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	81 81       	ldd	r24, Z+1	; 0x01
     57e:	d9 01       	movw	r26, r18
     580:	a8 0f       	add	r26, r24
     582:	b1 1d       	adc	r27, r1
     584:	cd 01       	movw	r24, r26
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e8 0e       	add	r14, r24
     58c:	f9 1e       	adc	r15, r25
     58e:	0a 1f       	adc	r16, r26
     590:	1b 1f       	adc	r17, r27
		}
		break;
	case SIXLOWPAN_IPHC_DAM_64:
		/* Add lower 64-bits */
		checksum += context_prefix[(IPHC_BUF->encoding[1] & 0x03)].checksum;
		for (i = 0; i < 8; i += 2) {
     592:	4e 5f       	subi	r20, 0xFE	; 254
     594:	32 96       	adiw	r30, 0x02	; 2
     596:	48 30       	cpi	r20, 0x08	; 8
     598:	79 f7       	brne	.-34     	; 0x578 <sixlowpan_hc01_pseudochksum+0x22c>
     59a:	16 c0       	rjmp	.+44     	; 0x5c8 <sixlowpan_hc01_pseudochksum+0x27c>

		hc01_ptr += 8;
		break;
	case SIXLOWPAN_IPHC_DAM_I:
		for (i = 0; i < 16; i += 2) {
			checksum += (uint16_t) (*(hc01_ptr + i) << 8)
     59c:	e0 91 30 0b 	lds	r30, 0x0B30
     5a0:	f0 91 31 0b 	lds	r31, 0x0B31
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	30 81       	ld	r19, Z
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	b9 01       	movw	r22, r18
     5ae:	68 0f       	add	r22, r24
     5b0:	71 1d       	adc	r23, r1
     5b2:	cb 01       	movw	r24, r22
     5b4:	a0 e0       	ldi	r26, 0x00	; 0
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e8 0e       	add	r14, r24
     5ba:	f9 1e       	adc	r15, r25
     5bc:	0a 1f       	adc	r16, r26
     5be:	1b 1f       	adc	r17, r27
		}

		hc01_ptr += 8;
		break;
	case SIXLOWPAN_IPHC_DAM_I:
		for (i = 0; i < 16; i += 2) {
     5c0:	4e 5f       	subi	r20, 0xFE	; 254
     5c2:	32 96       	adiw	r30, 0x02	; 2
     5c4:	40 31       	cpi	r20, 0x10	; 16
     5c6:	79 f7       	brne	.-34     	; 0x5a6 <sixlowpan_hc01_pseudochksum+0x25a>
		hc01_ptr += 16;
		break;
	}

	/* Restore pointer */
	hc01_ptr = hc01_ptr_temp;
     5c8:	90 92 31 0b 	sts	0x0B31, r9
     5cc:	80 92 30 0b 	sts	0x0B30, r8
	mac_hdr_len = mac_hdr_len_temp;
     5d0:	70 92 4b 17 	sts	0x174B, r7

	/* Upper length packet length */
	checksum += mac_len - mac_hdr_len;
     5d4:	80 91 4c 17 	lds	r24, 0x174C
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	87 19       	sub	r24, r7
     5dc:	91 09       	sbc	r25, r1
     5de:	9c 01       	movw	r18, r24
     5e0:	44 27       	eor	r20, r20
     5e2:	37 fd       	sbrc	r19, 7
     5e4:	40 95       	com	r20
     5e6:	54 2f       	mov	r21, r20
     5e8:	2e 0d       	add	r18, r14
     5ea:	3f 1d       	adc	r19, r15
     5ec:	40 1f       	adc	r20, r16
     5ee:	51 1f       	adc	r21, r17
     5f0:	08 c0       	rjmp	.+16     	; 0x602 <sixlowpan_hc01_pseudochksum+0x2b6>

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
     5f2:	ca 01       	movw	r24, r20
     5f4:	aa 27       	eor	r26, r26
     5f6:	bb 27       	eor	r27, r27
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	9c 01       	movw	r18, r24
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0

	/* Upper length packet length */
	checksum += mac_len - mac_hdr_len;

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
     602:	da 01       	movw	r26, r20
     604:	c9 01       	movw	r24, r18
     606:	80 70       	andi	r24, 0x00	; 0
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	a1 05       	cpc	r26, r1
     60e:	b1 05       	cpc	r27, r1
     610:	81 f7       	brne	.-32     	; 0x5f2 <sixlowpan_hc01_pseudochksum+0x2a6>
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
	}

	return (uint16_t) checksum;

}
     612:	c9 01       	movw	r24, r18
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	08 95       	ret

00000630 <chksum>:
 * @param len Length of data to checksum
 * @returns checksum
 *
 * Calculates 16-bit checksum for use in ICMPv6 etc.
 */
static u16_t chksum(u16_t sum, const u8_t *data, u16_t len) {
     630:	9c 01       	movw	r18, r24
	u16_t t;
	const u8_t *dataptr;
	const u8_t *last_byte;

	dataptr = data;
	last_byte = data + len - 1;
     632:	41 50       	subi	r20, 0x01	; 1
     634:	50 40       	sbci	r21, 0x00	; 0
     636:	46 0f       	add	r20, r22
     638:	57 1f       	adc	r21, r23
     63a:	fb 01       	movw	r30, r22
     63c:	0e c0       	rjmp	.+28     	; 0x65a <chksum+0x2a>

	while (dataptr < last_byte) { /* At least two more bytes */
		t = (dataptr[0] << 8) + dataptr[1];
     63e:	70 81       	ld	r23, Z
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	81 81       	ldd	r24, Z+1	; 0x01
     644:	db 01       	movw	r26, r22
     646:	a8 0f       	add	r26, r24
     648:	b1 1d       	adc	r27, r1
		sum += t;
     64a:	2a 0f       	add	r18, r26
     64c:	3b 1f       	adc	r19, r27

		if (sum < t) {
     64e:	2a 17       	cp	r18, r26
     650:	3b 07       	cpc	r19, r27
     652:	10 f4       	brcc	.+4      	; 0x658 <chksum+0x28>
			sum++; /* carry */
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
		}

		dataptr += 2;
     658:	32 96       	adiw	r30, 0x02	; 2
	const u8_t *last_byte;

	dataptr = data;
	last_byte = data + len - 1;

	while (dataptr < last_byte) { /* At least two more bytes */
     65a:	e4 17       	cp	r30, r20
     65c:	f5 07       	cpc	r31, r21
     65e:	78 f3       	brcs	.-34     	; 0x63e <chksum+0xe>
		}

		dataptr += 2;
	}

	if (dataptr == last_byte) {
     660:	e4 17       	cp	r30, r20
     662:	f5 07       	cpc	r31, r21
     664:	49 f4       	brne	.+18     	; 0x678 <chksum+0x48>
		t = (dataptr[0] << 8) + 0;
     666:	90 81       	ld	r25, Z
     668:	80 e0       	ldi	r24, 0x00	; 0
		sum += t;
     66a:	28 0f       	add	r18, r24
     66c:	39 1f       	adc	r19, r25

		if (sum < t) {
     66e:	28 17       	cp	r18, r24
     670:	39 07       	cpc	r19, r25
     672:	10 f4       	brcc	.+4      	; 0x678 <chksum+0x48>
			sum++; /* carry */
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}

	/* Return sum in host byte order. */
	return sum;
}
     678:	c9 01       	movw	r24, r18
     67a:	08 95       	ret

0000067c <sixlowpan_hc01_udp_send>:
 *  The UDP packet must already have been set up with
 *  a call to sixlowpan_hc01_setup_ipxxx() and
 *  sixlowpan_hc01_setup_ports(). This routine adds
 *  the checksum and sends out the MAC layer.
 */
void sixlowpan_hc01_udp_send(void) {
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
		//sixlowpan_hc01_gen_rs();
		//return;
	}

	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     68a:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* UDP Header */
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
     68e:	c0 91 32 0b 	lds	r28, 0x0B32
     692:	d0 91 33 0b 	lds	r29, 0x0B33
     696:	28 81       	ld	r18, Y
     698:	39 81       	ldd	r19, Y+1	; 0x01
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
	checksum += checksum16; /* IPv6 Pseudo Checksum */
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */
     69e:	d0 90 4b 17 	lds	r13, 0x174B
     6a2:	60 91 4c 17 	lds	r22, 0x174C
     6a6:	e6 2f       	mov	r30, r22
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ed 19       	sub	r30, r13
     6ac:	f1 09       	sbc	r31, r1
	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();

	/* UDP Header */
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
	checksum += checksum16; /* IPv6 Pseudo Checksum */
     6ae:	38 96       	adiw	r30, 0x08	; 8
     6b0:	7f 01       	movw	r14, r30
     6b2:	00 27       	eor	r16, r16
     6b4:	f7 fc       	sbrc	r15, 7
     6b6:	00 95       	com	r16
     6b8:	10 2f       	mov	r17, r16
     6ba:	38 97       	sbiw	r30, 0x08	; 8
     6bc:	e2 0e       	add	r14, r18
     6be:	f3 1e       	adc	r15, r19
     6c0:	04 1f       	adc	r16, r20
     6c2:	15 1f       	adc	r17, r21
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */
     6c4:	a0 e0       	ldi	r26, 0x00	; 0
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	e8 0e       	add	r14, r24
     6ca:	f9 1e       	adc	r15, r25
     6cc:	0a 1f       	adc	r16, r26
     6ce:	1b 1f       	adc	r17, r27
     6d0:	08 c0       	rjmp	.+16     	; 0x6e2 <sixlowpan_hc01_udp_send+0x66>

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
		checksum = (uint16_t) (checksum) + (uint16_t) (checksum >> 16);
     6d2:	c8 01       	movw	r24, r16
     6d4:	aa 27       	eor	r26, r26
     6d6:	bb 27       	eor	r27, r27
     6d8:	8e 0d       	add	r24, r14
     6da:	9f 1d       	adc	r25, r15
     6dc:	7c 01       	movw	r14, r24
     6de:	00 e0       	ldi	r16, 0x00	; 0
     6e0:	10 e0       	ldi	r17, 0x00	; 0
	uint32_t checksum = *hc01_chksum_ptr; /* Checksum of ports */
	checksum += checksum16; /* IPv6 Pseudo Checksum */
	checksum += mac_len - mac_hdr_len + 8; /* UDP field: payload length including UDP header */

	/* Add carries to 16-bit checksum */
	while (checksum & 0xFFFF0000) {
     6e2:	d8 01       	movw	r26, r16
     6e4:	c7 01       	movw	r24, r14
     6e6:	80 70       	andi	r24, 0x00	; 0
     6e8:	90 70       	andi	r25, 0x00	; 0
     6ea:	00 97       	sbiw	r24, 0x00	; 0
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	81 f7       	brne	.-32     	; 0x6d2 <sixlowpan_hc01_udp_send+0x56>
	}

	checksum16 = checksum;

	/* Sum all the UDP payload */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     6f2:	60 91 49 17 	lds	r22, 0x1749
     6f6:	70 91 4a 17 	lds	r23, 0x174A
     6fa:	6d 0d       	add	r22, r13
     6fc:	71 1d       	adc	r23, r1
     6fe:	c7 01       	movw	r24, r14
     700:	af 01       	movw	r20, r30
     702:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);

	*hc01_chksum_ptr = ~HTONS(checksum16);
     706:	38 2f       	mov	r19, r24
     708:	29 2f       	mov	r18, r25
     70a:	20 95       	com	r18
     70c:	30 95       	com	r19
     70e:	39 83       	std	Y+1, r19	; 0x01
     710:	28 83       	st	Y, r18

	/* If result is zero, set to 0xffff */
	if (*hc01_chksum_ptr == 0x0000) {
     712:	23 2b       	or	r18, r19
     714:	21 f4       	brne	.+8      	; 0x71e <sixlowpan_hc01_udp_send+0xa2>
		*hc01_chksum_ptr = 0xFFFF;
     716:	8f ef       	ldi	r24, 0xFF	; 255
     718:	9f ef       	ldi	r25, 0xFF	; 255
     71a:	99 83       	std	Y+1, r25	; 0x01
     71c:	88 83       	st	Y, r24
	}

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(udpLocalAddr, mac_len, mac_ptr);
     71e:	40 91 49 17 	lds	r20, 0x1749
     722:	50 91 4a 17 	lds	r21, 0x174A
     726:	80 91 34 0b 	lds	r24, 0x0B34
     72a:	90 91 35 0b 	lds	r25, 0x0B35
     72e:	60 91 4c 17 	lds	r22, 0x174C
     732:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <macsixlowpanDataRequest>
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	08 95       	ret

00000746 <sixlowpan_hc01_ping_send>:
		//sixlowpan_hc01_gen_rs();
		//return;
	}

	/* Pseudo-header Checksum */
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     746:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the payload */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     74a:	20 91 4b 17 	lds	r18, 0x174B
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	60 91 49 17 	lds	r22, 0x1749
     754:	70 91 4a 17 	lds	r23, 0x174A
     758:	62 0f       	add	r22, r18
     75a:	73 1f       	adc	r23, r19
     75c:	40 91 4c 17 	lds	r20, 0x174C
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	42 1b       	sub	r20, r18
     764:	53 0b       	sbc	r21, r19
     766:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);

	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     76a:	40 91 49 17 	lds	r20, 0x1749
     76e:	50 91 4a 17 	lds	r21, 0x174A
     772:	20 91 4b 17 	lds	r18, 0x174B
     776:	fa 01       	movw	r30, r20
     778:	e2 0f       	add	r30, r18
     77a:	f1 1d       	adc	r31, r1
     77c:	38 2f       	mov	r19, r24
     77e:	29 2f       	mov	r18, r25
     780:	20 95       	com	r18
     782:	30 95       	com	r19
     784:	33 83       	std	Z+3, r19	; 0x03
     786:	22 83       	std	Z+2, r18	; 0x02

	/* If result is zero, set to 0xffff */
	if (UIP_ICMP_BUF->icmpchksum == 0x0000) {
     788:	23 2b       	or	r18, r19
     78a:	21 f4       	brne	.+8      	; 0x794 <sixlowpan_hc01_ping_send+0x4e>
		UIP_ICMP_BUF->icmpchksum = 0xFFFF;
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	9f ef       	ldi	r25, 0xFF	; 255
     790:	93 83       	std	Z+3, r25	; 0x03
     792:	82 83       	std	Z+2, r24	; 0x02
	}

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	60 91 4c 17 	lds	r22, 0x174C
     79c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <macsixlowpanDataRequest>
}
     7a0:	08 95       	ret

000007a2 <sixlowpan_hc01_gen_rs>:
void sixlowpan_hc01_gen_rs(void) {

	//UART_PRINT("sixlowpan_hc01_gen_rs\r\n");

	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     7a2:	e8 ed       	ldi	r30, 0xD8	; 216
     7a4:	f6 e1       	ldi	r31, 0x16	; 22
     7a6:	f0 93 4a 17 	sts	0x174A, r31
     7aa:	e0 93 49 17 	sts	0x1749, r30

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	80 93 d8 16 	sts	0x16D8, r24
	IPHC_BUF->encoding[1] = 0;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     7b4:	8a e3       	ldi	r24, 0x3A	; 58
     7b6:	80 93 db 16 	sts	0x16DB, r24
	hc01_ptr += 1;

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_255;
     7ba:	88 ed       	ldi	r24, 0xD8	; 216
     7bc:	80 93 d9 16 	sts	0x16D9, r24
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_ADDR_CONTEXT_LL << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;

	/* Destination is all-routers multicast address */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_DAM_16;
     7c0:	88 ec       	ldi	r24, 0xC8	; 200
     7c2:	80 93 da 16 	sts	0x16DA, r24
	/* 3 first bits = 101 */
	*hc01_ptr = SIXLOWPAN_IPHC_MCAST_RANGE;
	/* bits 3-6 = scope = bits 8-11 in 128 bits address */
	*hc01_ptr |= (0x02) << 1;
     7c6:	84 ea       	ldi	r24, 0xA4	; 164
     7c8:	80 93 dc 16 	sts	0x16DC, r24
	/*
	 * bits 7 - 15 = 9-bit group
	 * All-routers group
	 */
	*(hc01_ptr + 1) = 0x02;
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	80 93 dd 16 	sts	0x16DD, r24
	hc01_ptr += 2;
     7d2:	df 01       	movw	r26, r30
     7d4:	16 96       	adiw	r26, 0x06	; 6
     7d6:	b0 93 31 0b 	sts	0x0B31, r27
     7da:	a0 93 30 0b 	sts	0x0B30, r26

	mac_hdr_len = 6;
     7de:	86 e0       	ldi	r24, 0x06	; 6
     7e0:	80 93 4b 17 	sts	0x174B, r24

	/* Router solicitation */
	UIP_ICMP_BUF->type = ICMP6_RS;
     7e4:	85 e8       	ldi	r24, 0x85	; 133
     7e6:	80 93 de 16 	sts	0x16DE, r24
	UIP_ICMP_BUF->icode = 0;
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	1c 92       	st	X, r1
     7ee:	11 97       	sbiw	r26, 0x01	; 1
	UIP_ND6_RS_BUF->reserved = 0;
     7f0:	10 92 e2 16 	sts	0x16E2, r1
     7f4:	10 92 e3 16 	sts	0x16E3, r1
     7f8:	10 92 e4 16 	sts	0x16E4, r1
     7fc:	10 92 e5 16 	sts	0x16E5, r1

	/* Source Link-Layer Address */
	mac_len = UIP_ICMPH_LEN + UIP_ND6_RS_LEN + UIP_ND6_OPT_LLAO_LEN
     800:	86 e1       	ldi	r24, 0x16	; 22
     802:	80 93 4c 17 	sts	0x174C, r24
			+ mac_hdr_len;
	nd6_opt_llao = (struct uip_nd6_opt_llao *) &mac_ptr[UIP_ICMPH_LEN
     806:	3e 96       	adiw	r30, 0x0e	; 14
     808:	f0 93 2f 0b 	sts	0x0B2F, r31
     80c:	e0 93 2e 0b 	sts	0x0B2E, r30
			+ UIP_ND6_RS_LEN + mac_hdr_len];
	nd6_opt_llao->type = UIP_ND6_OPT_SLLAO; /* type of the option */
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 e6 16 	sts	0x16E6, r24
	nd6_opt_llao->len = 1; /* 8-bytes */
     816:	81 83       	std	Z+1, r24	; 0x01
	nd6_opt_llao->addr[0] = MSB(macConfig.shortAddress);
     818:	80 91 5f 18 	lds	r24, 0x185F
     81c:	82 83       	std	Z+2, r24	; 0x02
	nd6_opt_llao->addr[1] = LSB(macConfig.shortAddress);
     81e:	80 91 5e 18 	lds	r24, 0x185E
     822:	83 83       	std	Z+3, r24	; 0x03

	/* Pad with zeros */
	uint8_t i;
	for (i = 2; i < 6; i++) {
		nd6_opt_llao->addr[i] = 0x00;
     824:	14 82       	std	Z+4, r1	; 0x04
     826:	15 82       	std	Z+5, r1	; 0x05
     828:	16 82       	std	Z+6, r1	; 0x06
     82a:	17 82       	std	Z+7, r1	; 0x07
	 * type field, prepended with a "pseudo-header" of IPv6 header fields,
	 * as specified in [IPv6, section 8.1].
	 *
	 */

	UIP_ICMP_BUF->icmpchksum = 0;
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	1c 92       	st	X, r1
     830:	1e 92       	st	-X, r1
     832:	12 97       	sbiw	r26, 0x02	; 2
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     834:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the ICMP stuff */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     838:	20 91 4b 17 	lds	r18, 0x174B
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	60 91 49 17 	lds	r22, 0x1749
     842:	70 91 4a 17 	lds	r23, 0x174A
     846:	62 0f       	add	r22, r18
     848:	73 1f       	adc	r23, r19
     84a:	40 91 4c 17 	lds	r20, 0x174C
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	42 1b       	sub	r20, r18
     852:	53 0b       	sbc	r21, r19
     854:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);
	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     858:	40 91 49 17 	lds	r20, 0x1749
     85c:	50 91 4a 17 	lds	r21, 0x174A
     860:	20 91 4b 17 	lds	r18, 0x174B
     864:	fa 01       	movw	r30, r20
     866:	e2 0f       	add	r30, r18
     868:	f1 1d       	adc	r31, r1
     86a:	38 2f       	mov	r19, r24
     86c:	29 2f       	mov	r18, r25
     86e:	20 95       	com	r18
     870:	30 95       	com	r19
     872:	33 83       	std	Z+3, r19	; 0x03
     874:	22 83       	std	Z+2, r18	; 0x02

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	60 91 4c 17 	lds	r22, 0x174C
     87e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <macsixlowpanDataRequest>

}
     882:	08 95       	ret

00000884 <sixlowpan_hc01_gen_na>:
 *
 *  The destination should be set up by ipbuf->destcontext and
 *  ipbuf->destmode - any needed setup of the destination IP
 *  address should already be setup in the buffer.
 */
void sixlowpan_hc01_gen_na(ipbuf_t * ipbuf, uint8_t solicited) {
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	fc 01       	movw	r30, r24
	//UART_PRINT("sixlowpan_hc01_gen_na\r\n");
	mac_hdr_len = 0;
	mac_ptr = txBuf.payload;
     88a:	88 ed       	ldi	r24, 0xD8	; 216
     88c:	96 e1       	ldi	r25, 0x16	; 22
     88e:	90 93 4a 17 	sts	0x174A, r25
     892:	80 93 49 17 	sts	0x1749, r24

	hc01_ptr = mac_ptr + 3;

	IPHC_BUF->dispatch = SIXLOWPAN_DISPATCH_IPHC;
     896:	23 e0       	ldi	r18, 0x03	; 3
     898:	20 93 d8 16 	sts	0x16D8, r18
	IPHC_BUF->encoding[0] = 0;
	IPHC_BUF->encoding[1] = 0;
     89c:	10 92 da 16 	sts	0x16DA, r1

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_VF_C;
	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TC_C;

	*hc01_ptr = UIP_PROTO_ICMP6;
     8a0:	2a e3       	ldi	r18, 0x3A	; 58
     8a2:	20 93 db 16 	sts	0x16DB, r18
	hc01_ptr += 1;
     8a6:	04 96       	adiw	r24, 0x04	; 4
     8a8:	90 93 31 0b 	sts	0x0B31, r25
     8ac:	80 93 30 0b 	sts	0x0B30, r24

	IPHC_BUF->encoding[0] |= SIXLOWPAN_IPHC_TTL_255;
     8b0:	88 ed       	ldi	r24, 0xD8	; 216
     8b2:	80 93 d9 16 	sts	0x16D9, r24

	/* Source IP address */
	IPHC_BUF->encoding[1] |= (ipbuf->srccontext) << 4;
	/* elide the IID */
	IPHC_BUF->encoding[1] |= SIXLOWPAN_IPHC_SAM_0;
     8b6:	86 81       	ldd	r24, Z+6	; 0x06
     8b8:	82 95       	swap	r24
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	80 6c       	ori	r24, 0xC0	; 192
     8be:	80 93 da 16 	sts	0x16DA, r24

	/* Destination is sender */
	IPHC_BUF->encoding[1] |= ipbuf->destcontext;
     8c2:	94 81       	ldd	r25, Z+4	; 0x04
     8c4:	98 2b       	or	r25, r24
     8c6:	90 93 da 16 	sts	0x16DA, r25
	IPHC_BUF->encoding[1] |= ipbuf->destmode;
     8ca:	85 81       	ldd	r24, Z+5	; 0x05
     8cc:	98 2b       	or	r25, r24
     8ce:	90 93 da 16 	sts	0x16DA, r25

	mac_hdr_len = ipbuf->mac_hdr_len;
     8d2:	92 85       	ldd	r25, Z+10	; 0x0a
     8d4:	90 93 4b 17 	sts	0x174B, r25

	/* Neighbor Advertisement */
	UIP_ICMP_BUF->type = ICMP6_NA;
     8d8:	e9 2f       	mov	r30, r25
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ef 01       	movw	r28, r30
     8de:	c8 52       	subi	r28, 0x28	; 40
     8e0:	d9 4e       	sbci	r29, 0xE9	; 233
     8e2:	88 e8       	ldi	r24, 0x88	; 136
     8e4:	88 83       	st	Y, r24
	UIP_ICMP_BUF->icode = 0;
     8e6:	19 82       	std	Y+1, r1	; 0x01

	UIP_ND6_NA_BUF->reserved[0] = 0;
     8e8:	df 01       	movw	r26, r30
     8ea:	a4 52       	subi	r26, 0x24	; 36
     8ec:	b9 4e       	sbci	r27, 0xE9	; 233
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	1c 92       	st	X, r1
     8f2:	11 97       	sbiw	r26, 0x01	; 1
	UIP_ND6_NA_BUF->reserved[1] = 0;
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	1c 92       	st	X, r1
     8f8:	12 97       	sbiw	r26, 0x02	; 2
	UIP_ND6_NA_BUF->reserved[2] = 0;
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	1c 92       	st	X, r1
     8fe:	13 97       	sbiw	r26, 0x03	; 3

	/* This code sends solicited NA */
	if (solicited) {
     900:	66 23       	and	r22, r22
     902:	19 f0       	breq	.+6      	; 0x90a <sixlowpan_hc01_gen_na+0x86>
		UIP_ND6_NA_BUF->flagsreserved = UIP_ND6_NA_FLAG_SOLICITED;
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	8c 93       	st	X, r24
     908:	01 c0       	rjmp	.+2      	; 0x90c <sixlowpan_hc01_gen_na+0x88>
	} else {
		UIP_ND6_NA_BUF->flagsreserved = 0;
     90a:	1c 92       	st	X, r1
	 * solicitied responses, this is the same thing as in the NA. This lies at
	 * the same location in the NA too - we just don't do anything, and magically
	 * it is set up correctly */

	/* Target Link-Layer Address */
	mac_len = UIP_ICMPH_LEN + UIP_ND6_NA_LEN + UIP_ND6_OPT_LLAO_LEN
     90c:	90 5e       	subi	r25, 0xE0	; 224
     90e:	90 93 4c 17 	sts	0x174C, r25
			+ mac_hdr_len;
	nd6_opt_llao = (struct uip_nd6_opt_llao *) &mac_ptr[UIP_ICMPH_LEN
     912:	e0 51       	subi	r30, 0x10	; 16
     914:	f9 4e       	sbci	r31, 0xE9	; 233
     916:	f0 93 2f 0b 	sts	0x0B2F, r31
     91a:	e0 93 2e 0b 	sts	0x0B2E, r30
			+ UIP_ND6_NA_LEN + mac_hdr_len];
	nd6_opt_llao->type = UIP_ND6_OPT_TLLAO; /* type of the option */
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	80 83       	st	Z, r24
	nd6_opt_llao->len = 1; /* 8-bytes */
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	81 83       	std	Z+1, r24	; 0x01
	nd6_opt_llao->addr[0] = MSB(macConfig.shortAddress);
     926:	80 91 5f 18 	lds	r24, 0x185F
     92a:	82 83       	std	Z+2, r24	; 0x02
	nd6_opt_llao->addr[1] = LSB(macConfig.shortAddress);
     92c:	80 91 5e 18 	lds	r24, 0x185E
     930:	83 83       	std	Z+3, r24	; 0x03

	/* Pad with zeros */
	uint8_t i;
	for (i = 2; i < 6; i++) {
		nd6_opt_llao->addr[i] = 0x00;
     932:	14 82       	std	Z+4, r1	; 0x04
     934:	15 82       	std	Z+5, r1	; 0x05
     936:	16 82       	std	Z+6, r1	; 0x06
     938:	17 82       	std	Z+7, r1	; 0x07
	 * sum of the entire ICMPv6 message starting with the ICMPv6 message
	 * type field, prepended with a "pseudo-header" of IPv6 header fields,
	 * as specified in [IPv6, section 8.1].
	 *
	 */
	UIP_ICMP_BUF->icmpchksum = 0;
     93a:	1b 82       	std	Y+3, r1	; 0x03
     93c:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t checksum16 = sixlowpan_hc01_pseudochksum();
     93e:	0e 94 a6 01 	call	0x34c	; 0x34c <sixlowpan_hc01_pseudochksum>

	/* Sum all the ICMP stuff */
	checksum16 = chksum(checksum16, mac_ptr + mac_hdr_len, mac_len
     942:	20 91 4b 17 	lds	r18, 0x174B
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	60 91 49 17 	lds	r22, 0x1749
     94c:	70 91 4a 17 	lds	r23, 0x174A
     950:	62 0f       	add	r22, r18
     952:	73 1f       	adc	r23, r19
     954:	40 91 4c 17 	lds	r20, 0x174C
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	42 1b       	sub	r20, r18
     95c:	53 0b       	sbc	r21, r19
     95e:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
			- mac_hdr_len);
	UIP_ICMP_BUF->icmpchksum = ~HTONS(checksum16);
     962:	40 91 49 17 	lds	r20, 0x1749
     966:	50 91 4a 17 	lds	r21, 0x174A
     96a:	20 91 4b 17 	lds	r18, 0x174B
     96e:	fa 01       	movw	r30, r20
     970:	e2 0f       	add	r30, r18
     972:	f1 1d       	adc	r31, r1
     974:	38 2f       	mov	r19, r24
     976:	29 2f       	mov	r18, r25
     978:	20 95       	com	r18
     97a:	30 95       	com	r19
     97c:	33 83       	std	Z+3, r19	; 0x03
     97e:	22 83       	std	Z+2, r18	; 0x02

	//    sixlowpanSleep_activity();
	macsixlowpanDataRequest(DEFAULT_COORD_ADDR, mac_len, mac_ptr);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	60 91 4c 17 	lds	r22, 0x174C
     988:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <macsixlowpanDataRequest>
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <sixlowpan_hc01_process_ra>:
 *  have 'context' for the 6lowpan network, which
 *  means we don't have a prefix, this routine
 *  will save it. Note the actual prefix is never
 *  stored, just the checksum of the prefix.
 */
void sixlowpan_hc01_process_ra(ipbuf_t * ipbuf) {
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	8c 01       	movw	r16, r24
	UART_PRINT("sixlowpan_hc01_process_ra\r\n");
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>

	struct uip_nd6_opt_prefix_info * nd6_opt_prefix_info;
	uint8_t nd6_opt_offset;

	/* Very basic sanity check */
	if (ipbuf->ttl != 255)
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	d1 f5       	brne	.+116    	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
		return;

	/* Find prefix option */
	nd6_opt_offset = UIP_ND6_RA_LEN;

	while ((mac_hdr_len + 4 + nd6_opt_offset) < mac_len) {
     9ac:	80 91 4b 17 	lds	r24, 0x174B
     9b0:	28 2f       	mov	r18, r24
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	2c 5f       	subi	r18, 0xFC	; 252
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	80 91 4c 17 	lds	r24, 0x174C
     9bc:	c8 2f       	mov	r28, r24
     9be:	d0 e0       	ldi	r29, 0x00	; 0
		if (UIP_ND6_OPT_HDR_BUF->len == 0) {
     9c0:	a0 91 49 17 	lds	r26, 0x1749
     9c4:	b0 91 4a 17 	lds	r27, 0x174A
     9c8:	4c e0       	ldi	r20, 0x0C	; 12
     9ca:	24 c0       	rjmp	.+72     	; 0xa14 <sixlowpan_hc01_process_ra+0x82>
     9cc:	fd 01       	movw	r30, r26
     9ce:	e6 0f       	add	r30, r22
     9d0:	f7 1f       	adc	r31, r23
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	99 23       	and	r25, r25
     9d6:	21 f1       	breq	.+72     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
			return;
		}

		/* Is this option prefix option? */
		if (UIP_ND6_OPT_HDR_BUF->type == UIP_ND6_OPT_PREFIX_INFO) {
     9d8:	80 81       	ld	r24, Z
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	b9 f4       	brne	.+46     	; 0xa0c <sixlowpan_hc01_process_ra+0x7a>

			uint8_t i = 1;

			uint16_t prefixchecksum;

			prefixchecksum = chksum(0, nd6_opt_prefix_info->prefix, 16);
     9de:	70 96       	adiw	r30, 0x10	; 16
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	bf 01       	movw	r22, r30
     9e6:	40 e1       	ldi	r20, 0x10	; 16
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	0e 94 18 03 	call	0x630	; 0x630 <chksum>
     9ee:	9c 01       	movw	r18, r24

			/* We only ever need to store the checksum of the prefix - no need
			 * to ever know. We need the checksum for adding in the ICMP checksum */
			if (!context_prefix[i].is_used) {
     9f0:	80 91 c9 16 	lds	r24, 0x16C9
     9f4:	88 23       	and	r24, r24
     9f6:	a1 f4       	brne	.+40     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>
				context_prefix[i].checksum = prefixchecksum;
     9f8:	30 93 c8 16 	sts	0x16C8, r19
     9fc:	20 93 c7 16 	sts	0x16C7, r18
				context_prefix[i].is_used = 1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 c9 16 	sts	0x16C9, r24

				use_context = i;
     a06:	80 93 2c 02 	sts	0x022C, r24
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <sixlowpan_hc01_process_ra+0x8e>

			/* Only check first prefix we find... */
			break;
		}

		nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
     a0c:	99 0f       	add	r25, r25
     a0e:	99 0f       	add	r25, r25
     a10:	99 0f       	add	r25, r25
     a12:	49 0f       	add	r20, r25
		return;

	/* Find prefix option */
	nd6_opt_offset = UIP_ND6_RA_LEN;

	while ((mac_hdr_len + 4 + nd6_opt_offset) < mac_len) {
     a14:	b9 01       	movw	r22, r18
     a16:	64 0f       	add	r22, r20
     a18:	71 1d       	adc	r23, r1
     a1a:	6c 17       	cp	r22, r28
     a1c:	7d 07       	cpc	r23, r29
     a1e:	b4 f2       	brlt	.-84     	; 0x9cc <sixlowpan_hc01_process_ra+0x3a>
			break;
		}

		nd6_opt_offset += (UIP_ND6_OPT_HDR_BUF->len << 3);
	}
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <sixlowpan_hc01_process>:
 *
 *  - This code only GENERATES valid IPv6 checksums. It does
 *    nothing to verify that incoming packets have valid checksums.
 */

void sixlowpan_hc01_process(ftData* rxFrame, uint8_t payloadlen) {
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	2b 97       	sbiw	r28, 0x0b	; 11
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	6c 01       	movw	r12, r24
     a4a:	06 2f       	mov	r16, r22
	//UART_PRINT("sixlowpan_hc01_process\r\n");

	ipbuf_t ipbuf;

	mac_ptr = rxFrame->payload;
     a4c:	7e e0       	ldi	r23, 0x0E	; 14
     a4e:	e7 2e       	mov	r14, r23
     a50:	f1 2c       	mov	r15, r1
     a52:	e8 0e       	add	r14, r24
     a54:	f9 1e       	adc	r15, r25
     a56:	f0 92 4a 17 	sts	0x174A, r15
     a5a:	e0 92 49 17 	sts	0x1749, r14
	mac_len = payloadlen;
     a5e:	60 93 4c 17 	sts	0x174C, r22
	mac_hdr_len = 0;
     a62:	10 92 4b 17 	sts	0x174B, r1

	hc01_ptr = mac_ptr + 3;
     a66:	21 e1       	ldi	r18, 0x11	; 17
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	c2 0e       	add	r12, r18
     a6c:	d3 1e       	adc	r13, r19
     a6e:	d0 92 31 0b 	sts	0x0B31, r13
     a72:	c0 92 30 0b 	sts	0x0B30, r12
     a76:	4f ee       	ldi	r20, 0xEF	; 239
     a78:	5f ef       	ldi	r21, 0xFF	; 255
     a7a:	c4 0e       	add	r12, r20
     a7c:	d5 1e       	adc	r13, r21

	/* Dest address based on MAC address, Version, Flow, Traffic compressed */
	if ((IPHC_BUF->dispatch == SIXLOWPAN_DISPATCH_IPHC)
     a7e:	f6 01       	movw	r30, r12
     a80:	86 85       	ldd	r24, Z+14	; 0x0e
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	09 f0       	breq	.+2      	; 0xa88 <sixlowpan_hc01_process+0x5e>
     a86:	e9 c1       	rjmp	.+978    	; 0xe5a <sixlowpan_hc01_process+0x430>
     a88:	f7 01       	movw	r30, r14
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	8c 70       	andi	r24, 0x0C	; 12
     a8e:	8c 30       	cpi	r24, 0x0C	; 12
     a90:	09 f0       	breq	.+2      	; 0xa94 <sixlowpan_hc01_process+0x6a>
     a92:	e3 c1       	rjmp	.+966    	; 0xe5a <sixlowpan_hc01_process+0x430>
			&& ((IPHC_BUF->encoding[1] & 0x0C) == SIXLOWPAN_IPHC_DAM_0)) {
		//UART_PRINT("  -correct 6LoWPAN Message\r\n");

		/* Version & Flow Uncompressed */
		if ((IPHC_BUF->encoding[0] & 0x40) == 0) {
     a94:	81 81       	ldd	r24, Z+1	; 0x01
     a96:	86 fd       	sbrc	r24, 6
     a98:	1a c0       	rjmp	.+52     	; 0xace <sixlowpan_hc01_process+0xa4>
			if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     a9a:	87 fd       	sbrc	r24, 7
     a9c:	0b c0       	rjmp	.+22     	; 0xab4 <sixlowpan_hc01_process+0x8a>
				/* Traffic class is carried inline */
				hc01_ptr += 4;
     a9e:	25 e1       	ldi	r18, 0x15	; 21
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	c2 0e       	add	r12, r18
     aa4:	d3 1e       	adc	r13, r19
     aa6:	d0 92 31 0b 	sts	0x0B31, r13
     aaa:	c0 92 30 0b 	sts	0x0B30, r12
     aae:	4b ee       	ldi	r20, 0xEB	; 235
     ab0:	5f ef       	ldi	r21, 0xFF	; 255
     ab2:	19 c0       	rjmp	.+50     	; 0xae6 <sixlowpan_hc01_process+0xbc>
			} else {
				/* Traffic class is compressed */
				hc01_ptr += 3;
     ab4:	84 e1       	ldi	r24, 0x14	; 20
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	c8 0e       	add	r12, r24
     aba:	d9 1e       	adc	r13, r25
     abc:	d0 92 31 0b 	sts	0x0B31, r13
     ac0:	c0 92 30 0b 	sts	0x0B30, r12
     ac4:	ec ee       	ldi	r30, 0xEC	; 236
     ac6:	ff ef       	ldi	r31, 0xFF	; 255
     ac8:	ce 0e       	add	r12, r30
     aca:	df 1e       	adc	r13, r31
     acc:	0e c0       	rjmp	.+28     	; 0xaea <sixlowpan_hc01_process+0xc0>
			}

			/* Version & Flow Compressed */
		} else {
			if ((IPHC_BUF->encoding[0] & 0x80) == 0) {
     ace:	87 fd       	sbrc	r24, 7
     ad0:	0c c0       	rjmp	.+24     	; 0xaea <sixlowpan_hc01_process+0xc0>
				/* Traffic class is carried inline */
				hc01_ptr += 1;
     ad2:	22 e1       	ldi	r18, 0x12	; 18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	c2 0e       	add	r12, r18
     ad8:	d3 1e       	adc	r13, r19
     ada:	d0 92 31 0b 	sts	0x0B31, r13
     ade:	c0 92 30 0b 	sts	0x0B30, r12
     ae2:	4e ee       	ldi	r20, 0xEE	; 238
     ae4:	5f ef       	ldi	r21, 0xFF	; 255
     ae6:	c4 0e       	add	r12, r20
     ae8:	d5 1e       	adc	r13, r21
				;
			}
		}

		/* Next-header field */
		if (IPHC_BUF->encoding[0] & SIXLOWPAN_IPHC_NH_C) {
     aea:	f7 01       	movw	r30, r14
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	85 ff       	sbrs	r24, 5
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <sixlowpan_hc01_process+0xce>
			ipbuf.proto = UIP_PROTO_UDP; /* Currently only UDP compressed like that */
     af2:	81 e1       	ldi	r24, 0x11	; 17
     af4:	8c 83       	std	Y+4, r24	; 0x04
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <sixlowpan_hc01_process+0xe2>
		} else {
			ipbuf.proto = *hc01_ptr;
     af8:	e0 91 30 0b 	lds	r30, 0x0B30
     afc:	f0 91 31 0b 	lds	r31, 0x0B31
     b00:	81 91       	ld	r24, Z+
     b02:	8c 83       	std	Y+4, r24	; 0x04
			hc01_ptr++;
     b04:	f0 93 31 0b 	sts	0x0B31, r31
     b08:	e0 93 30 0b 	sts	0x0B30, r30
		}

		/* Remember location of TTL */
		ipbuf.ttlptr = hc01_ptr;
     b0c:	20 91 30 0b 	lds	r18, 0x0B30
     b10:	30 91 31 0b 	lds	r19, 0x0B31
     b14:	2a 83       	std	Y+2, r18	; 0x02
     b16:	3b 83       	std	Y+3, r19	; 0x03

		/* Check TTL */
		switch (IPHC_BUF->encoding[0] & 0x18) {
     b18:	f7 01       	movw	r30, r14
     b1a:	81 81       	ldd	r24, Z+1	; 0x01
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	88 71       	andi	r24, 0x18	; 24
     b20:	90 70       	andi	r25, 0x00	; 0
     b22:	88 30       	cpi	r24, 0x08	; 8
     b24:	91 05       	cpc	r25, r1
     b26:	61 f0       	breq	.+24     	; 0xb40 <sixlowpan_hc01_process+0x116>
     b28:	89 30       	cpi	r24, 0x09	; 9
     b2a:	91 05       	cpc	r25, r1
     b2c:	1c f4       	brge	.+6      	; 0xb34 <sixlowpan_hc01_process+0x10a>
     b2e:	89 2b       	or	r24, r25
     b30:	71 f0       	breq	.+28     	; 0xb4e <sixlowpan_hc01_process+0x124>
     b32:	14 c0       	rjmp	.+40     	; 0xb5c <sixlowpan_hc01_process+0x132>
     b34:	80 31       	cpi	r24, 0x10	; 16
     b36:	91 05       	cpc	r25, r1
     b38:	29 f0       	breq	.+10     	; 0xb44 <sixlowpan_hc01_process+0x11a>
     b3a:	48 97       	sbiw	r24, 0x18	; 24
     b3c:	79 f4       	brne	.+30     	; 0xb5c <sixlowpan_hc01_process+0x132>
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <sixlowpan_hc01_process+0x120>
		case SIXLOWPAN_IPHC_TTL_1:
			ipbuf.ttl = 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <sixlowpan_hc01_process+0x11c>
			break;
		case SIXLOWPAN_IPHC_TTL_64:
			ipbuf.ttl = 64;
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <sixlowpan_hc01_process+0x132>
			break;
		case SIXLOWPAN_IPHC_TTL_255:
			ipbuf.ttl = 255;
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <sixlowpan_hc01_process+0x11c>
			break;
		case SIXLOWPAN_IPHC_TTL_I:
			ipbuf.ttl = *hc01_ptr;
     b4e:	f9 01       	movw	r30, r18
     b50:	81 91       	ld	r24, Z+
     b52:	89 83       	std	Y+1, r24	; 0x01
			hc01_ptr += 1;
     b54:	f0 93 31 0b 	sts	0x0B31, r31
     b58:	e0 93 30 0b 	sts	0x0B30, r30
			break;
		}

		/* Destination address is context-based */
		ipbuf.destcontext = (IPHC_BUF->encoding[1] & 0x03);
     b5c:	f7 01       	movw	r30, r14
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	28 2f       	mov	r18, r24
     b62:	23 70       	andi	r18, 0x03	; 3
     b64:	2d 83       	std	Y+5, r18	; 0x05

		/* Source address could be anything (off-link even) */
		ipbuf.srcmode = (IPHC_BUF->encoding[1] & 0xC0) >> 4;
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	9c 01       	movw	r18, r24
     b6a:	20 7c       	andi	r18, 0xC0	; 192
     b6c:	30 70       	andi	r19, 0x00	; 0
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	35 95       	asr	r19
     b72:	27 95       	ror	r18
     b74:	6a 95       	dec	r22
     b76:	e1 f7       	brne	.-8      	; 0xb70 <sixlowpan_hc01_process+0x146>
     b78:	28 87       	std	Y+8, r18	; 0x08
		ipbuf.srccontext = (IPHC_BUF->encoding[1] & 0x30) >> 4;
     b7a:	80 73       	andi	r24, 0x30	; 48
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	54 e0       	ldi	r21, 0x04	; 4
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
     b84:	5a 95       	dec	r21
     b86:	e1 f7       	brne	.-8      	; 0xb80 <sixlowpan_hc01_process+0x156>
     b88:	8f 83       	std	Y+7, r24	; 0x07

		/* We will just use source address as destination when sending
		 * anything back out, hence we never store the address. It will
		 * automatically be at the proper place in the packet. */
		ipbuf.srcptr = hc01_ptr;
     b8a:	e0 91 30 0b 	lds	r30, 0x0B30
     b8e:	f0 91 31 0b 	lds	r31, 0x0B31
     b92:	fa 87       	std	Y+10, r31	; 0x0a
     b94:	e9 87       	std	Y+9, r30	; 0x09

		switch (ipbuf.srcmode) {
     b96:	24 30       	cpi	r18, 0x04	; 4
     b98:	51 f0       	breq	.+20     	; 0xbae <sixlowpan_hc01_process+0x184>
     b9a:	28 30       	cpi	r18, 0x08	; 8
     b9c:	19 f0       	breq	.+6      	; 0xba4 <sixlowpan_hc01_process+0x17a>
     b9e:	22 23       	and	r18, r18
     ba0:	41 f0       	breq	.+16     	; 0xbb2 <sixlowpan_hc01_process+0x188>
     ba2:	0c c0       	rjmp	.+24     	; 0xbbc <sixlowpan_hc01_process+0x192>
		case SIXLOWPAN_IPHC_DAM_0: /* Note: we use 'DAM' constants instead of 'SAM'
		 * since address mode is shifted right 4 in this var */
			break;
		case SIXLOWPAN_IPHC_DAM_16:
			if ((*hc01_ptr & 0x80) == 0) {
     ba4:	80 81       	ld	r24, Z
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	58 c1       	rjmp	.+688    	; 0xe5a <sixlowpan_hc01_process+0x430>
				/* unicast address */
				hc01_ptr += 2;
     baa:	32 96       	adiw	r30, 0x02	; 2
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <sixlowpan_hc01_process+0x18a>
				PRINTF("sixlowpan: Don't deal with multicast\n");
				return;
			}
			break;
		case SIXLOWPAN_IPHC_DAM_64:
			hc01_ptr += 8;
     bae:	38 96       	adiw	r30, 0x08	; 8
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <sixlowpan_hc01_process+0x18a>
			break;
		case SIXLOWPAN_IPHC_DAM_I:
			hc01_ptr += 16;
     bb2:	70 96       	adiw	r30, 0x10	; 16
     bb4:	f0 93 31 0b 	sts	0x0B31, r31
     bb8:	e0 93 30 0b 	sts	0x0B30, r30
			break;
		}

		mac_hdr_len = hc01_ptr - rxFrame->payload;
     bbc:	2e e0       	ldi	r18, 0x0E	; 14
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	c2 0e       	add	r12, r18
     bc2:	d3 1e       	adc	r13, r19
     bc4:	80 91 30 0b 	lds	r24, 0x0B30
     bc8:	8c 19       	sub	r24, r12
     bca:	42 ef       	ldi	r20, 0xF2	; 242
     bcc:	5f ef       	ldi	r21, 0xFF	; 255
     bce:	c4 0e       	add	r12, r20
     bd0:	d5 1e       	adc	r13, r21
     bd2:	80 93 4b 17 	sts	0x174B, r24
		ipbuf.mac_hdr_len = mac_hdr_len;
     bd6:	8b 87       	std	Y+11, r24	; 0x0b

		/********** ICMP Message **********/
		if (ipbuf.proto == UIP_PROTO_ICMP6) {
     bd8:	8c 81       	ldd	r24, Y+4	; 0x04
     bda:	8a 33       	cpi	r24, 0x3A	; 58
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <sixlowpan_hc01_process+0x1b6>
     bde:	7f c0       	rjmp	.+254    	; 0xcde <sixlowpan_hc01_process+0x2b4>
			//TODO delete later
			UART_PRINT("  -ICMP Message\r\n");
     be0:	8b e1       	ldi	r24, 0x1B	; 27
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
			if (UIP_ICMP_BUF->type == ICMP6_ECHO_REQUEST) {
     be8:	80 91 4b 17 	lds	r24, 0x174B
     bec:	e0 91 49 17 	lds	r30, 0x1749
     bf0:	f0 91 4a 17 	lds	r31, 0x174A
     bf4:	e8 0f       	add	r30, r24
     bf6:	f1 1d       	adc	r31, r1
     bf8:	80 81       	ld	r24, Z
     bfa:	80 38       	cpi	r24, 0x80	; 128
     bfc:	d9 f5       	brne	.+118    	; 0xc74 <sixlowpan_hc01_process+0x24a>
				//TODO delete later
				//UART_PRINT("  -ICMP ECHO REQUEST Message\r\n");
				LED_ON(1);
     bfe:	71 98       	cbi	0x0e, 1	; 14
     c00:	69 9a       	sbi	0x0d, 1	; 13
				macSetAlarm(LED_DELAY, ledoff1);
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	63 e9       	ldi	r22, 0x93	; 147
     c08:	75 e1       	ldi	r23, 0x15	; 21
     c0a:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

				mac_hdr_len = 0;
     c0e:	10 92 4b 17 	sts	0x174B, r1

				/* Check if TTL is carried inline, we reset it to 64 if so... */
				if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     c12:	e0 91 49 17 	lds	r30, 0x1749
     c16:	f0 91 4a 17 	lds	r31, 0x174A
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	88 71       	andi	r24, 0x18	; 24
     c1e:	11 f4       	brne	.+4      	; 0xc24 <sixlowpan_hc01_process+0x1fa>
					*(mac_ptr + 4) = 64;
     c20:	80 e4       	ldi	r24, 0x40	; 64
     c22:	84 83       	std	Z+4, r24	; 0x04
				}

				/* Send packet back to source */
				IPHC_BUF->encoding[1] = SIXLOWPAN_IPHC_SAM_0
     c24:	e0 91 49 17 	lds	r30, 0x1749
     c28:	f0 91 4a 17 	lds	r31, 0x174A
     c2c:	80 91 4b 17 	lds	r24, 0x174B
     c30:	df 01       	movw	r26, r30
     c32:	a8 0f       	add	r26, r24
     c34:	b1 1d       	adc	r27, r1
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	92 95       	swap	r25
     c3a:	90 7f       	andi	r25, 0xF0	; 240
     c3c:	90 6c       	ori	r25, 0xC0	; 192
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	9c 93       	st	X, r25
     c42:	12 97       	sbiw	r26, 0x02	; 2
						| (ipbuf.destcontext << 4);
				IPHC_BUF->encoding[1] |= ipbuf.srcmode | ipbuf.srccontext;
     c44:	8f 81       	ldd	r24, Y+7	; 0x07
     c46:	28 85       	ldd	r18, Y+8	; 0x08
     c48:	82 2b       	or	r24, r18
     c4a:	89 2b       	or	r24, r25
     c4c:	12 96       	adiw	r26, 0x02	; 2
     c4e:	8c 93       	st	X, r24

				mac_hdr_len = ipbuf.mac_hdr_len;
     c50:	8b 85       	ldd	r24, Y+11	; 0x0b
     c52:	80 93 4b 17 	sts	0x174B, r24

				/* Send echo reply */
				UIP_ICMP_BUF->type = ICMP6_ECHO_REPLY;
     c56:	e8 0f       	add	r30, r24
     c58:	f1 1d       	adc	r31, r1
     c5a:	81 e8       	ldi	r24, 0x81	; 129
     c5c:	80 83       	st	Z, r24

				/* We cheat the checksum since we just changed echo request to echo reply... */
				UIP_ICMP_BUF->icmpchksum = UIP_ICMP_BUF->icmpchksum
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	93 83       	std	Z+3, r25	; 0x03
     c66:	82 83       	std	Z+2, r24	; 0x02
						+ ~(HTONS(0x0000));

				//                sixlowpanSleep_activity();
				macsixlowpanDataRequest(DEFAULT_COORD_ADDR, payloadlen,
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	60 2f       	mov	r22, r16
     c6e:	a7 01       	movw	r20, r14
     c70:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <macsixlowpanDataRequest>
						rxFrame->payload);
			}

			if (UIP_ICMP_BUF->type == ICMP6_ECHO_REPLY) {
     c74:	80 91 4b 17 	lds	r24, 0x174B
     c78:	e0 91 49 17 	lds	r30, 0x1749
     c7c:	f0 91 4a 17 	lds	r31, 0x174A
     c80:	e8 0f       	add	r30, r24
     c82:	f1 1d       	adc	r31, r1
     c84:	80 81       	ld	r24, Z
     c86:	81 38       	cpi	r24, 0x81	; 129
     c88:	39 f4       	brne	.+14     	; 0xc98 <sixlowpan_hc01_process+0x26e>
				sixlowpan_ping_usercall(*(hc01_ptr + 7));
     c8a:	e0 91 30 0b 	lds	r30, 0x0B30
     c8e:	f0 91 31 0b 	lds	r31, 0x0B31
     c92:	87 81       	ldd	r24, Z+7	; 0x07
     c94:	0e 94 da 08 	call	0x11b4	; 0x11b4 <sixlowpan_ping_usercall>
			}

			if (UIP_ICMP_BUF->type == ICMP6_RA) {
     c98:	80 91 4b 17 	lds	r24, 0x174B
     c9c:	e0 91 49 17 	lds	r30, 0x1749
     ca0:	f0 91 4a 17 	lds	r31, 0x174A
     ca4:	e8 0f       	add	r30, r24
     ca6:	f1 1d       	adc	r31, r1
     ca8:	80 81       	ld	r24, Z
     caa:	86 38       	cpi	r24, 0x86	; 134
     cac:	21 f4       	brne	.+8      	; 0xcb6 <sixlowpan_hc01_process+0x28c>
				sixlowpan_hc01_process_ra(&ipbuf);
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 c9 04 	call	0x992	; 0x992 <sixlowpan_hc01_process_ra>
			}

			if (UIP_ICMP_BUF->type == ICMP6_NS) {
     cb6:	80 91 4b 17 	lds	r24, 0x174B
     cba:	e0 91 49 17 	lds	r30, 0x1749
     cbe:	f0 91 4a 17 	lds	r31, 0x174A
     cc2:	e8 0f       	add	r30, r24
     cc4:	f1 1d       	adc	r31, r1
     cc6:	80 81       	ld	r24, Z
     cc8:	87 38       	cpi	r24, 0x87	; 135
     cca:	49 f4       	brne	.+18     	; 0xcde <sixlowpan_hc01_process+0x2b4>
				/* Destination is sender */
				ipbuf.destcontext = ipbuf.srccontext;
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	8d 83       	std	Y+5, r24	; 0x05
				ipbuf.destmode = ipbuf.srcmode;
     cd0:	88 85       	ldd	r24, Y+8	; 0x08
     cd2:	8e 83       	std	Y+6, r24	; 0x06

				/* Source context will be same */
				sixlowpan_hc01_gen_na(&ipbuf, 1);
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	0e 94 42 04 	call	0x884	; 0x884 <sixlowpan_hc01_gen_na>
			}
		}

		/********** UDP Message **********/
		if (ipbuf.proto == UIP_PROTO_UDP) {
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	81 31       	cpi	r24, 0x11	; 17
     ce2:	09 f0       	breq	.+2      	; 0xce6 <sixlowpan_hc01_process+0x2bc>
     ce4:	ba c0       	rjmp	.+372    	; 0xe5a <sixlowpan_hc01_process+0x430>
			/* Figure out port, while swapping src/dest */
			uint16_t srcport, destport;

			if (*hc01_ptr == SIXLOWPAN_NHC_UDP_C) {
     ce6:	a0 91 30 0b 	lds	r26, 0x0B30
     cea:	b0 91 31 0b 	lds	r27, 0x0B31
     cee:	8c 91       	ld	r24, X
     cf0:	8b 3f       	cpi	r24, 0xFB	; 251
     cf2:	69 f5       	brne	.+90     	; 0xd4e <sixlowpan_hc01_process+0x324>
				hc01_ptr++;
     cf4:	11 96       	adiw	r26, 0x01	; 1
     cf6:	b0 93 31 0b 	sts	0x0B31, r27
     cfa:	a0 93 30 0b 	sts	0x0B30, r26
     cfe:	11 97       	sbiw	r26, 0x01	; 1

				srcport = (*hc01_ptr >> 4) + SIXLOWPAN_UDP_PORT_MIN;
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	8c 91       	ld	r24, X
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	28 2f       	mov	r18, r24
     d08:	22 95       	swap	r18
     d0a:	2f 70       	andi	r18, 0x0F	; 15
     d0c:	e2 2e       	mov	r14, r18
     d0e:	ff 24       	eor	r15, r15
     d10:	e0 eb       	ldi	r30, 0xB0	; 176
     d12:	f0 ef       	ldi	r31, 0xF0	; 240
     d14:	ee 0e       	add	r14, r30
     d16:	ff 1e       	adc	r15, r31
				destport = (*hc01_ptr & 0x0f) + SIXLOWPAN_UDP_PORT_MIN;
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	6f 70       	andi	r22, 0x0F	; 15
     d1e:	70 70       	andi	r23, 0x00	; 0
     d20:	60 55       	subi	r22, 0x50	; 80
     d22:	7f 40       	sbci	r23, 0x0F	; 15
				uint8_t temp;
				temp = *hc01_ptr >> 4;
				temp |= ((*hc01_ptr) & 0x0f) << 4;

				/* Store swapped dest/src */
				*hc01_ptr = temp;
     d24:	34 e0       	ldi	r19, 0x04	; 4
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	3a 95       	dec	r19
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <sixlowpan_hc01_process+0x2fc>
     d2e:	28 2b       	or	r18, r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	2c 93       	st	X, r18

				hc01_ptr++;
     d34:	80 91 30 0b 	lds	r24, 0x0B30
     d38:	90 91 31 0b 	lds	r25, 0x0B31
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	90 93 31 0b 	sts	0x0B31, r25
     d42:	80 93 30 0b 	sts	0x0B30, r24

				mac_hdr_len += 2;
     d46:	80 91 4b 17 	lds	r24, 0x174B
     d4a:	8e 5f       	subi	r24, 0xFE	; 254
     d4c:	21 c0       	rjmp	.+66     	; 0xd90 <sixlowpan_hc01_process+0x366>

			} else if (*hc01_ptr == SIXLOWPAN_NHC_UDP_I) {
     d4e:	88 3f       	cpi	r24, 0xF8	; 248
     d50:	09 f0       	breq	.+2      	; 0xd54 <sixlowpan_hc01_process+0x32a>
     d52:	83 c0       	rjmp	.+262    	; 0xe5a <sixlowpan_hc01_process+0x430>
				srcport = HTONS(*((uint16_t *)(hc01_ptr + 1)));
     d54:	fd 01       	movw	r30, r26
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	fc 90       	ld	r15, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	e1 80       	ldd	r14, Z+1	; 0x01
				destport = HTONS(*((uint16_t *)(hc01_ptr + 3)));
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	7c 91       	ld	r23, X
     d64:	13 97       	sbiw	r26, 0x03	; 3
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	6c 91       	ld	r22, X
     d6a:	14 97       	sbiw	r26, 0x04	; 4

				/* Store swapped dest/src ports */
				*((uint16_t *) (hc01_ptr + 1)) = HTONS(destport);
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	7c 93       	st	X, r23
     d70:	11 97       	sbiw	r26, 0x01	; 1
     d72:	61 83       	std	Z+1, r22	; 0x01
				*((uint16_t *) (hc01_ptr + 3)) = HTONS(srcport);
     d74:	13 96       	adiw	r26, 0x03	; 3
     d76:	fc 92       	st	X, r15
     d78:	13 97       	sbiw	r26, 0x03	; 3
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	ec 92       	st	X, r14
     d7e:	14 97       	sbiw	r26, 0x04	; 4

				hc01_ptr += 5;
     d80:	15 96       	adiw	r26, 0x05	; 5
     d82:	b0 93 31 0b 	sts	0x0B31, r27
     d86:	a0 93 30 0b 	sts	0x0B30, r26
				mac_hdr_len += 5;
     d8a:	80 91 4b 17 	lds	r24, 0x174B
     d8e:	8b 5f       	subi	r24, 0xFB	; 251
     d90:	80 93 4b 17 	sts	0x174B, r24

			} else {
				return;
			}

			hc01_chksum_ptr = (uint16_t *) hc01_ptr;
     d94:	e0 91 30 0b 	lds	r30, 0x0B30
     d98:	f0 91 31 0b 	lds	r31, 0x0B31
     d9c:	f0 93 33 0b 	sts	0x0B33, r31
     da0:	e0 93 32 0b 	sts	0x0B32, r30

			/* Add checksum of source and destination */
			*hc01_chksum_ptr = srcport + destport;
     da4:	cb 01       	movw	r24, r22
     da6:	8e 0d       	add	r24, r14
     da8:	9f 1d       	adc	r25, r15
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24

			/* Check for overflow... */
			if ((*hc01_chksum_ptr < srcport) || (*hc01_chksum_ptr < destport)) {
     dae:	8e 15       	cp	r24, r14
     db0:	9f 05       	cpc	r25, r15
     db2:	18 f0       	brcs	.+6      	; 0xdba <sixlowpan_hc01_process+0x390>
     db4:	86 17       	cp	r24, r22
     db6:	97 07       	cpc	r25, r23
     db8:	18 f4       	brcc	.+6      	; 0xdc0 <sixlowpan_hc01_process+0x396>
				(*hc01_chksum_ptr)++;
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
			}

			hc01_ptr += 2;
     dc0:	40 91 30 0b 	lds	r20, 0x0B30
     dc4:	50 91 31 0b 	lds	r21, 0x0B31
     dc8:	4e 5f       	subi	r20, 0xFE	; 254
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	50 93 31 0b 	sts	0x0B31, r21
     dd0:	40 93 30 0b 	sts	0x0B30, r20
			mac_hdr_len += 2;
     dd4:	80 91 4b 17 	lds	r24, 0x174B
     dd8:	8e 5f       	subi	r24, 0xFE	; 254
     dda:	80 93 4b 17 	sts	0x174B, r24
			uint8_t maxPayload;
			maxPayload = 113 - mac_hdr_len; /* RUM allows 113 byte payloads */

			/* Call user program */
			uint8_t userdata;
			userdata = sixlowpan_udp_usercall(srcport, destport, hc01_ptr,
     dde:	20 91 4c 17 	lds	r18, 0x174C
     de2:	28 1b       	sub	r18, r24
     de4:	01 e7       	ldi	r16, 0x71	; 113
     de6:	08 1b       	sub	r16, r24
     de8:	c7 01       	movw	r24, r14
     dea:	7e 01       	movw	r14, r28
     dec:	08 94       	sec
     dee:	e1 1c       	adc	r14, r1
     df0:	f1 1c       	adc	r15, r1
     df2:	0e 94 ac 07 	call	0xf58	; 0xf58 <sixlowpan_udp_usercall>
     df6:	38 2f       	mov	r19, r24
					mac_len - mac_hdr_len, maxPayload, &ipbuf, rxFrame); // added to get access to originAddr

			/* If user wants to send data out, do so */
			if (userdata) {
     df8:	88 23       	and	r24, r24
     dfa:	79 f1       	breq	.+94     	; 0xe5a <sixlowpan_hc01_process+0x430>
				//TODO delete later
				//UART_PRINT("  UDP packet to send\r\n");

				ipbuf.mac_hdr_len = mac_hdr_len;
     dfc:	80 91 4b 17 	lds	r24, 0x174B
     e00:	8b 87       	std	Y+11, r24	; 0x0b
				mac_hdr_len = 0;
     e02:	10 92 4b 17 	sts	0x174B, r1

				/* Reset TTL */
				if ((IPHC_BUF->encoding[0] & 0x18) == SIXLOWPAN_IPHC_TTL_I) {
     e06:	e0 91 49 17 	lds	r30, 0x1749
     e0a:	f0 91 4a 17 	lds	r31, 0x174A
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	89 2f       	mov	r24, r25
     e12:	88 71       	andi	r24, 0x18	; 24
     e14:	29 f4       	brne	.+10     	; 0xe20 <sixlowpan_hc01_process+0x3f6>
					*(ipbuf.ttlptr) = 64;
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	80 83       	st	Z, r24
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <sixlowpan_hc01_process+0x3fc>
				} else {
					IPHC_BUF->encoding[0] = (IPHC_BUF->encoding[0] & ~(0x18))
     e20:	97 7e       	andi	r25, 0xE7	; 231
     e22:	90 61       	ori	r25, 0x10	; 16
     e24:	91 83       	std	Z+1, r25	; 0x01
							| SIXLOWPAN_IPHC_TTL_64;
				}

				/* Send packet back to source */
				IPHC_BUF->encoding[1] = SIXLOWPAN_IPHC_SAM_0
     e26:	80 91 4b 17 	lds	r24, 0x174B
     e2a:	e0 91 49 17 	lds	r30, 0x1749
     e2e:	f0 91 4a 17 	lds	r31, 0x174A
     e32:	e8 0f       	add	r30, r24
     e34:	f1 1d       	adc	r31, r1
     e36:	9d 81       	ldd	r25, Y+5	; 0x05
     e38:	92 95       	swap	r25
     e3a:	90 7f       	andi	r25, 0xF0	; 240
     e3c:	90 6c       	ori	r25, 0xC0	; 192
     e3e:	92 83       	std	Z+2, r25	; 0x02
						| (ipbuf.destcontext << 4); //New Source
				IPHC_BUF->encoding[1] |= ipbuf.srcmode | ipbuf.srccontext; //New Dest
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	28 85       	ldd	r18, Y+8	; 0x08
     e44:	82 2b       	or	r24, r18
     e46:	89 2b       	or	r24, r25
     e48:	82 83       	std	Z+2, r24	; 0x02

				mac_hdr_len = ipbuf.mac_hdr_len;
     e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e4c:	80 93 4b 17 	sts	0x174B, r24

				/* Figure out new UDP packet length */
				mac_len = userdata + mac_hdr_len;
     e50:	83 0f       	add	r24, r19
     e52:	80 93 4c 17 	sts	0x174C, r24

				/* Send over radio */
				sixlowpan_hc01_udp_send();
     e56:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
			}
		}
	}

}
     e5a:	2b 96       	adiw	r28, 0x0b	; 11
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <sixlowpan_DataIndication>:
	//UART_PRINT("sixlowpan_DataIndication\r\n");

	//memcpy(mac_buf, frame->payload, payloadlen);

	//mac_len = payloadlen;
	sixlowpan_hc01_process(frame, payloadlen);
     e76:	0e 94 15 05 	call	0xa2a	; 0xa2a <sixlowpan_hc01_process>

	return;
}
     e7a:	08 95       	ret

00000e7c <sixlowpan_tftpData>:
 *
 * This function writes the data to the proper place in
 * flash memory.
 */
void sixlowpan_tftpData(uint8_t * data, uint8_t len)
{
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	fc 01       	movw	r30, r24
   static uint8_t  spmBuf[SPM_PAGESIZE];
   uint8_t         lastPacket = 0;
   uint8_t         haveRoom = 0;


   if (data == NULL)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	29 f4       	brne	.+10     	; 0xe94 <sixlowpan_tftpData+0x18>
   {
      address = BOOTLOADER_INITIAL_ADDR;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a1 e0       	ldi	r26, 0x01	; 1
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	35 c0       	rjmp	.+106    	; 0xefe <sixlowpan_tftpData+0x82>
      byteCnt = 0;
      return;
   }

   //Check we have room
   if ((address + SPM_PAGESIZE) > MAX_BOOTSIZE)
     e94:	e0 90 3e 0c 	lds	r14, 0x0C3E
     e98:	f0 90 3f 0c 	lds	r15, 0x0C3F
     e9c:	00 91 40 0c 	lds	r16, 0x0C40
     ea0:	10 91 41 0c 	lds	r17, 0x0C41
     ea4:	40 91 3c 0c 	lds	r20, 0x0C3C
     ea8:	50 91 3d 0c 	lds	r21, 0x0C3D
     eac:	da 01       	movw	r26, r20
     eae:	a4 5c       	subi	r26, 0xC4	; 196
     eb0:	b4 4f       	sbci	r27, 0xF4	; 244
     eb2:	26 2f       	mov	r18, r22
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <sixlowpan_tftpData+0x40>
   }

   //Copy data over
   while(len)
   {
      spmBuf[byteCnt] = *data;
     eb6:	81 91       	ld	r24, Z+
     eb8:	8d 93       	st	X+, r24
      data++;
      len--;
     eba:	21 50       	subi	r18, 0x01	; 1
   {
      lastPacket = 1;
   }

   //Copy data over
   while(len)
     ebc:	22 23       	and	r18, r18
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <sixlowpan_tftpData+0x3a>
     ec0:	9a 01       	movw	r18, r20
     ec2:	26 0f       	add	r18, r22
     ec4:	31 1d       	adc	r19, r1
     ec6:	30 93 3d 0c 	sts	0x0C3D, r19
     eca:	20 93 3c 0c 	sts	0x0C3C, r18
      len--;
      byteCnt++;
   }

   //Check for full
   if (((byteCnt >= SPM_PAGESIZE) || (lastPacket)) && haveRoom)
     ece:	2f 3f       	cpi	r18, 0xFF	; 255
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <sixlowpan_tftpData+0x5a>
     ed4:	10 f4       	brcc	.+4      	; 0xeda <sixlowpan_tftpData+0x5e>
     ed6:	60 34       	cpi	r22, 0x40	; 64
     ed8:	f1 f0       	breq	.+60     	; 0xf16 <sixlowpan_tftpData+0x9a>
     eda:	d8 01       	movw	r26, r16
     edc:	c7 01       	movw	r24, r14
     ede:	80 50       	subi	r24, 0x00	; 0
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	af 4f       	sbci	r26, 0xFF	; 255
     ee4:	bf 4f       	sbci	r27, 0xFF	; 255
     ee6:	80 50       	subi	r24, 0x00	; 0
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	a1 40       	sbci	r26, 0x01	; 1
     eec:	b0 40       	sbci	r27, 0x00	; 0
     eee:	98 f4       	brcc	.+38     	; 0xf16 <sixlowpan_tftpData+0x9a>
   {
      //        boot_program_page(address, spmBuf);
      address += byteCnt;
     ef0:	c9 01       	movw	r24, r18
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	8e 0d       	add	r24, r14
     ef8:	9f 1d       	adc	r25, r15
     efa:	a0 1f       	adc	r26, r16
     efc:	b1 1f       	adc	r27, r17
     efe:	80 93 3e 0c 	sts	0x0C3E, r24
     f02:	90 93 3f 0c 	sts	0x0C3F, r25
     f06:	a0 93 40 0c 	sts	0x0C40, r26
     f0a:	b0 93 41 0c 	sts	0x0C41, r27
      byteCnt = 0;
     f0e:	10 92 3d 0c 	sts	0x0C3D, r1
     f12:	10 92 3c 0c 	sts	0x0C3C, r1
      //Give time for us to ACK last packet
      //        bootloaderEndAddress = address;
      //        macSetAlarm(100, boot_copy_program);
   }

}
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	08 95       	ret

00000f20 <sixlowpan_application_periodic>:
      sixlowpan_hc01_udp_set_payloadsize(strlength);
      sixlowpan_hc01_udp_send();
   }

#endif
}
     f20:	08 95       	ret

00000f22 <sixlowpan_application_init>:
#elif ((APP == IPSO) && (SENSOR_TYPE == SENSOR_RANDOM_IPSO))
   SIXLOWPAN_PERIODIC_APP_TIME = 1;
#endif

   return;
}
     f22:	08 95       	ret

00000f24 <sixlowpan_button>:
void sixlowpan_button(void)
{
   uint8_t * addr_ptr;

   /* Reset response */
   remoteCommandResponseLen = 0;
     f24:	10 92 37 0b 	sts	0x0B37, r1

   if (remoteAction == COMMAND_UDP)
   {
      addr_ptr = sixlowpan_hc01_udp_setup_ipglobal();
     f28:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <sixlowpan_hc01_udp_setup_ipglobal>
   else
   {
      addr_ptr = sixlowpan_hc01_ping_setup_ipglobal(++pingSequence);
   }

   memcpy(addr_ptr, destipAddr, 16);
     f2c:	dc 01       	movw	r26, r24
     f2e:	ee e6       	ldi	r30, 0x6E	; 110
     f30:	f2 e0       	ldi	r31, 0x02	; 2
     f32:	80 e1       	ldi	r24, 0x10	; 16
     f34:	01 90       	ld	r0, Z+
     f36:	0d 92       	st	X+, r0
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <sixlowpan_button+0x10>

   if (remoteAction == COMMAND_UDP)
   {
      sixlowpan_hc01_udp_setup_ports(UDP_PORT_RESPONSE, UDP_PORT_COMMANDS);
     f3c:	81 eb       	ldi	r24, 0xB1	; 177
     f3e:	90 ef       	ldi	r25, 0xF0	; 240
     f40:	60 eb       	ldi	r22, 0xB0	; 176
     f42:	70 ef       	ldi	r23, 0xF0	; 240
     f44:	0e 94 37 01 	call	0x26e	; 0x26e <sixlowpan_hc01_udp_setup_ports>
      memcpy( sixlowpan_hc01_udp_get_payloadptr(), remoteCommand, remoteCommandLen);
     f48:	0e 94 91 01 	call	0x322	; 0x322 <sixlowpan_hc01_udp_get_payloadptr>
      sixlowpan_hc01_udp_set_payloadsize(remoteCommandLen);
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	0e 94 96 01 	call	0x32c	; 0x32c <sixlowpan_hc01_udp_set_payloadsize>
      sixlowpan_hc01_udp_send();
     f52:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
      PingSendTime = macGetTime();
      sixlowpan_hc01_ping_send();
   }


}
     f56:	08 95       	ret

00000f58 <sixlowpan_udp_usercall>:
 */
uint8_t sixlowpan_udp_usercall(uint16_t sourceport, uint16_t destport,
      uint8_t * payload, uint8_t payloadlen,
      uint8_t payloadmax, ipbuf_t * ipbuf,
      ftData* rxFrame) // added to get access to originAddr
      {
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	da 01       	movw	r26, r20
     f64:	e2 2f       	mov	r30, r18
     f66:	e6 01       	movw	r28, r12
   /* Commands to the sensor are accepted on port 0xF0B0 */
   if (destport == UDP_PORT_COMMANDS)
     f68:	40 ef       	ldi	r20, 0xF0	; 240
     f6a:	60 3b       	cpi	r22, 0xB0	; 176
     f6c:	74 07       	cpc	r23, r20
     f6e:	39 f4       	brne	.+14     	; 0xf7e <sixlowpan_udp_usercall+0x26>
      }

      strcpy((char *)payload, "OK\r\n");
      return 4;
#else
      strcpy((char *)payload, "IPSO app disabled\r\n");
     f70:	cd 01       	movw	r24, r26
     f72:	6d e2       	ldi	r22, 0x2D	; 45
     f74:	72 e0       	ldi	r23, 0x02	; 2
     f76:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strcpy>
     f7a:	e3 e1       	ldi	r30, 0x13	; 19
     f7c:	14 c1       	rjmp	.+552    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 19;
#endif

   }
   /* SENSOR Application */
   else if (destport == UDP_PORT_SENSOR)
     f7e:	50 ef       	ldi	r21, 0xF0	; 240
     f80:	63 3b       	cpi	r22, 0xB3	; 179
     f82:	75 07       	cpc	r23, r21
     f84:	39 f4       	brne	.+14     	; 0xf94 <sixlowpan_udp_usercall+0x3c>
         strcpy((char *)payload, "OK\r\n");
         return 4;
      }
      else
      {
         strcpy((char *)payload, "Disabled.\r\n");
     f86:	cd 01       	movw	r24, r26
     f88:	61 e4       	ldi	r22, 0x41	; 65
     f8a:	72 e0       	ldi	r23, 0x02	; 2
     f8c:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strcpy>
     f90:	eb e0       	ldi	r30, 0x0B	; 11
     f92:	09 c1       	rjmp	.+530    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
#endif

   }

   /* DSK001 Demo Application */
   else if (destport == UDP_PORT_DSKDEMO)
     f94:	80 ef       	ldi	r24, 0xF0	; 240
     f96:	64 3b       	cpi	r22, 0xB4	; 180
     f98:	78 07       	cpc	r23, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <sixlowpan_udp_usercall+0x46>
     f9c:	04 c1       	rjmp	.+520    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>

#endif

   }
   /* TFTP Port */
   else if (destport == UDP_PORT_TFTP)
     f9e:	65 34       	cpi	r22, 0x45	; 69
     fa0:	71 05       	cpc	r23, r1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <sixlowpan_udp_usercall+0x4e>
     fa4:	cf c0       	rjmp	.+414    	; 0x1144 <sixlowpan_udp_usercall+0x1ec>
         macConfig.sleeping = false;
      }
#endif

      /* Only support write request in binary: Opcode = 2 */
      if ((*(tftpPayload + 0) == 0x00) &&
     fa6:	8c 91       	ld	r24, X
     fa8:	88 23       	and	r24, r24
     faa:	09 f0       	breq	.+2      	; 0xfae <sixlowpan_udp_usercall+0x56>
     fac:	fb c0       	rjmp	.+502    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	8c 91       	ld	r24, X
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	09 f0       	breq	.+2      	; 0xfba <sixlowpan_udp_usercall+0x62>
     fb8:	89 c0       	rjmp	.+274    	; 0x10cc <sixlowpan_udp_usercall+0x174>
            (*(tftpPayload + 1) == 0x02))
      {
         //Point to filename
         tftpPayload += 2;
     fba:	9d 01       	movw	r18, r26
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	e9 01       	movw	r28, r18
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <sixlowpan_udp_usercall+0x6e>

         //Find end of filename
         while (*tftpPayload)
            tftpPayload++;
     fc4:	ef 01       	movw	r28, r30
      {
         //Point to filename
         tftpPayload += 2;

         //Find end of filename
         while (*tftpPayload)
     fc6:	fe 01       	movw	r30, r28
     fc8:	81 91       	ld	r24, Z+
     fca:	88 23       	and	r24, r24
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <sixlowpan_udp_usercall+0x6c>

         //Point to file transfer mode
         tftpPayload++;

         //Check we are using binary file transfer mode
         if ((*(tftpPayload + 0) == 'o') &&
     fce:	80 81       	ld	r24, Z
     fd0:	8f 36       	cpi	r24, 0x6F	; 111
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <sixlowpan_udp_usercall+0x7e>
     fd4:	e7 c0       	rjmp	.+462    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	83 36       	cpi	r24, 0x63	; 99
     fda:	09 f0       	breq	.+2      	; 0xfde <sixlowpan_udp_usercall+0x86>
     fdc:	e3 c0       	rjmp	.+454    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fde:	82 81       	ldd	r24, Z+2	; 0x02
     fe0:	84 37       	cpi	r24, 0x74	; 116
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <sixlowpan_udp_usercall+0x8e>
     fe4:	df c0       	rjmp	.+446    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fe6:	83 81       	ldd	r24, Z+3	; 0x03
     fe8:	85 36       	cpi	r24, 0x65	; 101
     fea:	09 f0       	breq	.+2      	; 0xfee <sixlowpan_udp_usercall+0x96>
     fec:	db c0       	rjmp	.+438    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	84 37       	cpi	r24, 0x74	; 116
     ff2:	09 f0       	breq	.+2      	; 0xff6 <sixlowpan_udp_usercall+0x9e>
     ff4:	d7 c0       	rjmp	.+430    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
     ff6:	85 81       	ldd	r24, Z+5	; 0x05
     ff8:	88 23       	and	r24, r24
     ffa:	09 f0       	breq	.+2      	; 0xffe <sixlowpan_udp_usercall+0xa6>
     ffc:	d3 c0       	rjmp	.+422    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
               (*(tftpPayload + 4) == 't') &&
               (*(tftpPayload + 5) == 0x00))
         {

            //Point to options
            tftpPayload += 6;
     ffe:	fe 01       	movw	r30, r28
    1000:	37 96       	adiw	r30, 0x07	; 7

            //We only accept requests with a size of
            //64 bytes per data node!
            if ((*(tftpPayload + 0) == 'b') &&
    1002:	8f 81       	ldd	r24, Y+7	; 0x07
    1004:	82 36       	cpi	r24, 0x62	; 98
    1006:	09 f0       	breq	.+2      	; 0x100a <sixlowpan_udp_usercall+0xb2>
    1008:	cd c0       	rjmp	.+410    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    100a:	81 81       	ldd	r24, Z+1	; 0x01
    100c:	8c 36       	cpi	r24, 0x6C	; 108
    100e:	09 f0       	breq	.+2      	; 0x1012 <sixlowpan_udp_usercall+0xba>
    1010:	c9 c0       	rjmp	.+402    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	8b 36       	cpi	r24, 0x6B	; 107
    1016:	09 f0       	breq	.+2      	; 0x101a <sixlowpan_udp_usercall+0xc2>
    1018:	c5 c0       	rjmp	.+394    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    101a:	13 81       	ldd	r17, Z+3	; 0x03
    101c:	13 37       	cpi	r17, 0x73	; 115
    101e:	09 f0       	breq	.+2      	; 0x1022 <sixlowpan_udp_usercall+0xca>
    1020:	c1 c0       	rjmp	.+386    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1022:	74 81       	ldd	r23, Z+4	; 0x04
    1024:	79 36       	cpi	r23, 0x69	; 105
    1026:	09 f0       	breq	.+2      	; 0x102a <sixlowpan_udp_usercall+0xd2>
    1028:	bd c0       	rjmp	.+378    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    102a:	65 81       	ldd	r22, Z+5	; 0x05
    102c:	6a 37       	cpi	r22, 0x7A	; 122
    102e:	09 f0       	breq	.+2      	; 0x1032 <sixlowpan_udp_usercall+0xda>
    1030:	b9 c0       	rjmp	.+370    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1032:	56 81       	ldd	r21, Z+6	; 0x06
    1034:	55 36       	cpi	r21, 0x65	; 101
    1036:	09 f0       	breq	.+2      	; 0x103a <sixlowpan_udp_usercall+0xe2>
    1038:	b5 c0       	rjmp	.+362    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    103a:	87 81       	ldd	r24, Z+7	; 0x07
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <sixlowpan_udp_usercall+0xea>
    1040:	b1 c0       	rjmp	.+354    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1042:	40 85       	ldd	r20, Z+8	; 0x08
    1044:	46 33       	cpi	r20, 0x36	; 54
    1046:	09 f0       	breq	.+2      	; 0x104a <sixlowpan_udp_usercall+0xf2>
    1048:	ad c0       	rjmp	.+346    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    104a:	91 85       	ldd	r25, Z+9	; 0x09
    104c:	94 33       	cpi	r25, 0x34	; 52
    104e:	09 f0       	breq	.+2      	; 0x1052 <sixlowpan_udp_usercall+0xfa>
    1050:	a9 c0       	rjmp	.+338    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
    1052:	82 85       	ldd	r24, Z+10	; 0x0a
    1054:	88 23       	and	r24, r24
    1056:	09 f0       	breq	.+2      	; 0x105a <sixlowpan_udp_usercall+0x102>
    1058:	a5 c0       	rjmp	.+330    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
                  (*(tftpPayload + 10) == 0x00))
            {
               //Reset payload
               tftpPayload = payload;

               *tftpPayload++ = 0x00;
    105a:	1c 92       	st	X, r1
               *tftpPayload++ = 0x06;
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	11 96       	adiw	r26, 0x01	; 1
    1060:	8c 93       	st	X, r24
    1062:	11 97       	sbiw	r26, 0x01	; 1
               *tftpPayload++ = 'b';
    1064:	82 e6       	ldi	r24, 0x62	; 98
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	8c 93       	st	X, r24
    106a:	f9 01       	movw	r30, r18
    106c:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 'l';
    106e:	8c e6       	ldi	r24, 0x6C	; 108
    1070:	d9 01       	movw	r26, r18
    1072:	11 96       	adiw	r26, 0x01	; 1
    1074:	8c 93       	st	X, r24
    1076:	df 01       	movw	r26, r30
    1078:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'k';
    107a:	8b e6       	ldi	r24, 0x6B	; 107
    107c:	81 83       	std	Z+1, r24	; 0x01
    107e:	fd 01       	movw	r30, r26
    1080:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 's';
    1082:	11 96       	adiw	r26, 0x01	; 1
    1084:	1c 93       	st	X, r17
    1086:	df 01       	movw	r26, r30
    1088:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'i';
    108a:	71 83       	std	Z+1, r23	; 0x01
    108c:	fd 01       	movw	r30, r26
    108e:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 'z';
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	6c 93       	st	X, r22
    1094:	df 01       	movw	r26, r30
    1096:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = 'e';
    1098:	51 83       	std	Z+1, r21	; 0x01
    109a:	fd 01       	movw	r30, r26
    109c:	31 96       	adiw	r30, 0x01	; 1
               *tftpPayload++ = 0x00;
    109e:	11 96       	adiw	r26, 0x01	; 1
    10a0:	1c 92       	st	X, r1
    10a2:	df 01       	movw	r26, r30
    10a4:	11 96       	adiw	r26, 0x01	; 1
               *tftpPayload++ = '6';
    10a6:	41 83       	std	Z+1, r20	; 0x01
               *tftpPayload++ = '4';
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	9c 93       	st	X, r25
    10ac:	11 97       	sbiw	r26, 0x01	; 1
               *tftpPayload++ = 0x00;
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	1c 92       	st	X, r1

               //Reset this
               sixlowpan_tftpData(NULL, 0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <sixlowpan_tftpData>

               expectedBlock = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	90 93 43 0c 	sts	0x0C43, r25
    10c4:	80 93 42 0c 	sts	0x0C42, r24
    10c8:	ed e0       	ldi	r30, 0x0D	; 13
    10ca:	6d c0       	rjmp	.+218    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
               return 13;
            }
         }
      }
      /* Data Packet: Opcode = 3 */
      else if ((*(tftpPayload + 0) == 0x00) &&
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <sixlowpan_udp_usercall+0x17a>
    10d0:	69 c0       	rjmp	.+210    	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
            (*(tftpPayload + 1) == 0x03))
      {
         uint16_t actualBlock;

         actualBlock =  *(tftpPayload + 3);
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	2c 91       	ld	r18, X
    10d6:	13 97       	sbiw	r26, 0x03	; 3
         actualBlock += (*(tftpPayload + 2) << 8);
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	9c 91       	ld	r25, X
    10dc:	12 97       	sbiw	r26, 0x02	; 2
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	ac 01       	movw	r20, r24
    10e2:	42 0f       	add	r20, r18
    10e4:	51 1d       	adc	r21, r1
    10e6:	9a 01       	movw	r18, r20

         //Received the proper data block
         if (actualBlock == expectedBlock)
    10e8:	80 91 42 0c 	lds	r24, 0x0C42
    10ec:	90 91 43 0c 	lds	r25, 0x0C43
    10f0:	48 17       	cp	r20, r24
    10f2:	59 07       	cpc	r21, r25
    10f4:	89 f4       	brne	.+34     	; 0x1118 <sixlowpan_udp_usercall+0x1c0>
         {
            *(tftpPayload + 1) = 4; //Opcode 4 = ACK
    10f6:	84 e0       	ldi	r24, 0x04	; 4
    10f8:	11 96       	adiw	r26, 0x01	; 1
    10fa:	8c 93       	st	X, r24
    10fc:	11 97       	sbiw	r26, 0x01	; 1
            expectedBlock++;
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	30 93 43 0c 	sts	0x0C43, r19
    1106:	20 93 42 0c 	sts	0x0C42, r18

            //Check if we are done
            sixlowpan_tftpData(tftpPayload + 4, payloadlen - 4);
    110a:	e4 50       	subi	r30, 0x04	; 4
    110c:	cd 01       	movw	r24, r26
    110e:	04 96       	adiw	r24, 0x04	; 4
    1110:	6e 2f       	mov	r22, r30
    1112:	0e 94 3e 07 	call	0xe7c	; 0xe7c <sixlowpan_tftpData>
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <sixlowpan_udp_usercall+0x1cc>
            return 4;
         }
         //Our ACK must have got lost?
         else if (actualBlock < expectedBlock)
    1118:	48 17       	cp	r20, r24
    111a:	59 07       	cpc	r21, r25
    111c:	28 f4       	brcc	.+10     	; 0x1128 <sixlowpan_udp_usercall+0x1d0>
         {
            *(tftpPayload + 1) = 4; //Opcode 4 = ACK
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	8c 93       	st	X, r24
    1124:	e4 e0       	ldi	r30, 0x04	; 4
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
            return 4;
         }
         //Block from the future... something bad happened
         else
         {
            *(tftpPayload + 1) = 5; //OpCode 5 = error
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	8c 93       	st	X, r24
    112e:	11 97       	sbiw	r26, 0x01	; 1
            *(tftpPayload + 2) = 0; //Error code = 0 (undefined)
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	1c 92       	st	X, r1
    1134:	12 97       	sbiw	r26, 0x02	; 2
            *(tftpPayload + 3) = 0;
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	1c 92       	st	X, r1
    113a:	13 97       	sbiw	r26, 0x03	; 3
            *(tftpPayload + 4) = 0; //No string sorry
    113c:	14 96       	adiw	r26, 0x04	; 4
    113e:	1c 92       	st	X, r1
    1140:	e5 e0       	ldi	r30, 0x05	; 5
    1142:	31 c0       	rjmp	.+98     	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 0;

   }
   //TODO added by Dresden Elektronik to implement own user application
   // End Node/Router Node Port address
   else if(destport == UDP_PORT_END_ROUTER)
    1144:	50 ef       	ldi	r21, 0xF0	; 240
    1146:	6b 3b       	cpi	r22, 0xBB	; 187
    1148:	75 07       	cpc	r23, r21
    114a:	31 f4       	brne	.+12     	; 0x1158 <sixlowpan_udp_usercall+0x200>
   {
      process_endnode_udp_packet(payload, rxFrame->originAddr);
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <process_endnode_udp_packet>
    1156:	26 c0       	rjmp	.+76     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
      return 0; //send nothing back
   }

   //TODO added by Dresden Elektronik to implement own user application
   // Coordinator Node Port address
   else if(destport == UDP_PORT_COORD)
    1158:	80 ef       	ldi	r24, 0xF0	; 240
    115a:	6c 3b       	cpi	r22, 0xBC	; 188
    115c:	78 07       	cpc	r23, r24
    115e:	31 f4       	brne	.+12     	; 0x116c <sixlowpan_udp_usercall+0x214>

   {
      process_coord_udp_packet(payload, rxFrame->originAddr);
    1160:	6b 85       	ldd	r22, Y+11	; 0x0b
    1162:	7c 85       	ldd	r23, Y+12	; 0x0c
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <process_coord_udp_packet>
    116a:	1c c0       	rjmp	.+56     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
      return 0; //send nothing back
   }

   // TODO Implemented by Simon to implement own behaviour on incoming Messages on specified UDP PORT
   else if(destport == UDP_PORT_SENSN_COORD)
    116c:	40 ef       	ldi	r20, 0xF0	; 240
    116e:	6d 3b       	cpi	r22, 0xBD	; 189
    1170:	74 07       	cpc	r23, r20
    1172:	39 f4       	brne	.+14     	; 0x1182 <sixlowpan_udp_usercall+0x22a>
     {
        process_coord_udp_packet_SN(payload, payloadlen, rxFrame->originAddr);
    1174:	4b 85       	ldd	r20, Y+11	; 0x0b
    1176:	5c 85       	ldd	r21, Y+12	; 0x0c
    1178:	cd 01       	movw	r24, r26
    117a:	62 2f       	mov	r22, r18
    117c:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <process_coord_udp_packet_SN>
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
        return 0; //send nothing back
     }
   else if(destport == UDP_PORT_SENSN_END_ROUTER)
    1182:	6e 5b       	subi	r22, 0xBE	; 190
    1184:	70 4f       	sbci	r23, 0xF0	; 240
    1186:	39 f4       	brne	.+14     	; 0x1196 <sixlowpan_udp_usercall+0x23e>
        {
           process_endnode_udp_packet_SN(payload, payloadlen, rxFrame->originAddr);
    1188:	4b 85       	ldd	r20, Y+11	; 0x0b
    118a:	5c 85       	ldd	r21, Y+12	; 0x0c
    118c:	cd 01       	movw	r24, r26
    118e:	62 2f       	mov	r22, r18
    1190:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <process_endnode_udp_packet_SN>
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <sixlowpan_udp_usercall+0x24c>
        }

   /* Unknown port */
   else
   {
      strcpy((char *)payload, "Unknown port\r\n");
    1196:	cd 01       	movw	r24, r26
    1198:	6d e4       	ldi	r22, 0x4D	; 77
    119a:	72 e0       	ldi	r23, 0x02	; 2
    119c:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strcpy>
    11a0:	ee e0       	ldi	r30, 0x0E	; 14
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <sixlowpan_udp_usercall+0x24e>
      return 14;
    11a4:	e0 e0       	ldi	r30, 0x00	; 0
   }

   return payloadlen;
      }
    11a6:	8e 2f       	mov	r24, r30
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	08 95       	ret

000011b4 <sixlowpan_ping_usercall>:
 * received after sending out a ping request. Can be used to verify
 * node connectivity.
 *
 */
void sixlowpan_ping_usercall(uint8_t sequence)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
   remoteCommandResponseTime = macGetTime();
    11b8:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	80 93 44 0c 	sts	0x0C44, r24
    11c4:	90 93 45 0c 	sts	0x0C45, r25
    11c8:	a0 93 46 0c 	sts	0x0C46, r26
    11cc:	b0 93 47 0c 	sts	0x0C47, r27

   uint32_t timeDiff;

   timeDiff = remoteCommandResponseTime - PingSendTime;

   remoteCommandResponseLen =
    11d0:	2d b7       	in	r18, 0x3d	; 61
    11d2:	3e b7       	in	r19, 0x3e	; 62
    11d4:	28 50       	subi	r18, 0x08	; 8
    11d6:	30 40       	sbci	r19, 0x00	; 0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	3e bf       	out	0x3e, r19	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	2d bf       	out	0x3d, r18	; 61
    11e2:	ed b7       	in	r30, 0x3d	; 61
    11e4:	fe b7       	in	r31, 0x3e	; 62
    11e6:	31 96       	adiw	r30, 0x01	; 1
    11e8:	28 e4       	ldi	r18, 0x48	; 72
    11ea:	3c e0       	ldi	r19, 0x0C	; 12
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	3a 83       	std	Y+2, r19	; 0x02
    11f2:	29 83       	std	Y+1, r18	; 0x01
    11f4:	2c e5       	ldi	r18, 0x5C	; 92
    11f6:	32 e0       	ldi	r19, 0x02	; 2
    11f8:	33 83       	std	Z+3, r19	; 0x03
    11fa:	22 83       	std	Z+2, r18	; 0x02
    11fc:	20 91 38 0b 	lds	r18, 0x0B38
    1200:	30 91 39 0b 	lds	r19, 0x0B39
    1204:	40 91 3a 0b 	lds	r20, 0x0B3A
    1208:	50 91 3b 0b 	lds	r21, 0x0B3B
    120c:	82 1b       	sub	r24, r18
    120e:	93 0b       	sbc	r25, r19
    1210:	a4 0b       	sbc	r26, r20
    1212:	b5 0b       	sbc	r27, r21
    1214:	84 83       	std	Z+4, r24	; 0x04
    1216:	95 83       	std	Z+5, r25	; 0x05
    1218:	a6 83       	std	Z+6, r26	; 0x06
    121a:	b7 83       	std	Z+7, r27	; 0x07
    121c:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    1220:	80 93 37 0b 	sts	0x0B37, r24
         sprintf(remoteCommandResponse, "Ping took %ld mS\n",
               timeDiff);

   // Alert the application
   appSixlowpanPingResponse();
    1224:	2d b7       	in	r18, 0x3d	; 61
    1226:	3e b7       	in	r19, 0x3e	; 62
    1228:	28 5f       	subi	r18, 0xF8	; 248
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	3e bf       	out	0x3e, r19	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	2d bf       	out	0x3d, r18	; 61
    1236:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <appSixlowpanPingResponse>
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <macGetTime>:

#define TICKS_PER_MS (u16)(1.0/((float)MS_PER_TICK))

volatile static u16 tickTimer;
u16 macGetTime(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    u16 localtime;

    AVR_ENTER_CRITICAL_REGION();
    124a:	8f b7       	in	r24, 0x3f	; 63
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	f8 94       	cli
    localtime = tickTimer;
    1250:	20 91 a4 0c 	lds	r18, 0x0CA4
    1254:	30 91 a5 0c 	lds	r19, 0x0CA5
    AVR_LEAVE_CRITICAL_REGION();
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	8f bf       	out	0x3f, r24	; 63

    return localtime;
}
    125c:	c9 01       	movw	r24, r18
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <getUniqueID>:
static u8 getUniqueID(void)
{
    static u8 currentTimerID;
    u8 i,goodID;

    currentTimerID++;
    1266:	90 91 61 0c 	lds	r25, 0x0C61
    126a:	9f 5f       	subi	r25, 0xFF	; 255
    for(;;)
    {
        // don't return zero as an ID, macSetAlarm return zero on error
        if (!currentTimerID)
    126c:	09 f4       	brne	.+2      	; 0x1270 <getUniqueID+0xa>
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	e5 e6       	ldi	r30, 0x65	; 101
    1272:	fc e0       	ldi	r31, 0x0C	; 12
    1274:	21 e0       	ldi	r18, 0x01	; 1
            currentTimerID++;

        // See if this ID is used by any active timer
        goodID = 1;
        for (i=0;i<TIMER_EVENTS_MAX;i++)
            if (timerEvents[i].timerID == currentTimerID)
    1276:	80 81       	ld	r24, Z
    1278:	89 17       	cp	r24, r25
    127a:	09 f4       	brne	.+2      	; 0x127e <getUniqueID+0x18>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	35 96       	adiw	r30, 0x05	; 5
        if (!currentTimerID)
            currentTimerID++;

        // See if this ID is used by any active timer
        goodID = 1;
        for (i=0;i<TIMER_EVENTS_MAX;i++)
    1280:	8c e0       	ldi	r24, 0x0C	; 12
    1282:	e7 39       	cpi	r30, 0x97	; 151
    1284:	f8 07       	cpc	r31, r24
    1286:	b9 f7       	brne	.-18     	; 0x1276 <getUniqueID+0x10>
            if (timerEvents[i].timerID == currentTimerID)
                goodID = 0;
        if (APP || IPV6LOWPAN)
        {
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
                if (longTimerEvents[i].timerID == currentTimerID)
    1288:	80 91 97 0c 	lds	r24, 0x0C97
    128c:	89 17       	cp	r24, r25
    128e:	09 f4       	brne	.+2      	; 0x1292 <getUniqueID+0x2c>
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	80 91 9c 0c 	lds	r24, 0x0C9C
    1296:	89 17       	cp	r24, r25
    1298:	09 f4       	brne	.+2      	; 0x129c <getUniqueID+0x36>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	80 91 a1 0c 	lds	r24, 0x0CA1
    12a0:	89 17       	cp	r24, r25
    12a2:	19 f3       	breq	.-58     	; 0x126a <getUniqueID+0x4>
                    goodID = 0;
        }
        if (goodID)
    12a4:	22 23       	and	r18, r18
    12a6:	09 f3       	breq	.-62     	; 0x126a <getUniqueID+0x4>
    12a8:	90 93 61 0c 	sts	0x0C61, r25
            // unused ID, use this one
            return currentTimerID;
        // ID already exists, try again skippy
        currentTimerID++;
    }
}
    12ac:	89 2f       	mov	r24, r25
    12ae:	08 95       	ret

000012b0 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9c 01       	movw	r18, r24
    12c0:	fb 01       	movw	r30, r22
    if (APP || IPV6LOWPAN)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	11 f4       	brne	.+4      	; 0x12ca <macSetLongAlarm+0x1a>
        {
            // Just go right now
            callback();
    12c6:	09 95       	icall
    12c8:	16 c0       	rjmp	.+44     	; 0x12f6 <macSetLongAlarm+0x46>
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    12ca:	80 91 95 0c 	lds	r24, 0x0C95
    12ce:	90 91 96 0c 	lds	r25, 0x0C96
    12d2:	89 2b       	or	r24, r25
    12d4:	11 f4       	brne	.+4      	; 0x12da <macSetLongAlarm+0x2a>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	11 c0       	rjmp	.+34     	; 0x12fc <macSetLongAlarm+0x4c>
    12da:	80 91 9a 0c 	lds	r24, 0x0C9A
    12de:	90 91 9b 0c 	lds	r25, 0x0C9B
    12e2:	89 2b       	or	r24, r25
    12e4:	11 f4       	brne	.+4      	; 0x12ea <macSetLongAlarm+0x3a>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <macSetLongAlarm+0x4c>
    12ea:	80 91 9f 0c 	lds	r24, 0x0C9F
    12ee:	90 91 a0 0c 	lds	r25, 0x0CA0
    12f2:	89 2b       	or	r24, r25
    12f4:	11 f0       	breq	.+4      	; 0x12fa <macSetLongAlarm+0x4a>
                // free, use this one
                break;
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2b c0       	rjmp	.+86     	; 0x1350 <macSetLongAlarm+0xa0>
    12fa:	82 e0       	ldi	r24, 0x02	; 2
        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	8c 01       	movw	r16, r24
    1300:	00 0f       	add	r16, r16
    1302:	11 1f       	adc	r17, r17
    1304:	00 0f       	add	r16, r16
    1306:	11 1f       	adc	r17, r17
    1308:	08 0f       	add	r16, r24
    130a:	19 1f       	adc	r17, r25
    130c:	0b 56       	subi	r16, 0x6B	; 107
    130e:	13 4f       	sbci	r17, 0xF3	; 243
    1310:	d8 01       	movw	r26, r16
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	3c 93       	st	X, r19
    1316:	2e 93       	st	-X, r18
        longTimerEvents[i].callback = callback;
    1318:	14 96       	adiw	r26, 0x04	; 4
    131a:	fc 93       	st	X, r31
    131c:	ee 93       	st	-X, r30
    131e:	13 97       	sbiw	r26, 0x03	; 3
        longTimerEvents[i].timerID = getUniqueID();
    1320:	0e 94 33 09 	call	0x1266	; 0x1266 <getUniqueID>
    1324:	98 2f       	mov	r25, r24
    1326:	f8 01       	movw	r30, r16
    1328:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    132a:	8f b7       	in	r24, 0x3f	; 63
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	f8 94       	cli
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    1330:	80 91 62 0c 	lds	r24, 0x0C62
    1334:	88 23       	and	r24, r24
    1336:	51 f4       	brne	.+20     	; 0x134c <macSetLongAlarm+0x9c>
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    1338:	10 92 95 00 	sts	0x0095, r1
    133c:	10 92 94 00 	sts	0x0094, r1

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 71 00 	sts	0x0071, r24
        timerRunning = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 62 0c 	sts	0x0C62, r24
        longTimerEvents[i].timerID = getUniqueID();
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
        timerStart();
        AVR_LEAVE_CRITICAL_REGION();
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    }
    return 0;
}
    1350:	89 2f       	mov	r24, r25
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	ac 01       	movw	r20, r24
    u8 i;
    u16 ticks;

    if (!time)
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	19 f4       	brne	.+6      	; 0x1378 <macSetAlarm+0x1a>
    {
        // Don't delay, just call it
        callback();
    1372:	fb 01       	movw	r30, r22
    1374:	09 95       	icall
    1376:	37 c0       	rjmp	.+110    	; 0x13e6 <macSetAlarm+0x88>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    1378:	8f b7       	in	r24, 0x3f	; 63
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	f8 94       	cli
    137e:	e3 e6       	ldi	r30, 0x63	; 99
    1380:	fc e0       	ldi	r31, 0x0C	; 12
    1382:	00 e0       	ldi	r16, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	89 2b       	or	r24, r25
    138a:	49 f5       	brne	.+82     	; 0x13de <macSetAlarm+0x80>

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    138c:	20 2f       	mov	r18, r16
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	f9 01       	movw	r30, r18
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e2 0f       	add	r30, r18
    139c:	f3 1f       	adc	r31, r19
    139e:	ed 59       	subi	r30, 0x9D	; 157
    13a0:	f3 4f       	sbci	r31, 0xF3	; 243
    13a2:	ca 01       	movw	r24, r20
    13a4:	41 15       	cp	r20, r1
    13a6:	51 05       	cpc	r21, r1
    13a8:	11 f4       	brne	.+4      	; 0x13ae <macSetAlarm+0x50>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
    timerEvents[i].callback = callback;
    13b2:	89 01       	movw	r16, r18
    13b4:	00 0f       	add	r16, r16
    13b6:	11 1f       	adc	r17, r17
    13b8:	00 0f       	add	r16, r16
    13ba:	11 1f       	adc	r17, r17
    13bc:	02 0f       	add	r16, r18
    13be:	13 1f       	adc	r17, r19
    13c0:	0d 59       	subi	r16, 0x9D	; 157
    13c2:	13 4f       	sbci	r17, 0xF3	; 243
    13c4:	f8 01       	movw	r30, r16
    13c6:	74 83       	std	Z+4, r23	; 0x04
    13c8:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    13ca:	0e 94 33 09 	call	0x1266	; 0x1266 <getUniqueID>
    13ce:	98 2f       	mov	r25, r24
    13d0:	f8 01       	movw	r30, r16
    13d2:	82 83       	std	Z+2, r24	; 0x02
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    13d4:	80 91 62 0c 	lds	r24, 0x0C62
    13d8:	88 23       	and	r24, r24
    13da:	39 f0       	breq	.+14     	; 0x13ea <macSetAlarm+0x8c>
    13dc:	10 c0       	rjmp	.+32     	; 0x13fe <macSetAlarm+0xa0>
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    13de:	0f 5f       	subi	r16, 0xFF	; 255
    13e0:	35 96       	adiw	r30, 0x05	; 5
    13e2:	0a 30       	cpi	r16, 0x0A	; 10
    13e4:	79 f6       	brne	.-98     	; 0x1384 <macSetAlarm+0x26>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <macSetAlarm+0xa4>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    13ea:	10 92 95 00 	sts	0x0095, r1
    13ee:	10 92 94 00 	sts	0x0094, r1

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	80 93 71 00 	sts	0x0071, r24
        timerRunning = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	80 93 62 0c 	sts	0x0C62, r24
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();

    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
}
    1402:	89 2f       	mov	r24, r25
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    1410:	98 2f       	mov	r25, r24
    1412:	e5 e6       	ldi	r30, 0x65	; 101
    1414:	fc e0       	ldi	r31, 0x0C	; 12
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    141a:	80 81       	ld	r24, Z
    141c:	89 17       	cp	r24, r25
    141e:	69 f4       	brne	.+26     	; 0x143a <macTimerEnd+0x2a>
        {
            // kill this timer
            timerEvents[i].time = 0;
    1420:	f9 01       	movw	r30, r18
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	e2 0f       	add	r30, r18
    142c:	f3 1f       	adc	r31, r19
    142e:	ed 59       	subi	r30, 0x9D	; 157
    1430:	f3 4f       	sbci	r31, 0xF3	; 243
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
            timerEvents[i].timerID = 0;
    1436:	12 82       	std	Z+2, r1	; 0x02
    1438:	08 95       	ret
            return;
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	31 05       	cpc	r19, r1
    1444:	51 f7       	brne	.-44     	; 0x141a <macTimerEnd+0xa>

    // search for long timer with timerID
    if (APP || IPV6LOWPAN)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    1446:	80 91 97 0c 	lds	r24, 0x0C97
    144a:	89 17       	cp	r24, r25
    144c:	19 f4       	brne	.+6      	; 0x1454 <macTimerEnd+0x44>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0d c0       	rjmp	.+26     	; 0x146e <macTimerEnd+0x5e>
    1454:	80 91 9c 0c 	lds	r24, 0x0C9C
    1458:	89 17       	cp	r24, r25
    145a:	19 f4       	brne	.+6      	; 0x1462 <macTimerEnd+0x52>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	06 c0       	rjmp	.+12     	; 0x146e <macTimerEnd+0x5e>
    1462:	80 91 a1 0c 	lds	r24, 0x0CA1
    1466:	89 17       	cp	r24, r25
    1468:	71 f4       	brne	.+28     	; 0x1486 <macTimerEnd+0x76>
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	90 e0       	ldi	r25, 0x00	; 0
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    146e:	fc 01       	movw	r30, r24
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e8 0f       	add	r30, r24
    147a:	f9 1f       	adc	r31, r25
    147c:	eb 56       	subi	r30, 0x6B	; 107
    147e:	f3 4f       	sbci	r31, 0xF3	; 243
    1480:	11 82       	std	Z+1, r1	; 0x01
    1482:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    1484:	12 82       	std	Z+2, r1	; 0x02
    1486:	08 95       	ret

00001488 <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    1488:	e1 e9       	ldi	r30, 0x91	; 145
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8a 60       	ori	r24, 0x0A	; 10
    1490:	80 83       	st	Z, r24
    1492:	88 ee       	ldi	r24, 0xE8	; 232
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	90 93 99 00 	sts	0x0099, r25
    149a:	80 93 98 00 	sts	0x0098, r24

    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
}
    149e:	08 95       	ret

000014a0 <__vector_32>:

/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	0b b6       	in	r0, 0x3b	; 59
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <__vector_32+0x36>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <__vector_32+0x38>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    14de:	80 91 a4 0c 	lds	r24, 0x0CA4
    14e2:	90 91 a5 0c 	lds	r25, 0x0CA5
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	90 93 a5 0c 	sts	0x0CA5, r25
    14ec:	80 93 a4 0c 	sts	0x0CA4, r24
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN)
    {
        if (!--secondTimer)
    14f0:	80 91 9e 02 	lds	r24, 0x029E
    14f4:	90 91 9f 02 	lds	r25, 0x029F
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	90 93 9f 02 	sts	0x029F, r25
    14fe:	80 93 9e 02 	sts	0x029E, r24
    1502:	89 2b       	or	r24, r25
    1504:	49 f0       	breq	.+18     	; 0x1518 <__vector_32+0x78>
    1506:	03 e6       	ldi	r16, 0x63	; 99
    1508:	1c e0       	ldi	r17, 0x0C	; 12
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    150a:	26 e1       	ldi	r18, 0x16	; 22
    150c:	d2 2e       	mov	r13, r18
                event.data = (u8*)timerEvents[i].callback;
                mac_put_event(&event);
    150e:	7e 01       	movw	r14, r28
    1510:	08 94       	sec
    1512:	e1 1c       	adc	r14, r1
    1514:	f1 1c       	adc	r15, r1
    1516:	27 c0       	rjmp	.+78     	; 0x1566 <__vector_32+0xc6>
    if (APP || IPV6LOWPAN)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    1518:	88 ee       	ldi	r24, 0xE8	; 232
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	90 93 9f 02 	sts	0x029F, r25
    1520:	80 93 9e 02 	sts	0x029E, r24
    1524:	05 e9       	ldi	r16, 0x95	; 149
    1526:	1c e0       	ldi	r17, 0x0C	; 12
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    1528:	96 e1       	ldi	r25, 0x16	; 22
    152a:	d9 2e       	mov	r13, r25
                        event.data = (u8*)longTimerEvents[i].callback;
                        mac_put_event(&event);
    152c:	7e 01       	movw	r14, r28
    152e:	08 94       	sec
    1530:	e1 1c       	adc	r14, r1
    1532:	f1 1c       	adc	r15, r1
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    1534:	f8 01       	movw	r30, r16
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	69 f0       	breq	.+26     	; 0x1558 <__vector_32+0xb8>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	80 83       	st	Z, r24
    1544:	89 2b       	or	r24, r25
    1546:	41 f4       	brne	.+16     	; 0x1558 <__vector_32+0xb8>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    1548:	d9 82       	std	Y+1, r13	; 0x01
                        event.data = (u8*)longTimerEvents[i].callback;
    154a:	83 81       	ldd	r24, Z+3	; 0x03
    154c:	94 81       	ldd	r25, Z+4	; 0x04
    154e:	9b 83       	std	Y+3, r25	; 0x03
    1550:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    1552:	c7 01       	movw	r24, r14
    1554:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
    1558:	0b 5f       	subi	r16, 0xFB	; 251
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    155c:	fc e0       	ldi	r31, 0x0C	; 12
    155e:	04 3a       	cpi	r16, 0xA4	; 164
    1560:	1f 07       	cpc	r17, r31
    1562:	41 f7       	brne	.-48     	; 0x1534 <__vector_32+0x94>
    1564:	d0 cf       	rjmp	.-96     	; 0x1506 <__vector_32+0x66>


    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    1566:	f8 01       	movw	r30, r16
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f0       	breq	.+26     	; 0x158a <__vector_32+0xea>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	89 2b       	or	r24, r25
    1578:	41 f4       	brne	.+16     	; 0x158a <__vector_32+0xea>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    157a:	d9 82       	std	Y+1, r13	; 0x01
                event.data = (u8*)timerEvents[i].callback;
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	94 81       	ldd	r25, Z+4	; 0x04
    1580:	9b 83       	std	Y+3, r25	; 0x03
    1582:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
    158a:	0b 5f       	subi	r16, 0xFB	; 251
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    }



    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    158e:	fc e0       	ldi	r31, 0x0C	; 12
    1590:	05 39       	cpi	r16, 0x95	; 149
    1592:	1f 07       	cpc	r17, r31
    1594:	41 f7       	brne	.-48     	; 0x1566 <__vector_32+0xc6>
                event.data = (u8*)timerEvents[i].callback;
                mac_put_event(&event);
            }
        }
    }
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	0f 90       	pop	r0
    15c8:	0b be       	out	0x3b, r0	; 59
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <hal_spi_init>:
   //Enable SPI module and master operation.
   SPCR         = (1 << SPE) | (1 << MSTR);
   //Enable doubled SPI speed in master mode.
   SPSR         = (1 << SPI2X);
#endif // SINGLE_CHIP
}
    15d4:	08 95       	ret

000015d6 <hal_init>:
 */
void hal_init(void)
{
#ifdef SINGLE_CHIP
   // do nothing -> there is no external transceiver
   DRTRAM0 = _BV(ENDRT);
    15d6:	80 e1       	ldi	r24, 0x10	; 16
    15d8:	80 93 35 01 	sts	0x0135, r24
   DRTRAM1 = _BV(ENDRT);
    15dc:	80 93 34 01 	sts	0x0134, r24
   DRTRAM2 = _BV(ENDRT);
    15e0:	80 93 33 01 	sts	0x0133, r24
   DRTRAM3 = _BV(ENDRT);
    15e4:	80 93 32 01 	sts	0x0132, r24
   DDR_SLP_TR |= (1 << SLP_TR); //Enable SLP_TR as output.
   DDR_RST    |= (1 << RST);    //Enable RST as output.
#endif // do nothing

   hal_spi_init();
   hal_enable_trx_interrupt();    //Enable interrupts from the radio transceiver.
    15e8:	ee e4       	ldi	r30, 0x4E	; 78
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	80 81       	ld	r24, Z
    15ee:	84 60       	ori	r24, 0x04	; 4
    15f0:	80 83       	st	Z, r24
    15f2:	80 81       	ld	r24, Z
    15f4:	88 60       	ori	r24, 0x08	; 8
    15f6:	80 83       	st	Z, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	80 64       	ori	r24, 0x40	; 64
    15fc:	80 83       	st	Z, r24
    15fe:	80 81       	ld	r24, Z
    1600:	80 61       	ori	r24, 0x10	; 16
    1602:	80 83       	st	Z, r24
    1604:	a1 e5       	ldi	r26, 0x51	; 81
    1606:	b1 e0       	ldi	r27, 0x01	; 1
    1608:	8c 91       	ld	r24, X
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	8c 93       	st	X, r24
    160e:	80 81       	ld	r24, Z
    1610:	82 60       	ori	r24, 0x02	; 2
    1612:	80 83       	st	Z, r24
    1614:	80 81       	ld	r24, Z
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	80 83       	st	Z, r24
    161a:	80 81       	ld	r24, Z
    161c:	80 68       	ori	r24, 0x80	; 128
    161e:	80 83       	st	Z, r24
}
    1620:	08 95       	ret

00001622 <hal_register_read>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    1622:	fc 01       	movw	r30, r24
    1624:	80 81       	ld	r24, Z
   AVR_LEAVE_CRITICAL_REGION();

   return register_value;
#endif
   //return 0;
}
    1626:	08 95       	ret

00001628 <hal_register_write>:
 *
 */
void hal_register_write(u16 address, u8 value)
{
#ifdef SINGLE_CHIP
   (*(volatile uint8_t *)(address)) = (value);
    1628:	fc 01       	movw	r30, r24
    162a:	60 83       	st	Z, r22
         rx_mode = true;
      else
         rx_mode = false;
   }
#endif
}
    162c:	08 95       	ret

0000162e <hal_subregister_read>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
u8 hal_subregister_read(u16 address, u8 mask, u8 position)
{
   //Read current register value and mask out subregister.
   u8 register_value = hal_register_read(address);
   register_value &= mask;
   register_value >>= position; //Align subregister value.
    1632:	86 23       	and	r24, r22
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <hal_subregister_read+0xe>
    1638:	95 95       	asr	r25
    163a:	87 95       	ror	r24
    163c:	4a 95       	dec	r20
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <hal_subregister_read+0xa>

   return register_value;
}
    1640:	08 95       	ret

00001642 <hal_subregister_write>:
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    1642:	fc 01       	movw	r30, r24
    1644:	90 81       	ld	r25, Z
void hal_subregister_write(u16 address, u8 mask, u8 position,
      u8 value)
{
   //Read current register value and mask area outside the subregister.
   u8 register_value = hal_register_read(address);
   register_value &= ~mask;
    1646:	86 2f       	mov	r24, r22
    1648:	80 95       	com	r24
    164a:	89 23       	and	r24, r25

   //Start preparing the new subregister value. shift in place and mask.
   value <<= position;
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <hal_subregister_write+0x12>
    1650:	22 0f       	add	r18, r18
    1652:	33 1f       	adc	r19, r19
    1654:	4a 95       	dec	r20
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <hal_subregister_write+0xe>
   value &= mask;
    1658:	62 23       	and	r22, r18

   value |= register_value; //Set the new subregister value.
    165a:	86 2b       	or	r24, r22
 *
 */
void hal_register_write(u16 address, u8 value)
{
#ifdef SINGLE_CHIP
   (*(volatile uint8_t *)(address)) = (value);
    165c:	80 83       	st	Z, r24

   value |= register_value; //Set the new subregister value.

   //Write the modified register value.
   hal_register_write(address, value);
}
    165e:	08 95       	ret

00001660 <hal_sram_read>:
 * \param length Length of the read burst
 * \param data Pointer to buffer where data is stored.
 *
 */
void hal_sram_read(u8 address, u8 length, u8 *data)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	98 2f       	mov	r25, r24
    166c:	fa 01       	movw	r30, r20
   AVR_ENTER_CRITICAL_REGION();
    166e:	8f b7       	in	r24, 0x3f	; 63
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	f8 94       	cli

   HAL_SS_LOW(); //Initiate the SPI transaction.
    1674:	28 98       	cbi	0x05, 0	; 5

   /*Send SRAM read command.*/
   SPDR = HAL_TRX_CMD_SR;
    1676:	1e bc       	out	0x2e, r1	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    1678:	0d b4       	in	r0, 0x2d	; 45
    167a:	07 fe       	sbrs	r0, 7
    167c:	fd cf       	rjmp	.-6      	; 0x1678 <hal_sram_read+0x18>
      ;
   SPDR;  // Dummy read of SPDR
    167e:	8e b5       	in	r24, 0x2e	; 46

   /*Send address where to start reading.*/
   SPDR = address;
    1680:	9e bd       	out	0x2e, r25	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    1682:	0d b4       	in	r0, 0x2d	; 45
    1684:	07 fe       	sbrs	r0, 7
    1686:	fd cf       	rjmp	.-6      	; 0x1682 <hal_sram_read+0x22>
      ;
   SPDR;  // Dummy read of SPDR
    1688:	8e b5       	in	r24, 0x2e	; 46

   /*Upload the chosen memory area.*/
   do
   {
      SPDR = HAL_DUMMY_READ;
    168a:	1e bc       	out	0x2e, r1	; 46
      while ((SPSR & (1 << SPIF)) == 0) {;}
    168c:	0d b4       	in	r0, 0x2d	; 45
    168e:	07 fe       	sbrs	r0, 7
    1690:	fd cf       	rjmp	.-6      	; 0x168c <hal_sram_read+0x2c>
      *data++ = SPDR;
    1692:	8e b5       	in	r24, 0x2e	; 46
    1694:	80 83       	st	Z, r24
   } while (--length > 0);
    1696:	61 50       	subi	r22, 0x01	; 1
    1698:	11 f0       	breq	.+4      	; 0x169e <hal_sram_read+0x3e>
   /*Upload the chosen memory area.*/
   do
   {
      SPDR = HAL_DUMMY_READ;
      while ((SPSR & (1 << SPIF)) == 0) {;}
      *data++ = SPDR;
    169a:	31 96       	adiw	r30, 0x01	; 1
    169c:	f6 cf       	rjmp	.-20     	; 0x168a <hal_sram_read+0x2a>
   } while (--length > 0);

   HAL_SS_HIGH();
    169e:	28 9a       	sbi	0x05, 0	; 5

   AVR_LEAVE_CRITICAL_REGION();
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	8f bf       	out	0x3f, r24	; 63
}
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <hal_sram_write>:
 * \param length  Length of the write burst
 * \param data    Pointer to an array of bytes that should be written
 *
 */
void hal_sram_write(u8 address, u8 length, u8 *data)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	98 2f       	mov	r25, r24
    16b8:	fa 01       	movw	r30, r20
   AVR_ENTER_CRITICAL_REGION();
    16ba:	8f b7       	in	r24, 0x3f	; 63
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	f8 94       	cli

   HAL_SS_LOW();
    16c0:	28 98       	cbi	0x05, 0	; 5

   /*Send SRAM write command.*/
   SPDR = HAL_TRX_CMD_SW;
    16c2:	80 e4       	ldi	r24, 0x40	; 64
    16c4:	8e bd       	out	0x2e, r24	; 46
   while ((SPSR & (1 << SPIF)) == 0) {;}
    16c6:	0d b4       	in	r0, 0x2d	; 45
    16c8:	07 fe       	sbrs	r0, 7
    16ca:	fd cf       	rjmp	.-6      	; 0x16c6 <hal_sram_write+0x1a>
   SPDR;  // Dummy read of SPDR
    16cc:	8e b5       	in	r24, 0x2e	; 46

   /*Send address where to start writing to.*/
   SPDR = address;
    16ce:	9e bd       	out	0x2e, r25	; 46
   while ((SPSR & (1 << SPIF)) == 0)
    16d0:	0d b4       	in	r0, 0x2d	; 45
    16d2:	07 fe       	sbrs	r0, 7
    16d4:	fd cf       	rjmp	.-6      	; 0x16d0 <hal_sram_write+0x24>
      ;
   SPDR;  // Dummy read of SPDR
    16d6:	8e b5       	in	r24, 0x2e	; 46

   /*Upload the chosen memory area.*/
   do
   {
      SPDR = *data++;
    16d8:	81 91       	ld	r24, Z+
    16da:	8e bd       	out	0x2e, r24	; 46
      while ((SPSR & (1 << SPIF)) == 0)
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <hal_sram_write+0x30>
         ;
      SPDR;  // Dummy read of SPDR
    16e2:	8e b5       	in	r24, 0x2e	; 46
   } while (--length > 0);
    16e4:	61 50       	subi	r22, 0x01	; 1
    16e6:	c1 f7       	brne	.-16     	; 0x16d8 <hal_sram_write+0x2c>

   HAL_SS_HIGH();
    16e8:	28 9a       	sbi	0x05, 0	; 5

   AVR_LEAVE_CRITICAL_REGION();
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f bf       	out	0x3f, r24	; 63
}
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <__vector_71>:
   macEdCallback();
}

// BAT_LOW_vect
ISR(RADIO_VECT5)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
   //user defined voltage threshold.

   //u8 trx_isr_mask = hal_register_read(RG_IRQ_MASK);
   //trx_isr_mask &= ~HAL_BAT_LOW_MASK;
   //hal_register_write(RG_IRQ_MASK, trx_isr_mask);
}
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_58>:

// PLL_UNLOCK_vect
ISR(RADIO_VECT6)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
   //UART_PRINT("PLL UNLOCK IRQ\r\n");
}
    1714:	0f 90       	pop	r0
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	0f 90       	pop	r0
    171a:	1f 90       	pop	r1
    171c:	18 95       	reti

0000171e <__vector_57>:

// PLL_LOCK_vect
ISR(RADIO_VECT7)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
   //UART_PRINT("PLL LOCK IRQ\r\n");
}
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_64>:

// AWAKE_vect
ISR(RADIO_VECT8)
{
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
   //UART_PRINT("AWAKE IRQ\r\n");
}
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <halSetupClock>:
      CLKPR = 1 << CLKPCE;  // Set the change-enable flag
      CLKPR = 3;            // Set for divide-by-eight, or 1MHz
      AVR_LEAVE_CRITICAL_REGION();
   }

}
    1746:	08 95       	ret

00001748 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
 */
void halPutEeprom(u8 *addr, u8 length, u8 *src)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	fc 01       	movw	r30, r24
    1754:	36 2f       	mov	r19, r22
    1756:	ca 01       	movw	r24, r20
   AVR_ENTER_CRITICAL_REGION();
    1758:	2f b7       	in	r18, 0x3f	; 63
    175a:	29 83       	std	Y+1, r18	; 0x01
    175c:	f8 94       	cli
   eeprom_write_block (src, addr, length);
    175e:	bf 01       	movw	r22, r30
    1760:	43 2f       	mov	r20, r19
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	0e 94 cb 34 	call	0x6996	; 0x6996 <__eewr_block_m128rfa1>
   AVR_LEAVE_CRITICAL_REGION();
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	8f bf       	out	0x3f, r24	; 63
}
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
 */
void halGetEeprom(u8 *addr, u8 length, u8 *dest)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	fc 01       	movw	r30, r24
    1780:	36 2f       	mov	r19, r22
    1782:	ca 01       	movw	r24, r20
   AVR_ENTER_CRITICAL_REGION();
    1784:	2f b7       	in	r18, 0x3f	; 63
    1786:	29 83       	std	Y+1, r18	; 0x01
    1788:	f8 94       	cli
   eeprom_read_block (dest, addr, length);
    178a:	bf 01       	movw	r22, r30
    178c:	43 2f       	mov	r20, r19
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	0e 94 bb 34 	call	0x6976	; 0x6976 <__eerd_block_m128rfa1>
   AVR_LEAVE_CRITICAL_REGION();
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	8f bf       	out	0x3f, r24	; 63
}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
 */
bool calibrate_rc_osc(void)
{
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <calibrate_rc_osc+0x10>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
   if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
   {
      bool success = false;
      static bool once=0;

      if (once)
    17b4:	80 91 a6 0c 	lds	r24, 0x0CA6
    17b8:	88 23       	and	r24, r24
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <calibrate_rc_osc+0x20>
    17bc:	11 e0       	ldi	r17, 0x01	; 1
    17be:	5c c0       	rjmp	.+184    	; 0x1878 <calibrate_rc_osc+0xd8>
         // Only calibrate once
         return true;

      once = true;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	80 93 a6 0c 	sts	0x0CA6, r24
      //   timer2 to overflow
      // Timer 2 (8-bit) is run from the main CPU clock divided by
      //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
      //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

      osccal_saved = OSCCAL;
    17c6:	d0 90 66 00 	lds	r13, 0x0066
      cli();
    17ca:	f8 94       	cli

      radioSetClockSpeed(true, CLKM_1MHz);
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	0e 94 b5 12 	call	0x256a	; 0x256a <radioSetClockSpeed>

      // Save current values of timer status.
      tccr2b = TCCR2B;
    17d2:	e0 90 b1 00 	lds	r14, 0x00B1
      tccr1b = TCCR1B;
    17d6:	f0 90 81 00 	lds	r15, 0x0081
      tccr1a = TCCR1A;
    17da:	00 91 80 00 	lds	r16, 0x0080

      // Stop timers 1 and 2.
      // Set timer 1 to normal mode (no CTC, no PWM, just count).
      TCCR2B = 0;
    17de:	10 92 b1 00 	sts	0x00B1, r1
      TCCR1B = 0;
    17e2:	10 92 81 00 	sts	0x0081, r1
      TCCR1A = 0;
    17e6:	10 92 80 00 	sts	0x0080, r1
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0

      for (counter = 0; counter < 1000;  counter++)
      {
         // Timer 2 driven from clock divided by 32
         TCCR2B = (1 << CS21) | (1 << CS20);
    17ee:	63 e0       	ldi	r22, 0x03	; 3
         // Timer 1 driven with external clock
         TCCR1B = (1 << CS12) | (1 << CS11);
    17f0:	56 e0       	ldi	r21, 0x06	; 6

         // Clear pending timer 1 and 2 interrupts, and clear the
         // counters.
         TCNT2 = 0;
         TCNT1 = 0;
         TIFR1 = 0xFF;
    17f2:	4f ef       	ldi	r20, 0xFF	; 255
      TCCR1A = 0;

      for (counter = 0; counter < 1000;  counter++)
      {
         // Timer 2 driven from clock divided by 32
         TCCR2B = (1 << CS21) | (1 << CS20);
    17f4:	60 93 b1 00 	sts	0x00B1, r22
         // Timer 1 driven with external clock
         TCCR1B = (1 << CS12) | (1 << CS11);
    17f8:	50 93 81 00 	sts	0x0081, r21

         // Clear pending timer 1 and 2 interrupts, and clear the
         // counters.
         TCNT2 = 0;
    17fc:	10 92 b2 00 	sts	0x00B2, r1
         TCNT1 = 0;
    1800:	10 92 85 00 	sts	0x0085, r1
    1804:	10 92 84 00 	sts	0x0084, r1
         TIFR1 = 0xFF;
    1808:	46 bb       	out	0x16, r20	; 22
         TIFR2 = 0xFF;
    180a:	47 bb       	out	0x17, r20	; 23

         // Wait for timer 2 to overflow.
         while (!(TIFR2 & (1 << TOV2)))
    180c:	b8 9b       	sbis	0x17, 0	; 23
    180e:	fe cf       	rjmp	.-4      	; 0x180c <calibrate_rc_osc+0x6c>
            ;

         temp = TCNT1;
    1810:	80 91 84 00 	lds	r24, 0x0084
    1814:	90 91 85 00 	lds	r25, 0x0085
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01


         // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
         // counted while timer 2 was counting CPU cycles
         TCCR1B = 0;
    181c:	10 92 81 00 	sts	0x0081, r1
         TCCR2B = 0;
    1820:	10 92 b1 00 	sts	0x00B1, r1

         if (temp < (u16)(0.995 * TARGETVAL))
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	8a 5f       	subi	r24, 0xFA	; 250
    182a:	93 40       	sbci	r25, 0x03	; 3
    182c:	20 f4       	brcc	.+8      	; 0x1836 <calibrate_rc_osc+0x96>
         {
            // Too fast, slow down
            OSCCAL--;
    182e:	80 91 66 00 	lds	r24, 0x0066
    1832:	81 50       	subi	r24, 0x01	; 1
    1834:	0a c0       	rjmp	.+20     	; 0x184a <calibrate_rc_osc+0xaa>
         }
         else if (temp > (u16)(1.005 * TARGETVAL))
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	86 50       	subi	r24, 0x06	; 6
    183c:	94 40       	sbci	r25, 0x04	; 4
    183e:	10 f4       	brcc	.+4      	; 0x1844 <calibrate_rc_osc+0xa4>
    1840:	11 e0       	ldi	r17, 0x01	; 1
    1842:	0c c0       	rjmp	.+24     	; 0x185c <calibrate_rc_osc+0xbc>
         {
            // Too slow, speed up
            OSCCAL++;
    1844:	80 91 66 00 	lds	r24, 0x0066
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 93 66 00 	sts	0x0066, r24
      // Set timer 1 to normal mode (no CTC, no PWM, just count).
      TCCR2B = 0;
      TCCR1B = 0;
      TCCR1A = 0;

      for (counter = 0; counter < 1000;  counter++)
    184e:	2f 5f       	subi	r18, 0xFF	; 255
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	28 3e       	cpi	r18, 0xE8	; 232
    1856:	38 07       	cpc	r19, r24
    1858:	69 f6       	brne	.-102    	; 0x17f4 <calibrate_rc_osc+0x54>
    185a:	10 e0       	ldi	r17, 0x00	; 0
            success = true;
            break;
         }
      }

      radioSetClockSpeed(true, CLKM_DISABLED);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	0e 94 b5 12 	call	0x256a	; 0x256a <radioSetClockSpeed>

      // restore timer status regs
      TCCR2B = tccr2b;
    1864:	e0 92 b1 00 	sts	0x00B1, r14
      TCCR1B = tccr1b;
    1868:	f0 92 81 00 	sts	0x0081, r15
      TCCR1A = tccr1a;
    186c:	00 93 80 00 	sts	0x0080, r16
      if (!success)
    1870:	11 23       	and	r17, r17
    1872:	11 f4       	brne	.+4      	; 0x1878 <calibrate_rc_osc+0xd8>
      {
         // We failed, therefore restore previous OSCCAL value.
         OSCCAL = osccal_saved;
    1874:	d0 92 66 00 	sts	0x0066, r13

      return success;
   }
   else
      return 0;
}
    1878:	81 2f       	mov	r24, r17
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	08 95       	ret

0000188e <__vector_61>:
   radioTrxEndEvent();
}

// TRX24_CCA_ED_DONE_vect
ISR(RADIO_VECT4)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	0b b6       	in	r0, 0x3b	; 59
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
   //UART_PRINT("ED_DONE IRQ\r\n");
   macEdCallback();
    18b4:	0e 94 22 11 	call	0x2244	; 0x2244 <macEdCallback>
}
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0b be       	out	0x3b, r0	; 59
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_63>:
   radioRxEndEvent();
}

// TRX24_TX_END_vect
ISR(RADIO_VECT3)
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	0b b6       	in	r0, 0x3b	; 59
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
   //UART_PRINT("TX_END IRQ\r\n");
   radioTrxEndEvent();
    1904:	0e 94 31 15 	call	0x2a62	; 0x2a62 <radioTrxEndEvent>
}
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0b be       	out	0x3b, r0	; 59
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_60>:
   radioRxStartEvent(frame_length);
}

// TRX24_RX_END_vect
ISR(RADIO_VECT2)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	0b b6       	in	r0, 0x3b	; 59
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	2f 93       	push	r18
    193e:	3f 93       	push	r19
    1940:	4f 93       	push	r20
    1942:	5f 93       	push	r21
    1944:	6f 93       	push	r22
    1946:	7f 93       	push	r23
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	af 93       	push	r26
    194e:	bf 93       	push	r27
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
   //UART_PRINT("RX_END IRQ\r\n");
   //radioTrxEndEvent();
   radioRxEndEvent();
    1954:	0e 94 97 14 	call	0x292e	; 0x292e <radioRxEndEvent>
}
    1958:	ff 91       	pop	r31
    195a:	ef 91       	pop	r30
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	7f 91       	pop	r23
    1966:	6f 91       	pop	r22
    1968:	5f 91       	pop	r21
    196a:	4f 91       	pop	r20
    196c:	3f 91       	pop	r19
    196e:	2f 91       	pop	r18
    1970:	0f 90       	pop	r0
    1972:	0b be       	out	0x3b, r0	; 59
    1974:	0f 90       	pop	r0
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	0f 90       	pop	r0
    197a:	1f 90       	pop	r1
    197c:	18 95       	reti

0000197e <__vector_59>:
#endif

#ifdef SINGLE_CHIP
// TRX24_RX_START_vect
ISR(RADIO_VECT1)
{
    197e:	1f 92       	push	r1
    1980:	0f 92       	push	r0
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	0f 92       	push	r0
    1986:	0b b6       	in	r0, 0x3b	; 59
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    19a4:	80 91 7b 01 	lds	r24, 0x017B
// TRX24_RX_START_vect
ISR(RADIO_VECT1)
{
   //UART_PRINT("RX_START IRQ\r\n");
   uint8_t frame_length = hal_register_read(RG_TST_RX_LENGTH);
   radioRxStartEvent(frame_length);
    19a8:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <radioRxStartEvent>
}
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0b be       	out	0x3b, r0	; 59
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <hal_frame_write>:
 *  \param  write_buffer    Pointer to data that is to be written to frame buffer.
 *  \param  length          Length of data. The maximum length is 127 bytes.
 *
 */
void hal_frame_write(u8 *write_buffer, u8 length)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	0f 92       	push	r0
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	28 2f       	mov	r18, r24
    19de:	79 2f       	mov	r23, r25
    19e0:	46 2f       	mov	r20, r22
#ifdef SINGLE_CHIP
   volatile uint8_t *pDst = (volatile uint8_t *)0x180;

   AVR_ENTER_CRITICAL_REGION();
    19e2:	8f b7       	in	r24, 0x3f	; 63
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	f8 94       	cli

   //Toggle the SLP_TR pin to initiate the frame transmission.
   hal_set_slptr_high();
    19e8:	e9 e3       	ldi	r30, 0x39	; 57
    19ea:	f1 e0       	ldi	r31, 0x01	; 1
    19ec:	80 81       	ld	r24, Z
    19ee:	82 60       	ori	r24, 0x02	; 2
    19f0:	80 83       	st	Z, r24
   hal_set_slptr_low();
    19f2:	80 81       	ld	r24, Z
    19f4:	8d 7f       	andi	r24, 0xFD	; 253
    19f6:	80 83       	st	Z, r24

   *pDst = length;
    19f8:	60 93 80 01 	sts	0x0180, r22
   pDst++;
   memcpy((void *)pDst, write_buffer, length);
    19fc:	81 e8       	ldi	r24, 0x81	; 129
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	62 2f       	mov	r22, r18
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memcpy>

   AVR_LEAVE_CRITICAL_REGION();
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	8f bf       	out	0x3f, r24	; 63
   HAL_SS_HIGH(); //Terminate SPI transaction.

   AVR_LEAVE_CRITICAL_REGION();

#endif //SINGLE_CHIP
}
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <hal_frame_read>:
 *          is out of the defined bounds. Then the frame length, lqi value and crc
 *          be set to zero. This is done to indicate an error.
 *
 */
uint8_t* hal_frame_read(void)
{
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
   uint8_t* pFrame = bmm_buffer_alloc();
    1a2a:	0e 94 2b 22 	call	0x4456	; 0x4456 <bmm_buffer_alloc>
    1a2e:	7c 01       	movw	r14, r24

   if(pFrame != NULL)
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	b1 f1       	breq	.+108    	; 0x1aa0 <hal_frame_read+0x8c>
   {
      rx_frame_t *rx_frame = (rx_frame_t*)pFrame;

#ifdef SINGLE_CHIP
      AVR_ENTER_CRITICAL_REGION();
    1a34:	8f b7       	in	r24, 0x3f	; 63
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	f8 94       	cli
 *
 */
u8 hal_register_read(u16 address)
{
#ifdef SINGLE_CHIP
   return (*(volatile uint8_t *)(address));
    1a3a:	00 91 7b 01 	lds	r16, 0x017B
#ifdef SINGLE_CHIP
      AVR_ENTER_CRITICAL_REGION();

      volatile uint8_t *pSrc = (volatile uint8_t *)0x180;
      uint8_t frame_length = hal_register_read(RG_TST_RX_LENGTH);
      if ((frame_length >= HAL_MIN_FRAME_LENGTH) && (frame_length <= HAL_MAX_FRAME_LENGTH))
    1a3e:	80 2f       	mov	r24, r16
    1a40:	83 50       	subi	r24, 0x03	; 3
    1a42:	90 e8       	ldi	r25, 0x80	; 128
    1a44:	c9 2e       	mov	r12, r25
    1a46:	d1 2c       	mov	r13, r1
    1a48:	ce 0c       	add	r12, r14
    1a4a:	df 1c       	adc	r13, r15
    1a4c:	8d 37       	cpi	r24, 0x7D	; 125
    1a4e:	98 f4       	brcc	.+38     	; 0x1a76 <hal_frame_read+0x62>
      {
         // read length and save frame content -> lqi is NOT included in frame length byte
         rx_frame->length = frame_length;
    1a50:	f7 01       	movw	r30, r14
    1a52:	01 93       	st	Z+, r16
         //memcpy(rx_data, (void *)pSrc, frame_length);
         memcpy(rx_frame->data, (void *)pSrc, frame_length-1);
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	98 01       	movw	r18, r16
    1a58:	21 50       	subi	r18, 0x01	; 1
    1a5a:	30 40       	sbci	r19, 0x00	; 0
    1a5c:	cf 01       	movw	r24, r30
    1a5e:	60 e8       	ldi	r22, 0x80	; 128
    1a60:	71 e0       	ldi	r23, 0x01	; 1
    1a62:	a9 01       	movw	r20, r18
    1a64:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memcpy>
         // save LQI /
         //rx_frame->lqi = *(pSrc + (frame_length + 1));
         rx_frame->lqi = *(pSrc + frame_length);
    1a68:	00 58       	subi	r16, 0x80	; 128
    1a6a:	1e 4f       	sbci	r17, 0xFE	; 254
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	80 81       	ld	r24, Z
    1a70:	f6 01       	movw	r30, r12
    1a72:	80 83       	st	Z, r24
    1a74:	13 c0       	rjmp	.+38     	; 0x1a9c <hal_frame_read+0x88>
      }
      else
      {
         rx_frame->length = 0;
    1a76:	f7 01       	movw	r30, r14
    1a78:	10 82       	st	Z, r1
         rx_frame->lqi    = 0;
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	10 82       	st	Z, r1
         rx_frame->crc    = false;
    1a7e:	81 e8       	ldi	r24, 0x81	; 129
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	e8 0e       	add	r14, r24
    1a84:	f9 1e       	adc	r15, r25
    1a86:	f7 01       	movw	r30, r14
    1a88:	10 82       	st	Z, r1
    1a8a:	8f e7       	ldi	r24, 0x7F	; 127
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	e8 0e       	add	r14, r24
    1a90:	f9 1e       	adc	r15, r25
         bmm_buffer_free(pFrame); // free allcoated buffer
    1a92:	c7 01       	movw	r24, r14
    1a94:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
    1a98:	ee 24       	eor	r14, r14
    1a9a:	ff 24       	eor	r15, r15
         pFrame = NULL; // set buffer pointer to NULL, that next app do not use it
      }
      AVR_LEAVE_CRITICAL_REGION();
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	8f bf       	out	0x3f, r24	; 63
      AVR_LEAVE_CRITICAL_REGION();

#endif // SINGLE_CHIP
   }
   return pFrame;
}
    1aa0:	c7 01       	movw	r24, r14
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	08 95       	ret

00001ab6 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    1ab6:	80 93 65 18 	sts	0x1865, r24
    radioSetOperatingChannel(channel);
    1aba:	0e 94 ad 13 	call	0x275a	; 0x275a <radioSetOperatingChannel>
}
    1abe:	08 95       	ret

00001ac0 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    1ac0:	1f 93       	push	r17
    1ac2:	18 2f       	mov	r17, r24
    macConfig.panId = BROADCASTPANID;
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	9f ef       	ldi	r25, 0xFF	; 255
    1ac8:	90 93 5d 18 	sts	0x185D, r25
    1acc:	80 93 5c 18 	sts	0x185C, r24
    macConfig.shortAddress = BROADCASTADDR;
    1ad0:	90 93 5f 18 	sts	0x185F, r25
    1ad4:	80 93 5e 18 	sts	0x185E, r24
    macConfig.associated = false;
    1ad8:	10 92 59 18 	sts	0x1859, r1

    macConfig.parentShortAddress = BROADCASTADDR;
    1adc:	90 93 61 18 	sts	0x1861, r25
    1ae0:	80 93 60 18 	sts	0x1860, r24
    macConfig.lastRoute = BROADCASTADDR;
    1ae4:	90 93 63 18 	sts	0x1863, r25
    1ae8:	80 93 62 18 	sts	0x1862, r24
    macConfig.hopsToCoord = 0;
    1aec:	10 92 64 18 	sts	0x1864, r1
    macConfig.busy = 0;
    1af0:	10 92 68 18 	sts	0x1868, r1
    macConfig.sleeping = 1; // Assume sleeping state initially
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 93 69 18 	sts	0x1869, r24

    // Init radio
    radioInit(SERIAL ? true : false);
    1afa:	0e 94 67 15 	call	0x2ace	; 0x2ace <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    1afe:	10 93 65 18 	sts	0x1865, r17
    if (Channel != 0xff)
    1b02:	1f 3f       	cpi	r17, 0xFF	; 255
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <macInit+0x4c>
        radioSetOperatingChannel(Channel);
    1b06:	81 2f       	mov	r24, r17
    1b08:	0e 94 ad 13 	call	0x275a	; 0x275a <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	0e 94 07 13 	call	0x260e	; 0x260e <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    1b18:	0e 94 cb 12 	call	0x2596	; 0x2596 <radioSetup900>

    // Set ack times shorter
    hal_subregister_write(SR_AACK_ACK_TIME, 1);
    1b1c:	87 e5       	ldi	r24, 0x57	; 87
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	64 e0       	ldi	r22, 0x04	; 4
    1b22:	42 e0       	ldi	r20, 0x02	; 2
    1b24:	21 e0       	ldi	r18, 0x01	; 1
    1b26:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>

    radioSetTrxState(RX_AACK_ON);
    1b2a:	86 e1       	ldi	r24, 0x16	; 22
    1b2c:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <radioSetTrxState>

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&macConfig.longAddr);
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	68 e0       	ldi	r22, 0x08	; 8
    1b36:	41 e5       	ldi	r20, 0x51	; 81
    1b38:	58 e1       	ldi	r21, 0x18	; 24
    1b3a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 ff 12 	call	0x25fe	; 0x25fe <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	9f ef       	ldi	r25, 0xFF	; 255
    1b50:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    1b54:	8c e6       	ldi	r24, 0x6C	; 108
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	60 ef       	ldi	r22, 0xF0	; 240
    1b5a:	44 e0       	ldi	r20, 0x04	; 4
    1b5c:	22 e0       	ldi	r18, 0x02	; 2
    1b5e:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>

    // Load the long address into the radio. Needed for auto modes.
    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    1b62:	81 e5       	ldi	r24, 0x51	; 81
    1b64:	98 e1       	ldi	r25, 0x18	; 24
    1b66:	0e 94 cc 12 	call	0x2598	; 0x2598 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    1b6a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <macInitNodes>

    UART_PRINT("macInit completed\r\n");
    1b6e:	80 ea       	ldi	r24, 0xA0	; 160
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
}
    1b76:	1f 91       	pop	r17
    1b78:	08 95       	ret

00001b7a <macAssociationResponse>:
      UART_PRINT("\r\n");

      // Let app know that a node was associated
      appNodeAssociated(shortAddress);
   }
}
    1b7a:	08 95       	ret

00001b7c <addNode>:
       */

      return i;
   }
   return 0;
}
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	08 95       	ret

00001b82 <macCreateRoute>:
         // find node's parent, the new node for next cycle
         node = nodes[node].parentShortAddress;
      }
   }
   return 0;
}
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret

00001b86 <macGetNodeAddr>:
               nodes[i].nodeLongAddress == *macAddr)
            return i;
   }
   // Not found, return nonsense address
   return BROADCASTADDR;
}
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	9f ef       	ldi	r25, 0xFF	; 255
    1b8a:	08 95       	ret

00001b8c <macIsChild>:
            // This node already exists, return true
            return true;
   }
   return false;

}
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	08 95       	ret

00001b90 <macIsChildSleeping>:
               childNodes[i].sleeping)
            return true;
   }
   return false;

}
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	08 95       	ret

00001b94 <macAddChild>:
            appChildAssociated(i);

            return;
         }
   }
}
    1b94:	08 95       	ret

00001b96 <macRemoveChild>:
         {
            childNodes[i].childAddr = 0;
            break;
         }
   }
}
    1b96:	08 95       	ret

00001b98 <macGetParent>:
      if (shortAddr >= MAXNODES)
         return 0;
      return nodes[shortAddr].parentShortAddress;
   }
   return 0;
}
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	08 95       	ret

00001b9e <macGetTopParent>:
         // jump up the chain one step.
         addr = nodes[addr].parentShortAddress;
      }
   }
   return 0;
}
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	08 95       	ret

00001ba4 <findFirstChild>:
         }
      }
      // none found, return zero
   }
   return 0;
}
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	08 95       	ret

00001baa <findNextSibling>:
            return i;
      }
   }
   // none found, return zero
   return 0;
}
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	08 95       	ret

00001bb0 <getChildTable>:
   return (uint8_t*)&nodes;
#elif (NODETYPE == ROUTER)
   return (uint8_t*)&childNodes;
#endif
   return 0;
                        }
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	08 95       	ret

00001bb6 <macPrintTree>:
               debugMsgStr(str);
            }
         debugMsgStr("\r\n");
      }
   }
}
    1bb6:	08 95       	ret

00001bb8 <macNotifyDrop>:
         {
            bmm_buffer_free(pFrame);
         }
      }
   }
}
    1bb8:	08 95       	ret

00001bba <macGetLastRoute>:
u16 macGetLastRoute(u16 parent)
{
   if (NODETYPE == COORD && parent < MAXNODES)
      return nodes[parent].lastRoutedAddress;
   return 0;
}
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	08 95       	ret

00001bc0 <macSetLastRoute>:
 */
void macSetLastRoute(u16 parent, u16 addr)
{
   if (NODETYPE == COORD && parent < MAXNODES)
      nodes[parent].lastRoutedAddress = addr;
}
    1bc0:	08 95       	ret

00001bc2 <macGetNode>:
{
   // return pointer to node data.
   if (NODETYPE == COORD && index < MAXNODES)
      return &nodes[index];
   return NULL;
}
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	08 95       	ret

00001bc8 <macInitNodes>:
   if (NODETYPE == COORD)
   {
      // Init nodes array - wipe out all of the table
      memset(&nodes, 0, sizeof(nodes));
   }
}
    1bc8:	08 95       	ret

00001bca <macWakeChildNode>:
            }
         }
         // Not found, too bad.
      }
   }
}
    1bca:	08 95       	ret

00001bcc <macClearChildWakeFlag>:
         if (addr >= MAXNODES)
            return;
         nodes[addr].wakeup = 0;
      }
   }
}
    1bcc:	08 95       	ret

00001bce <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
 */
void macChildIsAwake(ftData *frame)
{
    1bce:	fc 01       	movw	r30, r24
         if (RUMSLEEP)
            macSendStoredFrame(addr);
      }
   }
   // Reset the sleeping bit in the frame.
   frame->type &= ~0x80;
    1bd0:	85 85       	ldd	r24, Z+13	; 0x0d
    1bd2:	8f 77       	andi	r24, 0x7F	; 127
    1bd4:	85 87       	std	Z+13, r24	; 0x0d
}
    1bd6:	08 95       	ret

00001bd8 <macFirstChild>:
         if (childNodes[childNodeNdx].childAddr)
            return childNodeNdx;
   }

   return 0;
}
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	08 95       	ret

00001bde <macNextChild>:
         if (childNodes[childNodeNdx].childAddr)
            return childNodeNdx;
   }

   return 0;
}
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	08 95       	ret

00001be4 <macGetHopCount>:
    @brief This will return the hop count for the associated node requested.

    @param node_short Short address of node the search for hop count.
 */
u8 macGetHopCount(u16 node_short)
{
    1be4:	21 e0       	ldi	r18, 0x01	; 1
   u8 hops = 1;

   for(;;)
   {
      if (!nodes[node_short].nodeType)
    1be6:	fc 01       	movw	r30, r24
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	8a 95       	dec	r24
    1bf0:	e1 f7       	brne	.-8      	; 0x1bea <macGetHopCount+0x6>
    1bf2:	e8 55       	subi	r30, 0x58	; 88
    1bf4:	f3 4f       	sbci	r31, 0xF3	; 243
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 23       	and	r24, r24
    1bfa:	31 f0       	breq	.+12     	; 0x1c08 <macGetHopCount+0x24>
         // bad short address, quit
         return 0;

      // see if we're just one hop away
      if (nodes[node_short].parentShortAddress == DEFAULT_COORD_ADDR)
    1bfc:	81 85       	ldd	r24, Z+9	; 0x09
    1bfe:	92 85       	ldd	r25, Z+10	; 0x0a
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <macGetHopCount+0x26>

      // find node's parent, the new node for next cycle
      node_short = nodes[node_short].parentShortAddress;

      // Go for another hop
      hops++;
    1c04:	2f 5f       	subi	r18, 0xFF	; 255
    1c06:	ef cf       	rjmp	.-34     	; 0x1be6 <macGetHopCount+0x2>
   }
    1c08:	20 e0       	ldi	r18, 0x00	; 0
}
    1c0a:	82 2f       	mov	r24, r18
    1c0c:	08 95       	ret

00001c0e <macAssociationConfirm>:
   response frame.  This function stops the association timeout timer,
   and call the callback function @ref appAssociateConfirm.
 */
void macAssociationConfirm(void)
{
   LED_ON(1);
    1c0e:	71 98       	cbi	0x0e, 1	; 14
    1c10:	69 9a       	sbi	0x0d, 1	; 13
   if (NODETYPE != COORD) // Coords cannot associate
   {
      UART_PRINT(" received an Association Confirm\r\n");
    1c12:	83 eb       	ldi	r24, 0xB3	; 179
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
      // We have finished the association process, kill the association timer...
      macTimerEnd(associationTimer);
    1c1a:	80 91 a7 0c 	lds	r24, 0x0CA7
    1c1e:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>

      // Let app know that we got an associate packet
      appAssociateConfirm(!macConfig.associated);
    1c22:	80 91 59 18 	lds	r24, 0x1859
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	89 27       	eor	r24, r25
    1c2a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <appAssociateConfirm>
   }
}
    1c2e:	08 95       	ret

00001c30 <setAssociationTimeout>:
   and a timeout has to be set.
 */
void setAssociationTimeout(void)
{
   // Set a time out timer for an "association period" of 100 ms.
   associationTimer = macSetAlarm(VLP ? 100 : ASSOCIATION_TIMEOUT,
    1c30:	88 ee       	ldi	r24, 0xE8	; 232
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	67 e0       	ldi	r22, 0x07	; 7
    1c36:	7e e0       	ldi	r23, 0x0E	; 14
    1c38:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    1c3c:	80 93 a7 0c 	sts	0x0CA7, r24
         macAssociationConfirm);
}
    1c40:	08 95       	ret

00001c42 <macAssociate>:

   @param shortAddr The short address of the prospective parent node.
   @param channel The channel of the network to join.
 */
void macAssociate(u16 shortAddr, u8 channel)
{
    1c42:	af 92       	push	r10
    1c44:	bf 92       	push	r11
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <macAssociate+0x14>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <macAssociate+0x16>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	5c 01       	movw	r10, r24
    1c60:	d6 2e       	mov	r13, r22
   if (NODETYPE != COORD)
   {
      // This node sends a direct association packet to its new parent
      // The first association request is always a direct request

      uint8_t* pFrame = bmm_buffer_alloc();
    1c62:	0e 94 2b 22 	call	0x4456	; 0x4456 <bmm_buffer_alloc>
    1c66:	7c 01       	movw	r14, r24

      if(pFrame != NULL)
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	c9 f1       	breq	.+114    	; 0x1cde <macAssociate+0x9c>
      {
         // Create a struct pointer to the global variable...
         ftAssocReqDirect* direct_assoc_frame = (ftAssocReqDirect*)(((rx_frame_t*)pFrame)->data);
    1c6c:	8c 01       	movw	r16, r24
    1c6e:	0f 5f       	subi	r16, 0xFF	; 255
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
         //ftAssocReqDirect* direct_assoc_frame = (ftAssocReqDirect*)(mac_buffer_tx+1);

         // Set the channel.
         macSetOperatingChannel(channel);
    1c72:	8d 2d       	mov	r24, r13
    1c74:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <macSetOperatingChannel>

         // Create the association command frame.
         direct_assoc_frame->fcf = FCF_ASSOC_REQ_DIRECT;
    1c78:	83 e6       	ldi	r24, 0x63	; 99
    1c7a:	98 ec       	ldi	r25, 0xC8	; 200
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	92 83       	std	Z+2, r25	; 0x02
    1c80:	81 83       	std	Z+1, r24	; 0x01

         // Increment and set the data sequence number.
         direct_assoc_frame->seq = macConfig.dsn++;
    1c82:	80 91 5b 18 	lds	r24, 0x185B
    1c86:	f8 01       	movw	r30, r16
    1c88:	82 83       	std	Z+2, r24	; 0x02
    1c8a:	8f 5f       	subi	r24, 0xFF	; 255
    1c8c:	80 93 5b 18 	sts	0x185B, r24
         // Complete the addressing fields.
         direct_assoc_frame->panid = macConfig.panId;
    1c90:	80 91 5c 18 	lds	r24, 0x185C
    1c94:	90 91 5d 18 	lds	r25, 0x185D
    1c98:	94 83       	std	Z+4, r25	; 0x04
    1c9a:	83 83       	std	Z+3, r24	; 0x03
         direct_assoc_frame->destAddr= shortAddr;
    1c9c:	b6 82       	std	Z+6, r11	; 0x06
    1c9e:	a5 82       	std	Z+5, r10	; 0x05
         memcpy(&(direct_assoc_frame->srcAddr), &(macConfig.longAddr), sizeof macConfig.longAddr);
    1ca0:	d7 01       	movw	r26, r14
    1ca2:	18 96       	adiw	r26, 0x08	; 8
    1ca4:	e1 e5       	ldi	r30, 0x51	; 81
    1ca6:	f8 e1       	ldi	r31, 0x18	; 24
    1ca8:	88 e0       	ldi	r24, 0x08	; 8
    1caa:	01 90       	ld	r0, Z+
    1cac:	0d 92       	st	X+, r0
    1cae:	81 50       	subi	r24, 0x01	; 1
    1cb0:	e1 f7       	brne	.-8      	; 0x1caa <macAssociate+0x68>
         direct_assoc_frame->cmd = ASSOCIATION_REQUEST;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	87 87       	std	Z+15, r24	; 0x0f
         direct_assoc_frame->parentAddr = shortAddr;
    1cb8:	b1 8a       	std	Z+17, r11	; 0x11
    1cba:	a0 8a       	std	Z+16, r10	; 0x10
         direct_assoc_frame->type = NODETYPE;
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	82 8b       	std	Z+18, r24	; 0x12

         ((rx_frame_t*)pFrame)->length = sizeof(ftAssocReqDirect);
    1cc0:	83 e1       	ldi	r24, 0x13	; 19
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	80 83       	st	Z, r24

         event_object_t event;
         event.event = MAC_EVENT_SEND;
    1cc6:	8a e1       	ldi	r24, 0x1A	; 26
    1cc8:	89 83       	std	Y+1, r24	; 0x01
         event.data = pFrame;
    1cca:	fb 82       	std	Y+3, r15	; 0x03
    1ccc:	ea 82       	std	Y+2, r14	; 0x02
         event.callback = &setAssociationTimeout;
    1cce:	88 e1       	ldi	r24, 0x18	; 24
    1cd0:	9e e0       	ldi	r25, 0x0E	; 14
    1cd2:	9d 83       	std	Y+5, r25	; 0x05
    1cd4:	8c 83       	std	Y+4, r24	; 0x04

         // save Event
         mac_put_event(&event);
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
      }
   }
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	08 95       	ret

00001cfc <sendBeaconFrame>:

          // save Event and send later
          mac_put_event(&event);
       }
    }
}
    1cfc:	08 95       	ret

00001cfe <macWakeRequest>:
    @param addr Short address of the parent router of the node to wake
    up.
    @param child Short address of the child node to wake up.
 */
void macWakeRequest(u16 addr, u16 child)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <macWakeRequest+0x6>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
   if (NODETYPE != ENDDEVICE)
   {
      macDataRequestInt(addr, 2, (u8*)&child, WAKE_NODE);
   }
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <macSendStoredFrame>:

         }
      }
   }

}
    1d12:	08 95       	ret

00001d14 <macHoldFrame>:
   @param addr Short address of recipient node

   @param pFrame Pointer to buffer containing the frame and length information
 */
void macHoldFrame(u16 addr, u8 *pFrame)
{
    1d14:	cb 01       	movw	r24, r22
               storedFrames[i].len = 0;
         }
      }
   }

   bmm_buffer_free(pFrame); // free buffer
    1d16:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
}
    1d1a:	08 95       	ret

00001d1c <mp>:
   }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <mp+0xe>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <mp+0x10>
    1d2c:	0f 92       	push	r0
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
   uint8_t* pFrame = bmm_buffer_alloc();
    1d32:	0e 94 2b 22 	call	0x4456	; 0x4456 <bmm_buffer_alloc>
    1d36:	7c 01       	movw	r14, r24

   if(pFrame != NULL)
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <mp+0x22>
    1d3c:	42 c0       	rjmp	.+132    	; 0x1dc2 <mp+0xa6>
   {
      ftPing *frame = (ftPing*)(((rx_frame_t*)pFrame)->data);
    1d3e:	8c 01       	movw	r16, r24
    1d40:	0f 5f       	subi	r16, 0xFF	; 255
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255

      frame->fcf = FCF_DATA;
    1d44:	81 e6       	ldi	r24, 0x61	; 97
    1d46:	98 e8       	ldi	r25, 0x88	; 136
    1d48:	f7 01       	movw	r30, r14
    1d4a:	92 83       	std	Z+2, r25	; 0x02
    1d4c:	81 83       	std	Z+1, r24	; 0x01
      frame->seq = macConfig.dsn++;
    1d4e:	80 91 5b 18 	lds	r24, 0x185B
    1d52:	f8 01       	movw	r30, r16
    1d54:	82 83       	std	Z+2, r24	; 0x02
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	80 93 5b 18 	sts	0x185B, r24
      frame->panid = macConfig.panId;
    1d5c:	80 91 5c 18 	lds	r24, 0x185C
    1d60:	90 91 5d 18 	lds	r25, 0x185D
    1d64:	94 83       	std	Z+4, r25	; 0x04
    1d66:	83 83       	std	Z+3, r24	; 0x03
      frame->srcAddr = macConfig.shortAddress;
    1d68:	80 91 5e 18 	lds	r24, 0x185E
    1d6c:	90 91 5f 18 	lds	r25, 0x185F
    1d70:	90 87       	std	Z+8, r25	; 0x08
    1d72:	87 83       	std	Z+7, r24	; 0x07
      frame->originAddr = macConfig.shortAddress;
    1d74:	94 87       	std	Z+12, r25	; 0x0c
    1d76:	83 87       	std	Z+11, r24	; 0x0b
      frame->finalDestAddr = pingAddr;
    1d78:	80 91 a8 0c 	lds	r24, 0x0CA8
    1d7c:	90 91 a9 0c 	lds	r25, 0x0CA9
    1d80:	92 87       	std	Z+10, r25	; 0x0a
    1d82:	81 87       	std	Z+9, r24	; 0x09
      frame->type = pingType;
    1d84:	80 91 aa 0c 	lds	r24, 0x0CAA
    1d88:	85 87       	std	Z+13, r24	; 0x0d
      frame->rssi = radioGetSavedRssiValue();
    1d8a:	0e 94 ab 12 	call	0x2556	; 0x2556 <radioGetSavedRssiValue>
    1d8e:	f8 01       	movw	r30, r16
    1d90:	86 87       	std	Z+14, r24	; 0x0e
      frame->lqi = radioGetSavedLqiValue();
    1d92:	0e 94 ae 12 	call	0x255c	; 0x255c <radioGetSavedLqiValue>
    1d96:	f8 01       	movw	r30, r16
    1d98:	87 87       	std	Z+15, r24	; 0x0f

      ((rx_frame_t*)pFrame)->length = sizeof(ftPing);
    1d9a:	80 e1       	ldi	r24, 0x10	; 16
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	80 83       	st	Z, r24
            return;
         }
      }
      else // End/router nodes
      {
         frame->destAddr = macConfig.parentShortAddress;
    1da0:	80 91 60 18 	lds	r24, 0x1860
    1da4:	90 91 61 18 	lds	r25, 0x1861
    1da8:	f8 01       	movw	r30, r16
    1daa:	96 83       	std	Z+6, r25	; 0x06
    1dac:	85 83       	std	Z+5, r24	; 0x05
      }

      event_object_t event;
      event.event = MAC_EVENT_SEND;
    1dae:	8a e1       	ldi	r24, 0x1A	; 26
    1db0:	89 83       	std	Y+1, r24	; 0x01
      event.data = pFrame;
    1db2:	fb 82       	std	Y+3, r15	; 0x03
    1db4:	ea 82       	std	Y+2, r14	; 0x02
      event.callback = 0;
    1db6:	1d 82       	std	Y+5, r1	; 0x05
    1db8:	1c 82       	std	Y+4, r1	; 0x04

      // save Event
      mac_put_event(&event);
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
   }
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret

00001dda <macPing>:
   PING_REQ_FRAME or @ref PING_RSP_FRAME.

   @param addr Short address of node to send ping
 */
void macPing(u8 pingTypeArg, u16 addr)
{
    1dda:	28 2f       	mov	r18, r24
   // Don't send to self
   if (addr == macConfig.shortAddress)
    1ddc:	80 91 5e 18 	lds	r24, 0x185E
    1de0:	90 91 5f 18 	lds	r25, 0x185F
    1de4:	68 17       	cp	r22, r24
    1de6:	79 07       	cpc	r23, r25
    1de8:	89 f0       	breq	.+34     	; 0x1e0c <macPing+0x32>
   {
      return;
   }

   // Broadcast addr
   if (!macConfig.associated)
    1dea:	80 91 59 18 	lds	r24, 0x1859
    1dee:	88 23       	and	r24, r24
    1df0:	69 f0       	breq	.+26     	; 0x1e0c <macPing+0x32>
   {
      return;
   }

   pingAddr = addr;
    1df2:	70 93 a9 0c 	sts	0x0CA9, r23
    1df6:	60 93 a8 0c 	sts	0x0CA8, r22
   pingType = pingTypeArg;
    1dfa:	20 93 aa 0c 	sts	0x0CAA, r18
    1dfe:	10 92 ab 0c 	sts	0x0CAB, r1
      macConfig.busy = true;
   }
   else
   {
      // End/router nodes
      mp();
    1e02:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <mp>
      macConfig.busy = true;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 68 18 	sts	0x1868, r24
    1e0c:	08 95       	ret

00001e0e <macDataRequestInt>:
    @param data Pointer to the data to be sent.

    @param type Type of frame to be sent
 */
static void macDataRequestInt(u16 addr, u8 len, u8 * data, u8 type)
{
    1e0e:	8f 92       	push	r8
    1e10:	9f 92       	push	r9
    1e12:	af 92       	push	r10
    1e14:	bf 92       	push	r11
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	1f 93       	push	r17
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <macDataRequestInt+0x1a>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <macDataRequestInt+0x1c>
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	7c 01       	movw	r14, r24
    1e32:	b6 2e       	mov	r11, r22
    1e34:	4a 01       	movw	r8, r20
    1e36:	a2 2e       	mov	r10, r18
   u8 rpSent; // Was a routing packet sent?

   // Don't send to self
   if (addr == macConfig.shortAddress || addr == BROADCASTADDR)
    1e38:	80 91 5e 18 	lds	r24, 0x185E
    1e3c:	90 91 5f 18 	lds	r25, 0x185F
    1e40:	e8 16       	cp	r14, r24
    1e42:	f9 06       	cpc	r15, r25
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <macDataRequestInt+0x3a>
    1e46:	76 c0       	rjmp	.+236    	; 0x1f34 <macDataRequestInt+0x126>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	e8 16       	cp	r14, r24
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	f8 06       	cpc	r15, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <macDataRequestInt+0x46>
    1e52:	70 c0       	rjmp	.+224    	; 0x1f34 <macDataRequestInt+0x126>
   {
      return;
   }

   // This node has no short address
   if (!macConfig.associated)
    1e54:	80 91 59 18 	lds	r24, 0x1859
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <macDataRequestInt+0x50>
    1e5c:	6b c0       	rjmp	.+214    	; 0x1f34 <macDataRequestInt+0x126>
   {
      return;
   }

   uint8_t* pFrame = bmm_buffer_alloc();
    1e5e:	0e 94 2b 22 	call	0x4456	; 0x4456 <bmm_buffer_alloc>
    1e62:	6c 01       	movw	r12, r24

   if(pFrame != NULL)
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <macDataRequestInt+0x5c>
    1e68:	65 c0       	rjmp	.+202    	; 0x1f34 <macDataRequestInt+0x126>
   {
      // Create a struct pointer to the global variable...
      //ftData *data_frame = (ftData*)(mac_buffer_tx+1);

      ftData *data_frame = (ftData*)(((rx_frame_t*)pFrame)->data);
    1e6a:	8c 01       	movw	r16, r24
    1e6c:	0f 5f       	subi	r16, 0xFF	; 255
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255

      // Build the frame.
      data_frame->fcf = FCF_DATA;
    1e70:	81 e6       	ldi	r24, 0x61	; 97
    1e72:	98 e8       	ldi	r25, 0x88	; 136
    1e74:	d6 01       	movw	r26, r12
    1e76:	12 96       	adiw	r26, 0x02	; 2
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
      data_frame->seq = macConfig.dsn++;
    1e7e:	80 91 5b 18 	lds	r24, 0x185B
    1e82:	f8 01       	movw	r30, r16
    1e84:	82 83       	std	Z+2, r24	; 0x02
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	80 93 5b 18 	sts	0x185B, r24
      data_frame->panid = macConfig.panId;
    1e8c:	80 91 5c 18 	lds	r24, 0x185C
    1e90:	90 91 5d 18 	lds	r25, 0x185D
    1e94:	94 83       	std	Z+4, r25	; 0x04
    1e96:	83 83       	std	Z+3, r24	; 0x03
      data_frame->srcAddr = macConfig.shortAddress;
    1e98:	80 91 5e 18 	lds	r24, 0x185E
    1e9c:	90 91 5f 18 	lds	r25, 0x185F
    1ea0:	90 87       	std	Z+8, r25	; 0x08
    1ea2:	87 83       	std	Z+7, r24	; 0x07
      data_frame->finalDestAddr = addr;
    1ea4:	f2 86       	std	Z+10, r15	; 0x0a
    1ea6:	e1 86       	std	Z+9, r14	; 0x09
      data_frame->originAddr = macConfig.shortAddress;
    1ea8:	94 87       	std	Z+12, r25	; 0x0c
    1eaa:	83 87       	std	Z+11, r24	; 0x0b

      // send a routing packet if necessary
      rpSent = macSendRoutingPacket(addr);
    1eac:	c7 01       	movw	r24, r14
    1eae:	0e 94 0b 11 	call	0x2216	; 0x2216 <macSendRoutingPacket>
         // send to child node that can route this packet
         data_frame->destAddr = child;
      }
      else
         // All data is send to parent, unless this is a wakeup frame
         if (type == WAKE_NODE)
    1eb2:	f6 e0       	ldi	r31, 0x06	; 6
    1eb4:	af 16       	cp	r10, r31
    1eb6:	31 f4       	brne	.+12     	; 0x1ec4 <macDataRequestInt+0xb6>
            data_frame->destAddr = addr;
    1eb8:	d8 01       	movw	r26, r16
    1eba:	16 96       	adiw	r26, 0x06	; 6
    1ebc:	fc 92       	st	X, r15
    1ebe:	ee 92       	st	-X, r14
    1ec0:	15 97       	sbiw	r26, 0x05	; 5
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <macDataRequestInt+0xc4>
         else
            data_frame->destAddr = macConfig.parentShortAddress;
    1ec4:	80 91 60 18 	lds	r24, 0x1860
    1ec8:	90 91 61 18 	lds	r25, 0x1861
    1ecc:	f8 01       	movw	r30, r16
    1ece:	96 83       	std	Z+6, r25	; 0x06
    1ed0:	85 83       	std	Z+5, r24	; 0x05
      if (macConfig.sleeping && NODETYPE == ENDDEVICE && RUMSLEEP)
      {
         type |= 0x80; // Set high bit of type if we're sleeping
      }

      data_frame->type = type;
    1ed2:	d8 01       	movw	r26, r16
    1ed4:	1d 96       	adiw	r26, 0x0d	; 13
    1ed6:	ac 92       	st	X, r10
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	08 c0       	rjmp	.+16     	; 0x1eec <macDataRequestInt+0xde>

      // Copy the payload data to frame. (note: this creates smaller code than using memcpy!!)
      u8 i;
      for(i=0; i<len; i++){
         ((u8*)&data_frame->payload)[i] = *data++;
    1edc:	f8 01       	movw	r30, r16
    1ede:	e9 0f       	add	r30, r25
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	d4 01       	movw	r26, r8
    1ee4:	8d 91       	ld	r24, X+
    1ee6:	4d 01       	movw	r8, r26
    1ee8:	86 87       	std	Z+14, r24	; 0x0e

      data_frame->type = type;

      // Copy the payload data to frame. (note: this creates smaller code than using memcpy!!)
      u8 i;
      for(i=0; i<len; i++){
    1eea:	9f 5f       	subi	r25, 0xFF	; 255
    1eec:	9b 15       	cp	r25, r11
    1eee:	b0 f3       	brcs	.-20     	; 0x1edc <macDataRequestInt+0xce>
         ((u8*)&data_frame->payload)[i] = *data++;
      }

      // Check addresses again - addr will be different now -> Don't send to self
      if (data_frame->destAddr == macConfig.shortAddress || data_frame->destAddr == BROADCASTADDR)
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	25 81       	ldd	r18, Z+5	; 0x05
    1ef4:	36 81       	ldd	r19, Z+6	; 0x06
    1ef6:	80 91 5e 18 	lds	r24, 0x185E
    1efa:	90 91 5f 18 	lds	r25, 0x185F
    1efe:	28 17       	cp	r18, r24
    1f00:	39 07       	cpc	r19, r25
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <macDataRequestInt+0xfc>
    1f04:	2f 5f       	subi	r18, 0xFF	; 255
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <macDataRequestInt+0x104>
      {
         bmm_buffer_free(pFrame);
    1f0a:	c6 01       	movw	r24, r12
    1f0c:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
    1f10:	11 c0       	rjmp	.+34     	; 0x1f34 <macDataRequestInt+0x126>
         return;
      }

      ((rx_frame_t*)pFrame)->length = len + ftDataHeaderSize; // save length away
    1f12:	8e e0       	ldi	r24, 0x0E	; 14
    1f14:	b8 0e       	add	r11, r24
    1f16:	d6 01       	movw	r26, r12
    1f18:	bc 92       	st	X, r11
         }
      }
      else
      {
         event_object_t event;
         event.event = MAC_EVENT_SEND;
    1f1a:	8a e1       	ldi	r24, 0x1A	; 26
    1f1c:	89 83       	std	Y+1, r24	; 0x01
         event.data = pFrame;
    1f1e:	db 82       	std	Y+3, r13	; 0x03
    1f20:	ca 82       	std	Y+2, r12	; 0x02
         event.callback = 0;
    1f22:	1d 82       	std	Y+5, r1	; 0x05
    1f24:	1c 82       	std	Y+4, r1	; 0x04

         // save Event
         mac_put_event(&event);
    1f26:	ce 01       	movw	r24, r28
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
      }
      macConfig.busy = true;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 68 18 	sts	0x1868, r24
   }
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	df 90       	pop	r13
    1f4c:	cf 90       	pop	r12
    1f4e:	bf 90       	pop	r11
    1f50:	af 90       	pop	r10
    1f52:	9f 90       	pop	r9
    1f54:	8f 90       	pop	r8
    1f56:	08 95       	ret

00001f58 <macDataIndication>:
 */
void macDataIndication(uint8_t* pFrame)
{

   // Sort out the different types of data packets.
   ftData *frame = (ftData*)(((rx_frame_t*)pFrame)->data);
    1f58:	fc 01       	movw	r30, r24
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	11 96       	adiw	r26, 0x01	; 1
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif
    */
   switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    1f5e:	1d 96       	adiw	r26, 0x0d	; 13
    1f60:	8c 91       	ld	r24, X
    1f62:	1d 97       	sbiw	r26, 0x0d	; 13
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	8f 77       	andi	r24, 0x7F	; 127
    1f68:	90 70       	andi	r25, 0x00	; 0
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	71 f1       	breq	.+92     	; 0x1fcc <macDataIndication+0x74>
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	91 05       	cpc	r25, r1
    1f74:	34 f4       	brge	.+12     	; 0x1f82 <macDataIndication+0x2a>
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	49 f0       	breq	.+18     	; 0x1f8e <macDataIndication+0x36>
    1f7c:	02 97       	sbiw	r24, 0x02	; 2
    1f7e:	91 f5       	brne	.+100    	; 0x1fe4 <macDataIndication+0x8c>
    1f80:	1e c0       	rjmp	.+60     	; 0x1fbe <macDataIndication+0x66>
    1f82:	85 30       	cpi	r24, 0x05	; 5
    1f84:	91 05       	cpc	r25, r1
    1f86:	49 f1       	breq	.+82     	; 0x1fda <macDataIndication+0x82>
    1f88:	06 97       	sbiw	r24, 0x06	; 6
    1f8a:	61 f5       	brne	.+88     	; 0x1fe4 <macDataIndication+0x8c>
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <macDataIndication+0x3c>
   {
   case DATA_FRAME:
      // Plain old data, send it up the chain
      appDataIndication();
    1f8e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <appDataIndication>
    1f92:	08 95       	ret
            macWakeChildNode(addr);
      }
      if (NODETYPE == ENDDEVICE)
      {
         // Wake yourself up now
         macConfig.sleeping = false;
    1f94:	10 92 69 18 	sts	0x1869, r1
         // Send parent a confirmation that we are awake
         macDataRequestInt(macConfig.parentShortAddress,
    1f98:	80 91 60 18 	lds	r24, 0x1860
    1f9c:	90 91 61 18 	lds	r25, 0x1861
    1fa0:	62 e0       	ldi	r22, 0x02	; 2
    1fa2:	4e e5       	ldi	r20, 0x5E	; 94
    1fa4:	58 e1       	ldi	r21, 0x18	; 24
    1fa6:	26 e0       	ldi	r18, 0x06	; 6
    1fa8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <macDataRequestInt>
               2,
               (u8*)&macConfig.shortAddress,
               WAKE_NODE);
         debugMsgStr("\r\nAwake");
    1fac:	60 91 34 1f 	lds	r22, 0x1F34
    1fb0:	70 91 35 1f 	lds	r23, 0x1F35
    1fb4:	85 ed       	ldi	r24, 0xD5	; 213
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
    1fbc:	08 95       	ret
      }
      break;
   case PING_REQ_FRAME:
      // We got a ping request, let the app handle that
      appPingReq(frame->originAddr);
    1fbe:	1b 96       	adiw	r26, 0x0b	; 11
    1fc0:	8d 91       	ld	r24, X+
    1fc2:	9c 91       	ld	r25, X
    1fc4:	1c 97       	sbiw	r26, 0x0c	; 12
    1fc6:	0e 94 57 19 	call	0x32ae	; 0x32ae <appPingReq>
    1fca:	08 95       	ret
      break;
   case PING_RSP_FRAME:
      // We got a ping response, app will handle it
      appPingRsp(frame->originAddr);
    1fcc:	1b 96       	adiw	r26, 0x0b	; 11
    1fce:	8d 91       	ld	r24, X+
    1fd0:	9c 91       	ld	r25, X
    1fd2:	1c 97       	sbiw	r26, 0x0c	; 12
    1fd4:	0e 94 8e 1b 	call	0x371c	; 0x371c <appPingRsp>
    1fd8:	08 95       	ret
      break;
   case DATA_FRAME_6LOWPAN:
      //6lowpan data indication
      if (IPV6LOWPAN == 1)
         //sixlowpan_DataIndication(frame, *mac_buffer_rx - 16);
         sixlowpan_DataIndication(frame, (((rx_frame_t*)pFrame)->length) - 16);
    1fda:	60 81       	ld	r22, Z
    1fdc:	60 51       	subi	r22, 0x10	; 16
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 3b 07 	call	0xe76	; 0xe76 <sixlowpan_DataIndication>
    1fe4:	08 95       	ret

00001fe6 <macsixlowpanDataRequest>:
    @ingroup avr6lowpan
 */
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
   if (IPV6LOWPAN == 1)
      macDataRequestInt(addr, len, data, DATA_FRAME_6LOWPAN);
    1fe6:	25 e0       	ldi	r18, 0x05	; 5
    1fe8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <macDataRequestInt>
}
    1fec:	08 95       	ret

00001fee <macDataRequest>:

   @param data Pointer to the data to be sent.
 */
void macDataRequest(u16 addr, u8 len, u8 * data)
{
   macDataRequestInt(addr, len, data, DATA_FRAME);
    1fee:	21 e0       	ldi	r18, 0x01	; 1
    1ff0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <macDataRequestInt>
}
    1ff4:	08 95       	ret

00001ff6 <macOtaDebugRequest>:
/**
   @brief Send an other-the-air (OTA) debug frame.  This contains a
   string payload that is displayed on the coordintor end.
 */
void macOtaDebugRequest(u8 *str)
{
    1ff6:	ac 01       	movw	r20, r24
   if (NODETYPE != COORD)
   {
      macDataRequestInt(DEFAULT_COORD_ADDR, strlen((char *)str)+1, str, DEBUG_FRAME);
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	0d 90       	ld	r0, X+
    1ffc:	00 20       	and	r0, r0
    1ffe:	e9 f7       	brne	.-6      	; 0x1ffa <macOtaDebugRequest+0x4>
    2000:	a8 1b       	sub	r26, r24
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	6a 2f       	mov	r22, r26
    2008:	27 e0       	ldi	r18, 0x07	; 7
    200a:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <macDataRequestInt>
   }
}
    200e:	08 95       	ret

00002010 <mac_event_pending>:

    @return True if there is a pending event, else false.
 */
u8 mac_event_pending(void)
{
   return (event_queue.head != event_queue.tail);
    2010:	90 91 92 18 	lds	r25, 0x1892
    2014:	80 91 93 18 	lds	r24, 0x1893
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	98 13       	cpse	r25, r24
    201c:	21 e0       	ldi	r18, 0x01	; 1
}
    201e:	82 2f       	mov	r24, r18
    2020:	08 95       	ret

00002022 <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
 */
event_object_t * mac_get_event(void)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <mac_get_event+0x6>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
   event_object_t *object = NULL;
   AVR_ENTER_CRITICAL_REGION();
    202c:	8f b7       	in	r24, 0x3f	; 63
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	f8 94       	cli
   volatile u8 newtail;

   newtail = event_queue.tail;
    2032:	80 91 93 18 	lds	r24, 0x1893
    2036:	8a 83       	std	Y+2, r24	; 0x02

   object = &(event_queue.event_object[newtail]);
    2038:	9a 81       	ldd	r25, Y+2	; 0x02

   // calculate new tail
   newtail++;
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	8a 83       	std	Y+2, r24	; 0x02
   if (newtail >= MAX_EVENTS)
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	84 31       	cpi	r24, 0x14	; 20
    2044:	08 f0       	brcs	.+2      	; 0x2048 <mac_get_event+0x26>
      newtail = 0;
    2046:	1a 82       	std	Y+2, r1	; 0x02

   event_queue.tail = newtail;
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	80 93 93 18 	sts	0x1893, r24

   AVR_LEAVE_CRITICAL_REGION();
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	8f bf       	out	0x3f, r24	; 63
    2052:	25 e0       	ldi	r18, 0x05	; 5
    2054:	92 9f       	mul	r25, r18
    2056:	90 01       	movw	r18, r0
    2058:	11 24       	eor	r1, r1
    205a:	2c 56       	subi	r18, 0x6C	; 108
    205c:	37 4e       	sbci	r19, 0xE7	; 231
   return(object);

}
    205e:	c9 01       	movw	r24, r18
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
 */
void mac_put_event(event_object_t *object)
{
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8c 01       	movw	r16, r24
   AVR_ENTER_CRITICAL_REGION();
    207a:	8f b7       	in	r24, 0x3f	; 63
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	f8 94       	cli
   u8 newhead;

   if ((event_queue.head + 1) % MAX_EVENTS == event_queue.tail)
    2080:	80 91 92 18 	lds	r24, 0x1892
    2084:	20 91 93 18 	lds	r18, 0x1893
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	64 e1       	ldi	r22, 0x14	; 20
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <__divmodhi4>
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	82 17       	cp	r24, r18
    2098:	93 07       	cpc	r25, r19
    209a:	41 f4       	brne	.+16     	; 0x20ac <mac_put_event+0x42>
   {
      if(object->data != 0)
    209c:	f8 01       	movw	r30, r16
    209e:	81 81       	ldd	r24, Z+1	; 0x01
    20a0:	92 81       	ldd	r25, Z+2	; 0x02
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	f9 f0       	breq	.+62     	; 0x20e4 <mac_put_event+0x7a>
      {
         bmm_buffer_free(object->data);
    20a6:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
    20aa:	1c c0       	rjmp	.+56     	; 0x20e4 <mac_put_event+0x7a>
      }
      // queue full, get outta here
      return;
   }

   newhead = event_queue.head;
    20ac:	20 91 92 18 	lds	r18, 0x1892

   // store in queue
   event_queue.event_object[newhead] = *object;
    20b0:	82 2f       	mov	r24, r18
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	fc 01       	movw	r30, r24
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e8 0f       	add	r30, r24
    20c0:	f9 1f       	adc	r31, r25
    20c2:	ec 56       	subi	r30, 0x6C	; 108
    20c4:	f7 4e       	sbci	r31, 0xE7	; 231
    20c6:	d8 01       	movw	r26, r16
    20c8:	85 e0       	ldi	r24, 0x05	; 5
    20ca:	0d 90       	ld	r0, X+
    20cc:	01 92       	st	Z+, r0
    20ce:	81 50       	subi	r24, 0x01	; 1
    20d0:	e1 f7       	brne	.-8      	; 0x20ca <mac_put_event+0x60>

   // calculate new head index
   newhead++;
    20d2:	82 2f       	mov	r24, r18
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
   if (newhead >= MAX_EVENTS)
    20d6:	84 31       	cpi	r24, 0x14	; 20
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <mac_put_event+0x72>
    20da:	80 e0       	ldi	r24, 0x00	; 0
      newhead = 0;
   event_queue.head = newhead;
    20dc:	80 93 92 18 	sts	0x1892, r24
   AVR_LEAVE_CRITICAL_REGION();
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	8f bf       	out	0x3f, r24	; 63
}
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
 */
void macTask(void)
{
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
         {
            uint8_t* data_frame = (uint8_t*)(((rx_frame_t*)event->data)->data);
            if (*((u16*)(data_frame)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
            {
               // this is a new node, do the association thing
               macConfig.associated = true;
    20f6:	11 e0       	ldi	r17, 0x01	; 1
    20f8:	83 c0       	rjmp	.+262    	; 0x2200 <macTask+0x110>
   event_object_t *event;

   event = 0;
   while(mac_event_pending())
   {
      event = mac_get_event();
    20fa:	0e 94 11 10 	call	0x2022	; 0x2022 <mac_get_event>
    20fe:	ec 01       	movw	r28, r24
      switch (event->event)
    2100:	88 81       	ld	r24, Y
    2102:	85 31       	cpi	r24, 0x15	; 21
    2104:	09 f4       	brne	.+2      	; 0x2108 <macTask+0x18>
    2106:	78 c0       	rjmp	.+240    	; 0x21f8 <macTask+0x108>
    2108:	86 31       	cpi	r24, 0x16	; 22
    210a:	80 f4       	brcc	.+32     	; 0x212c <macTask+0x3c>
    210c:	81 31       	cpi	r24, 0x11	; 17
    210e:	09 f4       	brne	.+2      	; 0x2112 <macTask+0x22>
    2110:	65 c0       	rjmp	.+202    	; 0x21dc <macTask+0xec>
    2112:	82 31       	cpi	r24, 0x12	; 18
    2114:	20 f4       	brcc	.+8      	; 0x211e <macTask+0x2e>
    2116:	80 31       	cpi	r24, 0x10	; 16
    2118:	09 f0       	breq	.+2      	; 0x211c <macTask+0x2c>
    211a:	72 c0       	rjmp	.+228    	; 0x2200 <macTask+0x110>
    211c:	26 c0       	rjmp	.+76     	; 0x216a <macTask+0x7a>
    211e:	83 31       	cpi	r24, 0x13	; 19
    2120:	09 f4       	brne	.+2      	; 0x2124 <macTask+0x34>
    2122:	59 c0       	rjmp	.+178    	; 0x21d6 <macTask+0xe6>
    2124:	84 31       	cpi	r24, 0x14	; 20
    2126:	09 f0       	breq	.+2      	; 0x212a <macTask+0x3a>
    2128:	6b c0       	rjmp	.+214    	; 0x2200 <macTask+0x110>
    212a:	11 c0       	rjmp	.+34     	; 0x214e <macTask+0x5e>
    212c:	88 31       	cpi	r24, 0x18	; 24
    212e:	99 f1       	breq	.+102    	; 0x2196 <macTask+0xa6>
    2130:	89 31       	cpi	r24, 0x19	; 25
    2132:	30 f4       	brcc	.+12     	; 0x2140 <macTask+0x50>
    2134:	86 31       	cpi	r24, 0x16	; 22
    2136:	a9 f0       	breq	.+42     	; 0x2162 <macTask+0x72>
    2138:	87 31       	cpi	r24, 0x17	; 23
    213a:	09 f0       	breq	.+2      	; 0x213e <macTask+0x4e>
    213c:	61 c0       	rjmp	.+194    	; 0x2200 <macTask+0x110>
    213e:	5c c0       	rjmp	.+184    	; 0x21f8 <macTask+0x108>
    2140:	89 31       	cpi	r24, 0x19	; 25
    2142:	09 f4       	brne	.+2      	; 0x2146 <macTask+0x56>
    2144:	59 c0       	rjmp	.+178    	; 0x21f8 <macTask+0x108>
    2146:	8a 31       	cpi	r24, 0x1A	; 26
    2148:	09 f0       	breq	.+2      	; 0x214c <macTask+0x5c>
    214a:	5a c0       	rjmp	.+180    	; 0x2200 <macTask+0x110>
    214c:	4a c0       	rjmp	.+148    	; 0x21e2 <macTask+0xf2>
      case MAC_EVENT_SCAN:
         //UART_PRINT("Beacon Frame\r\n");
         // A beacon has been received as a result of an active scan.
         // Record the pan descriptor and store it until the scan has
         // completed.
         if (!macConfig.associated)
    214e:	80 91 59 18 	lds	r24, 0x1859
    2152:	88 23       	and	r24, r24
    2154:	09 f0       	breq	.+2      	; 0x2158 <macTask+0x68>
    2156:	54 c0       	rjmp	.+168    	; 0x2200 <macTask+0x110>
         {
            mac_logPanDescriptors(event->data);
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <mac_logPanDescriptors>
    2160:	4b c0       	rjmp	.+150    	; 0x21f8 <macTask+0x108>
         }
         break;
#if __AVR__
      case MAC_EVENT_TIMER:
         // Timer has expired, just callback the stored function pointer
         ((void (*)(void))event->data)();  // cast data to function pointer
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	09 95       	icall
    2168:	4b c0       	rjmp	.+150    	; 0x2200 <macTask+0x110>
         break;
#endif
      case MAC_EVENT_RX:
         if (macConfig.associated)
    216a:	80 91 59 18 	lds	r24, 0x1859
    216e:	88 23       	and	r24, r24
    2170:	09 f4       	brne	.+2      	; 0x2174 <macTask+0x84>
    2172:	46 c0       	rjmp	.+140    	; 0x2200 <macTask+0x110>
               macChildIsAwake((ftData*)(pData));
               // do not free buffer, this is done in later execution
            }

            // Received a data frame, process it or route it
            if (((ftData*)(((rx_frame_t*)event->data)->data))->finalDestAddr == macConfig.shortAddress)
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	22 85       	ldd	r18, Z+10	; 0x0a
    217a:	33 85       	ldd	r19, Z+11	; 0x0b
    217c:	80 91 5e 18 	lds	r24, 0x185E
    2180:	90 91 5f 18 	lds	r25, 0x185F
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	21 f4       	brne	.+8      	; 0x2192 <macTask+0xa2>
            {
               // This data frame is for this node
               macDataIndication(event->data);
    218a:	cf 01       	movw	r24, r30
    218c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <macDataIndication>
    2190:	33 c0       	rjmp	.+102    	; 0x21f8 <macTask+0x108>
                  // because the same buffer is used to send the routing packet
               }
               // NODETYPE == ENDNODE
               else
               {
                  bmm_buffer_free(event->data);
    2192:	cf 01       	movw	r24, r30
    2194:	33 c0       	rjmp	.+102    	; 0x21fc <macTask+0x10c>
      case MAC_EVENT_ASSOCIATION_RESPONSE:
         //UART_PRINT("Association Response\r\n");
         // End device has recieved this response.
         if (NODETYPE != COORD)
         {
            uint8_t* data_frame = (uint8_t*)(((rx_frame_t*)event->data)->data);
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	df 01       	movw	r26, r30
    219c:	11 96       	adiw	r26, 0x01	; 1
            if (*((u16*)(data_frame)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
    219e:	81 81       	ldd	r24, Z+1	; 0x01
    21a0:	92 81       	ldd	r25, Z+2	; 0x02
    21a2:	83 56       	subi	r24, 0x63	; 99
    21a4:	9c 48       	sbci	r25, 0x8C	; 140
    21a6:	61 f5       	brne	.+88     	; 0x2200 <macTask+0x110>
            {
               // this is a new node, do the association thing
               macConfig.associated = true;
    21a8:	10 93 59 18 	sts	0x1859, r17
               macConfig.parentShortAddress = ((ftAssocRespDirect*)(data_frame))->srcAddr;
    21ac:	1d 96       	adiw	r26, 0x0d	; 13
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	1e 97       	sbiw	r26, 0x0e	; 14
    21b4:	90 93 61 18 	sts	0x1861, r25
    21b8:	80 93 60 18 	sts	0x1860, r24
               macConfig.shortAddress = ((ftAssocRespDirect*)(data_frame))->shortAddr;
    21bc:	50 96       	adiw	r26, 0x10	; 16
    21be:	8d 91       	ld	r24, X+
    21c0:	9c 91       	ld	r25, X
    21c2:	51 97       	sbiw	r26, 0x11	; 17
    21c4:	90 93 5f 18 	sts	0x185F, r25
    21c8:	80 93 5e 18 	sts	0x185E, r24
               radioSetShortAddress(macConfig.shortAddress);
    21cc:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <radioSetShortAddress>
               macAssociationConfirm();
    21d0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <macAssociationConfirm>
    21d4:	11 c0       	rjmp	.+34     	; 0x21f8 <macTask+0x108>
            bmm_buffer_free(event->data);
         }
         break;
      case MAC_EVENT_ACCESS:
         // Channel access failure
         appPacketSendAccessFail();
    21d6:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <appPacketSendAccessFail>
    21da:	12 c0       	rjmp	.+36     	; 0x2200 <macTask+0x110>
         //there is no buffer to free, event->data is empty
         break;
      case MAC_EVENT_ACK:
         //UART_PRINT("MAC Event ACK\r\n");
         // Packet got through, alert application
         appPacketSendSucceed();
    21dc:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <appPacketSendSucceed>
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <macTask+0x110>
         //there is no buffer to free, event->data is empty
         break;
      case MAC_EVENT_SEND:
         //UART_PRINT("MAC Event SEND\r\n");
         radioSendData(((rx_frame_t*)(event->data))->length, ((rx_frame_t*)(event->data))->data);
    21e2:	e9 81       	ldd	r30, Y+1	; 0x01
    21e4:	fa 81       	ldd	r31, Y+2	; 0x02
    21e6:	81 91       	ld	r24, Z+
    21e8:	bf 01       	movw	r22, r30
    21ea:	0e 94 6f 14 	call	0x28de	; 0x28de <radioSendData>
         if(event->callback)
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	30 97       	sbiw	r30, 0x00	; 0
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <macTask+0x108>
         {
            (*event->callback)(); // execute callback function
    21f6:	09 95       	icall
         }
         bmm_buffer_free(event->data);
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>

    @return True if there is a pending event, else false.
 */
u8 mac_event_pending(void)
{
   return (event_queue.head != event_queue.tail);
    2200:	90 91 92 18 	lds	r25, 0x1892
    2204:	80 91 93 18 	lds	r24, 0x1893
void macTask(void)
{
   event_object_t *event;

   event = 0;
   while(mac_event_pending())
    2208:	98 17       	cp	r25, r24
    220a:	09 f0       	breq	.+2      	; 0x220e <macTask+0x11e>
    220c:	76 cf       	rjmp	.-276    	; 0x20fa <macTask+0xa>
         break;
      default:
         break;
      }
   }
}
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	08 95       	ret

00002216 <macSendRoutingPacket>:
			// Set the flag to say we sent a routing packet.
			return 1;
		}
	}
	return 0;
}
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	08 95       	ret

0000221a <macRouteData>:
				bmm_buffer_free(pFrame);
			}
		}
	} else // NODETYPE == ENDDEVICE
	{
		bmm_buffer_free(pFrame);
    221a:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
	}
}
    221e:	08 95       	ret

00002220 <macRouteAssociateRequest>:
			// save Event
			mac_put_event(&event);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    2220:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
	}
}
    2224:	08 95       	ret

00002226 <macRouteAssociateResponse>:
			// save Event
			mac_put_event(&event);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    2226:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
	}
}
    222a:	08 95       	ret

0000222c <macForwardRoutingPacket>:
		} else {
			bmm_buffer_free(pFrame);
		}
	} else // NODETYPE != ROUTER
	{
		bmm_buffer_free(pFrame);
    222c:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
	}
}
    2230:	08 95       	ret

00002232 <macIsScanning>:
   @return True if MAC is scanning. False if MAC is not scanning.
 */
u8 macIsScanning(void)
{
   return scanInProcess;
}
    2232:	80 91 ac 0c 	lds	r24, 0x0CAC
    2236:	08 95       	ret

00002238 <macSetScanChannel>:
   @param channel The single channel to scan, or ALL_CHANNELS to scan
   all channels.
 */
void macSetScanChannel(u8 channel)
{
   scanChannel = channel;
    2238:	80 93 01 03 	sts	0x0301, r24
}
    223c:	08 95       	ret

0000223e <macGetScanChannel>:
   @return The channel set by @ref macSetScanChannel().
 */
u8 macGetScanChannel(void)
{
   return scanChannel;
}
    223e:	80 91 01 03 	lds	r24, 0x0301
    2242:	08 95       	ret

00002244 <macEdCallback>:
      // Accumulate the ED values.
      u8 e = hal_register_read(RG_PHY_ED_LEVEL);
      energy.energy[energy.currentChannel] += e;
      hal_register_write(RG_PHY_ED_LEVEL, 0);
   }
}
    2244:	08 95       	ret

00002246 <macFindClearChannel>:
         scanInProcess = true;

         energyScanCallback();
      }
   }
}
    2246:	08 95       	ret

00002248 <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
 */
void mac_scanConfirm(void)
{
    2248:	1f 93       	push	r17
   // logicalChannel is used as flag to show that we received a valid beacon
   u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    224a:	10 e0       	ldi	r17, 0x00	; 0
    224c:	80 91 fd 18 	lds	r24, 0x18FD
    2250:	8f 3f       	cpi	r24, 0xFF	; 255
    2252:	e1 f0       	breq	.+56     	; 0x228c <mac_scanConfirm+0x44>
    2254:	11 e0       	ldi	r17, 0x01	; 1

   if (gotbeacon)
   {
      // Save the panDescriptor data to the PIB's.
      macConfig.panId = panDescriptor.coorPANId;
    2256:	80 91 f9 18 	lds	r24, 0x18F9
    225a:	90 91 fa 18 	lds	r25, 0x18FA
    225e:	90 93 5d 18 	sts	0x185D, r25
    2262:	80 93 5c 18 	sts	0x185C, r24
      macConfig.parentShortAddress = panDescriptor.coordAddr;
    2266:	20 91 fb 18 	lds	r18, 0x18FB
    226a:	30 91 fc 18 	lds	r19, 0x18FC
    226e:	30 93 61 18 	sts	0x1861, r19
    2272:	20 93 60 18 	sts	0x1860, r18

      // Need to reset the PAN ID in the radio.
      radioSetPanId(macConfig.panId);
    2276:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <radioSetPanId>

      macSetOperatingChannel(panDescriptor.logicalChannel);
    227a:	80 91 fd 18 	lds	r24, 0x18FD
    227e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <macSetOperatingChannel>

      // We are one hop more than our (prospective) parent
      macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    2282:	80 91 01 19 	lds	r24, 0x1901
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	80 93 64 18 	sts	0x1864, r24
   }
   // Confirm the scan, only if we have a valid coordinator
   appScanConfirm(gotbeacon);
    228c:	81 2f       	mov	r24, r17
    228e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <appScanConfirm>
}
    2292:	1f 91       	pop	r17
    2294:	08 95       	ret

00002296 <store_pandescriptors>:
    descriptor list after the appropriate pan conditions have been
    met.  See @ref mac_logPanDescriptors().
 */
static void store_pandescriptors(uint8_t* pFrame)
{
   ftBeacon *frame = (ftBeacon *)(((rx_frame_t*)pFrame)->data);
    2296:	fc 01       	movw	r30, r24
    2298:	dc 01       	movw	r26, r24
    229a:	11 96       	adiw	r26, 0x01	; 1
   u8 lqi = ((rx_frame_t*)pFrame)->lqi;
    229c:	e0 58       	subi	r30, 0x80	; 128
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	20 81       	ld	r18, Z

   // Gather the pan descriptor data and retain the strongest link in the scan process.
   panDescriptor.coorAddrMode = frame->fcf >> 14;
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	8c 91       	ld	r24, X
    22a6:	11 97       	sbiw	r26, 0x01	; 1
    22a8:	82 95       	swap	r24
    22aa:	86 95       	lsr	r24
    22ac:	86 95       	lsr	r24
    22ae:	83 70       	andi	r24, 0x03	; 3
    22b0:	80 93 f8 18 	sts	0x18F8, r24
   panDescriptor.coorPANId = frame->panid;
    22b4:	13 96       	adiw	r26, 0x03	; 3
    22b6:	8d 91       	ld	r24, X+
    22b8:	9c 91       	ld	r25, X
    22ba:	14 97       	sbiw	r26, 0x04	; 4
    22bc:	90 93 fa 18 	sts	0x18FA, r25
    22c0:	80 93 f9 18 	sts	0x18F9, r24
   panDescriptor.coordAddr = frame->addr;
    22c4:	15 96       	adiw	r26, 0x05	; 5
    22c6:	8d 91       	ld	r24, X+
    22c8:	9c 91       	ld	r25, X
    22ca:	16 97       	sbiw	r26, 0x06	; 6
    22cc:	90 93 fc 18 	sts	0x18FC, r25
    22d0:	80 93 fb 18 	sts	0x18FB, r24
   panDescriptor.hopsToCoord = frame->hops;
    22d4:	1a 96       	adiw	r26, 0x0a	; 10
    22d6:	8c 91       	ld	r24, X
    22d8:	80 93 01 19 	sts	0x1901, r24
   panDescriptor.logicalChannel = macConfig.currentChannel - 1;
    22dc:	80 91 65 18 	lds	r24, 0x1865
    22e0:	81 50       	subi	r24, 0x01	; 1
    22e2:	80 93 fd 18 	sts	0x18FD, r24
   panDescriptor.channelPage = CHANNEL_PAGE_0;
    22e6:	10 92 fe 18 	sts	0x18FE, r1
   panDescriptor.lqi = lqi;
    22ea:	20 93 02 19 	sts	0x1902, r18
   panDescriptor.rssi = radioGetSavedRssiValue();
    22ee:	0e 94 ab 12 	call	0x2556	; 0x2556 <radioGetSavedRssiValue>
    22f2:	80 93 03 19 	sts	0x1903, r24
}
    22f6:	08 95       	ret

000022f8 <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
 */
void mac_logPanDescriptors(uint8_t* pFrame)
{
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	08 2f       	mov	r16, r24
    2300:	f9 2e       	mov	r15, r25
   //ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
   //u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;

   ftBeacon *frame = (ftBeacon *)(((rx_frame_t*)pFrame)->data);
    2302:	e8 2f       	mov	r30, r24
    2304:	f9 2f       	mov	r31, r25
   u8 lqi = ((rx_frame_t*)pFrame)->lqi;
    2306:	e0 58       	subi	r30, 0x80	; 128
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	40 81       	ld	r20, Z
    230c:	e0 58       	subi	r30, 0x80	; 128
    230e:	f0 40       	sbci	r31, 0x00	; 0

   if (!scanInProcess)
    2310:	80 91 ac 0c 	lds	r24, 0x0CAC
    2314:	88 23       	and	r24, r24
    2316:	59 f1       	breq	.+86     	; 0x236e <mac_logPanDescriptors+0x76>
void mac_logPanDescriptors(uint8_t* pFrame)
{
   //ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
   //u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;

   ftBeacon *frame = (ftBeacon *)(((rx_frame_t*)pFrame)->data);
    2318:	31 96       	adiw	r30, 0x01	; 1
      energy.energy[energy.currentChannel] += 500;
   }
   else  // Router and end nodes
   {
      // Check the Beacon frame Superframe spec value.
      u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    231a:	20 91 ff 18 	lds	r18, 0x18FF
    231e:	30 91 00 19 	lds	r19, 0x1900
      panDescriptor.superFrameSpec.superframe_data = frame->superFrame;
    2322:	87 81       	ldd	r24, Z+7	; 0x07
    2324:	90 85       	ldd	r25, Z+8	; 0x08
    2326:	90 93 00 19 	sts	0x1900, r25
    232a:	80 93 ff 18 	sts	0x18FF, r24

      // Determine if association permit is true. We're looking for false.
      if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    232e:	80 91 00 19 	lds	r24, 0x1900
    2332:	87 ff       	sbrs	r24, 7
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <mac_logPanDescriptors+0x48>
      {
         panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    2336:	30 93 00 19 	sts	0x1900, r19
    233a:	20 93 ff 18 	sts	0x18FF, r18
    233e:	17 c0       	rjmp	.+46     	; 0x236e <mac_logPanDescriptors+0x76>
         }
      }
      else
      {
         // Determine if the Beacon LQI value is stronger than the previous scan.
         if(panDescriptor.lqi < lqi)
    2340:	80 91 02 19 	lds	r24, 0x1902
    2344:	84 17       	cp	r24, r20
    2346:	78 f0       	brcs	.+30     	; 0x2366 <mac_logPanDescriptors+0x6e>
         {
            store_pandescriptors(pFrame);
         }
         // If LQI is equal to previous stored, check for the least amount of hops to the coord.
         else if((panDescriptor.lqi == lqi)
    2348:	84 17       	cp	r24, r20
    234a:	89 f4       	brne	.+34     	; 0x236e <mac_logPanDescriptors+0x76>
    234c:	90 91 01 19 	lds	r25, 0x1901
    2350:	82 85       	ldd	r24, Z+10	; 0x0a
    2352:	89 17       	cp	r24, r25
    2354:	40 f0       	brcs	.+16     	; 0x2366 <mac_logPanDescriptors+0x6e>
               && (panDescriptor.hopsToCoord > frame->hops))
         {
            store_pandescriptors(pFrame);
         }
         // If LQI and hops are equal to the previous stored, check for the best RSSI value.
         else if((panDescriptor.lqi == lqi)
    2356:	98 17       	cp	r25, r24
    2358:	51 f4       	brne	.+20     	; 0x236e <mac_logPanDescriptors+0x76>
    235a:	10 91 03 19 	lds	r17, 0x1903
    235e:	0e 94 ab 12 	call	0x2556	; 0x2556 <radioGetSavedRssiValue>
    2362:	18 17       	cp	r17, r24
    2364:	20 f4       	brcc	.+8      	; 0x236e <mac_logPanDescriptors+0x76>
               && (panDescriptor.hopsToCoord == frame->hops)
               && (panDescriptor.rssi < radioGetSavedRssiValue()))
         {
            store_pandescriptors(pFrame);
    2366:	80 2f       	mov	r24, r16
    2368:	9f 2d       	mov	r25, r15
    236a:	0e 94 4b 11 	call	0x2296	; 0x2296 <store_pandescriptors>
         }
      }
   }
}
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	ff 90       	pop	r15
    2374:	08 95       	ret

00002376 <setScanDurationTimer>:
   macConfig.currentChannel++;
}

void setScanDurationTimer(void)
{
   macSetAlarm(SCANDURATION, macScan);
    2376:	84 e1       	ldi	r24, 0x14	; 20
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	62 ec       	ldi	r22, 0xC2	; 194
    237c:	71 e1       	ldi	r23, 0x11	; 17
    237e:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    2382:	08 95       	ret

00002384 <macScan>:
   timeout.

   When the entire scan is complete, the mac_scanConfirm() function is called.
 */
void macScan(void)
{
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <macScan+0xa>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <macScan+0xc>
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
   @param channel The single channel to scan, or ALL_CHANNELS to scan
   all channels.
 */
void macSetScanChannel(u8 channel)
{
   scanChannel = channel;
    2396:	24 e1       	ldi	r18, 0x14	; 20
    2398:	20 93 01 03 	sts	0x0301, r18
   // Check for fixed channel
   if (PAN_CHANNEL != CHANNEL255)
      macSetScanChannel(PAN_CHANNEL);

   // Set up some varibles on the initial call to macScan()
   if (0xFF == macConfig.currentChannel)
    239c:	90 91 65 18 	lds	r25, 0x1865
    23a0:	9f 3f       	cpi	r25, 0xFF	; 255
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <macScan+0x22>
    23a4:	48 c0       	rjmp	.+144    	; 0x2436 <macScan+0xb2>
   {
      scanInProcess = true;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 ac 0c 	sts	0x0CAC, r24

      // Reset the variables.
      memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    23ac:	86 e1       	ldi	r24, 0x16	; 22
    23ae:	e8 ef       	ldi	r30, 0xF8	; 248
    23b0:	f8 e1       	ldi	r31, 0x18	; 24
    23b2:	df 01       	movw	r26, r30
    23b4:	1d 92       	st	X+, r1
    23b6:	8a 95       	dec	r24
    23b8:	e9 f7       	brne	.-6      	; 0x23b4 <macScan+0x30>

      // logicalChannel is used as flag to show that we received a valid beacon
      panDescriptor.logicalChannel = 0xff;
    23ba:	90 93 fd 18 	sts	0x18FD, r25

      macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x

      // Check for a single pre-defined channel to scan.
      if (scanChannel != ALL_CHANNELS)
         macConfig.currentChannel = scanChannel;
    23be:	20 93 65 18 	sts	0x1865, r18

      // Display the channel if it's a fixed channel
      if (PAN_CHANNEL != CHANNEL255)
      {
         debugMsgStr("Ch=0x");
    23c2:	60 91 34 1f 	lds	r22, 0x1F34
    23c6:	70 91 35 1f 	lds	r23, 0x1F35
    23ca:	8d ed       	ldi	r24, 0xDD	; 221
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
         debugMsgInt(PAN_CHANNEL);
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <macScan+0x50>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <macScan+0x52>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <macScan+0x54>
    23d8:	ed b7       	in	r30, 0x3d	; 61
    23da:	fe b7       	in	r31, 0x3e	; 62
    23dc:	31 96       	adiw	r30, 0x01	; 1
    23de:	0a e6       	ldi	r16, 0x6A	; 106
    23e0:	18 e1       	ldi	r17, 0x18	; 24
    23e2:	ad b7       	in	r26, 0x3d	; 61
    23e4:	be b7       	in	r27, 0x3e	; 62
    23e6:	12 96       	adiw	r26, 0x02	; 2
    23e8:	1c 93       	st	X, r17
    23ea:	0e 93       	st	-X, r16
    23ec:	11 97       	sbiw	r26, 0x01	; 1
    23ee:	83 ee       	ldi	r24, 0xE3	; 227
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	93 83       	std	Z+3, r25	; 0x03
    23f4:	82 83       	std	Z+2, r24	; 0x02
    23f6:	84 e1       	ldi	r24, 0x14	; 20
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	95 83       	std	Z+5, r25	; 0x05
    23fc:	84 83       	std	Z+4, r24	; 0x04
    23fe:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	80 91 34 1f 	lds	r24, 0x1F34
    240a:	90 91 35 1f 	lds	r25, 0x1F35
    240e:	ed b7       	in	r30, 0x3d	; 61
    2410:	fe b7       	in	r31, 0x3e	; 62
    2412:	92 83       	std	Z+2, r25	; 0x02
    2414:	81 83       	std	Z+1, r24	; 0x01
    2416:	14 83       	std	Z+4, r17	; 0x04
    2418:	03 83       	std	Z+3, r16	; 0x03
    241a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
         debugMsgStr("\r\n");
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	60 91 34 1f 	lds	r22, 0x1F34
    242a:	70 91 35 1f 	lds	r23, 0x1F35
    242e:	86 ee       	ldi	r24, 0xE6	; 230
    2430:	92 e0       	ldi	r25, 0x02	; 2
    2432:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
      // Not first time through, must sleep very low power nodes.
      if (VLP && (NODETYPE == ENDDEVICE))
         nodeSleep(SCAN_SLEEP_TIME);

   // See if we're done scanning
   if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    2436:	40 91 65 18 	lds	r20, 0x1865
    243a:	4b 31       	cpi	r20, 0x1B	; 27
    243c:	48 f4       	brcc	.+18     	; 0x2450 <macScan+0xcc>
    243e:	24 2f       	mov	r18, r20
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	80 91 01 03 	lds	r24, 0x0301
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	28 17       	cp	r18, r24
    244c:	39 07       	cpc	r19, r25
    244e:	61 f4       	brne	.+24     	; 0x2468 <macScan+0xe4>
         macConfig.currentChannel == scanChannel + 1)
   {
      // done scanning
      scanInProcess = false;
    2450:	10 92 ac 0c 	sts	0x0CAC, r1
      macConfig.currentChannel = 0xFF;
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	80 93 65 18 	sts	0x1865, r24

      mac_scanConfirm();
    245a:	0e 94 24 11 	call	0x2248	; 0x2248 <mac_scanConfirm>
      UART_PRINT(" -> DONE WITH SCANNING\r\n");
    245e:	89 ee       	ldi	r24, 0xE9	; 233
    2460:	92 e0       	ldi	r25, 0x02	; 2
    2462:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
    2466:	31 c0       	rjmp	.+98     	; 0x24ca <macScan+0x146>
      return;
   }

   // Set the channel.
   macSetOperatingChannel(macConfig.currentChannel);
    2468:	84 2f       	mov	r24, r20
    246a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <macSetOperatingChannel>
   initialized, and the channel set to a valid value.  The beacon
   request is normally called as part of a channel scan.
 */
static void sendBeaconRequest(void)
{
   uint8_t* pFrame = bmm_buffer_alloc();
    246e:	0e 94 2b 22 	call	0x4456	; 0x4456 <bmm_buffer_alloc>
    2472:	dc 01       	movw	r26, r24

   if(pFrame != NULL)
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	21 f1       	breq	.+72     	; 0x24c0 <macScan+0x13c>
   {
      ftBeaconReq *brFrame = (ftBeaconReq*)(((rx_frame_t*)pFrame)->data);
    2478:	fc 01       	movw	r30, r24
    247a:	31 96       	adiw	r30, 0x01	; 1
      // Create a struct pointer to the global variable...

      // Fill in beacon request frame
      brFrame->fcf = FCF_BEACONREQ;
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	98 e0       	ldi	r25, 0x08	; 8
    2480:	12 96       	adiw	r26, 0x02	; 2
    2482:	9c 93       	st	X, r25
    2484:	8e 93       	st	-X, r24
    2486:	11 97       	sbiw	r26, 0x01	; 1
      brFrame->seq = macConfig.bsn++;
    2488:	80 91 5a 18 	lds	r24, 0x185A
    248c:	82 83       	std	Z+2, r24	; 0x02
    248e:	8f 5f       	subi	r24, 0xFF	; 255
    2490:	80 93 5a 18 	sts	0x185A, r24
      brFrame->panid = PAN_ID;
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	94 83       	std	Z+4, r25	; 0x04
    249a:	83 83       	std	Z+3, r24	; 0x03
      brFrame->broadcastAddr = BROADCASTADDR;
    249c:	96 83       	std	Z+6, r25	; 0x06
    249e:	85 83       	std	Z+5, r24	; 0x05
      brFrame->cmd = BEACON_REQUEST;
    24a0:	87 e0       	ldi	r24, 0x07	; 7
    24a2:	87 83       	std	Z+7, r24	; 0x07

      ((rx_frame_t*)pFrame)->length = sizeof(ftBeaconReq);
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	8c 93       	st	X, r24

      event_object_t event;
      event.event = MAC_EVENT_SEND;
    24a8:	8a e1       	ldi	r24, 0x1A	; 26
    24aa:	89 83       	std	Y+1, r24	; 0x01
      event.data = pFrame;
    24ac:	bb 83       	std	Y+3, r27	; 0x03
    24ae:	aa 83       	std	Y+2, r26	; 0x02
      event.callback = &setScanDurationTimer;
    24b0:	8b eb       	ldi	r24, 0xBB	; 187
    24b2:	91 e1       	ldi	r25, 0x11	; 17
    24b4:	9d 83       	std	Y+5, r25	; 0x05
    24b6:	8c 83       	std	Y+4, r24	; 0x04

      // save Event
      mac_put_event(&event);
    24b8:	ce 01       	movw	r24, r28
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>

   // Send the beacon request
   sendBeaconRequest();

   // Beacon was send, increment channel to prepare for the next one.
   macConfig.currentChannel++;
    24c0:	80 91 65 18 	lds	r24, 0x1865
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	80 93 65 18 	sts	0x1865, r24
}
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	08 95       	ret

000024de <macStartCoord>:

        // Generate a random short address and stick into the radio.
        radioSetShortAddress(DEFAULT_COORD_ADDR);
        macConfig.shortAddress = DEFAULT_COORD_ADDR;
    }
}
    24de:	08 95       	ret

000024e0 <main>:
int main(void) {
	// make sure external memory interface is enabled (only ATmega1281)
	XRAM_ENABLE();

	// Init USB (for serial communication)
	usb_init();
    24e0:	0e 94 18 2b 	call	0x5630	; 0x5630 <usb_init>

	// Init Buffer Management Module (buffer for rx and tx messages)
	bmm_buffer_init();
    24e4:	0e 94 1b 22 	call	0x4436	; 0x4436 <bmm_buffer_init>

	// switch off LED's
#ifndef RCB_BREAKOUT
	led_set(PLATFORM_STB, STB_LED_0, PLATFORM_LED_OFF);
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	42 e0       	ldi	r20, 0x02	; 2
    24ee:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
	led_set(PLATFORM_STB, STB_LED_1, PLATFORM_LED_OFF);
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	42 e0       	ldi	r20, 0x02	; 2
    24f8:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
#endif
	led_set(PLATFORM_RCB, RCB_LED_0, PLATFORM_LED_OFF);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	42 e0       	ldi	r20, 0x02	; 2
    2502:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
	led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_OFF);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	63 e0       	ldi	r22, 0x03	; 3
    250a:	42 e0       	ldi	r20, 0x02	; 2
    250c:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
	led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	64 e0       	ldi	r22, 0x04	; 4
    2514:	42 e0       	ldi	r20, 0x02	; 2
    2516:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>

	// Setup clock speed
	halSetupClock();
    251a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <halSetupClock>

#if defined(UART_DEBUG) || defined(COMMUNICATION_UART)
	//uart_init(38400);  // init UART hardware (other possible values: 9600, 115200)
	uart_init(115200); // init UART hardware (other possible values: 9600, 115200)
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	72 ec       	ldi	r23, 0xC2	; 194
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 be 2a 	call	0x557c	; 0x557c <uart_init>
#endif

	// init HDLC layer (frame tagging)
	hdlc_init();
    252a:	0e 94 6f 26 	call	0x4cde	; 0x4cde <hdlc_init>

	// init serial
	if (SERIAL) {
		serial_init(NULL);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 3a 1c 	call	0x3874	; 0x3874 <serial_init>
	}

	// Init the timer system for the MAC
	timerInit();
    2536:	0e 94 44 0a 	call	0x1488	; 0x1488 <timerInit>

	// Init the (sample) application rum_application
	//appInit();

	// Init sensor_network application
	app_init();
    253a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <app_init>

#if defined(ROUTERNODE) || defined(ENDNODE)
	//check_io_components(); // is called via macSetAlarm() every 20 ms
	check_temp_and_vcc(); // is called via macSetAlarm() every 5000 ms
    253e:	0e 94 0b 24 	call	0x4816	; 0x4816 <check_temp_and_vcc>
#ifdef STATUS_DEBUG
	init_status_timer(); // init timestamp (free running timer) unit
	status_timer_enable(); // start timestamp unit
#endif

	UART_PRINT("Init completed\r\n");
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
	// Main forever loop for the application.
	for (;;) {
		// Turn interrupts on if they are off.  They should always be on
		// at this point in the loop, so just turn them on every time, in
		// case interrupts were inadvertently turned off elsewhere.
		sei();
    254a:	78 94       	sei
		// Task functions called from main loop.  Either add your own task loop
		// or edit the example appTask().
		//appTask();

		//Task von Simon
		loopTask();
    254c:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <loopTask>
		macTask();
    2550:	0e 94 78 10 	call	0x20f0	; 0x20f0 <macTask>
    2554:	fa cf       	rjmp	.-12     	; 0x254a <main+0x6a>

00002556 <radioGetSavedRssiValue>:
   Input Signal Strength (in dBm) = -90dBm + (3 * RSSI - 1)
 */
u8 radioGetSavedRssiValue(void)
{
   return rssi_val;
}
    2556:	80 91 ae 0c 	lds	r24, 0x0CAE
    255a:	08 95       	ret

0000255c <radioGetSavedLqiValue>:
   @return The LQI value, which ranges from 0 to 255.
 */
u8 radioGetSavedLqiValue(void)
{
   return lastLQI;
}
    255c:	80 91 b0 0c 	lds	r24, 0x0CB0
    2560:	08 95       	ret

00002562 <radioGetSavedEDValue>:

   @return The ED value, which ranges from 0 to 84.
 */
//TODO added to get saved ed level value in dB
int8_t radioGetSavedEDValue(void)
{
    2562:	80 91 af 0c 	lds	r24, 0x0CAF
   return (RSSI_BASE_VAL + ed_val);
}
    2566:	8b 55       	subi	r24, 0x5B	; 91
    2568:	08 95       	ret

0000256a <radioSetClockSpeed>:
      hal_subregister_write(SR_CLKM_SHA_SEL, 0);

   hal_subregister_write(SR_CLKM_CTRL, clock_speed);
#endif
   return RADIO_SUCCESS;
}
    256a:	80 e4       	ldi	r24, 0x40	; 64
    256c:	08 95       	ret

0000256e <radioResetTrx>:
 *
 *  \ingroup radio
 */
void radioResetTrx(void)
{
   hal_set_rst_low();
    256e:	e9 e3       	ldi	r30, 0x39	; 57
    2570:	f1 e0       	ldi	r31, 0x01	; 1
    2572:	80 81       	ld	r24, Z
    2574:	8e 7f       	andi	r24, 0xFE	; 254
    2576:	80 83       	st	Z, r24
   hal_set_slptr_low();
    2578:	80 81       	ld	r24, Z
    257a:	8d 7f       	andi	r24, 0xFD	; 253
    257c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257e:	8d e0       	ldi	r24, 0x0D	; 13
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <radioResetTrx+0x14>
   delay_us(TIME_RESET);
   hal_set_rst_high();
    2586:	80 81       	ld	r24, Z
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	80 83       	st	Z, r24
}
    258c:	08 95       	ret

0000258e <radioRandom>:
         // use library function.
         return rand();
   }
   else
      return 0;
}
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	08 95       	ret

00002592 <radioSetBoost>:
void radioSetBoost(u8 boost)
{
   if (BAND == BAND900)
   {
   }
}
    2592:	08 95       	ret

00002594 <radioSetModulation>:
{
   // create an enum of monulation types.
   if (BAND == BAND900)
   {
   }
}
    2594:	08 95       	ret

00002596 <radioSetup900>:
         }
      }
      // Turn up the backoff times
      hal_register_write(RG_CSMA_BE, 0xfa);
   }
}
    2596:	08 95       	ret

00002598 <radioSetExtendedAddress>:
 *  \param  extended_address Extended address to be used by the address filter.
 *
 *  \ingroup radio
 */
void radioSetExtendedAddress(u8 *extended_address)
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	8c 01       	movw	r16, r24
    25a2:	c4 e6       	ldi	r28, 0x64	; 100
    25a4:	d1 e0       	ldi	r29, 0x01	; 1
   u8 i;

   for (i=0;i<8;i++)
   {
      hal_register_write(RG_IEEE_ADDR_0+i, *extended_address++);
    25a6:	f8 01       	movw	r30, r16
    25a8:	61 91       	ld	r22, Z+
    25aa:	8f 01       	movw	r16, r30
    25ac:	ce 01       	movw	r24, r28
    25ae:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>
    25b2:	21 96       	adiw	r28, 0x01	; 1
 */
void radioSetExtendedAddress(u8 *extended_address)
{
   u8 i;

   for (i=0;i<8;i++)
    25b4:	f1 e0       	ldi	r31, 0x01	; 1
    25b6:	cc 36       	cpi	r28, 0x6C	; 108
    25b8:	df 07       	cpc	r29, r31
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <radioSetExtendedAddress+0xe>
   {
      hal_register_write(RG_IEEE_ADDR_0+i, *extended_address++);
   }
}
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	08 95       	ret

000025c6 <radioSetShortAddress>:
 *  \param  new_short_address Short address to be used by the address filter.
 *
 *  \ingroup radio
 */
void radioSetShortAddress(u16 new_short_address)
{
    25c6:	1f 93       	push	r17
    25c8:	68 2f       	mov	r22, r24
    25ca:	19 2f       	mov	r17, r25

   u8 short_address_byte = new_short_address & 0xFF; // Extract short_address_7_0.
   hal_register_write(RG_SHORT_ADDR_0, short_address_byte);
    25cc:	80 e6       	ldi	r24, 0x60	; 96
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>

   short_address_byte = (new_short_address >> 8*1) & 0xFF; // Extract short_address_15_8.
   hal_register_write(RG_SHORT_ADDR_1, short_address_byte);
    25d4:	81 e6       	ldi	r24, 0x61	; 97
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	61 2f       	mov	r22, r17
    25da:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>
}
    25de:	1f 91       	pop	r17
    25e0:	08 95       	ret

000025e2 <radioSetPanId>:
 *  \param  new_pan_id Desired PANID. Can be any value from 0x0000 to 0xFFFF
 *
 *  \ingroup radio
 */
void radioSetPanId(u16 new_pan_id)
{
    25e2:	1f 93       	push	r17
    25e4:	68 2f       	mov	r22, r24
    25e6:	19 2f       	mov	r17, r25

   u8 pan_byte = new_pan_id & 0xFF; // Extract new_pan_id_7_0.
   hal_register_write(RG_PAN_ID_0, pan_byte);
    25e8:	82 e6       	ldi	r24, 0x62	; 98
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>

   pan_byte = (new_pan_id >> 8*1) & 0xFF;  // Extract new_pan_id_15_8.
   hal_register_write(RG_PAN_ID_1, pan_byte);
    25f0:	83 e6       	ldi	r24, 0x63	; 99
    25f2:	91 e0       	ldi	r25, 0x01	; 1
    25f4:	61 2f       	mov	r22, r17
    25f6:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>
}
    25fa:	1f 91       	pop	r17
    25fc:	08 95       	ret

000025fe <radioSetDeviceRole>:
 *                              transceiver's address filter.
 *                              False disables the same feature.
 *  \ingroup radio
 */
void radioSetDeviceRole(bool i_am_coordinator)
{
    25fe:	28 2f       	mov	r18, r24
   hal_subregister_write(SR_I_AM_COORD, i_am_coordinator);
    2600:	8e e6       	ldi	r24, 0x6E	; 110
    2602:	91 e0       	ldi	r25, 0x01	; 1
    2604:	68 e0       	ldi	r22, 0x08	; 8
    2606:	43 e0       	ldi	r20, 0x03	; 3
    2608:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
}
    260c:	08 95       	ret

0000260e <radioUseAutoTxCrc>:
 *                      false, the automatic CRC will be disabled.
 *
 *  \ingroup radio
 */
void radioUseAutoTxCrc(bool auto_crc_on)
{
    260e:	28 2f       	mov	r18, r24
   /*
    * if SINGLE CHIP is used this is the default setting
    * SR_TX_AUTO_CRC_ON is mapped to correct register place
    */
   else
      hal_subregister_write(SR_TX_AUTO_CRC_ON, auto_crc_on == true);
    2610:	84 e4       	ldi	r24, 0x44	; 68
    2612:	91 e0       	ldi	r25, 0x01	; 1
    2614:	60 e2       	ldi	r22, 0x20	; 32
    2616:	45 e0       	ldi	r20, 0x05	; 5
    2618:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
}
    261c:	08 95       	ret

0000261e <radioResetStateMachine>:
 *
 *  \ingroup radio
 */
void radioResetStateMachine(void)
{
   hal_set_slptr_low();
    261e:	e9 e3       	ldi	r30, 0x39	; 57
    2620:	f1 e0       	ldi	r31, 0x01	; 1
    2622:	80 81       	ld	r24, Z
    2624:	8d 7f       	andi	r24, 0xFD	; 253
    2626:	80 83       	st	Z, r24
    2628:	8d e0       	ldi	r24, 0x0D	; 13
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <radioResetStateMachine+0xe>
   delay_us(TIME_NOCLK_TO_WAKE);
   hal_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    2630:	82 e4       	ldi	r24, 0x42	; 66
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	6f e1       	ldi	r22, 0x1F	; 31
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	23 e0       	ldi	r18, 0x03	; 3
    263a:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
    263e:	83 e0       	ldi	r24, 0x03	; 3
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <radioResetStateMachine+0x24>
   delay_us(TIME_CMD_FORCE_TRX_OFF);
}
    2646:	08 95       	ret

00002648 <radioSetTxPowerLevel>:
 *                          device is sleeping.
 *
 *  \ingroup radio
 */
radio_status_t radioSetTxPowerLevel(u8 power_level)
{
    2648:	28 2f       	mov	r18, r24

   /*Check function parameter and state.*/
   if (power_level > TX_PWR_17_2DBM)
    264a:	80 31       	cpi	r24, 0x10	; 16
    264c:	10 f0       	brcs	.+4      	; 0x2652 <radioSetTxPowerLevel+0xa>
    264e:	82 e4       	ldi	r24, 0x42	; 66
    2650:	08 95       	ret
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    2652:	80 91 39 01 	lds	r24, 0x0139
    2656:	81 ff       	sbrs	r24, 1
    2658:	02 c0       	rjmp	.+4      	; 0x265e <radioSetTxPowerLevel+0x16>
    265a:	84 e4       	ldi	r24, 0x44	; 68
    265c:	08 95       	ret

   if (isSleeping() == true)
      return RADIO_WRONG_STATE;

   /*Set new power level*/
   hal_subregister_write(SR_TX_PWR, power_level);
    265e:	85 e4       	ldi	r24, 0x45	; 69
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	6f e0       	ldi	r22, 0x0F	; 15
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
    266a:	80 e4       	ldi	r24, 0x40	; 64

   return RADIO_SUCCESS;
}
    266c:	08 95       	ret

0000266e <radioGetTrxState>:
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    266e:	81 e4       	ldi	r24, 0x41	; 65
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	6f e1       	ldi	r22, 0x1F	; 31
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
}
    267a:	08 95       	ret

0000267c <radioIsBusy>:
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    267c:	81 e4       	ldi	r24, 0x41	; 65
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	6f e1       	ldi	r22, 0x1F	; 31
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
    2688:	28 2f       	mov	r18, r24
u8 radioIsBusy(void)
{
   u8 state;

   state = radioGetTrxState();
   return (state == BUSY_RX_AACK ||
    268a:	81 51       	subi	r24, 0x11	; 17
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	58 f0       	brcs	.+22     	; 0x26a6 <radioIsBusy+0x2a>
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	49 f0       	breq	.+18     	; 0x26a6 <radioIsBusy+0x2a>
    2694:	21 30       	cpi	r18, 0x01	; 1
    2696:	39 f0       	breq	.+14     	; 0x26a6 <radioIsBusy+0x2a>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	21 31       	cpi	r18, 0x11	; 17
    269e:	29 f4       	brne	.+10     	; 0x26aa <radioIsBusy+0x2e>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	08 95       	ret
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
         state == BUSY_TX_ARET ||
         state == BUSY_TX ||
         state == BUSY_RX ||
         state == BUSY_RX_AACK_NOCLK);
}
    26aa:	08 95       	ret

000026ac <radioLeaveSleepMode>:
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    26ac:	80 91 39 01 	lds	r24, 0x0139
    26b0:	81 fd       	sbrc	r24, 1
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <radioLeaveSleepMode+0xc>
    26b4:	80 e4       	ldi	r24, 0x40	; 64
   //Ensure that the radio transceiver is in the TRX_OFF state.
   if (radioGetTrxState() == TRX_OFF)
      leave_sleep_status = RADIO_SUCCESS;

   return leave_sleep_status;
}
    26b6:	08 95       	ret
{
   //Check if the radio transceiver is actually sleeping.
   if (isSleeping() == false)
      return RADIO_SUCCESS;

   hal_set_slptr_low();
    26b8:	80 91 39 01 	lds	r24, 0x0139
    26bc:	8d 7f       	andi	r24, 0xFD	; 253
    26be:	80 93 39 01 	sts	0x0139, r24
    26c2:	81 ee       	ldi	r24, 0xE1	; 225
    26c4:	96 e0       	ldi	r25, 0x06	; 6
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <radioLeaveSleepMode+0x1a>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    26ca:	81 e4       	ldi	r24, 0x41	; 65
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	6f e1       	ldi	r22, 0x1F	; 31
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>

   //Ensure CLKM is OFF
   radioSetClockSpeed(true, CLKM_DISABLED);

   //Ensure that the radio transceiver is in the TRX_OFF state.
   if (radioGetTrxState() == TRX_OFF)
    26d6:	88 30       	cpi	r24, 0x08	; 8
    26d8:	69 f3       	breq	.-38     	; 0x26b4 <radioLeaveSleepMode+0x8>
    26da:	83 e4       	ldi	r24, 0x43	; 67
    26dc:	08 95       	ret

000026de <radioEnterSleepMode>:
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    26de:	80 91 39 01 	lds	r24, 0x0139
    26e2:	81 ff       	sbrs	r24, 1
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <radioEnterSleepMode+0xc>
    26e6:	80 e4       	ldi	r24, 0x40	; 64
    26e8:	08 95       	ret
radio_status_t radioEnterSleepMode(void)
{
   if (isSleeping() == true)
      return RADIO_SUCCESS;

   radioResetStateMachine(); //Force the device into TRX_OFF.
    26ea:	0e 94 0f 13 	call	0x261e	; 0x261e <radioResetStateMachine>
    26ee:	8b e4       	ldi	r24, 0x4B	; 75
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <radioEnterSleepMode+0x14>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    26f6:	81 e4       	ldi	r24, 0x41	; 65
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	6f e1       	ldi	r22, 0x1F	; 31
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>

   delay_us(TIME_RESET_TRX_OFF);

   radio_status_t enter_sleep_status = RADIO_TIMED_OUT;

   if (radioGetTrxState() == TRX_OFF)
    2702:	88 30       	cpi	r24, 0x08	; 8
    2704:	11 f0       	breq	.+4      	; 0x270a <radioEnterSleepMode+0x2c>
    2706:	83 e4       	ldi	r24, 0x43	; 67
    2708:	08 95       	ret
   {
      //Enter Sleep.
      hal_set_slptr_high();
    270a:	80 91 39 01 	lds	r24, 0x0139
    270e:	82 60       	ori	r24, 0x02	; 2
    2710:	80 93 39 01 	sts	0x0139, r24
    2714:	80 e4       	ldi	r24, 0x40	; 64
      enter_sleep_status = RADIO_SUCCESS;
   }

   return enter_sleep_status;
}
    2716:	08 95       	ret

00002718 <radioGetRssiValue>:
 *  \retval RADIO_WRONG_STATE The radio transceiver is not in RX_ON or BUSY_RX.
 *
 *  \ingroup radio
 */
radio_status_t radioGetRssiValue(u8 *rssi)
{
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	ec 01       	movw	r28, r24
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    271e:	81 e4       	ldi	r24, 0x41	; 65
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	6f e1       	ldi	r22, 0x1F	; 31
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>

   u8 current_state = radioGetTrxState();
   radio_status_t retval = RADIO_WRONG_STATE;

   /*The RSSI measurement should only be done in RX_ON or BUSY_RX.*/
   if ((current_state == RX_ON) ||
    272a:	86 30       	cpi	r24, 0x06	; 6
    272c:	21 f0       	breq	.+8      	; 0x2736 <radioGetRssiValue+0x1e>
    272e:	81 30       	cpi	r24, 0x01	; 1
    2730:	11 f0       	breq	.+4      	; 0x2736 <radioGetRssiValue+0x1e>
    2732:	84 e4       	ldi	r24, 0x44	; 68
    2734:	08 c0       	rjmp	.+16     	; 0x2746 <radioGetRssiValue+0x2e>
         (current_state == BUSY_RX))
   {
      *rssi = hal_subregister_read(SR_RSSI);
    2736:	86 e4       	ldi	r24, 0x46	; 70
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	6f e1       	ldi	r22, 0x1F	; 31
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
    2742:	88 83       	st	Y, r24
    2744:	80 e4       	ldi	r24, 0x40	; 64
      retval = RADIO_SUCCESS;
   }

   return retval;
}
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <radioGetOperatingChannel>:
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    274c:	88 e4       	ldi	r24, 0x48	; 72
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	6f e1       	ldi	r22, 0x1F	; 31
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
}
    2758:	08 95       	ret

0000275a <radioSetOperatingChannel>:
 *  \retval RADIO_TIMED_OUT The PLL did not lock within the specified time.
 *
 *  \ingroup radio
 */
radio_status_t radioSetOperatingChannel(u8 channel)
{
    275a:	1f 93       	push	r17
    275c:	18 2f       	mov	r17, r24
      hal_register_write(RG_CC_CTRL_0, val);
      return RADIO_SUCCESS;
   }
   else // Not china mode
   {
      if (((s8)channel < MIN_CHANNEL && MIN_CHANNEL) ||
    275e:	8b 50       	subi	r24, 0x0B	; 11
    2760:	80 31       	cpi	r24, 0x10	; 16
    2762:	10 f0       	brcs	.+4      	; 0x2768 <radioSetOperatingChannel+0xe>
    2764:	82 e4       	ldi	r24, 0x42	; 66
    2766:	2e c0       	rjmp	.+92     	; 0x27c4 <radioSetOperatingChannel+0x6a>
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    2768:	80 91 39 01 	lds	r24, 0x0139
    276c:	81 ff       	sbrs	r24, 1
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <radioSetOperatingChannel+0x1a>
    2770:	84 e4       	ldi	r24, 0x44	; 68
    2772:	28 c0       	rjmp	.+80     	; 0x27c4 <radioSetOperatingChannel+0x6a>
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    2774:	88 e4       	ldi	r24, 0x48	; 72
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	6f e1       	ldi	r22, 0x1F	; 31
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
         return RADIO_INVALID_ARGUMENT;

      if (isSleeping() == true)
         return RADIO_WRONG_STATE;

      if (radioGetOperatingChannel() == channel)
    2780:	81 17       	cp	r24, r17
    2782:	f9 f0       	breq	.+62     	; 0x27c2 <radioSetOperatingChannel+0x68>
         return RADIO_SUCCESS;

      /*Set new operating channel.*/
      hal_subregister_write(SR_CHANNEL, channel);
    2784:	88 e4       	ldi	r24, 0x48	; 72
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	6f e1       	ldi	r22, 0x1F	; 31
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	21 2f       	mov	r18, r17
    278e:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    2792:	81 e4       	ldi	r24, 0x41	; 65
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	6f e1       	ldi	r22, 0x1F	; 31
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>

      //Read current state and wait for the PLL_LOCK interrupt if the
      //radio transceiver is in either RX_ON or PLL_ON.
      u8 trx_state = radioGetTrxState();

      if ((trx_state == RX_ON) ||
    279e:	86 30       	cpi	r24, 0x06	; 6
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <radioSetOperatingChannel+0x4c>
    27a2:	89 30       	cpi	r24, 0x09	; 9
    27a4:	21 f4       	brne	.+8      	; 0x27ae <radioSetOperatingChannel+0x54>
    27a6:	8d e2       	ldi	r24, 0x2D	; 45
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <radioSetOperatingChannel+0x50>
 *
 *  \ingroup radio
 */
u8 radioGetOperatingChannel(void)
{
   return hal_subregister_read(SR_CHANNEL);
    27ae:	88 e4       	ldi	r24, 0x48	; 72
    27b0:	91 e0       	ldi	r25, 0x01	; 1
    27b2:	6f e1       	ldi	r22, 0x1F	; 31
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
         delay_us(TIME_PLL_LOCK);

      radio_status_t channel_set_status = RADIO_TIMED_OUT;

      //Check that the channel was set properly.
      if (radioGetOperatingChannel() == channel)
    27ba:	81 17       	cp	r24, r17
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <radioSetOperatingChannel+0x68>
    27be:	83 e4       	ldi	r24, 0x43	; 67
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <radioSetOperatingChannel+0x6a>
    27c2:	80 e4       	ldi	r24, 0x40	; 64
         channel_set_status = RADIO_SUCCESS;

      return channel_set_status;
   }

}
    27c4:	1f 91       	pop	r17
    27c6:	08 95       	ret

000027c8 <radioRxStartEvent>:
   @param frame_length The length of the frame that is being received.
 */
void radioRxStartEvent(u8 const frame_length)
{
   // save away RSSI
   rssi_val =  hal_subregister_read( SR_RSSI );
    27c8:	86 e4       	ldi	r24, 0x46	; 70
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	6f e1       	ldi	r22, 0x1F	; 31
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
    27d4:	80 93 ae 0c 	sts	0x0CAE, r24

   //UART_PRINT("  -> frame length: %d and RSSI: %d\r\n", frame_length, rssi_val);

   macConfig.busy = false;
    27d8:	10 92 68 18 	sts	0x1868, r1
}
    27dc:	08 95       	ret

000027de <radioGetPartnum>:
 */
u8 radioGetPartnum(void)
{
   static u8 radio_part_number;

   if (!radio_part_number)
    27de:	80 91 ad 0c 	lds	r24, 0x0CAD
    27e2:	88 23       	and	r24, r24
    27e4:	31 f4       	brne	.+12     	; 0x27f2 <radioGetPartnum+0x14>
      radio_part_number = hal_register_read(RG_PART_NUM);
    27e6:	8c e5       	ldi	r24, 0x5C	; 92
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 11 0b 	call	0x1622	; 0x1622 <hal_register_read>
    27ee:	80 93 ad 0c 	sts	0x0CAD, r24
   return radio_part_number;
}
    27f2:	80 91 ad 0c 	lds	r24, 0x0CAD
    27f6:	08 95       	ret

000027f8 <radioSetTrxState>:
 *                                  within resonable time.
 *
 *  \ingroup radio
 */
radio_status_t radioSetTrxState(u8 new_state)
{
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	18 2f       	mov	r17, r24
   u8 original_state;

   /*Check function paramter and current state of the radio transceiver.*/
   if (!((new_state == TRX_OFF)    ||
    27fe:	88 30       	cpi	r24, 0x08	; 8
    2800:	51 f0       	breq	.+20     	; 0x2816 <radioSetTrxState+0x1e>
    2802:	86 30       	cpi	r24, 0x06	; 6
    2804:	41 f0       	breq	.+16     	; 0x2816 <radioSetTrxState+0x1e>
    2806:	89 30       	cpi	r24, 0x09	; 9
    2808:	31 f0       	breq	.+12     	; 0x2816 <radioSetTrxState+0x1e>
    280a:	86 31       	cpi	r24, 0x16	; 22
    280c:	21 f0       	breq	.+8      	; 0x2816 <radioSetTrxState+0x1e>
    280e:	89 31       	cpi	r24, 0x19	; 25
    2810:	11 f0       	breq	.+4      	; 0x2816 <radioSetTrxState+0x1e>
    2812:	82 e4       	ldi	r24, 0x42	; 66
    2814:	61 c0       	rjmp	.+194    	; 0x28d8 <radioSetTrxState+0xe0>
{
   bool sleeping = false;

   //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
   //the SLP_TR pin is high.
   if (hal_get_slptr() != 0)
    2816:	80 91 39 01 	lds	r24, 0x0139
    281a:	81 ff       	sbrs	r24, 1
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <radioSetTrxState+0x2a>
    281e:	84 e4       	ldi	r24, 0x44	; 68
    2820:	5b c0       	rjmp	.+182    	; 0x28d8 <radioSetTrxState+0xe0>

   if (isSleeping() == true)
      return RADIO_WRONG_STATE;

   // Wait for radio to finish previous operation
   while (radioIsBusy())
    2822:	0e 94 3e 13 	call	0x267c	; 0x267c <radioIsBusy>
    2826:	88 23       	and	r24, r24
    2828:	e1 f7       	brne	.-8      	; 0x2822 <radioSetTrxState+0x2a>
      ;

   // For RF230, don't use auto mode while scanning, because no RX_START
   // will be issued.
   if (radioGetPartnum() == RF230 &&
    282a:	0e 94 ef 13 	call	0x27de	; 0x27de <radioGetPartnum>
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	39 f4       	brne	.+14     	; 0x2840 <radioSetTrxState+0x48>
    2832:	0e 94 19 11 	call	0x2232	; 0x2232 <macIsScanning>
    2836:	88 23       	and	r24, r24
    2838:	19 f0       	breq	.+6      	; 0x2840 <radioSetTrxState+0x48>
    283a:	16 31       	cpi	r17, 0x16	; 22
    283c:	09 f4       	brne	.+2      	; 0x2840 <radioSetTrxState+0x48>
    283e:	16 e0       	ldi	r17, 0x06	; 6
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    2840:	81 e4       	ldi	r24, 0x41	; 65
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	6f e1       	ldi	r22, 0x1F	; 31
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
    284c:	08 2f       	mov	r16, r24
         new_state == RX_AACK_ON)
      new_state = RX_ON;

   original_state = radioGetTrxState();

   if (new_state == original_state)
    284e:	18 17       	cp	r17, r24
    2850:	09 f4       	brne	.+2      	; 0x2854 <radioSetTrxState+0x5c>
    2852:	41 c0       	rjmp	.+130    	; 0x28d6 <radioSetTrxState+0xde>
   //At this point it is clear that the requested new_state is:
   //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.

   //The radio transceiver can be in one of the following states:
   //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON, TX_ARET_ON.
   if(new_state == TRX_OFF)
    2854:	18 30       	cpi	r17, 0x08	; 8
    2856:	19 f4       	brne	.+6      	; 0x285e <radioSetTrxState+0x66>
      radioResetStateMachine(); //Go to TRX_OFF from any state.
    2858:	0e 94 0f 13 	call	0x261e	; 0x261e <radioResetStateMachine>
    285c:	32 c0       	rjmp	.+100    	; 0x28c2 <radioSetTrxState+0xca>
   else
   {
      //It is not allowed to go from RX_AACK_ON or TX_AACK_ON and directly to
      //TX_AACK_ON or RX_AACK_ON respectively. Need to go via RX_ON or PLL_ON.
      if ((new_state == TX_ARET_ON) &&
    285e:	19 31       	cpi	r17, 0x19	; 25
    2860:	61 f4       	brne	.+24     	; 0x287a <radioSetTrxState+0x82>
    2862:	89 30       	cpi	r24, 0x09	; 9
    2864:	f1 f0       	breq	.+60     	; 0x28a2 <radioSetTrxState+0xaa>
            (original_state != PLL_ON))
      {
         //First do intermediate state transition to PLL_ON, then to TX_ARET_ON.
         //The final state transition to TX_ARET_ON is handled after the if-else if.
         hal_subregister_write(SR_TRX_CMD, PLL_ON);
    2866:	82 e4       	ldi	r24, 0x42	; 66
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	6f e1       	ldi	r22, 0x1F	; 31
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	29 e0       	ldi	r18, 0x09	; 9
    2870:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
#ifdef __AVR__
         if (original_state == RX_AACK_ON)
    2874:	06 31       	cpi	r16, 0x16	; 22
    2876:	89 f4       	brne	.+34     	; 0x289a <radioSetTrxState+0xa2>
    2878:	0d c0       	rjmp	.+26     	; 0x2894 <radioSetTrxState+0x9c>
            delay_us(TIME_STATE_TRANSITION_PLL_ACTIVE);
         else
            delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
#endif
      }
      else if ((new_state == RX_AACK_ON) &&
    287a:	16 31       	cpi	r17, 0x16	; 22
    287c:	91 f4       	brne	.+36     	; 0x28a2 <radioSetTrxState+0xaa>
    287e:	89 30       	cpi	r24, 0x09	; 9
    2880:	81 f0       	breq	.+32     	; 0x28a2 <radioSetTrxState+0xaa>
            (original_state != PLL_ON))
      {
         //First do intermediate state transition to PLL_ON, then to RX_AACK_ON.
         hal_subregister_write(SR_TRX_CMD, PLL_ON);
    2882:	82 e4       	ldi	r24, 0x42	; 66
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	6f e1       	ldi	r22, 0x1F	; 31
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	29 e0       	ldi	r18, 0x09	; 9
    288c:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
#ifdef __AVR__
         if (original_state == TX_ARET_ON)
    2890:	09 31       	cpi	r16, 0x19	; 25
    2892:	19 f4       	brne	.+6      	; 0x289a <radioSetTrxState+0xa2>
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 c0       	rjmp	.+4      	; 0x289e <radioSetTrxState+0xa6>
    289a:	89 e6       	ldi	r24, 0x69	; 105
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <radioSetTrxState+0xa6>
            delay_us(TIME_TRX_OFF_TO_PLL_ACTIVE);
#endif
      }

      //Any other state transition can be done directly.
      hal_subregister_write(SR_TRX_CMD, new_state);
    28a2:	82 e4       	ldi	r24, 0x42	; 66
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	6f e1       	ldi	r22, 0x1F	; 31
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	21 2f       	mov	r18, r17
    28ac:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>

      //When the PLL is active most states can be reached in 1us. However, from
      //TRX_OFF the PLL needs time to activate.
      if (original_state == TRX_OFF)
    28b0:	08 30       	cpi	r16, 0x08	; 8
    28b2:	19 f4       	brne	.+6      	; 0x28ba <radioSetTrxState+0xc2>
    28b4:	89 e6       	ldi	r24, 0x69	; 105
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <radioSetTrxState+0xc6>
    28ba:	83 e0       	ldi	r24, 0x03	; 3
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <radioSetTrxState+0xc6>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    28c2:	81 e4       	ldi	r24, 0x41	; 65
    28c4:	91 e0       	ldi	r25, 0x01	; 1
    28c6:	6f e1       	ldi	r22, 0x1F	; 31
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
   } // end: if(new_state == TRX_OFF) ...

   /*Verify state transition.*/
   radio_status_t set_state_status = RADIO_TIMED_OUT;

   if (radioGetTrxState() == new_state)
    28ce:	81 17       	cp	r24, r17
    28d0:	11 f0       	breq	.+4      	; 0x28d6 <radioSetTrxState+0xde>
    28d2:	83 e4       	ldi	r24, 0x43	; 67
    28d4:	01 c0       	rjmp	.+2      	; 0x28d8 <radioSetTrxState+0xe0>
    28d6:	80 e4       	ldi	r24, 0x40	; 64
      set_state_status = RADIO_SUCCESS;

   return set_state_status;
}
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	08 95       	ret

000028de <radioSendData>:
 *                          detected this error message will be returned.
 *
 *  \ingroup radio
 */
radio_status_t radioSendData(u8 data_length, u8 *data)
{
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	18 2f       	mov	r17, r24
    28e6:	eb 01       	movw	r28, r22
   //UART_PRINT("radioSendData()\r\n");
   // Check function parameters and current state.
   if (data_length > RF2xx_MAX_TX_FRAME_LENGTH)
    28e8:	87 ff       	sbrs	r24, 7
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <radioSendData+0x12>
    28ec:	82 e4       	ldi	r24, 0x42	; 66
    28ee:	1b c0       	rjmp	.+54     	; 0x2926 <radioSendData+0x48>
      return RADIO_INVALID_ARGUMENT;

   // Wait for radio to get unbusy
   while (radioIsBusy())
    28f0:	0e 94 3e 13 	call	0x267c	; 0x267c <radioIsBusy>
    28f4:	88 23       	and	r24, r24
    28f6:	e1 f7       	brne	.-8      	; 0x28f0 <radioSendData+0x12>
      ;

   // Put radio in TX_ARET_ON state
   do
   {
      radioSetTrxState(TX_ARET_ON);
    28f8:	89 e1       	ldi	r24, 0x19	; 25
    28fa:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <radioSetTrxState>
 *
 *  \ingroup radio
 */
u8 radioGetTrxState(void)
{
   return hal_subregister_read(SR_TRX_STATUS);
    28fe:	81 e4       	ldi	r24, 0x41	; 65
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	6f e1       	ldi	r22, 0x1F	; 31
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>

   // Put radio in TX_ARET_ON state
   do
   {
      radioSetTrxState(TX_ARET_ON);
   } while (radioGetTrxState() != TX_ARET_ON);
    290a:	89 31       	cpi	r24, 0x19	; 25
    290c:	a9 f7       	brne	.-22     	; 0x28f8 <radioSendData+0x1a>

   // save last destination address, which is needed
   // to process a send failure later
   macConfig.lastDestAddr = ((ftData*)data)->destAddr;
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	90 93 67 18 	sts	0x1867, r25
    2916:	80 93 66 18 	sts	0x1866, r24

   /*Do frame transmission.*/
   hal_frame_write(data, data_length+2); //Then write data to the frame buffer.
    291a:	1e 5f       	subi	r17, 0xFE	; 254
    291c:	ce 01       	movw	r24, r28
    291e:	61 2f       	mov	r22, r17
    2920:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <hal_frame_write>
    2924:	80 e4       	ldi	r24, 0x40	; 64

   return RADIO_SUCCESS;
}
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	08 95       	ret

0000292e <radioRxEndEvent>:

   // Put radio back into receive mode.
   radioSetTrxState(RX_AACK_ON);
}
void radioRxEndEvent(void)
{
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	00 d0       	rcall	.+0      	; 0x2938 <radioRxEndEvent+0xa>
    2938:	00 d0       	rcall	.+0      	; 0x293a <radioRxEndEvent+0xc>
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
   //TODO read ED level - by Dresden Elektronik
   ed_val = hal_register_read(RG_PHY_ED_LEVEL);
    2940:	87 e4       	ldi	r24, 0x47	; 71
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 11 0b 	call	0x1622	; 0x1622 <hal_register_read>
    2948:	80 93 af 0c 	sts	0x0CAF, r24

   /* radio has received frame, store it away */
   uint8_t* pFrame = hal_frame_read();
    294c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <hal_frame_read>
    2950:	8c 01       	movw	r16, r24

   if(pFrame != NULL)
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	09 f4       	brne	.+2      	; 0x2958 <radioRxEndEvent+0x2a>
    2956:	7b c0       	rjmp	.+246    	; 0x2a4e <radioRxEndEvent+0x120>
   {
      lastLQI = normalize_lqi(((rx_frame_t*)pFrame)->lqi, ed_val);
    2958:	00 58       	subi	r16, 0x80	; 128
    295a:	1f 4f       	sbci	r17, 0xFF	; 255
    295c:	f8 01       	movw	r30, r16
    295e:	90 81       	ld	r25, Z
    2960:	00 58       	subi	r16, 0x80	; 128
    2962:	10 40       	sbci	r17, 0x00	; 0
    2964:	20 91 af 0c 	lds	r18, 0x0CAF
static inline uint8_t normalize_lqi(uint8_t lqi, uint8_t ed_value)
{
    uint16_t link_quality;
    uint8_t lqi_star;

    if (ed_value > ED_MAX)
    2968:	25 35       	cpi	r18, 0x55	; 85
    296a:	10 f0       	brcs	.+4      	; 0x2970 <radioRxEndEvent+0x42>
    296c:	24 e5       	ldi	r18, 0x54	; 84
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <radioRxEndEvent+0x48>
    {
        ed_value = ED_MAX;
    }
    else if (ed_value == 0)
    2970:	22 23       	and	r18, r18
    2972:	09 f4       	brne	.+2      	; 0x2976 <radioRxEndEvent+0x48>
    2974:	21 e0       	ldi	r18, 0x01	; 1
    {
        ed_value = 1;
    }

    lqi_star = lqi >> 6;
    link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 / (ED_MAX * LQI_MAX);
    2976:	92 95       	swap	r25
    2978:	96 95       	lsr	r25
    297a:	96 95       	lsr	r25
    297c:	93 70       	andi	r25, 0x03	; 3
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	98 9f       	mul	r25, r24
    2982:	c0 01       	movw	r24, r0
    2984:	11 24       	eor	r1, r1
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ac 01       	movw	r20, r24
    298a:	42 9f       	mul	r20, r18
    298c:	c0 01       	movw	r24, r0
    298e:	43 9f       	mul	r20, r19
    2990:	90 0d       	add	r25, r0
    2992:	52 9f       	mul	r21, r18
    2994:	90 0d       	add	r25, r0
    2996:	11 24       	eor	r1, r1
    2998:	6c ef       	ldi	r22, 0xFC	; 252
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__udivmodhi4>

    if (link_quality > 255)
    29a0:	6f 3f       	cpi	r22, 0xFF	; 255
    29a2:	71 05       	cpc	r23, r1
    29a4:	11 f0       	breq	.+4      	; 0x29aa <radioRxEndEvent+0x7c>
    29a6:	08 f0       	brcs	.+2      	; 0x29aa <radioRxEndEvent+0x7c>
    29a8:	6f ef       	ldi	r22, 0xFF	; 255
   /* radio has received frame, store it away */
   uint8_t* pFrame = hal_frame_read();

   if(pFrame != NULL)
   {
      lastLQI = normalize_lqi(((rx_frame_t*)pFrame)->lqi, ed_val);
    29aa:	60 93 b0 0c 	sts	0x0CB0, r22
      ((rx_frame_t*)pFrame)->lqi = lastLQI;
    29ae:	00 58       	subi	r16, 0x80	; 128
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	f8 01       	movw	r30, r16
    29b4:	60 83       	st	Z, r22
    29b6:	00 58       	subi	r16, 0x80	; 128
    29b8:	10 40       	sbci	r17, 0x00	; 0
#if (NODETYPE != ENDDEVICE)
      check_and_save_quality_values(pFrame);
#endif

      event_object_t event;
      event.event = 0;
    29ba:	19 82       	std	Y+1, r1	; 0x01
      event.data = 0;
    29bc:	1b 82       	std	Y+3, r1	; 0x03
    29be:	1a 82       	std	Y+2, r1	; 0x02
      event.callback = 0;
    29c0:	1d 82       	std	Y+5, r1	; 0x05
    29c2:	1c 82       	std	Y+4, r1	; 0x04

      uint8_t *data_frame = ((rx_frame_t*)pFrame)->data;

      // Figure out which kind of frame we have
      u16 fcf = data_frame[0] + data_frame[1]*0x100;
    29c4:	f8 01       	movw	r30, r16
    29c6:	92 81       	ldd	r25, Z+2	; 0x02
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	21 81       	ldd	r18, Z+1	; 0x01
    29cc:	ac 01       	movw	r20, r24
    29ce:	42 0f       	add	r20, r18
    29d0:	51 1d       	adc	r21, r1
    29d2:	9a 01       	movw	r18, r20

      if (data_frame[5] == 0xff && // Broadcast src addr
    29d4:	86 81       	ldd	r24, Z+6	; 0x06
    29d6:	8f 3f       	cpi	r24, 0xFF	; 255
    29d8:	31 f4       	brne	.+12     	; 0x29e6 <radioRxEndEvent+0xb8>
    29da:	87 81       	ldd	r24, Z+7	; 0x07
    29dc:	8f 3f       	cpi	r24, 0xFF	; 255
    29de:	19 f4       	brne	.+6      	; 0x29e6 <radioRxEndEvent+0xb8>
    29e0:	84 2f       	mov	r24, r20
    29e2:	80 7f       	andi	r24, 0xF0	; 240
    29e4:	61 f5       	brne	.+88     	; 0x2a3e <radioRxEndEvent+0x110>
         // Don't bother processing this broadcast frame
         return;
      }

      // Look at fcf
      switch (fcf)
    29e6:	58 e8       	ldi	r21, 0x88	; 136
    29e8:	21 36       	cpi	r18, 0x61	; 97
    29ea:	35 07       	cpc	r19, r21
    29ec:	b1 f0       	breq	.+44     	; 0x2a1a <radioRxEndEvent+0xec>
    29ee:	88 e8       	ldi	r24, 0x88	; 136
    29f0:	22 36       	cpi	r18, 0x62	; 98
    29f2:	38 07       	cpc	r19, r24
    29f4:	20 f4       	brcc	.+8      	; 0x29fe <radioRxEndEvent+0xd0>
    29f6:	20 50       	subi	r18, 0x00	; 0
    29f8:	30 48       	sbci	r19, 0x80	; 128
    29fa:	f1 f4       	brne	.+60     	; 0x2a38 <radioRxEndEvent+0x10a>
    29fc:	08 c0       	rjmp	.+16     	; 0x2a0e <radioRxEndEvent+0xe0>
    29fe:	f8 e8       	ldi	r31, 0x88	; 136
    2a00:	23 36       	cpi	r18, 0x63	; 99
    2a02:	3f 07       	cpc	r19, r31
    2a04:	61 f0       	breq	.+24     	; 0x2a1e <radioRxEndEvent+0xf0>
    2a06:	23 56       	subi	r18, 0x63	; 99
    2a08:	3c 48       	sbci	r19, 0x8C	; 140
    2a0a:	b1 f4       	brne	.+44     	; 0x2a38 <radioRxEndEvent+0x10a>
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <radioRxEndEvent+0xfe>
         }
         break;
      case FCF_BEACON:
         // Beacon
         // Only report beacon frames if we're scanning
         if (macIsScanning())
    2a0e:	0e 94 19 11 	call	0x2232	; 0x2232 <macIsScanning>
    2a12:	88 23       	and	r24, r24
    2a14:	89 f0       	breq	.+34     	; 0x2a38 <radioRxEndEvent+0x10a>
         {
            event.event = MAC_EVENT_SCAN;
    2a16:	84 e1       	ldi	r24, 0x14	; 20
    2a18:	0c c0       	rjmp	.+24     	; 0x2a32 <radioRxEndEvent+0x104>
            event.data = pFrame;
         }
         break;
      case FCF_DATA:
         // Data
         event.event = MAC_EVENT_RX;
    2a1a:	80 e1       	ldi	r24, 0x10	; 16
    2a1c:	0a c0       	rjmp	.+20     	; 0x2a32 <radioRxEndEvent+0x104>
            event.data = pFrame;
         }
         break;
      case FCF_MAC_CMD:
         // MAC command frames
         switch (((ftRouting*)(((rx_frame_t*)pFrame)->data))->cmd)
    2a1e:	f8 01       	movw	r30, r16
    2a20:	82 85       	ldd	r24, Z+10	; 0x0a
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	19 f0       	breq	.+6      	; 0x2a2c <radioRxEndEvent+0xfe>
    2a26:	8b 3b       	cpi	r24, 0xBB	; 187
    2a28:	39 f4       	brne	.+14     	; 0x2a38 <radioRxEndEvent+0x10a>
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <radioRxEndEvent+0x102>
            break;
         case 2:
            // Association response
            if (NODETYPE != COORD)
            {
               event.event = MAC_EVENT_ASSOCIATION_RESPONSE;
    2a2c:	88 e1       	ldi	r24, 0x18	; 24
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <radioRxEndEvent+0x104>
            break;
         case ROUTING_PACKET:
            // Routing packet
            if (NODETYPE != COORD)
            {
               event.event = MAC_EVENT_ROUTE;
    2a30:	89 e1       	ldi	r24, 0x19	; 25
    2a32:	89 83       	std	Y+1, r24	; 0x01
               event.data = pFrame;
    2a34:	1b 83       	std	Y+3, r17	; 0x03
    2a36:	0a 83       	std	Y+2, r16	; 0x02
            break;
         }
         default:
            break;
      }
      if (event.event == 0)
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	88 23       	and	r24, r24
    2a3c:	21 f4       	brne	.+8      	; 0x2a46 <radioRxEndEvent+0x118>
      {
         bmm_buffer_free(pFrame); // free buffer
    2a3e:	c8 01       	movw	r24, r16
    2a40:	0e 94 55 22 	call	0x44aa	; 0x44aa <bmm_buffer_free>
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <radioRxEndEvent+0x120>
      }
      else
      {
         mac_put_event(&event);
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>
      }
   }
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <radioTrxEndEvent>:
}
#endif // SINGLE_CHIP

#ifdef SINGLE_CHIP
void radioTrxEndEvent(void)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <radioTrxEndEvent+0x6>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <radioTrxEndEvent+0x8>
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <radioTrxEndEvent+0xa>
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
   volatile u8 status;

   // Not busy any more
   macConfig.busy = false;
    2a70:	10 92 68 18 	sts	0x1868, r1

   // transmit mode, put end-of-transmit event in queue
   event_object_t event;
   event.event = 0;
    2a74:	1a 82       	std	Y+2, r1	; 0x02
   event.data = 0;
    2a76:	1c 82       	std	Y+4, r1	; 0x04
    2a78:	1b 82       	std	Y+3, r1	; 0x03

   status = hal_subregister_read(SR_TRAC_STATUS);
    2a7a:	82 e4       	ldi	r24, 0x42	; 66
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	60 ee       	ldi	r22, 0xE0	; 224
    2a80:	45 e0       	ldi	r20, 0x05	; 5
    2a82:	0e 94 17 0b 	call	0x162e	; 0x162e <hal_subregister_read>
    2a86:	89 83       	std	Y+1, r24	; 0x01

   switch(status)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	39 f0       	breq	.+14     	; 0x2a9c <radioTrxEndEvent+0x3a>
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	28 f0       	brcs	.+10     	; 0x2a9c <radioTrxEndEvent+0x3a>
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	29 f0       	breq	.+10     	; 0x2aa0 <radioTrxEndEvent+0x3e>
    2a96:	85 30       	cpi	r24, 0x05	; 5
    2a98:	39 f4       	brne	.+14     	; 0x2aa8 <radioTrxEndEvent+0x46>
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <radioTrxEndEvent+0x42>
      //UART_PRINT("TRX END Trac Success\r\n");
      event.event = MAC_EVENT_ACK;
      break;
   case TRAC_SUCCESS_DATA_PENDING:
      //UART_PRINT("TRX END Trac Success Data Pending\r\n");
      event.event = MAC_EVENT_ACK;
    2a9c:	81 e1       	ldi	r24, 0x11	; 17
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <radioTrxEndEvent+0x44>
      break;
   case TRAC_CHANNEL_ACCESS_FAILURE:
      //UART_PRINT("TRX END Trac Channel Access Failure\r\n");
      event.event = MAC_EVENT_ACCESS;
    2aa0:	83 e1       	ldi	r24, 0x13	; 19
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <radioTrxEndEvent+0x44>
      break;
   case TRAC_NO_ACK:
      //UART_PRINT("TRX END Trac No Ack\r\n");
      event.event = MAC_EVENT_NACK;
    2aa4:	82 e1       	ldi	r24, 0x12	; 18
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
      break;
   default:
      break;
   }

   if (event.event)
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	88 23       	and	r24, r24
    2aac:	21 f0       	breq	.+8      	; 0x2ab6 <radioTrxEndEvent+0x54>
      mac_put_event(&event);
    2aae:	ce 01       	movw	r24, r28
    2ab0:	02 96       	adiw	r24, 0x02	; 2
    2ab2:	0e 94 35 10 	call	0x206a	; 0x206a <mac_put_event>

   // Put radio back into receive mode.
   radioSetTrxState(RX_AACK_ON);
    2ab6:	86 e1       	ldi	r24, 0x16	; 22
    2ab8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <radioSetTrxState>
}
    2abc:	26 96       	adiw	r28, 0x06	; 6
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <radioInit>:

   @retval RADIO_TIMED_OUT The radio transceiver was not able to
   initialize and enter TRX_OFF state within the specified time.
 */
radio_status_t radioInit(bool cal_rc_osc)
{
    2ace:	ff 92       	push	r15
    2ad0:	0f 93       	push	r16
    2ad2:	1f 93       	push	r17
    2ad4:	f8 2e       	mov	r15, r24
    2ad6:	0d ef       	ldi	r16, 0xFD	; 253
    2ad8:	13 e0       	ldi	r17, 0x03	; 3
    2ada:	c8 01       	movw	r24, r16
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <radioInit+0xe>
   radio_status_t init_status = RADIO_SUCCESS;

   delay_us(TIME_TO_ENTER_P_ON);

   //Initialize Hardware Abstraction Layer.
   hal_init();
    2ae0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <hal_init>

   radioResetTrx(); //Do HW reset of radio transeiver.
    2ae4:	0e 94 b7 12 	call	0x256e	; 0x256e <radioResetTrx>

   //Force transition to TRX_OFF.
   hal_subregister_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
    2ae8:	82 e4       	ldi	r24, 0x42	; 66
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	6f e1       	ldi	r22, 0x1F	; 31
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	23 e0       	ldi	r18, 0x03	; 3
    2af2:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>
    2af6:	c8 01       	movw	r24, r16
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <radioInit+0x2a>

   delay_us(TIME_P_ON_TO_TRX_OFF); //Wait for the transition to be complete.

   hal_register_write(RG_IRQ_MASK, SUPPORTED_INTERRUPT_MASK);
    2afc:	8e e4       	ldi	r24, 0x4E	; 78
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	6c e5       	ldi	r22, 0x5C	; 92
    2b02:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>

   // Set the CCA ED threshold really low
   hal_subregister_write(SR_CCA_ED_THRES, DEMO ? 2 : 7);
    2b06:	89 e4       	ldi	r24, 0x49	; 73
    2b08:	91 e0       	ldi	r25, 0x01	; 1
    2b0a:	6f e0       	ldi	r22, 0x0F	; 15
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	27 e0       	ldi	r18, 0x07	; 7
    2b10:	0e 94 21 0b 	call	0x1642	; 0x1642 <hal_subregister_write>

   // calibrate oscillator
   if (cal_rc_osc && SERIAL && (PLATFORM != RAVENUSB))
    2b14:	ff 20       	and	r15, r15
    2b16:	11 f0       	breq	.+4      	; 0x2b1c <radioInit+0x4e>
   {
      calibrate_rc_osc();
    2b18:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <calibrate_rc_osc>
   }
   return init_status;
}
    2b1c:	80 e4       	ldi	r24, 0x40	; 64
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	08 95       	ret

00002b26 <ledoff1>:

// These LED functions are used to provide address callbacks for macSetAlarm.
// Cannot use defines directly in callbacks.
void ledoff1(void)
{
   LED_OFF(1);
    2b26:	71 9a       	sbi	0x0e, 1	; 14
    2b28:	69 9a       	sbi	0x0d, 1	; 13
}
    2b2a:	08 95       	ret

00002b2c <ledoff2>:

void ledoff2(void)
{
   LED_OFF(2);
    2b2c:	72 9a       	sbi	0x0e, 2	; 14
    2b2e:	6a 9a       	sbi	0x0d, 2	; 13
}
    2b30:	08 95       	ret

00002b32 <ledoff3>:

void ledoff3(void)
{
   LED_OFF(3);
    2b32:	73 9a       	sbi	0x0e, 3	; 14
    2b34:	6b 9a       	sbi	0x0d, 3	; 13
}
    2b36:	08 95       	ret

00002b38 <appSixlowpanPingResponse>:
void appSixlowpanPingResponse(void)
{
   if (PLATFORM == RAVEN)
      // Send the 3290 a frame to show that we got a ping response.
      serial_send_frame(REPORT_PING_BEEP, 0, NULL);
}
    2b38:	08 95       	ret

00002b3a <appPacketSendSucceed>:
   // (could also decrement failCount)

   if (NODETYPE != COORD)
   {
      // figure out which way we were sending when the failure occurred
      if (macConfig.lastDestAddr == macConfig.parentShortAddress)
    2b3a:	20 91 66 18 	lds	r18, 0x1866
    2b3e:	30 91 67 18 	lds	r19, 0x1867
    2b42:	80 91 60 18 	lds	r24, 0x1860
    2b46:	90 91 61 18 	lds	r25, 0x1861
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	11 f4       	brne	.+4      	; 0x2b54 <appPacketSendSucceed+0x1a>
         failCount = 0;
    2b50:	10 92 b6 0c 	sts	0x0CB6, r1
    2b54:	08 95       	ret

00002b56 <appPacketSendAccessFail>:
void appPacketSendAccessFail(void)
{
   // Tell sensor app
   if (APP == SENSOR)
      sensorPacketSendFailed();
}
    2b56:	08 95       	ret

00002b58 <rf2xx_reg_dump>:
//      }
//
//      debugMsgStr("\r\n");
//   }
//#endif
}
    2b58:	08 95       	ret

00002b5a <appDataIndication>:
                debugMsgStr((char *)(frame->payload));
            }
    }
    */

}
    2b5a:	08 95       	ret

00002b5c <appNodeAssociated>:
   @param shortAddress The short address assigned to the new node.  The
   MAC stores this address, so the application should not have to.
 */
void appNodeAssociated(u16 shortAddress)
{
}
    2b5c:	08 95       	ret

00002b5e <appClearChanFound>:

      if (IPV6LOWPAN == 1)
         //Start uIP stack with 802.15.4 interface
         tuip_init_802154(macConfig.panId, macConfig.shortAddress);
   }
}
    2b5e:	08 95       	ret

00002b60 <allNodesCB>:
    @brief This is used as the allNodes callback for repeating the function operation.
 */
void allNodesCB(void)
{
   allNodes(0,0);
}
    2b60:	08 95       	ret

00002b62 <allNodes>:
         macSetAlarm(nodeFound ? 250 : 1, allNodesCB);
      else
         // All done, cancel any furthur action
         function = value = 0;
   }
}
    2b62:	08 95       	ret

00002b64 <printPrompt>:
        fnDebugMsg("> ");
#endif // __AVR__
       */
   }
   else
      debugMsgStr("\r\nd=dump t=table i=info p=ping s=stream P=pause: ");
    2b64:	60 91 34 1f 	lds	r22, 0x1F34
    2b68:	70 91 35 1f 	lds	r23, 0x1F35
    2b6c:	82 e1       	ldi	r24, 0x12	; 18
    2b6e:	93 e0       	ldi	r25, 0x03	; 3
    2b70:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
}
    2b74:	08 95       	ret

00002b76 <appTask>:
   Sample application task loop function.  This function is meant to
   be called periodically.  It uses the serial port and button status
   for input, and implements a terminal interface for debugging use.
 */
void appTask(void)
{
    2b76:	9f 92       	push	r9
    2b78:	af 92       	push	r10
    2b7a:	bf 92       	push	r11
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	c6 56       	subi	r28, 0x66	; 102
    2b92:	d0 40       	sbci	r29, 0x00	; 0
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
   static u8 state=0;             // Used for button processing

   // perform periodical things.
   // check for button presses on RCB's
   if (BUTTON_PRESSED() ||
    2b9e:	6d 98       	cbi	0x0d, 5	; 13
    2ba0:	75 9a       	sbi	0x0e, 5	; 14
    2ba2:	65 9b       	sbis	0x0c, 5	; 12
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <appTask+0x38>
    2ba6:	80 91 36 0b 	lds	r24, 0x0B36
    2baa:	88 23       	and	r24, r24
    2bac:	c9 f0       	breq	.+50     	; 0x2be0 <appTask+0x6a>
         (simulateButton &&
               IPV6LOWPAN == 1 &&
               NODETYPE != COORD))
   {
      if (!state)
    2bae:	80 91 b4 0c 	lds	r24, 0x0CB4
    2bb2:	88 23       	and	r24, r24
    2bb4:	b9 f4       	brne	.+46     	; 0x2be4 <appTask+0x6e>
      {
         if (pingTimer)
    2bb6:	80 91 b5 0c 	lds	r24, 0x0CB5
    2bba:	88 23       	and	r24, r24
    2bbc:	29 f0       	breq	.+10     	; 0x2bc8 <appTask+0x52>
         {
            // stop pinging
            macTimerEnd(pingTimer);
    2bbe:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>
            pingTimer = 0;
    2bc2:	10 92 b5 0c 	sts	0x0CB5, r1
    2bc6:	08 c0       	rjmp	.+16     	; 0x2bd8 <appTask+0x62>
         }
         else
         {
            // ping the coordinator
            //debugMsgStr("\r\nPinging coord\r\n");
            UART_PRINT("Pinging coord\r\n");
    2bc8:	84 e4       	ldi	r24, 0x44	; 68
    2bca:	93 e0       	ldi	r25, 0x03	; 3
    2bcc:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
            if (IPV6LOWPAN == 1)
            {
               simulateButton = 0;
    2bd0:	10 92 36 0b 	sts	0x0B36, r1
               sixlowpan_button();
    2bd4:	0e 94 92 07 	call	0xf24	; 0xf24 <sixlowpan_button>
            }
            else
               doPing();
         }

         state = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 b4 0c 	sts	0x0CB4, r24
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <appTask+0x6e>
      }
   }
   else
      state = 0;
    2be0:	10 92 b4 0c 	sts	0x0CB4, r1

   if (DEBUG && SERIAL)
   {
      if (serial_ischar() &&
    2be4:	0e 94 a7 1c 	call	0x394e	; 0x394e <serial_ischar>
    2be8:	88 23       	and	r24, r24
    2bea:	09 f4       	brne	.+2      	; 0x2bee <appTask+0x78>
    2bec:	e8 c2       	rjmp	.+1488   	; 0x31be <appTask+0x648>
         u8 n;
         char ch;
         static u16 addr=0;
         char str[102];

         if (macConfig.busy)
    2bee:	80 91 68 18 	lds	r24, 0x1868
    2bf2:	88 23       	and	r24, r24
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <appTask+0x82>
    2bf6:	e3 c2       	rjmp	.+1478   	; 0x31be <appTask+0x648>
            // try again when mac is not busy
            return;

         ch = serial_getchar();
    2bf8:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <serial_getchar>
    2bfc:	18 2f       	mov	r17, r24
         // Quit stream mode on Ctrl-t
         if (ch == 0x14)
    2bfe:	84 31       	cpi	r24, 0x14	; 20
    2c00:	11 f4       	brne	.+4      	; 0x2c06 <appTask+0x90>
            streamMode = 0;
    2c02:	10 92 b1 0c 	sts	0x0CB1, r1
         // In stream mode, send all serial data over the air.
         if (streamMode)
    2c06:	80 91 b1 0c 	lds	r24, 0x0CB1
    2c0a:	88 23       	and	r24, r24
    2c0c:	01 f1       	breq	.+64     	; 0x2c4e <appTask+0xd8>
    2c0e:	5e 01       	movw	r10, r28
    2c10:	08 94       	sec
    2c12:	a1 1c       	adc	r10, r1
    2c14:	b1 1c       	adc	r11, r1
    2c16:	00 e0       	ldi	r16, 0x00	; 0
            // Send the chars out over the air to dest
            n = 0;
            for(;;)
            {
               // Build a string of chars waiting in the queue
               str[n++] = ch;
    2c18:	d5 01       	movw	r26, r10
    2c1a:	1c 93       	st	X, r17
    2c1c:	0f 5f       	subi	r16, 0xFF	; 255
               if (n >= 100)
    2c1e:	04 36       	cpi	r16, 0x64	; 100
    2c20:	59 f0       	breq	.+22     	; 0x2c38 <appTask+0xc2>
                  break;
               if (serial_ischar())
    2c22:	0e 94 a7 1c 	call	0x394e	; 0x394e <serial_ischar>
    2c26:	08 94       	sec
    2c28:	a1 1c       	adc	r10, r1
    2c2a:	b1 1c       	adc	r11, r1
    2c2c:	88 23       	and	r24, r24
    2c2e:	21 f0       	breq	.+8      	; 0x2c38 <appTask+0xc2>
                  ch = serial_getchar();
    2c30:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <serial_getchar>
    2c34:	18 2f       	mov	r17, r24
    2c36:	f0 cf       	rjmp	.-32     	; 0x2c18 <appTask+0xa2>
               else
                  break;
            }
            // And send it off to destination
            macDataRequest(addr, n, (u8*) str);
    2c38:	80 91 b2 0c 	lds	r24, 0x0CB2
    2c3c:	90 91 b3 0c 	lds	r25, 0x0CB3
    2c40:	60 2f       	mov	r22, r16
    2c42:	ae 01       	movw	r20, r28
    2c44:	4f 5f       	subi	r20, 0xFF	; 255
    2c46:	5f 4f       	sbci	r21, 0xFF	; 255
    2c48:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <macDataRequest>
    2c4c:	b8 c2       	rjmp	.+1392   	; 0x31be <appTask+0x648>
         }
         else
         {
            debugMsgCrLf();
    2c4e:	83 e5       	ldi	r24, 0x53	; 83
    2c50:	93 e0       	ldi	r25, 0x03	; 3
    2c52:	0e 94 9a 1c 	call	0x3934	; 0x3934 <serial_puts>
            switch (ch)
    2c56:	19 36       	cpi	r17, 0x69	; 105
    2c58:	a9 f0       	breq	.+42     	; 0x2c84 <appTask+0x10e>
    2c5a:	1a 36       	cpi	r17, 0x6A	; 106
    2c5c:	38 f4       	brcc	.+14     	; 0x2c6c <appTask+0xf6>
    2c5e:	10 35       	cpi	r17, 0x50	; 80
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <appTask+0xee>
    2c62:	9d c2       	rjmp	.+1338   	; 0x319e <appTask+0x628>
    2c64:	13 35       	cpi	r17, 0x53	; 83
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <appTask+0xf4>
    2c68:	a4 c2       	rjmp	.+1352   	; 0x31b2 <appTask+0x63c>
    2c6a:	7b c2       	rjmp	.+1270   	; 0x3162 <appTask+0x5ec>
    2c6c:	13 37       	cpi	r17, 0x73	; 115
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <appTask+0xfc>
    2c70:	5d c2       	rjmp	.+1210   	; 0x312c <appTask+0x5b6>
    2c72:	14 37       	cpi	r17, 0x74	; 116
    2c74:	21 f0       	breq	.+8      	; 0x2c7e <appTask+0x108>
    2c76:	10 37       	cpi	r17, 0x70	; 112
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <appTask+0x106>
    2c7a:	9b c2       	rjmp	.+1334   	; 0x31b2 <appTask+0x63c>
    2c7c:	3a c2       	rjmp	.+1140   	; 0x30f2 <appTask+0x57c>
               // reg dump
               rf2xx_reg_dump();
               break;
            case 't':
               // print table
               macPrintTree();
    2c7e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <macPrintTree>
    2c82:	97 c2       	rjmp	.+1326   	; 0x31b2 <appTask+0x63c>
               break;
            case 'i':
               // print info
               sprintf(str,"\r\nshort = %04X\r\nparent = %04X\r\nroute=%04X\r\n",
    2c84:	ed b7       	in	r30, 0x3d	; 61
    2c86:	fe b7       	in	r31, 0x3e	; 62
    2c88:	3a 97       	sbiw	r30, 0x0a	; 10
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	fe bf       	out	0x3e, r31	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	ed bf       	out	0x3d, r30	; 61
    2c94:	31 96       	adiw	r30, 0x01	; 1
    2c96:	6e 01       	movw	r12, r28
    2c98:	08 94       	sec
    2c9a:	c1 1c       	adc	r12, r1
    2c9c:	d1 1c       	adc	r13, r1
    2c9e:	ad b7       	in	r26, 0x3d	; 61
    2ca0:	be b7       	in	r27, 0x3e	; 62
    2ca2:	12 96       	adiw	r26, 0x02	; 2
    2ca4:	dc 92       	st	X, r13
    2ca6:	ce 92       	st	-X, r12
    2ca8:	11 97       	sbiw	r26, 0x01	; 1
    2caa:	86 e5       	ldi	r24, 0x56	; 86
    2cac:	93 e0       	ldi	r25, 0x03	; 3
    2cae:	93 83       	std	Z+3, r25	; 0x03
    2cb0:	82 83       	std	Z+2, r24	; 0x02
    2cb2:	80 91 5e 18 	lds	r24, 0x185E
    2cb6:	90 91 5f 18 	lds	r25, 0x185F
    2cba:	95 83       	std	Z+5, r25	; 0x05
    2cbc:	84 83       	std	Z+4, r24	; 0x04
    2cbe:	80 91 60 18 	lds	r24, 0x1860
    2cc2:	90 91 61 18 	lds	r25, 0x1861
    2cc6:	97 83       	std	Z+7, r25	; 0x07
    2cc8:	86 83       	std	Z+6, r24	; 0x06
    2cca:	80 91 62 18 	lds	r24, 0x1862
    2cce:	90 91 63 18 	lds	r25, 0x1863
    2cd2:	91 87       	std	Z+9, r25	; 0x09
    2cd4:	80 87       	std	Z+8, r24	; 0x08
    2cd6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
                     macConfig.shortAddress,
                     macConfig.parentShortAddress,
                     macConfig.lastRoute);
               debugMsgStr(str);
    2cda:	ed b7       	in	r30, 0x3d	; 61
    2cdc:	fe b7       	in	r31, 0x3e	; 62
    2cde:	36 96       	adiw	r30, 0x06	; 6
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	fe bf       	out	0x3e, r31	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	ed bf       	out	0x3d, r30	; 61
    2cea:	80 91 34 1f 	lds	r24, 0x1F34
    2cee:	90 91 35 1f 	lds	r25, 0x1F35
    2cf2:	92 83       	std	Z+2, r25	; 0x02
    2cf4:	81 83       	std	Z+1, r24	; 0x01
    2cf6:	d4 82       	std	Z+4, r13	; 0x04
    2cf8:	c3 82       	std	Z+3, r12	; 0x03
    2cfa:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               sprintf(str,"chan = %d\r\n", macConfig.currentChannel);
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <appTask+0x18a>
    2d00:	ed b7       	in	r30, 0x3d	; 61
    2d02:	fe b7       	in	r31, 0x3e	; 62
    2d04:	31 96       	adiw	r30, 0x01	; 1
    2d06:	ad b7       	in	r26, 0x3d	; 61
    2d08:	be b7       	in	r27, 0x3e	; 62
    2d0a:	12 96       	adiw	r26, 0x02	; 2
    2d0c:	dc 92       	st	X, r13
    2d0e:	ce 92       	st	-X, r12
    2d10:	11 97       	sbiw	r26, 0x01	; 1
    2d12:	82 e8       	ldi	r24, 0x82	; 130
    2d14:	93 e0       	ldi	r25, 0x03	; 3
    2d16:	93 83       	std	Z+3, r25	; 0x03
    2d18:	82 83       	std	Z+2, r24	; 0x02
    2d1a:	80 91 65 18 	lds	r24, 0x1865
    2d1e:	84 83       	std	Z+4, r24	; 0x04
    2d20:	15 82       	std	Z+5, r1	; 0x05
    2d22:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
               debugMsgStr(str);
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	80 91 34 1f 	lds	r24, 0x1F34
    2d2e:	90 91 35 1f 	lds	r25, 0x1F35
    2d32:	ed b7       	in	r30, 0x3d	; 61
    2d34:	fe b7       	in	r31, 0x3e	; 62
    2d36:	92 83       	std	Z+2, r25	; 0x02
    2d38:	81 83       	std	Z+1, r24	; 0x01
    2d3a:	d4 82       	std	Z+4, r13	; 0x04
    2d3c:	c3 82       	std	Z+3, r12	; 0x03
    2d3e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               debugMsgStr("PAN ID = 0x");
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	60 91 34 1f 	lds	r22, 0x1F34
    2d4e:	70 91 35 1f 	lds	r23, 0x1F35
    2d52:	8e e8       	ldi	r24, 0x8E	; 142
    2d54:	93 e0       	ldi	r25, 0x03	; 3
    2d56:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
               debugMsgHex(macConfig.panId);
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <appTask+0x1e6>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <appTask+0x1e8>
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <appTask+0x1ea>
    2d60:	ed b7       	in	r30, 0x3d	; 61
    2d62:	fe b7       	in	r31, 0x3e	; 62
    2d64:	31 96       	adiw	r30, 0x01	; 1
    2d66:	0a e6       	ldi	r16, 0x6A	; 106
    2d68:	18 e1       	ldi	r17, 0x18	; 24
    2d6a:	ad b7       	in	r26, 0x3d	; 61
    2d6c:	be b7       	in	r27, 0x3e	; 62
    2d6e:	12 96       	adiw	r26, 0x02	; 2
    2d70:	1c 93       	st	X, r17
    2d72:	0e 93       	st	-X, r16
    2d74:	11 97       	sbiw	r26, 0x01	; 1
    2d76:	8a e9       	ldi	r24, 0x9A	; 154
    2d78:	93 e0       	ldi	r25, 0x03	; 3
    2d7a:	93 83       	std	Z+3, r25	; 0x03
    2d7c:	82 83       	std	Z+2, r24	; 0x02
    2d7e:	80 91 5c 18 	lds	r24, 0x185C
    2d82:	90 91 5d 18 	lds	r25, 0x185D
    2d86:	95 83       	std	Z+5, r25	; 0x05
    2d88:	84 83       	std	Z+4, r24	; 0x04
    2d8a:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	80 91 34 1f 	lds	r24, 0x1F34
    2d96:	90 91 35 1f 	lds	r25, 0x1F35
    2d9a:	ed b7       	in	r30, 0x3d	; 61
    2d9c:	fe b7       	in	r31, 0x3e	; 62
    2d9e:	92 83       	std	Z+2, r25	; 0x02
    2da0:	81 83       	std	Z+1, r24	; 0x01
    2da2:	14 83       	std	Z+4, r17	; 0x04
    2da4:	03 83       	std	Z+3, r16	; 0x03
    2da6:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               debugMsgCrLf();
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	83 e5       	ldi	r24, 0x53	; 83
    2db4:	93 e0       	ldi	r25, 0x03	; 3
    2db6:	0e 94 9a 1c 	call	0x3934	; 0x3934 <serial_puts>
               u32 low = macConfig.longAddr;
    2dba:	10 91 51 18 	lds	r17, 0x1851
    2dbe:	b0 90 52 18 	lds	r11, 0x1852
    2dc2:	a0 90 53 18 	lds	r10, 0x1853
    2dc6:	90 90 54 18 	lds	r9, 0x1854
    2dca:	60 91 55 18 	lds	r22, 0x1855
    2dce:	70 91 56 18 	lds	r23, 0x1856
    2dd2:	80 91 57 18 	lds	r24, 0x1857
    2dd6:	90 91 58 18 	lds	r25, 0x1858
               u32 high = macConfig.longAddr >> 32;
               sprintf(str,"long = 0x%08lX%08lX\r\n", high, low);
    2dda:	2d b7       	in	r18, 0x3d	; 61
    2ddc:	3e b7       	in	r19, 0x3e	; 62
    2dde:	2c 50       	subi	r18, 0x0C	; 12
    2de0:	30 40       	sbci	r19, 0x00	; 0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	3e bf       	out	0x3e, r19	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	2d bf       	out	0x3d, r18	; 61
    2dec:	ed b6       	in	r14, 0x3d	; 61
    2dee:	fe b6       	in	r15, 0x3e	; 62
    2df0:	08 94       	sec
    2df2:	e1 1c       	adc	r14, r1
    2df4:	f1 1c       	adc	r15, r1
    2df6:	ad b7       	in	r26, 0x3d	; 61
    2df8:	be b7       	in	r27, 0x3e	; 62
    2dfa:	12 96       	adiw	r26, 0x02	; 2
    2dfc:	dc 92       	st	X, r13
    2dfe:	ce 92       	st	-X, r12
    2e00:	11 97       	sbiw	r26, 0x01	; 1
    2e02:	2d e9       	ldi	r18, 0x9D	; 157
    2e04:	33 e0       	ldi	r19, 0x03	; 3
    2e06:	f7 01       	movw	r30, r14
    2e08:	33 83       	std	Z+3, r19	; 0x03
    2e0a:	22 83       	std	Z+2, r18	; 0x02
    2e0c:	21 2f       	mov	r18, r17
    2e0e:	3b 2d       	mov	r19, r11
    2e10:	4a 2d       	mov	r20, r10
    2e12:	59 2d       	mov	r21, r9
    2e14:	00 e2       	ldi	r16, 0x20	; 32
    2e16:	0e 94 cb 2b 	call	0x5796	; 0x5796 <__lshrdi3>
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	ba 01       	movw	r22, r20
    2e1e:	d7 01       	movw	r26, r14
    2e20:	14 96       	adiw	r26, 0x04	; 4
    2e22:	2c 93       	st	X, r18
    2e24:	14 97       	sbiw	r26, 0x04	; 4
    2e26:	15 96       	adiw	r26, 0x05	; 5
    2e28:	9c 93       	st	X, r25
    2e2a:	15 97       	sbiw	r26, 0x05	; 5
    2e2c:	16 96       	adiw	r26, 0x06	; 6
    2e2e:	4c 93       	st	X, r20
    2e30:	16 97       	sbiw	r26, 0x06	; 6
    2e32:	17 96       	adiw	r26, 0x07	; 7
    2e34:	7c 93       	st	X, r23
    2e36:	17 97       	sbiw	r26, 0x07	; 7
    2e38:	18 96       	adiw	r26, 0x08	; 8
    2e3a:	1c 93       	st	X, r17
    2e3c:	18 97       	sbiw	r26, 0x08	; 8
    2e3e:	19 96       	adiw	r26, 0x09	; 9
    2e40:	bc 92       	st	X, r11
    2e42:	19 97       	sbiw	r26, 0x09	; 9
    2e44:	1a 96       	adiw	r26, 0x0a	; 10
    2e46:	ac 92       	st	X, r10
    2e48:	1a 97       	sbiw	r26, 0x0a	; 10
    2e4a:	1b 96       	adiw	r26, 0x0b	; 11
    2e4c:	9c 92       	st	X, r9
    2e4e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
               debugMsgStr(str);
    2e52:	ed b7       	in	r30, 0x3d	; 61
    2e54:	fe b7       	in	r31, 0x3e	; 62
    2e56:	38 96       	adiw	r30, 0x08	; 8
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	fe bf       	out	0x3e, r31	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	ed bf       	out	0x3d, r30	; 61
    2e62:	80 91 34 1f 	lds	r24, 0x1F34
    2e66:	90 91 35 1f 	lds	r25, 0x1F35
    2e6a:	92 83       	std	Z+2, r25	; 0x02
    2e6c:	81 83       	std	Z+1, r24	; 0x01
    2e6e:	d4 82       	std	Z+4, r13	; 0x04
    2e70:	c3 82       	std	Z+3, r12	; 0x03
    2e72:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>

               sprintf(str,"assoc = %s\r\nHops = %04X\r\n",
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	80 91 59 18 	lds	r24, 0x1859
    2e82:	88 23       	and	r24, r24
    2e84:	19 f4       	brne	.+6      	; 0x2e8c <appTask+0x316>
    2e86:	23 eb       	ldi	r18, 0xB3	; 179
    2e88:	33 e0       	ldi	r19, 0x03	; 3
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <appTask+0x31a>
    2e8c:	29 eb       	ldi	r18, 0xB9	; 185
    2e8e:	33 e0       	ldi	r19, 0x03	; 3
    2e90:	8d b7       	in	r24, 0x3d	; 61
    2e92:	9e b7       	in	r25, 0x3e	; 62
    2e94:	08 97       	sbiw	r24, 0x08	; 8
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	9e bf       	out	0x3e, r25	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	8d bf       	out	0x3d, r24	; 61
    2ea0:	ed b7       	in	r30, 0x3d	; 61
    2ea2:	fe b7       	in	r31, 0x3e	; 62
    2ea4:	31 96       	adiw	r30, 0x01	; 1
    2ea6:	8e 01       	movw	r16, r28
    2ea8:	0f 5f       	subi	r16, 0xFF	; 255
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	ad b7       	in	r26, 0x3d	; 61
    2eae:	be b7       	in	r27, 0x3e	; 62
    2eb0:	12 96       	adiw	r26, 0x02	; 2
    2eb2:	1c 93       	st	X, r17
    2eb4:	0e 93       	st	-X, r16
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	8e eb       	ldi	r24, 0xBE	; 190
    2eba:	93 e0       	ldi	r25, 0x03	; 3
    2ebc:	93 83       	std	Z+3, r25	; 0x03
    2ebe:	82 83       	std	Z+2, r24	; 0x02
    2ec0:	35 83       	std	Z+5, r19	; 0x05
    2ec2:	24 83       	std	Z+4, r18	; 0x04
    2ec4:	80 91 64 18 	lds	r24, 0x1864
    2ec8:	86 83       	std	Z+6, r24	; 0x06
    2eca:	17 82       	std	Z+7, r1	; 0x07
    2ecc:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
                     macConfig.associated ? "true" : "false",
                           macConfig.hopsToCoord);
               debugMsgStr(str);
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	80 91 34 1f 	lds	r24, 0x1F34
    2edc:	90 91 35 1f 	lds	r25, 0x1F35
    2ee0:	ed b7       	in	r30, 0x3d	; 61
    2ee2:	fe b7       	in	r31, 0x3e	; 62
    2ee4:	92 83       	std	Z+2, r25	; 0x02
    2ee6:	81 83       	std	Z+1, r24	; 0x01
    2ee8:	14 83       	std	Z+4, r17	; 0x04
    2eea:	03 83       	std	Z+3, r16	; 0x03
    2eec:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               sprintf(str,"rand = %02X\r\n",
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	88 e0       	ldi	r24, 0x08	; 8
    2efa:	0e 94 c7 12 	call	0x258e	; 0x258e <radioRandom>
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <appTask+0x38a>
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <appTask+0x38c>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <appTask+0x38e>
    2f04:	ed b7       	in	r30, 0x3d	; 61
    2f06:	fe b7       	in	r31, 0x3e	; 62
    2f08:	31 96       	adiw	r30, 0x01	; 1
    2f0a:	ad b7       	in	r26, 0x3d	; 61
    2f0c:	be b7       	in	r27, 0x3e	; 62
    2f0e:	12 96       	adiw	r26, 0x02	; 2
    2f10:	1c 93       	st	X, r17
    2f12:	0e 93       	st	-X, r16
    2f14:	11 97       	sbiw	r26, 0x01	; 1
    2f16:	28 ed       	ldi	r18, 0xD8	; 216
    2f18:	33 e0       	ldi	r19, 0x03	; 3
    2f1a:	33 83       	std	Z+3, r19	; 0x03
    2f1c:	22 83       	std	Z+2, r18	; 0x02
    2f1e:	84 83       	std	Z+4, r24	; 0x04
    2f20:	15 82       	std	Z+5, r1	; 0x05
    2f22:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
                     radioRandom(8));
               debugMsgStr(str);
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	80 91 34 1f 	lds	r24, 0x1F34
    2f2e:	90 91 35 1f 	lds	r25, 0x1F35
    2f32:	ed b7       	in	r30, 0x3d	; 61
    2f34:	fe b7       	in	r31, 0x3e	; 62
    2f36:	92 83       	std	Z+2, r25	; 0x02
    2f38:	81 83       	std	Z+1, r24	; 0x01
    2f3a:	14 83       	std	Z+4, r17	; 0x04
    2f3c:	03 83       	std	Z+3, r16	; 0x03
    2f3e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               // Radio part number
               u16 pn = radioGetPartnum();
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0e 94 ef 13 	call	0x27de	; 0x27de <radioGetPartnum>
               switch (pn)
    2f4e:	83 30       	cpi	r24, 0x03	; 3
    2f50:	59 f0       	breq	.+22     	; 0x2f68 <appTask+0x3f2>
    2f52:	87 30       	cpi	r24, 0x07	; 7
    2f54:	69 f0       	breq	.+26     	; 0x2f70 <appTask+0x3fa>
    2f56:	82 30       	cpi	r24, 0x02	; 2
    2f58:	21 f4       	brne	.+8      	; 0x2f62 <appTask+0x3ec>
    2f5a:	56 ee       	ldi	r21, 0xE6	; 230
    2f5c:	a5 2e       	mov	r10, r21
    2f5e:	b1 2c       	mov	r11, r1
    2f60:	0a c0       	rjmp	.+20     	; 0x2f76 <appTask+0x400>
               debugMsgStr(str);
               sprintf(str,"rand = %02X\r\n",
                     radioRandom(8));
               debugMsgStr(str);
               // Radio part number
               u16 pn = radioGetPartnum();
    2f62:	a8 2e       	mov	r10, r24
    2f64:	bb 24       	eor	r11, r11
    2f66:	07 c0       	rjmp	.+14     	; 0x2f76 <appTask+0x400>
    2f68:	47 ee       	ldi	r20, 0xE7	; 231
    2f6a:	a4 2e       	mov	r10, r20
    2f6c:	b1 2c       	mov	r11, r1
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <appTask+0x400>
               case RF230:
                  pn = 230;
                  break;
               case RF231:
                  pn = 231;
                  break;
    2f70:	34 ed       	ldi	r19, 0xD4	; 212
    2f72:	a3 2e       	mov	r10, r19
    2f74:	b1 2c       	mov	r11, r1
                  break;
               default:
                  // Just report whatever number the radio chip gives.
                  break;
               }
               debugMsgStr("Part=RF");
    2f76:	60 91 34 1f 	lds	r22, 0x1F34
    2f7a:	70 91 35 1f 	lds	r23, 0x1F35
    2f7e:	86 ee       	ldi	r24, 0xE6	; 230
    2f80:	93 e0       	ldi	r25, 0x03	; 3
    2f82:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
               sprintf(str,"%u, Rev=%d\r\n", pn,
    2f86:	8d e5       	ldi	r24, 0x5D	; 93
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	0e 94 11 0b 	call	0x1622	; 0x1622 <hal_register_read>
    2f8e:	2d b7       	in	r18, 0x3d	; 61
    2f90:	3e b7       	in	r19, 0x3e	; 62
    2f92:	28 50       	subi	r18, 0x08	; 8
    2f94:	30 40       	sbci	r19, 0x00	; 0
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	3e bf       	out	0x3e, r19	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	2d bf       	out	0x3d, r18	; 61
    2fa0:	ed b7       	in	r30, 0x3d	; 61
    2fa2:	fe b7       	in	r31, 0x3e	; 62
    2fa4:	31 96       	adiw	r30, 0x01	; 1
    2fa6:	8e 01       	movw	r16, r28
    2fa8:	0f 5f       	subi	r16, 0xFF	; 255
    2faa:	1f 4f       	sbci	r17, 0xFF	; 255
    2fac:	ad b7       	in	r26, 0x3d	; 61
    2fae:	be b7       	in	r27, 0x3e	; 62
    2fb0:	12 96       	adiw	r26, 0x02	; 2
    2fb2:	1c 93       	st	X, r17
    2fb4:	0e 93       	st	-X, r16
    2fb6:	11 97       	sbiw	r26, 0x01	; 1
    2fb8:	2e ee       	ldi	r18, 0xEE	; 238
    2fba:	33 e0       	ldi	r19, 0x03	; 3
    2fbc:	33 83       	std	Z+3, r19	; 0x03
    2fbe:	22 83       	std	Z+2, r18	; 0x02
    2fc0:	b5 82       	std	Z+5, r11	; 0x05
    2fc2:	a4 82       	std	Z+4, r10	; 0x04
    2fc4:	86 83       	std	Z+6, r24	; 0x06
    2fc6:	17 82       	std	Z+7, r1	; 0x07
    2fc8:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
                     hal_register_read(RG_VERSION_NUM));
               debugMsgStr(str);
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	80 91 34 1f 	lds	r24, 0x1F34
    2fd8:	90 91 35 1f 	lds	r25, 0x1F35
    2fdc:	ed b7       	in	r30, 0x3d	; 61
    2fde:	fe b7       	in	r31, 0x3e	; 62
    2fe0:	92 83       	std	Z+2, r25	; 0x02
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	14 83       	std	Z+4, r17	; 0x04
    2fe6:	03 83       	std	Z+3, r16	; 0x03
    2fe8:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
                  debugMsgStr("Name=");
                  debugMsgStr(sensorGetName());
                  debugMsgCrLf();
               }
               // Report compile options
               sprintf(str,"Sleep = %s\r\n", RUMSLEEP ? "Yes":"No");
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <appTask+0x478>
    2fee:	ed b7       	in	r30, 0x3d	; 61
    2ff0:	fe b7       	in	r31, 0x3e	; 62
    2ff2:	31 96       	adiw	r30, 0x01	; 1
    2ff4:	ad b7       	in	r26, 0x3d	; 61
    2ff6:	be b7       	in	r27, 0x3e	; 62
    2ff8:	12 96       	adiw	r26, 0x02	; 2
    2ffa:	1c 93       	st	X, r17
    2ffc:	0e 93       	st	-X, r16
    2ffe:	11 97       	sbiw	r26, 0x01	; 1
    3000:	8b ef       	ldi	r24, 0xFB	; 251
    3002:	93 e0       	ldi	r25, 0x03	; 3
    3004:	93 83       	std	Z+3, r25	; 0x03
    3006:	82 83       	std	Z+2, r24	; 0x02
    3008:	28 e0       	ldi	r18, 0x08	; 8
    300a:	e2 2e       	mov	r14, r18
    300c:	24 e0       	ldi	r18, 0x04	; 4
    300e:	f2 2e       	mov	r15, r18
    3010:	f5 82       	std	Z+5, r15	; 0x05
    3012:	e4 82       	std	Z+4, r14	; 0x04
    3014:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
               debugMsgStr(str);
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	80 91 34 1f 	lds	r24, 0x1F34
    3020:	90 91 35 1f 	lds	r25, 0x1F35
    3024:	ed b7       	in	r30, 0x3d	; 61
    3026:	fe b7       	in	r31, 0x3e	; 62
    3028:	92 83       	std	Z+2, r25	; 0x02
    302a:	81 83       	std	Z+1, r24	; 0x01
    302c:	14 83       	std	Z+4, r17	; 0x04
    302e:	03 83       	std	Z+3, r16	; 0x03
    3030:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               sprintf(str,"Freq = %dMHz\r\n", (int)(F_CPU / 1000000UL));
    3034:	00 d0       	rcall	.+0      	; 0x3036 <appTask+0x4c0>
    3036:	ed b7       	in	r30, 0x3d	; 61
    3038:	fe b7       	in	r31, 0x3e	; 62
    303a:	31 96       	adiw	r30, 0x01	; 1
    303c:	ad b7       	in	r26, 0x3d	; 61
    303e:	be b7       	in	r27, 0x3e	; 62
    3040:	12 96       	adiw	r26, 0x02	; 2
    3042:	1c 93       	st	X, r17
    3044:	0e 93       	st	-X, r16
    3046:	11 97       	sbiw	r26, 0x01	; 1
    3048:	8b e0       	ldi	r24, 0x0B	; 11
    304a:	94 e0       	ldi	r25, 0x04	; 4
    304c:	93 83       	std	Z+3, r25	; 0x03
    304e:	82 83       	std	Z+2, r24	; 0x02
    3050:	88 e0       	ldi	r24, 0x08	; 8
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	95 83       	std	Z+5, r25	; 0x05
    3056:	84 83       	std	Z+4, r24	; 0x04
    3058:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
               debugMsgStr(str);
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	80 91 34 1f 	lds	r24, 0x1F34
    3064:	90 91 35 1f 	lds	r25, 0x1F35
    3068:	ed b7       	in	r30, 0x3d	; 61
    306a:	fe b7       	in	r31, 0x3e	; 62
    306c:	92 83       	std	Z+2, r25	; 0x02
    306e:	81 83       	std	Z+1, r24	; 0x01
    3070:	14 83       	std	Z+4, r17	; 0x04
    3072:	03 83       	std	Z+3, r16	; 0x03
    3074:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
                  sprintf(str,"Interval = %d.%dsec\r\n", frameInterval/10, frameInterval%10);
                  debugMsgStr(str);
                  sprintf(str,"Sleep timed by %s timer\r\n", WDOG_SLEEP ? "WatchDog" : "32KHz");
                  debugMsgStr(str);
               }
               sprintf(str,"6LoWPAN = %s\r\n", IPV6LOWPAN ? "Yes":"No");
    3078:	00 d0       	rcall	.+0      	; 0x307a <appTask+0x504>
    307a:	ed b7       	in	r30, 0x3d	; 61
    307c:	fe b7       	in	r31, 0x3e	; 62
    307e:	31 96       	adiw	r30, 0x01	; 1
    3080:	ad b7       	in	r26, 0x3d	; 61
    3082:	be b7       	in	r27, 0x3e	; 62
    3084:	12 96       	adiw	r26, 0x02	; 2
    3086:	1c 93       	st	X, r17
    3088:	0e 93       	st	-X, r16
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	8a e1       	ldi	r24, 0x1A	; 26
    308e:	94 e0       	ldi	r25, 0x04	; 4
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	89 e2       	ldi	r24, 0x29	; 41
    3096:	94 e0       	ldi	r25, 0x04	; 4
    3098:	95 83       	std	Z+5, r25	; 0x05
    309a:	84 83       	std	Z+4, r24	; 0x04
    309c:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
               debugMsgStr(str);
    30a0:	0f 90       	pop	r0
    30a2:	0f 90       	pop	r0
    30a4:	80 91 34 1f 	lds	r24, 0x1F34
    30a8:	90 91 35 1f 	lds	r25, 0x1F35
    30ac:	ed b7       	in	r30, 0x3d	; 61
    30ae:	fe b7       	in	r31, 0x3e	; 62
    30b0:	92 83       	std	Z+2, r25	; 0x02
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	14 83       	std	Z+4, r17	; 0x04
    30b6:	03 83       	std	Z+3, r16	; 0x03
    30b8:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
               sprintf(str,"Demo mode = %s\r\n", DEMO ? "Yes":"No");
    30bc:	00 d0       	rcall	.+0      	; 0x30be <appTask+0x548>
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	31 96       	adiw	r30, 0x01	; 1
    30c4:	ad b7       	in	r26, 0x3d	; 61
    30c6:	be b7       	in	r27, 0x3e	; 62
    30c8:	12 96       	adiw	r26, 0x02	; 2
    30ca:	1c 93       	st	X, r17
    30cc:	0e 93       	st	-X, r16
    30ce:	11 97       	sbiw	r26, 0x01	; 1
    30d0:	8d e2       	ldi	r24, 0x2D	; 45
    30d2:	94 e0       	ldi	r25, 0x04	; 4
    30d4:	93 83       	std	Z+3, r25	; 0x03
    30d6:	82 83       	std	Z+2, r24	; 0x02
    30d8:	f5 82       	std	Z+5, r15	; 0x05
    30da:	e4 82       	std	Z+4, r14	; 0x04
    30dc:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    30e0:	ed b7       	in	r30, 0x3d	; 61
    30e2:	fe b7       	in	r31, 0x3e	; 62
    30e4:	36 96       	adiw	r30, 0x06	; 6
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	fe bf       	out	0x3e, r31	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	ed bf       	out	0x3d, r30	; 61
    30f0:	60 c0       	rjmp	.+192    	; 0x31b2 <appTask+0x63c>
               break;
               case 'p':
                  // ping
                  debugMsgStr("\r\nEnter short addr:");
    30f2:	60 91 34 1f 	lds	r22, 0x1F34
    30f6:	70 91 35 1f 	lds	r23, 0x1F35
    30fa:	8e e3       	ldi	r24, 0x3E	; 62
    30fc:	94 e0       	ldi	r25, 0x04	; 4
    30fe:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
                  serial_gets(str, 50, true);
    3102:	8e 01       	movw	r16, r28
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	c8 01       	movw	r24, r16
    310a:	62 e3       	ldi	r22, 0x32	; 50
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <serial_gets>
                  addr = atoi(str);
    3112:	c8 01       	movw	r24, r16
    3114:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <atoi>
    3118:	68 2f       	mov	r22, r24
    311a:	80 93 b2 0c 	sts	0x0CB2, r24
    311e:	90 93 b3 0c 	sts	0x0CB3, r25
                  macPing(PING_REQ_FRAME, addr);
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	79 2f       	mov	r23, r25
    3126:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <macPing>
    312a:	43 c0       	rjmp	.+134    	; 0x31b2 <appTask+0x63c>
                  break;
               case 's':
                  // Send data stream
                  debugMsgStr("\r\nStream mode to addr:");
    312c:	60 91 34 1f 	lds	r22, 0x1F34
    3130:	70 91 35 1f 	lds	r23, 0x1F35
    3134:	82 e5       	ldi	r24, 0x52	; 82
    3136:	94 e0       	ldi	r25, 0x04	; 4
    3138:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
                  serial_gets(str,50,true);
    313c:	8e 01       	movw	r16, r28
    313e:	0f 5f       	subi	r16, 0xFF	; 255
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	c8 01       	movw	r24, r16
    3144:	62 e3       	ldi	r22, 0x32	; 50
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <serial_gets>
                  addr = atoi(str);
    314c:	c8 01       	movw	r24, r16
    314e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <atoi>
    3152:	90 93 b3 0c 	sts	0x0CB3, r25
    3156:	80 93 b2 0c 	sts	0x0CB2, r24
                  streamMode = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	80 93 b1 0c 	sts	0x0CB1, r24
    3160:	28 c0       	rjmp	.+80     	; 0x31b2 <appTask+0x63c>
    3162:	91 ee       	ldi	r25, 0xE1	; 225
    3164:	e9 2e       	mov	r14, r25
    3166:	9e e2       	ldi	r25, 0x2E	; 46
    3168:	f9 2e       	mov	r15, r25
    316a:	81 ed       	ldi	r24, 0xD1	; 209
    316c:	a8 2e       	mov	r10, r24
    316e:	87 e0       	ldi	r24, 0x07	; 7
    3170:	b8 2e       	mov	r11, r24
                  if (NODETYPE != COORD)
                  {
                     for(;;)
                     {
                        u8 count;
                        nodeSleep(20);
    3172:	84 e1       	ldi	r24, 0x14	; 20
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <nodeSleep>
                        macPing(PING_REQ_FRAME, DEFAULT_COORD_ADDR);
    317a:	82 e0       	ldi	r24, 0x02	; 2
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <macPing>
    3184:	c7 01       	movw	r24, r14
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <appTask+0x610>
    318a:	10 e0       	ldi	r17, 0x00	; 0
                        // Get the ping response before going back to sleep
                        delay_us(6000);
                        for (count=0;count<100;count++)
                           macTask();
    318c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <macTask>
                        u8 count;
                        nodeSleep(20);
                        macPing(PING_REQ_FRAME, DEFAULT_COORD_ADDR);
                        // Get the ping response before going back to sleep
                        delay_us(6000);
                        for (count=0;count<100;count++)
    3190:	1f 5f       	subi	r17, 0xFF	; 255
    3192:	14 36       	cpi	r17, 0x64	; 100
    3194:	d9 f7       	brne	.-10     	; 0x318c <appTask+0x616>
    3196:	c5 01       	movw	r24, r10
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <appTask+0x622>
    319c:	ea cf       	rjmp	.-44     	; 0x3172 <appTask+0x5fc>
                     macWakeChildNode(addr);
                  }
                  break;
               case 'P':
                  // Pause serial display
                  debugMsgStr("\r\nPaused, press 'P' to unpause");
    319e:	60 91 34 1f 	lds	r22, 0x1F34
    31a2:	70 91 35 1f 	lds	r23, 0x1F35
    31a6:	89 e6       	ldi	r24, 0x69	; 105
    31a8:	94 e0       	ldi	r25, 0x04	; 4
    31aa:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
                  serial_toggle_pause();
    31ae:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <serial_toggle_pause>
                  break;
               default:
                  break;
            }
            // Delay a bit to allow for other messages (ping resp) to print.
            macSetAlarm(250,printPrompt);
    31b2:	8a ef       	ldi	r24, 0xFA	; 250
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	62 eb       	ldi	r22, 0xB2	; 178
    31b8:	75 e1       	ldi	r23, 0x15	; 21
    31ba:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
            break;
         default:
            break;
         }
      }
}
    31be:	ca 59       	subi	r28, 0x9A	; 154
    31c0:	df 4f       	sbci	r29, 0xFF	; 255
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	bf 90       	pop	r11
    31de:	af 90       	pop	r10
    31e0:	9f 90       	pop	r9
    31e2:	08 95       	ret

000031e4 <appScanConfirm>:

   @param success True if @ref macScan found a network to connect to,
   or false if no networks were found.
 */
void appScanConfirm(u8 success)
{
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17

   // Example code:
   // scan is done, turn off LED
   if(NODETYPE != COORD)
   {
      if (success)
    31e8:	88 23       	and	r24, r24
    31ea:	c9 f1       	breq	.+114    	; 0x325e <appScanConfirm+0x7a>
      {
         // associate with coordinator
         macSetAlarm(10,appAssociate);
    31ec:	8a e0       	ldi	r24, 0x0A	; 10
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	62 e3       	ldi	r22, 0x32	; 50
    31f2:	7a e1       	ldi	r23, 0x1A	; 26
    31f4:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

         debugMsgStr("\r\nScan good, select chan ");
    31f8:	60 91 34 1f 	lds	r22, 0x1F34
    31fc:	70 91 35 1f 	lds	r23, 0x1F35
    3200:	88 e8       	ldi	r24, 0x88	; 136
    3202:	94 e0       	ldi	r25, 0x04	; 4
    3204:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
         debugMsgInt(panDescriptor.logicalChannel);
    3208:	00 d0       	rcall	.+0      	; 0x320a <appScanConfirm+0x26>
    320a:	00 d0       	rcall	.+0      	; 0x320c <appScanConfirm+0x28>
    320c:	00 d0       	rcall	.+0      	; 0x320e <appScanConfirm+0x2a>
    320e:	ed b7       	in	r30, 0x3d	; 61
    3210:	fe b7       	in	r31, 0x3e	; 62
    3212:	31 96       	adiw	r30, 0x01	; 1
    3214:	0a e6       	ldi	r16, 0x6A	; 106
    3216:	18 e1       	ldi	r17, 0x18	; 24
    3218:	ad b7       	in	r26, 0x3d	; 61
    321a:	be b7       	in	r27, 0x3e	; 62
    321c:	12 96       	adiw	r26, 0x02	; 2
    321e:	1c 93       	st	X, r17
    3220:	0e 93       	st	-X, r16
    3222:	11 97       	sbiw	r26, 0x01	; 1
    3224:	82 ea       	ldi	r24, 0xA2	; 162
    3226:	94 e0       	ldi	r25, 0x04	; 4
    3228:	93 83       	std	Z+3, r25	; 0x03
    322a:	82 83       	std	Z+2, r24	; 0x02
    322c:	80 91 fd 18 	lds	r24, 0x18FD
    3230:	84 83       	std	Z+4, r24	; 0x04
    3232:	15 82       	std	Z+5, r1	; 0x05
    3234:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	80 91 34 1f 	lds	r24, 0x1F34
    3240:	90 91 35 1f 	lds	r25, 0x1F35
    3244:	ed b7       	in	r30, 0x3d	; 61
    3246:	fe b7       	in	r31, 0x3e	; 62
    3248:	92 83       	std	Z+2, r25	; 0x02
    324a:	81 83       	std	Z+1, r24	; 0x01
    324c:	14 83       	std	Z+4, r17	; 0x04
    324e:	03 83       	std	Z+3, r16	; 0x03
    3250:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0e c0       	rjmp	.+28     	; 0x327a <appScanConfirm+0x96>
            // Try again after sleeping for 10 seconds
            nodeSleep(100);
            appStartScan();
         }
         else
            macSetAlarm(1000,appStartScan);
    325e:	88 ee       	ldi	r24, 0xE8	; 232
    3260:	93 e0       	ldi	r25, 0x03	; 3
    3262:	6c e7       	ldi	r22, 0x7C	; 124
    3264:	7f e1       	ldi	r23, 0x1F	; 31
    3266:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
         debugMsgStr("\r\nScan bad");
    326a:	60 91 34 1f 	lds	r22, 0x1F34
    326e:	70 91 35 1f 	lds	r23, 0x1F35
    3272:	85 ea       	ldi	r24, 0xA5	; 165
    3274:	94 e0       	ldi	r25, 0x04	; 4
    3276:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
      }
   }
}
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	08 95       	ret

00003280 <appChildAssociated>:
   application should not have to.
 */
void appChildAssociated(u16 shortAddress)
{
   // Blip the LED when we associate a child
   LED_ON(1);
    3280:	71 98       	cbi	0x0e, 1	; 14
    3282:	69 9a       	sbi	0x0d, 1	; 13
   macSetAlarm(LED_DELAY,ledoff1);
    3284:	8a e0       	ldi	r24, 0x0A	; 10
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	63 e9       	ldi	r22, 0x93	; 147
    328a:	75 e1       	ldi	r23, 0x15	; 21
    328c:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    3290:	08 95       	ret

00003292 <appSendDataFrame>:
 */
void appSendDataFrame(void)
{
   // send data frames once per second
   if (NODETYPE != COORD)
      macDataRequest(0x00, 4, (u8*) ((NODETYPE == ENDDEVICE) ? "endd" : "rout"));
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	64 e0       	ldi	r22, 0x04	; 4
    3298:	40 eb       	ldi	r20, 0xB0	; 176
    329a:	54 e0       	ldi	r21, 0x04	; 4
    329c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <macDataRequest>

   // Send another data frame later
   macSetAlarm(1000, appSendDataFrame);
    32a0:	88 ee       	ldi	r24, 0xE8	; 232
    32a2:	93 e0       	ldi	r25, 0x03	; 3
    32a4:	69 e4       	ldi	r22, 0x49	; 73
    32a6:	79 e1       	ldi	r23, 0x19	; 25
    32a8:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    32ac:	08 95       	ret

000032ae <appPingReq>:
   packet addressed to this node.

   @param addr The short address of the node that sent the ping request
 */
void appPingReq(u16 addr)
{
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	7c 01       	movw	r14, r24
   // We got a ping, send a response
   // Blip the LED
   LED_ON(1);
    32b8:	71 98       	cbi	0x0e, 1	; 14
    32ba:	69 9a       	sbi	0x0d, 1	; 13

   macSetAlarm(/* LED_PING_DELAY */ 1 ,ledoff1);
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	63 e9       	ldi	r22, 0x93	; 147
    32c2:	75 e1       	ldi	r23, 0x15	; 21
    32c4:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

   debugMsgStr("\r\nPing request from node ");
    32c8:	60 91 34 1f 	lds	r22, 0x1F34
    32cc:	70 91 35 1f 	lds	r23, 0x1F35
    32d0:	85 eb       	ldi	r24, 0xB5	; 181
    32d2:	94 e0       	ldi	r25, 0x04	; 4
    32d4:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgInt(addr);
    32d8:	00 d0       	rcall	.+0      	; 0x32da <appPingReq+0x2c>
    32da:	00 d0       	rcall	.+0      	; 0x32dc <appPingReq+0x2e>
    32dc:	00 d0       	rcall	.+0      	; 0x32de <appPingReq+0x30>
    32de:	ed b7       	in	r30, 0x3d	; 61
    32e0:	fe b7       	in	r31, 0x3e	; 62
    32e2:	31 96       	adiw	r30, 0x01	; 1
    32e4:	0a e6       	ldi	r16, 0x6A	; 106
    32e6:	18 e1       	ldi	r17, 0x18	; 24
    32e8:	ad b7       	in	r26, 0x3d	; 61
    32ea:	be b7       	in	r27, 0x3e	; 62
    32ec:	12 96       	adiw	r26, 0x02	; 2
    32ee:	1c 93       	st	X, r17
    32f0:	0e 93       	st	-X, r16
    32f2:	11 97       	sbiw	r26, 0x01	; 1
    32f4:	82 ea       	ldi	r24, 0xA2	; 162
    32f6:	94 e0       	ldi	r25, 0x04	; 4
    32f8:	93 83       	std	Z+3, r25	; 0x03
    32fa:	82 83       	std	Z+2, r24	; 0x02
    32fc:	f5 82       	std	Z+5, r15	; 0x05
    32fe:	e4 82       	std	Z+4, r14	; 0x04
    3300:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	80 91 34 1f 	lds	r24, 0x1F34
    330c:	90 91 35 1f 	lds	r25, 0x1F35
    3310:	ed b7       	in	r30, 0x3d	; 61
    3312:	fe b7       	in	r31, 0x3e	; 62
    3314:	92 83       	std	Z+2, r25	; 0x02
    3316:	81 83       	std	Z+1, r24	; 0x01
    3318:	14 83       	std	Z+4, r17	; 0x04
    331a:	03 83       	std	Z+3, r16	; 0x03
    331c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>

   if (PLATFORM == RAVEN && SERIAL)
      // Tell 3290p
      serial_send_frame(REPORT_PING_BEEP, 2, (u8*)&addr);

   macPing(PING_RSP_FRAME, addr);
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	83 e0       	ldi	r24, 0x03	; 3
    332a:	b7 01       	movw	r22, r14
    332c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <macPing>
}
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	08 95       	ret

0000333a <blink1>:
}

// This function can be used for diagnostic reasons. Not used in RUM application.
void blink1(void)
{
   LED_ON(1);
    333a:	71 98       	cbi	0x0e, 1	; 14
    333c:	69 9a       	sbi	0x0d, 1	; 13
   macSetAlarm(25, ledoff1);
    333e:	89 e1       	ldi	r24, 0x19	; 25
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	63 e9       	ldi	r22, 0x93	; 147
    3344:	75 e1       	ldi	r23, 0x15	; 21
    3346:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

   //    macSetAlarm(500, blink1);

   //    macDataRequest(0, 7, (u8*)"Howdy\r\n");
}
    334a:	08 95       	ret

0000334c <doPing>:
   Sample application function. Sends a ping packet to the network
   coordinator.
 */
void doPing(void)
{
   hal_register_write(RG_CSMA_BE,0);
    334c:	8f e6       	ldi	r24, 0x6F	; 111
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	0e 94 14 0b 	call	0x1628	; 0x1628 <hal_register_write>
   //macDataRequest(DEFAULT_COORD_ADDR, 110, dataString);
   macPing(PING_REQ_FRAME, DEFAULT_COORD_ADDR);
    3356:	82 e0       	ldi	r24, 0x02	; 2
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <macPing>

   // Uncomment the next line to make the button unleash a torrent of pings
#if __AVR__
   //    pingTimer = macSetAlarm(5+(23*(BAND == BAND900)), doPing);
   pingTimer = macSetAlarm(500, doPing);
    3360:	84 ef       	ldi	r24, 0xF4	; 244
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	66 ea       	ldi	r22, 0xA6	; 166
    3366:	79 e1       	ldi	r23, 0x19	; 25
    3368:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    336c:	80 93 b5 0c 	sts	0x0CB5, r24
#endif
}
    3370:	08 95       	ret

00003372 <checkEeprom>:

   Similarly, the sensor interval time is set to 2 seconds if the
   EEPROM is unprogrammed.
 */
void checkEeprom(void)
{
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	28 97       	sbiw	r28, 0x08	; 8
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
   //if(1)
   //{
   u8 buf[8];
   u8 i,bad=1;

   halGetMacAddr(buf);
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	68 e0       	ldi	r22, 0x08	; 8
    3394:	8e 01       	movw	r16, r28
    3396:	0f 5f       	subi	r16, 0xFF	; 255
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	a8 01       	movw	r20, r16
    339c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <halGetEeprom>
    33a0:	78 01       	movw	r14, r16
   for (i=0;i<8;i++)
    33a2:	9e 01       	movw	r18, r28
    33a4:	27 5f       	subi	r18, 0xF7	; 247
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
      if (buf[i] != 0xff)
    33a8:	f8 01       	movw	r30, r16
    33aa:	80 81       	ld	r24, Z
    33ac:	8f 3f       	cpi	r24, 0xFF	; 255
    33ae:	b9 f4       	brne	.+46     	; 0x33de <checkEeprom+0x6c>
    33b0:	0f 5f       	subi	r16, 0xFF	; 255
    33b2:	1f 4f       	sbci	r17, 0xFF	; 255
   //{
   u8 buf[8];
   u8 i,bad=1;

   halGetMacAddr(buf);
   for (i=0;i<8;i++)
    33b4:	02 17       	cp	r16, r18
    33b6:	13 07       	cpc	r17, r19
    33b8:	b9 f7       	brne	.-18     	; 0x33a8 <checkEeprom+0x36>
    33ba:	2a c0       	rjmp	.+84     	; 0x3410 <checkEeprom+0x9e>
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
      radioSetTrxState(RX_ON);
      for (i=0;i<8;i++)
         buf[i] = radioRandom(8);
    33bc:	88 e0       	ldi	r24, 0x08	; 8
    33be:	0e 94 c7 12 	call	0x258e	; 0x258e <radioRandom>
    33c2:	f7 01       	movw	r30, r14
    33c4:	81 93       	st	Z+, r24
    33c6:	7f 01       	movw	r14, r30
   if (bad)
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
      radioSetTrxState(RX_ON);
      for (i=0;i<8;i++)
    33c8:	e0 17       	cp	r30, r16
    33ca:	f1 07       	cpc	r31, r17
    33cc:	b9 f7       	brne	.-18     	; 0x33bc <checkEeprom+0x4a>
         buf[i] = radioRandom(8);
      halPutMacAddr(buf);
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	68 e0       	ldi	r22, 0x08	; 8
    33d4:	ae 01       	movw	r20, r28
    33d6:	4f 5f       	subi	r20, 0xFF	; 255
    33d8:	5f 4f       	sbci	r21, 0xFF	; 255
    33da:	0e 94 a4 0b 	call	0x1748	; 0x1748 <halPutEeprom>
   }

   halGetEeprom((u8*)offsetof(tEepromContents, dataSeconds),
    33de:	80 e1       	ldi	r24, 0x10	; 16
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	62 e0       	ldi	r22, 0x02	; 2
    33e4:	8e 01       	movw	r16, r28
    33e6:	0f 5f       	subi	r16, 0xFF	; 255
    33e8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ea:	a8 01       	movw	r20, r16
    33ec:	0e 94 ba 0b 	call	0x1774	; 0x1774 <halGetEeprom>
         sizeof(typeof(((tEepromContents*)0)->dataSeconds)),
         buf);
   if (*((u16*)buf) == 0xffff)
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	9a 81       	ldd	r25, Y+2	; 0x02
    33f4:	8f 5f       	subi	r24, 0xFF	; 255
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	91 f4       	brne	.+36     	; 0x341e <checkEeprom+0xac>
   {
      // Bad timeout, set for 2 seconds
      *((u16*)buf) = 0x0014;
    33fa:	84 e1       	ldi	r24, 0x14	; 20
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
      halPutEeprom((u8*)offsetof(tEepromContents, dataSeconds),
    3402:	80 e1       	ldi	r24, 0x10	; 16
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	62 e0       	ldi	r22, 0x02	; 2
    3408:	a8 01       	movw	r20, r16
    340a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <halPutEeprom>
    340e:	07 c0       	rjmp	.+14     	; 0x341e <checkEeprom+0xac>
      }

   if (bad)
   {
      // create random MAC address and store it
      radioInit(0); // Needed for random to work.
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	0e 94 67 15 	call	0x2ace	; 0x2ace <radioInit>
      radioSetTrxState(RX_ON);
    3416:	86 e0       	ldi	r24, 0x06	; 6
    3418:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <radioSetTrxState>
    341c:	cf cf       	rjmp	.-98     	; 0x33bc <checkEeprom+0x4a>
      halPutEeprom((u8*)offsetof(tEepromContents, dataSeconds),
            sizeof(typeof(((tEepromContents*)0)->dataSeconds)),
            buf);
   }
   //}
}
    341e:	28 96       	adiw	r28, 0x08	; 8
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	cf 91       	pop	r28
    342c:	df 91       	pop	r29
    342e:	1f 91       	pop	r17
    3430:	0f 91       	pop	r16
    3432:	ff 90       	pop	r15
    3434:	ef 90       	pop	r14
    3436:	08 95       	ret

00003438 <appInit>:
{
   // Init the mac
   LED_INIT();

   // Blip the LED once on powerup
   blink1();
    3438:	0e 94 9d 19 	call	0x333a	; 0x333a <blink1>

#if (__AVR__)
   // If the EEPROM is cleared, init it to something useful
   checkEeprom();
    343c:	0e 94 b9 19 	call	0x3372	; 0x3372 <checkEeprom>
      // appClearChanFound() will be called
   }
   else
   {
      //debugMsgStr("\r\nStartup, I am router/end.");
      UART_PRINT("Startup, I am router/end.\r\n");
    3440:	8f ec       	ldi	r24, 0xCF	; 207
    3442:	94 e0       	ldi	r25, 0x04	; 4
    3444:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>

      // End node or router, start scanning for a coordinator
      appStartScan();
    3448:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <appStartScan>
      // when scan is finished, appScanConfirm will be called.

      if (IPV6LOWPAN == 1)
         sixlowpan_init();
    344c:	0e 94 c0 00 	call	0x180	; 0x180 <sixlowpan_init>
   }

   // Init the button
   BUTTON_SETUP();
    3450:	6d 98       	cbi	0x0d, 5	; 13
    3452:	75 9a       	sbi	0x0e, 5	; 14

   // Turn the power down depending if button is pressed on powerup
   if (!BUTTON_PRESSED() && DEMO)
    3454:	6d 98       	cbi	0x0d, 5	; 13
    3456:	75 9a       	sbi	0x0e, 5	; 14
    3458:	8c b1       	in	r24, 0x0c	; 12
      hal_subregister_write(SR_RX_PDT_LEVEL, 0x02);
#endif
      UART_PRINT("Demo mode");
   }
   else
      UART_PRINT("Normal mode\r\n");
    345a:	8a ee       	ldi	r24, 0xEA	; 234
    345c:	94 e0       	ldi	r25, 0x04	; 4
    345e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>

}
    3462:	08 95       	ret

00003464 <appAssociate>:
/**
   Sample application function, associates this node to a network.
   This function is called after a successful @ref macScan.
 */
void appAssociate(void)
{
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
   debugMsgStr("\r\nAssociating to ");
    346c:	60 91 34 1f 	lds	r22, 0x1F34
    3470:	70 91 35 1f 	lds	r23, 0x1F35
    3474:	87 ef       	ldi	r24, 0xF7	; 247
    3476:	94 e0       	ldi	r25, 0x04	; 4
    3478:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgHex(panDescriptor.coordAddr);
    347c:	00 d0       	rcall	.+0      	; 0x347e <appAssociate+0x1a>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <appAssociate+0x1c>
    3480:	00 d0       	rcall	.+0      	; 0x3482 <appAssociate+0x1e>
    3482:	ed b7       	in	r30, 0x3d	; 61
    3484:	fe b7       	in	r31, 0x3e	; 62
    3486:	31 96       	adiw	r30, 0x01	; 1
    3488:	0a e6       	ldi	r16, 0x6A	; 106
    348a:	18 e1       	ldi	r17, 0x18	; 24
    348c:	ad b7       	in	r26, 0x3d	; 61
    348e:	be b7       	in	r27, 0x3e	; 62
    3490:	12 96       	adiw	r26, 0x02	; 2
    3492:	1c 93       	st	X, r17
    3494:	0e 93       	st	-X, r16
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	8a e9       	ldi	r24, 0x9A	; 154
    349a:	93 e0       	ldi	r25, 0x03	; 3
    349c:	93 83       	std	Z+3, r25	; 0x03
    349e:	82 83       	std	Z+2, r24	; 0x02
    34a0:	80 91 fb 18 	lds	r24, 0x18FB
    34a4:	90 91 fc 18 	lds	r25, 0x18FC
    34a8:	95 83       	std	Z+5, r25	; 0x05
    34aa:	84 83       	std	Z+4, r24	; 0x04
    34ac:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	80 91 34 1f 	lds	r24, 0x1F34
    34b8:	90 91 35 1f 	lds	r25, 0x1F35
    34bc:	ed b7       	in	r30, 0x3d	; 61
    34be:	fe b7       	in	r31, 0x3e	; 62
    34c0:	92 83       	std	Z+2, r25	; 0x02
    34c2:	81 83       	std	Z+1, r24	; 0x01
    34c4:	14 83       	std	Z+4, r17	; 0x04
    34c6:	03 83       	std	Z+3, r16	; 0x03
    34c8:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
   debugMsgStr(" on ch ");
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	60 91 34 1f 	lds	r22, 0x1F34
    34d8:	70 91 35 1f 	lds	r23, 0x1F35
    34dc:	89 e0       	ldi	r24, 0x09	; 9
    34de:	95 e0       	ldi	r25, 0x05	; 5
    34e0:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgInt(panDescriptor.logicalChannel);
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <appAssociate+0x82>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <appAssociate+0x84>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <appAssociate+0x86>
    34ea:	ed b7       	in	r30, 0x3d	; 61
    34ec:	fe b7       	in	r31, 0x3e	; 62
    34ee:	31 96       	adiw	r30, 0x01	; 1
    34f0:	ad b7       	in	r26, 0x3d	; 61
    34f2:	be b7       	in	r27, 0x3e	; 62
    34f4:	12 96       	adiw	r26, 0x02	; 2
    34f6:	1c 93       	st	X, r17
    34f8:	0e 93       	st	-X, r16
    34fa:	11 97       	sbiw	r26, 0x01	; 1
    34fc:	62 ea       	ldi	r22, 0xA2	; 162
    34fe:	e6 2e       	mov	r14, r22
    3500:	64 e0       	ldi	r22, 0x04	; 4
    3502:	f6 2e       	mov	r15, r22
    3504:	f3 82       	std	Z+3, r15	; 0x03
    3506:	e2 82       	std	Z+2, r14	; 0x02
    3508:	80 91 fd 18 	lds	r24, 0x18FD
    350c:	84 83       	std	Z+4, r24	; 0x04
    350e:	15 82       	std	Z+5, r1	; 0x05
    3510:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	80 91 34 1f 	lds	r24, 0x1F34
    351c:	90 91 35 1f 	lds	r25, 0x1F35
    3520:	ed b7       	in	r30, 0x3d	; 61
    3522:	fe b7       	in	r31, 0x3e	; 62
    3524:	92 83       	std	Z+2, r25	; 0x02
    3526:	81 83       	std	Z+1, r24	; 0x01
    3528:	14 83       	std	Z+4, r17	; 0x04
    352a:	03 83       	std	Z+3, r16	; 0x03
    352c:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
   debugMsgStr(", hops = ");
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	60 91 34 1f 	lds	r22, 0x1F34
    353c:	70 91 35 1f 	lds	r23, 0x1F35
    3540:	81 e1       	ldi	r24, 0x11	; 17
    3542:	95 e0       	ldi	r25, 0x05	; 5
    3544:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgInt(panDescriptor.hopsToCoord);
    3548:	00 d0       	rcall	.+0      	; 0x354a <appAssociate+0xe6>
    354a:	00 d0       	rcall	.+0      	; 0x354c <appAssociate+0xe8>
    354c:	00 d0       	rcall	.+0      	; 0x354e <appAssociate+0xea>
    354e:	ed b7       	in	r30, 0x3d	; 61
    3550:	fe b7       	in	r31, 0x3e	; 62
    3552:	31 96       	adiw	r30, 0x01	; 1
    3554:	ad b7       	in	r26, 0x3d	; 61
    3556:	be b7       	in	r27, 0x3e	; 62
    3558:	12 96       	adiw	r26, 0x02	; 2
    355a:	1c 93       	st	X, r17
    355c:	0e 93       	st	-X, r16
    355e:	11 97       	sbiw	r26, 0x01	; 1
    3560:	f3 82       	std	Z+3, r15	; 0x03
    3562:	e2 82       	std	Z+2, r14	; 0x02
    3564:	80 91 01 19 	lds	r24, 0x1901
    3568:	84 83       	std	Z+4, r24	; 0x04
    356a:	15 82       	std	Z+5, r1	; 0x05
    356c:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	80 91 34 1f 	lds	r24, 0x1F34
    3578:	90 91 35 1f 	lds	r25, 0x1F35
    357c:	ed b7       	in	r30, 0x3d	; 61
    357e:	fe b7       	in	r31, 0x3e	; 62
    3580:	92 83       	std	Z+2, r25	; 0x02
    3582:	81 83       	std	Z+1, r24	; 0x01
    3584:	14 83       	std	Z+4, r17	; 0x04
    3586:	03 83       	std	Z+3, r16	; 0x03
    3588:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>

   macAssociate(panDescriptor.coordAddr, panDescriptor.logicalChannel);
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	80 91 fb 18 	lds	r24, 0x18FB
    3598:	90 91 fc 18 	lds	r25, 0x18FC
    359c:	60 91 fd 18 	lds	r22, 0x18FD
    35a0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <macAssociate>
}
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	08 95       	ret

000035ae <appAssociateConfirm>:

   @param success True if an association packet was received, or false
   if the association process timed out.
 */
void appAssociateConfirm(u8 success)
{
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
   if(NODETYPE != COORD)
   {
      if (success == SUCCESS)
    35b2:	88 23       	and	r24, r24
    35b4:	b1 f5       	brne	.+108    	; 0x3622 <appAssociateConfirm+0x74>
         init_status_timer();
         status_timer_enable();
         */


         UART_PRINT("\r\nAssociated to ");
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <appAssociateConfirm+0xa>
    35b8:	8b e1       	ldi	r24, 0x1B	; 27
    35ba:	95 e0       	ldi	r25, 0x05	; 5
    35bc:	ed b7       	in	r30, 0x3d	; 61
    35be:	fe b7       	in	r31, 0x3e	; 62
    35c0:	92 83       	std	Z+2, r25	; 0x02
    35c2:	81 83       	std	Z+1, r24	; 0x01
    35c4:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
         UART_PRINT_HEX(macConfig.parentShortAddress);
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <appAssociateConfirm+0x1c>
    35ca:	0a e9       	ldi	r16, 0x9A	; 154
    35cc:	13 e0       	ldi	r17, 0x03	; 3
    35ce:	ed b7       	in	r30, 0x3d	; 61
    35d0:	fe b7       	in	r31, 0x3e	; 62
    35d2:	12 83       	std	Z+2, r17	; 0x02
    35d4:	01 83       	std	Z+1, r16	; 0x01
    35d6:	80 91 60 18 	lds	r24, 0x1860
    35da:	90 91 61 18 	lds	r25, 0x1861
    35de:	94 83       	std	Z+4, r25	; 0x04
    35e0:	83 83       	std	Z+3, r24	; 0x03
    35e2:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
         UART_PRINT(" as ");
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	8c e2       	ldi	r24, 0x2C	; 44
    35ec:	95 e0       	ldi	r25, 0x05	; 5
    35ee:	ed b7       	in	r30, 0x3d	; 61
    35f0:	fe b7       	in	r31, 0x3e	; 62
    35f2:	92 83       	std	Z+2, r25	; 0x02
    35f4:	81 83       	std	Z+1, r24	; 0x01
    35f6:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
         UART_PRINT_HEX(macConfig.shortAddress);
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <appAssociateConfirm+0x4e>
    35fc:	ed b7       	in	r30, 0x3d	; 61
    35fe:	fe b7       	in	r31, 0x3e	; 62
    3600:	12 83       	std	Z+2, r17	; 0x02
    3602:	01 83       	std	Z+1, r16	; 0x01
    3604:	80 91 5e 18 	lds	r24, 0x185E
    3608:	90 91 5f 18 	lds	r25, 0x185F
    360c:	94 83       	std	Z+4, r25	; 0x04
    360e:	83 83       	std	Z+3, r24	; 0x03
    3610:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
         if (PLATFORM == RAVEN && SERIAL)
            serial_send_frame(REPORT_ASSOCIATED, 0, NULL);

         /* 6lowpan association */
         if (IPV6LOWPAN == 1)
            sixlowpan_hc01_gen_rs();
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <sixlowpan_hc01_gen_rs>
    3620:	1a c0       	rjmp	.+52     	; 0x3656 <appAssociateConfirm+0xa8>
#endif
      }
      else
      {

         UART_PRINT("Association of %x failed\r\n", macConfig.shortAddress);
    3622:	00 d0       	rcall	.+0      	; 0x3624 <appAssociateConfirm+0x76>
    3624:	00 d0       	rcall	.+0      	; 0x3626 <appAssociateConfirm+0x78>
    3626:	81 e3       	ldi	r24, 0x31	; 49
    3628:	95 e0       	ldi	r25, 0x05	; 5
    362a:	ed b7       	in	r30, 0x3d	; 61
    362c:	fe b7       	in	r31, 0x3e	; 62
    362e:	92 83       	std	Z+2, r25	; 0x02
    3630:	81 83       	std	Z+1, r24	; 0x01
    3632:	80 91 5e 18 	lds	r24, 0x185E
    3636:	90 91 5f 18 	lds	r25, 0x185F
    363a:	94 83       	std	Z+4, r25	; 0x04
    363c:	83 83       	std	Z+3, r24	; 0x03
    363e:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
            nodeSleep(100);
            appStartScan();
         }
         else
            // Try again in one second
            macSetAlarm(1000, appStartScan);
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	88 ee       	ldi	r24, 0xE8	; 232
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	6c e7       	ldi	r22, 0x7C	; 124
    3650:	7f e1       	ldi	r23, 0x1F	; 31
    3652:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
      }
   }
}
    3656:	1f 91       	pop	r17
    3658:	0f 91       	pop	r16
    365a:	08 95       	ret

0000365c <sappStartScan>:
 */
void sappStartScan(void)
{
   if(NODETYPE != COORD)
   {
      macInit(0xff);
    365c:	8f ef       	ldi	r24, 0xFF	; 255
    365e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <macInit>

      macScan();
    3662:	0e 94 c2 11 	call	0x2384	; 0x2384 <macScan>
   }

   if (IPV6LOWPAN == 1)
      sixlowpan_application_init();
    3666:	0e 94 91 07 	call	0xf22	; 0xf22 <sixlowpan_application_init>
}
    366a:	08 95       	ret

0000366c <appPacketSendFailed>:
/**
   Application callback function, called when the MAC fails to receive
   an ACK packet from a node that we sent a packet to.
 */
void appPacketSendFailed(void)
{
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17

   u8 parentFailed;
   if (NODETYPE != COORD)
   {
      // don't mess with assessing failures during scanning
      if (macIsScanning())
    3670:	0e 94 19 11 	call	0x2232	; 0x2232 <macIsScanning>
    3674:	88 23       	and	r24, r24
    3676:	09 f0       	breq	.+2      	; 0x367a <appPacketSendFailed+0xe>
    3678:	4e c0       	rjmp	.+156    	; 0x3716 <appPacketSendFailed+0xaa>
         return;

      debugMsgStr("\r\nFail=");
    367a:	60 91 34 1f 	lds	r22, 0x1F34
    367e:	70 91 35 1f 	lds	r23, 0x1F35
    3682:	8c e4       	ldi	r24, 0x4C	; 76
    3684:	95 e0       	ldi	r25, 0x05	; 5
    3686:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
      debugMsgInt(failCount+1);
    368a:	00 d0       	rcall	.+0      	; 0x368c <appPacketSendFailed+0x20>
    368c:	00 d0       	rcall	.+0      	; 0x368e <appPacketSendFailed+0x22>
    368e:	00 d0       	rcall	.+0      	; 0x3690 <appPacketSendFailed+0x24>
    3690:	ed b7       	in	r30, 0x3d	; 61
    3692:	fe b7       	in	r31, 0x3e	; 62
    3694:	31 96       	adiw	r30, 0x01	; 1
    3696:	0a e6       	ldi	r16, 0x6A	; 106
    3698:	18 e1       	ldi	r17, 0x18	; 24
    369a:	ad b7       	in	r26, 0x3d	; 61
    369c:	be b7       	in	r27, 0x3e	; 62
    369e:	12 96       	adiw	r26, 0x02	; 2
    36a0:	1c 93       	st	X, r17
    36a2:	0e 93       	st	-X, r16
    36a4:	11 97       	sbiw	r26, 0x01	; 1
    36a6:	82 ea       	ldi	r24, 0xA2	; 162
    36a8:	94 e0       	ldi	r25, 0x04	; 4
    36aa:	93 83       	std	Z+3, r25	; 0x03
    36ac:	82 83       	std	Z+2, r24	; 0x02
    36ae:	80 91 b6 0c 	lds	r24, 0x0CB6
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	95 83       	std	Z+5, r25	; 0x05
    36b8:	84 83       	std	Z+4, r24	; 0x04
    36ba:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	80 91 34 1f 	lds	r24, 0x1F34
    36c6:	90 91 35 1f 	lds	r25, 0x1F35
    36ca:	ed b7       	in	r30, 0x3d	; 61
    36cc:	fe b7       	in	r31, 0x3e	; 62
    36ce:	92 83       	std	Z+2, r25	; 0x02
    36d0:	81 83       	std	Z+1, r24	; 0x01
    36d2:	14 83       	std	Z+4, r17	; 0x04
    36d4:	03 83       	std	Z+3, r16	; 0x03
    36d6:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>

      parentFailed = (macConfig.lastDestAddr == macConfig.parentShortAddress);
    36da:	40 91 66 18 	lds	r20, 0x1866
    36de:	50 91 67 18 	lds	r21, 0x1867
    36e2:	20 91 60 18 	lds	r18, 0x1860
    36e6:	30 91 61 18 	lds	r19, 0x1861
      // Send an empty data packet
      if (parentFailed && NODETYPE == ROUTER)
         macDataRequest(macConfig.parentShortAddress, 0, NULL);

      // Don't have a cow until we have missed a few packets in a row
      if (++failCount < 8)
    36ea:	80 91 b6 0c 	lds	r24, 0x0CB6
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	80 93 b6 0c 	sts	0x0CB6, r24
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	88 30       	cpi	r24, 0x08	; 8
    36fe:	58 f0       	brcs	.+22     	; 0x3716 <appPacketSendFailed+0xaa>
         return;
      }

      // A sent packet failed to reach its destination too many times
      // figure out which way we were sending when the failure occurred
      if (parentFailed)
    3700:	42 17       	cp	r20, r18
    3702:	53 07       	cpc	r21, r19
    3704:	41 f4       	brne	.+16     	; 0x3716 <appPacketSendFailed+0xaa>
      {
         // re-associate if we were sending upstream
         macConfig.associated = false;
    3706:	10 92 59 18 	sts	0x1859, r1

         // It is possible to make the coord/end units re-connect
         // to the coordinator more quickly by not scanning all
         // available channels.  To do this, uncomment the following
         // line.
         macSetScanChannel(macConfig.currentChannel);
    370a:	80 91 65 18 	lds	r24, 0x1865
    370e:	0e 94 1c 11 	call	0x2238	; 0x2238 <macSetScanChannel>

         if (APP == SENSOR)
         {
            sensorLostNetwork();
         }
         appStartScan(); // do not wait for new scan
    3712:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <appStartScan>
         macRemoveChild(macConfig.lastDestAddr);
         debugMsgStr("\r\nDropped child bcs packet send failed.");
      }
   }

}
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    371a:	08 95       	ret

0000371c <appPingRsp>:
   response packet addressed to this node.

   @param addr The short address of the node that send the ping response
 */
void appPingRsp(u16 addr)
{
    371c:	ef 92       	push	r14
    371e:	ff 92       	push	r15
    3720:	0f 93       	push	r16
    3722:	1f 93       	push	r17
    3724:	7c 01       	movw	r14, r24
   debugMsgStr("\r\nPing response from ");
    3726:	60 91 34 1f 	lds	r22, 0x1F34
    372a:	70 91 35 1f 	lds	r23, 0x1F35
    372e:	84 e5       	ldi	r24, 0x54	; 84
    3730:	95 e0       	ldi	r25, 0x05	; 5
    3732:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgHex(addr);
    3736:	00 d0       	rcall	.+0      	; 0x3738 <appPingRsp+0x1c>
    3738:	00 d0       	rcall	.+0      	; 0x373a <appPingRsp+0x1e>
    373a:	00 d0       	rcall	.+0      	; 0x373c <appPingRsp+0x20>
    373c:	ed b7       	in	r30, 0x3d	; 61
    373e:	fe b7       	in	r31, 0x3e	; 62
    3740:	31 96       	adiw	r30, 0x01	; 1
    3742:	0a e6       	ldi	r16, 0x6A	; 106
    3744:	18 e1       	ldi	r17, 0x18	; 24
    3746:	ad b7       	in	r26, 0x3d	; 61
    3748:	be b7       	in	r27, 0x3e	; 62
    374a:	12 96       	adiw	r26, 0x02	; 2
    374c:	1c 93       	st	X, r17
    374e:	0e 93       	st	-X, r16
    3750:	11 97       	sbiw	r26, 0x01	; 1
    3752:	8a e9       	ldi	r24, 0x9A	; 154
    3754:	93 e0       	ldi	r25, 0x03	; 3
    3756:	93 83       	std	Z+3, r25	; 0x03
    3758:	82 83       	std	Z+2, r24	; 0x02
    375a:	f5 82       	std	Z+5, r15	; 0x05
    375c:	e4 82       	std	Z+4, r14	; 0x04
    375e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	80 91 34 1f 	lds	r24, 0x1F34
    376a:	90 91 35 1f 	lds	r25, 0x1F35
    376e:	ed b7       	in	r30, 0x3d	; 61
    3770:	fe b7       	in	r31, 0x3e	; 62
    3772:	92 83       	std	Z+2, r25	; 0x02
    3774:	81 83       	std	Z+1, r24	; 0x01
    3776:	14 83       	std	Z+4, r17	; 0x04
    3778:	03 83       	std	Z+3, r16	; 0x03
    377a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
   debugMsgStr(" LQI=");
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	60 91 34 1f 	lds	r22, 0x1F34
    378a:	70 91 35 1f 	lds	r23, 0x1F35
    378e:	8a e6       	ldi	r24, 0x6A	; 106
    3790:	95 e0       	ldi	r25, 0x05	; 5
    3792:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgInt(radioGetSavedLqiValue());
    3796:	0e 94 ae 12 	call	0x255c	; 0x255c <radioGetSavedLqiValue>
    379a:	00 d0       	rcall	.+0      	; 0x379c <appPingRsp+0x80>
    379c:	00 d0       	rcall	.+0      	; 0x379e <appPingRsp+0x82>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <appPingRsp+0x84>
    37a0:	ed b7       	in	r30, 0x3d	; 61
    37a2:	fe b7       	in	r31, 0x3e	; 62
    37a4:	31 96       	adiw	r30, 0x01	; 1
    37a6:	ad b7       	in	r26, 0x3d	; 61
    37a8:	be b7       	in	r27, 0x3e	; 62
    37aa:	12 96       	adiw	r26, 0x02	; 2
    37ac:	1c 93       	st	X, r17
    37ae:	0e 93       	st	-X, r16
    37b0:	11 97       	sbiw	r26, 0x01	; 1
    37b2:	72 ea       	ldi	r23, 0xA2	; 162
    37b4:	e7 2e       	mov	r14, r23
    37b6:	74 e0       	ldi	r23, 0x04	; 4
    37b8:	f7 2e       	mov	r15, r23
    37ba:	f3 82       	std	Z+3, r15	; 0x03
    37bc:	e2 82       	std	Z+2, r14	; 0x02
    37be:	84 83       	std	Z+4, r24	; 0x04
    37c0:	15 82       	std	Z+5, r1	; 0x05
    37c2:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	80 91 34 1f 	lds	r24, 0x1F34
    37ce:	90 91 35 1f 	lds	r25, 0x1F35
    37d2:	ed b7       	in	r30, 0x3d	; 61
    37d4:	fe b7       	in	r31, 0x3e	; 62
    37d6:	92 83       	std	Z+2, r25	; 0x02
    37d8:	81 83       	std	Z+1, r24	; 0x01
    37da:	14 83       	std	Z+4, r17	; 0x04
    37dc:	03 83       	std	Z+3, r16	; 0x03
    37de:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
   debugMsgStr(" RSSI=");
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	60 91 34 1f 	lds	r22, 0x1F34
    37ee:	70 91 35 1f 	lds	r23, 0x1F35
    37f2:	80 e7       	ldi	r24, 0x70	; 112
    37f4:	95 e0       	ldi	r25, 0x05	; 5
    37f6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <fputs>
   debugMsgInt(radioGetSavedRssiValue());
    37fa:	0e 94 ab 12 	call	0x2556	; 0x2556 <radioGetSavedRssiValue>
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <appPingRsp+0xe4>
    3800:	00 d0       	rcall	.+0      	; 0x3802 <appPingRsp+0xe6>
    3802:	00 d0       	rcall	.+0      	; 0x3804 <appPingRsp+0xe8>
    3804:	ed b7       	in	r30, 0x3d	; 61
    3806:	fe b7       	in	r31, 0x3e	; 62
    3808:	31 96       	adiw	r30, 0x01	; 1
    380a:	ad b7       	in	r26, 0x3d	; 61
    380c:	be b7       	in	r27, 0x3e	; 62
    380e:	12 96       	adiw	r26, 0x02	; 2
    3810:	1c 93       	st	X, r17
    3812:	0e 93       	st	-X, r16
    3814:	11 97       	sbiw	r26, 0x01	; 1
    3816:	f3 82       	std	Z+3, r15	; 0x03
    3818:	e2 82       	std	Z+2, r14	; 0x02
    381a:	84 83       	std	Z+4, r24	; 0x04
    381c:	15 82       	std	Z+5, r1	; 0x05
    381e:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <sprintf>
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	80 91 34 1f 	lds	r24, 0x1F34
    382a:	90 91 35 1f 	lds	r25, 0x1F35
    382e:	ed b7       	in	r30, 0x3d	; 61
    3830:	fe b7       	in	r31, 0x3e	; 62
    3832:	92 83       	std	Z+2, r25	; 0x02
    3834:	81 83       	std	Z+1, r24	; 0x01
    3836:	14 83       	std	Z+4, r17	; 0x04
    3838:	03 83       	std	Z+3, r16	; 0x03
    383a:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <fprintf>
   debugMsgCrLf();
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	83 e5       	ldi	r24, 0x53	; 83
    3848:	93 e0       	ldi	r25, 0x03	; 3
    384a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <serial_puts>
   if (PLATFORM == RAVEN && SERIAL)
      // Tell 3290p
      serial_send_frame(REPORT_PING_BEEP, 2, (u8*)&addr);

   // turn on the LED
   LED_ON(1);
    384e:	71 98       	cbi	0x0e, 1	; 14
    3850:	69 9a       	sbi	0x0d, 1	; 13

   // and make it turn off after a litte bit
   macSetAlarm(LED_DELAY,ledoff1);
    3852:	8a e0       	ldi	r24, 0x0A	; 10
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	63 e9       	ldi	r22, 0x93	; 147
    3858:	75 e1       	ldi	r23, 0x15	; 21
    385a:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
   //#if(__arm__)
   //    gotPanCoordPing = 1;
   //#endif
}
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	08 95       	ret

00003868 <twiInit>:
#define twiWrite(a,b)
#endif // PLATFORM == SPITFIRE

#else // APP == SENSOR

void twiInit(void) {;}
    3868:	08 95       	ret

0000386a <twiWrite>:
void twiWrite(u8 addr, u8 data) {;}
    386a:	08 95       	ret

0000386c <sensorGetName>:
char *sensorGetName(void) {return NULL;}
    386c:	80 e0       	ldi	r24, 0x00	; 0
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	08 95       	ret

00003872 <sensorSendSetNodeName>:
void sensorSendSetNodeName(u16 addr, char *name) {}
    3872:	08 95       	ret

00003874 <serial_init>:

    @param cbuf Points to the structure to be initialized.
*/
static void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
    3874:	10 92 3a 0d 	sts	0x0D3A, r1
    3878:	20 91 3a 0d 	lds	r18, 0x0D3A
    387c:	20 93 39 0d 	sts	0x0D39, r18
    3880:	10 92 b8 0c 	sts	0x0CB8, r1
    3884:	20 91 b8 0c 	lds	r18, 0x0CB8
    3888:	20 93 b7 0c 	sts	0x0CB7, r18
    if (PLATFORM == RAVENUSB)
        uart_usb_init();
    else
    {
        // Enable RX,TX and RX interrupt on USART
        USART_SETUP();
    388c:	28 e9       	ldi	r18, 0x98	; 152
    388e:	20 93 c9 00 	sts	0x00C9, r18
    3892:	26 e0       	ldi	r18, 0x06	; 6
    3894:	20 93 ca 00 	sts	0x00CA, r18
    3898:	10 92 cd 00 	sts	0x00CD, r1
    389c:	2c e0       	ldi	r18, 0x0C	; 12
    389e:	20 93 cc 00 	sts	0x00CC, r18
        
        // save pointer to rx handler function
        rx_handler = rxh;
    38a2:	90 93 bc 0d 	sts	0x0DBC, r25
    38a6:	80 93 bb 0d 	sts	0x0DBB, r24
        
        // Init the RCB_BB if necessary
        if (PLATFORM < RAVEN) // RCB's only
            INIT_RCB_BB();
    }
}
    38aa:	08 95       	ret

000038ac <serial_shutdown>:
   Turns off the serial port and RCB_BB transmitter chip
*/
void serial_shutdown(void)
{
    if (PLATFORM != RAVENUSB)
        USART_STOP();
    38ac:	10 92 c9 00 	sts	0x00C9, r1
}
    38b0:	08 95       	ret

000038b2 <serial_putchar>:

    @param ch Character to be placed in the serial output buffer and
    then transmitted over the serial port.
*/
void serial_putchar(char ch)
{
    38b2:	38 2f       	mov	r19, r24
    // If we're paused, don't send anything
    if (pause)
    38b4:	80 91 be 0d 	lds	r24, 0x0DBE
    38b8:	88 23       	and	r24, r24
    38ba:	d9 f5       	brne	.+118    	; 0x3932 <serial_putchar+0x80>
        return;

    // Interrupts really should be on here
    sei();
    38bc:	78 94       	sei
    @param ch Character to add to buffer.
*/
static void add_to_circ_buf(tcirc_buf *cbuf, u8 ch)
{
    // Add char to buffer
    u8 newhead = cbuf->head;
    38be:	90 91 b7 0c 	lds	r25, 0x0CB7
    newhead++;
    38c2:	9f 5f       	subi	r25, 0xFF	; 255
    if (newhead >= BUFSIZE)
    38c4:	97 ff       	sbrs	r25, 7
    38c6:	05 c0       	rjmp	.+10     	; 0x38d2 <serial_putchar+0x20>
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	03 c0       	rjmp	.+6      	; 0x38d2 <serial_putchar+0x20>
        newhead = 0;
    while (newhead == cbuf->tail)
        if (rx)
    38cc:	22 23       	and	r18, r18
    38ce:	19 f0       	breq	.+6      	; 0x38d6 <serial_putchar+0x24>
    38d0:	0e c0       	rjmp	.+28     	; 0x38ee <serial_putchar+0x3c>
    38d2:	20 91 bd 0d 	lds	r18, 0x0DBD
    // Add char to buffer
    u8 newhead = cbuf->head;
    newhead++;
    if (newhead >= BUFSIZE)
        newhead = 0;
    while (newhead == cbuf->tail)
    38d6:	80 91 b8 0c 	lds	r24, 0x0CB8
    38da:	98 17       	cp	r25, r24
    38dc:	b9 f3       	breq	.-18     	; 0x38cc <serial_putchar+0x1a>
            return;
        else
            cdc_task();


    cbuf->buf[cbuf->head] = ch;
    38de:	e0 91 b7 0c 	lds	r30, 0x0CB7
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	e9 54       	subi	r30, 0x49	; 73
    38e6:	f3 4f       	sbci	r31, 0xF3	; 243
    38e8:	32 83       	std	Z+2, r19	; 0x02
    cbuf->head = newhead;
    38ea:	90 93 b7 0c 	sts	0x0CB7, r25
    add_to_circ_buf(&txbuf, ch);

    // Send the first byte if nothing is yet being sent
    // This is determined by seeing if the TX complete interrupt is
    // enabled.
    if (PLATFORM != RAVENUSB && USART_CHAR_READY())
    38ee:	80 91 c9 00 	lds	r24, 0x00C9
    38f2:	85 fd       	sbrc	r24, 5
    38f4:	1e c0       	rjmp	.+60     	; 0x3932 <serial_putchar+0x80>
    {
        // Wait for the UDR buffer to get emptied.
        while (USART_DRE_WAIT())
    38f6:	80 91 c8 00 	lds	r24, 0x00C8
    38fa:	85 ff       	sbrs	r24, 5
    38fc:	fc cf       	rjmp	.-8      	; 0x38f6 <serial_putchar+0x44>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    38fe:	90 91 b8 0c 	lds	r25, 0x0CB8
    u8 retval = cbuf->buf[newtail];
    3902:	e9 2f       	mov	r30, r25
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	e9 54       	subi	r30, 0x49	; 73
    3908:	f3 4f       	sbci	r31, 0xF3	; 243
    390a:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    390c:	80 91 b7 0c 	lds	r24, 0x0CB7
    3910:	98 17       	cp	r25, r24
    3912:	11 f4       	brne	.+4      	; 0x3918 <serial_putchar+0x66>
    3914:	2f ef       	ldi	r18, 0xFF	; 255
    3916:	06 c0       	rjmp	.+12     	; 0x3924 <serial_putchar+0x72>
        return SERIAL_ERR;

    newtail++;
    3918:	e9 2f       	mov	r30, r25
    391a:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    391c:	e7 fd       	sbrc	r30, 7
    391e:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    3920:	e0 93 b8 0c 	sts	0x0CB8, r30
    {
        // Wait for the UDR buffer to get emptied.
        while (USART_DRE_WAIT())
            ;
        // Feed the first byte to get the transmission started.
        USART_REG = get_from_circ_buf(&txbuf);
    3924:	20 93 ce 00 	sts	0x00CE, r18

        // Enable the UART Data Register Empty interrupt.
        USART_DRE_ENABLE();
    3928:	80 91 c9 00 	lds	r24, 0x00C9
    392c:	80 62       	ori	r24, 0x20	; 32
    392e:	80 93 c9 00 	sts	0x00C9, r24
    3932:	08 95       	ret

00003934 <serial_puts>:
   @brief Sends an ASCIIZ string to the serial port.

   @param str Pointer to ASCIIZ terminated string to send.
*/
void serial_puts(char *str)
{
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	ec 01       	movw	r28, r24
    393a:	03 c0       	rjmp	.+6      	; 0x3942 <serial_puts+0xe>
    while (*str)
    {
        serial_putchar(*str);
    393c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <serial_putchar>
        str++;
    3940:	21 96       	adiw	r28, 0x01	; 1

   @param str Pointer to ASCIIZ terminated string to send.
*/
void serial_puts(char *str)
{
    while (*str)
    3942:	88 81       	ld	r24, Y
    3944:	88 23       	and	r24, r24
    3946:	d1 f7       	brne	.-12     	; 0x393c <serial_puts+0x8>
    {
        serial_putchar(*str);
        str++;
    }
}
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	08 95       	ret

0000394e <serial_ischar>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    394e:	80 91 39 0d 	lds	r24, 0x0D39
    3952:	90 91 3a 0d 	lds	r25, 0x0D3A
    3956:	28 2f       	mov	r18, r24
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	29 1b       	sub	r18, r25
    395c:	31 09       	sbc	r19, r1
    if (count < 0)
    395e:	37 ff       	sbrs	r19, 7
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <serial_ischar+0x18>
        count += BUFSIZE;
    3962:	20 58       	subi	r18, 0x80	; 128
    3964:	3f 4f       	sbci	r19, 0xFF	; 255
   @return The number of characters waiting
*/
u8 serial_ischar(void)
{
    return circ_buf_count(&rxbuf);
}
    3966:	82 2f       	mov	r24, r18
    3968:	08 95       	ret

0000396a <rx_buf_count>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    396a:	80 91 39 0d 	lds	r24, 0x0D39
    396e:	90 91 3a 0d 	lds	r25, 0x0D3A
    3972:	28 2f       	mov	r18, r24
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	29 1b       	sub	r18, r25
    3978:	31 09       	sbc	r19, r1
    if (count < 0)
    397a:	37 ff       	sbrs	r19, 7
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <rx_buf_count+0x18>
        count += BUFSIZE;
    397e:	20 58       	subi	r18, 0x80	; 128
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
   @return true if we can take for chars, otherwise false.
*/
u8 rx_buf_count(void)
{
    return circ_buf_count(&rxbuf);
}
    3982:	82 2f       	mov	r24, r18
    3984:	08 95       	ret

00003986 <tx_buf_has_char>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    3986:	80 91 b7 0c 	lds	r24, 0x0CB7
    398a:	90 91 b8 0c 	lds	r25, 0x0CB8
    398e:	28 2f       	mov	r18, r24
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	29 1b       	sub	r18, r25
    3994:	31 09       	sbc	r19, r1
    if (count < 0)
    3996:	37 ff       	sbrs	r19, 7
    3998:	02 c0       	rjmp	.+4      	; 0x399e <tx_buf_has_char+0x18>
        count += BUFSIZE;
    399a:	20 58       	subi	r18, 0x80	; 128
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
}

u8 tx_buf_has_char(void)
{
    return circ_buf_count(&txbuf);
}
    399e:	82 2f       	mov	r24, r18
    39a0:	08 95       	ret

000039a2 <get_tx_char>:
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    39a2:	90 91 b8 0c 	lds	r25, 0x0CB8
    u8 retval = cbuf->buf[newtail];
    39a6:	e9 2f       	mov	r30, r25
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	e9 54       	subi	r30, 0x49	; 73
    39ac:	f3 4f       	sbci	r31, 0xF3	; 243
    39ae:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    39b0:	80 91 b7 0c 	lds	r24, 0x0CB7
    39b4:	98 17       	cp	r25, r24
    39b6:	11 f4       	brne	.+4      	; 0x39bc <get_tx_char+0x1a>
    39b8:	2f ef       	ldi	r18, 0xFF	; 255
    39ba:	06 c0       	rjmp	.+12     	; 0x39c8 <get_tx_char+0x26>
        return SERIAL_ERR;

    newtail++;
    39bc:	e9 2f       	mov	r30, r25
    39be:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    39c0:	e7 fd       	sbrc	r30, 7
    39c2:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    39c4:	e0 93 b8 0c 	sts	0x0CB8, r30
}

u8 get_tx_char(void)
{
    return get_from_circ_buf(&txbuf);
}
    39c8:	82 2f       	mov	r24, r18
    39ca:	08 95       	ret

000039cc <serial_getchar>:
 */
static u8 circ_buf_count(tcirc_buf *cbuf)
{
    s16 count;

    count = cbuf->head - cbuf->tail;
    39cc:	80 91 39 0d 	lds	r24, 0x0D39
    39d0:	90 91 3a 0d 	lds	r25, 0x0D3A
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	29 1b       	sub	r18, r25
    39da:	31 09       	sbc	r19, r1
    if (count < 0)
    39dc:	37 ff       	sbrs	r19, 7
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <serial_getchar+0x18>
        count += BUFSIZE;
    39e0:	20 58       	subi	r18, 0x80	; 128
    39e2:	3f 4f       	sbci	r19, 0xFF	; 255
   @return Character from serial port.
*/
s8 serial_getchar(void)
{
    // wait for char if necessary
    while (!circ_buf_count(&rxbuf))
    39e4:	22 23       	and	r18, r18
    39e6:	91 f3       	breq	.-28     	; 0x39cc <serial_getchar>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    39e8:	90 91 3a 0d 	lds	r25, 0x0D3A
    u8 retval = cbuf->buf[newtail];
    39ec:	e9 2f       	mov	r30, r25
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	e7 5c       	subi	r30, 0xC7	; 199
    39f2:	f2 4f       	sbci	r31, 0xF2	; 242
    39f4:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    39f6:	80 91 39 0d 	lds	r24, 0x0D39
    39fa:	98 17       	cp	r25, r24
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <serial_getchar+0x36>
    39fe:	2f ef       	ldi	r18, 0xFF	; 255
    3a00:	06 c0       	rjmp	.+12     	; 0x3a0e <serial_getchar+0x42>
        return SERIAL_ERR;

    newtail++;
    3a02:	e9 2f       	mov	r30, r25
    3a04:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    3a06:	e7 fd       	sbrc	r30, 7
    3a08:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    3a0a:	e0 93 3a 0d 	sts	0x0D3A, r30
    while (!circ_buf_count(&rxbuf))
        cdc_task();

    // grab one from buffer.
    return get_from_circ_buf(&rxbuf);
}
    3a0e:	82 2f       	mov	r24, r18
    3a10:	08 95       	ret

00003a12 <serial_gets>:
   @param echo Specifies whether to echo each character received back to host.

   @return Number of characters in string.
*/
u8 serial_gets(char *str, u8 len, u8 echo)
{
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	ec 01       	movw	r28, r24
    3a22:	d4 2e       	mov	r13, r20
    3a24:	00 e0       	ldi	r16, 0x00	; 0
    u8 ch;

    for(;;)
    {
        ch = serial_getchar();
        if (count > len - 2 &&
    3a26:	e6 2e       	mov	r14, r22
    3a28:	ff 24       	eor	r15, r15
    3a2a:	08 94       	sec
    3a2c:	e1 08       	sbc	r14, r1
    3a2e:	f1 08       	sbc	r15, r1
    u8 count=0;                 // Number of characters we have so far
    u8 ch;

    for(;;)
    {
        ch = serial_getchar();
    3a30:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <serial_getchar>
    3a34:	18 2f       	mov	r17, r24
        if (count > len - 2 &&
    3a36:	80 2f       	mov	r24, r16
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	8e 15       	cp	r24, r14
    3a3c:	9f 05       	cpc	r25, r15
    3a3e:	24 f0       	brlt	.+8      	; 0x3a48 <serial_gets+0x36>
    3a40:	1d 30       	cpi	r17, 0x0D	; 13
    3a42:	11 f0       	breq	.+4      	; 0x3a48 <serial_gets+0x36>
    3a44:	18 30       	cpi	r17, 0x08	; 8
    3a46:	a1 f7       	brne	.-24     	; 0x3a30 <serial_gets+0x1e>
            ch != '\r' &&
            ch != 8)
            continue;
        if (echo)
    3a48:	dd 20       	and	r13, r13
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <serial_gets+0x40>
            serial_putchar(ch);
    3a4c:	81 2f       	mov	r24, r17
    3a4e:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <serial_putchar>
        switch(ch)
    3a52:	18 30       	cpi	r17, 0x08	; 8
    3a54:	61 f0       	breq	.+24     	; 0x3a6e <serial_gets+0x5c>
    3a56:	1d 30       	cpi	r17, 0x0D	; 13
    3a58:	81 f4       	brne	.+32     	; 0x3a7a <serial_gets+0x68>
        {
        case '\r':
            // end of input
            *str = 0;
    3a5a:	18 82       	st	Y, r1
            *str++ = ch;
            count++;
            break;
        }
    }
}
    3a5c:	80 2f       	mov	r24, r16
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	1f 91       	pop	r17
    3a64:	0f 91       	pop	r16
    3a66:	ff 90       	pop	r15
    3a68:	ef 90       	pop	r14
    3a6a:	df 90       	pop	r13
    3a6c:	08 95       	ret
            // end of input
            *str = 0;
            return count;
        case 8:
            // backspace
            if (count)
    3a6e:	00 23       	and	r16, r16
    3a70:	f9 f2       	breq	.-66     	; 0x3a30 <serial_gets+0x1e>
            {
                count--;
    3a72:	01 50       	subi	r16, 0x01	; 1
                *str-- = 0;
    3a74:	18 82       	st	Y, r1
    3a76:	21 97       	sbiw	r28, 0x01	; 1
    3a78:	db cf       	rjmp	.-74     	; 0x3a30 <serial_gets+0x1e>
            }
            break;
        default:
            // just another char for string
            *str++ = ch;
    3a7a:	19 93       	st	Y+, r17
            count++;
    3a7c:	0f 5f       	subi	r16, 0xFF	; 255
    3a7e:	d8 cf       	rjmp	.-80     	; 0x3a30 <serial_gets+0x1e>

00003a80 <serial_toggle_pause>:
   @brief Toggles the pause flag.  When paused, any data sent to the
   serial send function is dropped.
*/
void serial_toggle_pause(void)
{
    pause = !pause;
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	80 91 be 0d 	lds	r24, 0x0DBE
    3a86:	88 23       	and	r24, r24
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <serial_toggle_pause+0xc>
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	90 93 be 0d 	sts	0x0DBE, r25
}
    3a90:	08 95       	ret

00003a92 <add_char_to_rx>:
        // Put character in Rx Buffer.
        rx = true;
        add_to_circ_buf(&rxbuf, ch);
        rx = false;
    }
}
    3a92:	08 95       	ret

00003a94 <serial_rcv_frame>:
            SerialFrame->state = sof;
            break;
        }
    }
    return false;
}
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	08 95       	ret

00003a98 <serial_send_frame>:
        serial_putchar(cmd);
        for (i=0;i<=payload_length-1;i++)
   	    serial_putchar(payload[i]);
        serial_putchar(EOF_CHAR);
    }
}
    3a98:	08 95       	ret

00003a9a <__vector_36>:
    @brief USART ISR RX function.  If an RX handler was passed to
    serial_init(), then that handler will be called each time this ISR
    is called.
*/
ISR(USARTRXVECT)
{
    3a9a:	1f 92       	push	r1
    3a9c:	0f 92       	push	r0
    3a9e:	0f b6       	in	r0, 0x3f	; 63
    3aa0:	0f 92       	push	r0
    3aa2:	0b b6       	in	r0, 0x3b	; 59
    3aa4:	0f 92       	push	r0
    3aa6:	11 24       	eor	r1, r1
    3aa8:	2f 93       	push	r18
    3aaa:	3f 93       	push	r19
    3aac:	4f 93       	push	r20
    3aae:	5f 93       	push	r21
    3ab0:	6f 93       	push	r22
    3ab2:	7f 93       	push	r23
    3ab4:	8f 93       	push	r24
    3ab6:	9f 93       	push	r25
    3ab8:	af 93       	push	r26
    3aba:	bf 93       	push	r27
    3abc:	ef 93       	push	r30
    3abe:	ff 93       	push	r31
    // Get byte from serial port
    u8 ch = USART_REG;
    3ac0:	20 91 ce 00 	lds	r18, 0x00CE
    @param ch Character to add to buffer.
*/
static void add_to_circ_buf(tcirc_buf *cbuf, u8 ch)
{
    // Add char to buffer
    u8 newhead = cbuf->head;
    3ac4:	90 91 39 0d 	lds	r25, 0x0D39
    newhead++;
    3ac8:	9f 5f       	subi	r25, 0xFF	; 255
    if (newhead >= BUFSIZE)
    3aca:	97 fd       	sbrc	r25, 7
    3acc:	90 e0       	ldi	r25, 0x00	; 0
        newhead = 0;
    while (newhead == cbuf->tail)
    3ace:	80 91 3a 0d 	lds	r24, 0x0D3A
    3ad2:	98 17       	cp	r25, r24
    3ad4:	41 f0       	breq	.+16     	; 0x3ae6 <__vector_36+0x4c>
            return;
        else
            cdc_task();


    cbuf->buf[cbuf->head] = ch;
    3ad6:	e0 91 39 0d 	lds	r30, 0x0D39
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	e7 5c       	subi	r30, 0xC7	; 199
    3ade:	f2 4f       	sbci	r31, 0xF2	; 242
    3ae0:	22 83       	std	Z+2, r18	; 0x02
    cbuf->head = newhead;
    3ae2:	90 93 39 0d 	sts	0x0D39, r25
    u8 ch = USART_REG;

    // Put character in Rx Buffer.
    rx = true;
    add_to_circ_buf(&rxbuf, ch);
    rx = false;
    3ae6:	10 92 bd 0d 	sts	0x0DBD, r1

    // And call user's RX handler function
    if (rx_handler)
    3aea:	e0 91 bb 0d 	lds	r30, 0x0DBB
    3aee:	f0 91 bc 0d 	lds	r31, 0x0DBC
    3af2:	30 97       	sbiw	r30, 0x00	; 0
    3af4:	11 f0       	breq	.+4      	; 0x3afa <__vector_36+0x60>
        rx_handler(ch);
    3af6:	82 2f       	mov	r24, r18
    3af8:	09 95       	icall
}
    3afa:	ff 91       	pop	r31
    3afc:	ef 91       	pop	r30
    3afe:	bf 91       	pop	r27
    3b00:	af 91       	pop	r26
    3b02:	9f 91       	pop	r25
    3b04:	8f 91       	pop	r24
    3b06:	7f 91       	pop	r23
    3b08:	6f 91       	pop	r22
    3b0a:	5f 91       	pop	r21
    3b0c:	4f 91       	pop	r20
    3b0e:	3f 91       	pop	r19
    3b10:	2f 91       	pop	r18
    3b12:	0f 90       	pop	r0
    3b14:	0b be       	out	0x3b, r0	; 59
    3b16:	0f 90       	pop	r0
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	0f 90       	pop	r0
    3b1c:	1f 90       	pop	r1
    3b1e:	18 95       	reti

00003b20 <__vector_37>:

/**
    @brief USART ISR TX function.
*/
ISR(USARTTXVECT)
{
    3b20:	1f 92       	push	r1
    3b22:	0f 92       	push	r0
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	0f 92       	push	r0
    3b28:	0b b6       	in	r0, 0x3b	; 59
    3b2a:	0f 92       	push	r0
    3b2c:	11 24       	eor	r1, r1
    3b2e:	2f 93       	push	r18
    3b30:	8f 93       	push	r24
    3b32:	9f 93       	push	r25
    3b34:	ef 93       	push	r30
    3b36:	ff 93       	push	r31
    @retval false if buffer is empty.
*/
static u8 circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    return (cbuf->head != cbuf->tail);
    3b38:	90 91 b7 0c 	lds	r25, 0x0CB7
    3b3c:	80 91 b8 0c 	lds	r24, 0x0CB8
/**
    @brief USART ISR TX function.
*/
ISR(USARTTXVECT)
{
    if (circ_buf_has_char(&txbuf))
    3b40:	98 17       	cp	r25, r24
    3b42:	b1 f0       	breq	.+44     	; 0x3b70 <__vector_37+0x50>
*/
static u8 get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    u8 newtail = cbuf->tail;
    3b44:	90 91 b8 0c 	lds	r25, 0x0CB8
    u8 retval = cbuf->buf[newtail];
    3b48:	e9 2f       	mov	r30, r25
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	e9 54       	subi	r30, 0x49	; 73
    3b4e:	f3 4f       	sbci	r31, 0xF3	; 243
    3b50:	22 81       	ldd	r18, Z+2	; 0x02

    if (newtail == cbuf->head)
    3b52:	80 91 b7 0c 	lds	r24, 0x0CB7
    3b56:	98 17       	cp	r25, r24
    3b58:	11 f4       	brne	.+4      	; 0x3b5e <__vector_37+0x3e>
    3b5a:	2f ef       	ldi	r18, 0xFF	; 255
    3b5c:	06 c0       	rjmp	.+12     	; 0x3b6a <__vector_37+0x4a>
        return SERIAL_ERR;

    newtail++;
    3b5e:	e9 2f       	mov	r30, r25
    3b60:	ef 5f       	subi	r30, 0xFF	; 255
    if (newtail >= BUFSIZE)
    3b62:	e7 fd       	sbrc	r30, 7
    3b64:	e0 e0       	ldi	r30, 0x00	; 0
        // Rollover
        newtail = 0;
    cbuf->tail = newtail;
    3b66:	e0 93 b8 0c 	sts	0x0CB8, r30
*/
ISR(USARTTXVECT)
{
    if (circ_buf_has_char(&txbuf))
        // Feed a byte
        USART_REG = get_from_circ_buf(&txbuf);
    3b6a:	20 93 ce 00 	sts	0x00CE, r18
    3b6e:	05 c0       	rjmp	.+10     	; 0x3b7a <__vector_37+0x5a>
    else
        // No more chars to send, disable this interrupt
        USART_DRE_DISABLE();
    3b70:	80 91 c9 00 	lds	r24, 0x00C9
    3b74:	8f 7d       	andi	r24, 0xDF	; 223
    3b76:	80 93 c9 00 	sts	0x00C9, r24
}
    3b7a:	ff 91       	pop	r31
    3b7c:	ef 91       	pop	r30
    3b7e:	9f 91       	pop	r25
    3b80:	8f 91       	pop	r24
    3b82:	2f 91       	pop	r18
    3b84:	0f 90       	pop	r0
    3b86:	0b be       	out	0x3b, r0	; 59
    3b88:	0f 90       	pop	r0
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	0f 90       	pop	r0
    3b8e:	1f 90       	pop	r1
    3b90:	18 95       	reti

00003b92 <nodeSleep>:
}


#else  // if (NODETYPE != COORD)
// For coord, provide dummy function so that code compiles
void nodeSleep(u16 seconds) {}
    3b92:	08 95       	ret

00003b94 <__vector_25>:
char command[20];
char paraBuffer[80];

//------------------------------RX Interrupt Service Routine---------------------------
ISR(USART0_RX_vect)
{
    3b94:	1f 92       	push	r1
    3b96:	0f 92       	push	r0
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	0f 92       	push	r0
    3b9c:	0b b6       	in	r0, 0x3b	; 59
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	2f 93       	push	r18
    3ba4:	3f 93       	push	r19
    3ba6:	4f 93       	push	r20
    3ba8:	5f 93       	push	r21
    3baa:	6f 93       	push	r22
    3bac:	7f 93       	push	r23
    3bae:	8f 93       	push	r24
    3bb0:	9f 93       	push	r25
    3bb2:	af 93       	push	r26
    3bb4:	bf 93       	push	r27
    3bb6:	ef 93       	push	r30
    3bb8:	ff 93       	push	r31
	//	rxBuffer[rxPtr++] = (unsigned char) UDR0;
	//	printf("---Char received---\n");
	unsigned char nextChar;

	// Daten aus dem Puffer lesen
	nextChar = UDR0;
    3bba:	90 91 c6 00 	lds	r25, 0x00C6
	if (uart_str_complete == 0) { // wenn uart_string gerade in Verwendung, neues Zeichen verwerfen
    3bbe:	80 91 bf 0d 	lds	r24, 0x0DBF
    3bc2:	88 23       	and	r24, r24
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <__vector_25+0x34>
    3bc6:	3f c0       	rjmp	.+126    	; 0x3c46 <__vector_25+0xb2>

		// Daten werden erst in string geschrieben, wenn nicht String-Ende/max Zeichenl�nge erreicht ist/string gerade verarbeitet wird
		if (nextChar != '\n' && nextChar != '\r' && uart_str_count
    3bc8:	9a 30       	cpi	r25, 0x0A	; 10
    3bca:	91 f0       	breq	.+36     	; 0x3bf0 <__vector_25+0x5c>
    3bcc:	9d 30       	cpi	r25, 0x0D	; 13
    3bce:	81 f0       	breq	.+32     	; 0x3bf0 <__vector_25+0x5c>
    3bd0:	80 91 c0 0d 	lds	r24, 0x0DC0
    3bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3bd6:	61 f0       	breq	.+24     	; 0x3bf0 <__vector_25+0x5c>
				< UART_MAXSTRLEN - 1) {
			uart_string[uart_str_count] = nextChar;
    3bd8:	e0 91 c0 0d 	lds	r30, 0x0DC0
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	ef 53       	subi	r30, 0x3F	; 63
    3be0:	f2 4f       	sbci	r31, 0xF2	; 242
    3be2:	90 83       	st	Z, r25
			uart_str_count++;
    3be4:	80 91 c0 0d 	lds	r24, 0x0DC0
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	80 93 c0 0d 	sts	0x0DC0, r24
    3bee:	2b c0       	rjmp	.+86     	; 0x3c46 <__vector_25+0xb2>
//			printf("---Char received---\n");
		} else {
			uart_string[uart_str_count] = '\0';
    3bf0:	e0 91 c0 0d 	lds	r30, 0x0DC0
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	ef 53       	subi	r30, 0x3F	; 63
    3bf8:	f2 4f       	sbci	r31, 0xF2	; 242
    3bfa:	10 82       	st	Z, r1
			uart_str_count = 0;
    3bfc:	10 92 c0 0d 	sts	0x0DC0, r1
			uart_str_complete = 1;
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	80 93 bf 0d 	sts	0x0DBF, r24
			printf("%s ---  %d", uart_string,uart_str_complete);
    3c06:	20 91 bf 0d 	lds	r18, 0x0DBF
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <__vector_25+0x78>
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <__vector_25+0x7a>
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <__vector_25+0x7c>
    3c10:	ed b7       	in	r30, 0x3d	; 61
    3c12:	fe b7       	in	r31, 0x3e	; 62
    3c14:	31 96       	adiw	r30, 0x01	; 1
    3c16:	87 e1       	ldi	r24, 0x17	; 23
    3c18:	98 e0       	ldi	r25, 0x08	; 8
    3c1a:	ad b7       	in	r26, 0x3d	; 61
    3c1c:	be b7       	in	r27, 0x3e	; 62
    3c1e:	12 96       	adiw	r26, 0x02	; 2
    3c20:	9c 93       	st	X, r25
    3c22:	8e 93       	st	-X, r24
    3c24:	11 97       	sbiw	r26, 0x01	; 1
    3c26:	81 ec       	ldi	r24, 0xC1	; 193
    3c28:	9d e0       	ldi	r25, 0x0D	; 13
    3c2a:	93 83       	std	Z+3, r25	; 0x03
    3c2c:	82 83       	std	Z+2, r24	; 0x02
    3c2e:	24 83       	std	Z+4, r18	; 0x04
    3c30:	15 82       	std	Z+5, r1	; 0x05
    3c32:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
    3c36:	8d b7       	in	r24, 0x3d	; 61
    3c38:	9e b7       	in	r25, 0x3e	; 62
    3c3a:	06 96       	adiw	r24, 0x06	; 6
    3c3c:	0f b6       	in	r0, 0x3f	; 63
    3c3e:	f8 94       	cli
    3c40:	9e bf       	out	0x3e, r25	; 62
    3c42:	0f be       	out	0x3f, r0	; 63
    3c44:	8d bf       	out	0x3d, r24	; 61
		}
	}
}
    3c46:	ff 91       	pop	r31
    3c48:	ef 91       	pop	r30
    3c4a:	bf 91       	pop	r27
    3c4c:	af 91       	pop	r26
    3c4e:	9f 91       	pop	r25
    3c50:	8f 91       	pop	r24
    3c52:	7f 91       	pop	r23
    3c54:	6f 91       	pop	r22
    3c56:	5f 91       	pop	r21
    3c58:	4f 91       	pop	r20
    3c5a:	3f 91       	pop	r19
    3c5c:	2f 91       	pop	r18
    3c5e:	0f 90       	pop	r0
    3c60:	0b be       	out	0x3b, r0	; 59
    3c62:	0f 90       	pop	r0
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	0f 90       	pop	r0
    3c68:	1f 90       	pop	r1
    3c6a:	18 95       	reti

00003c6c <fh_com_looptask>:
//-------------------------------------------------------------------------------------


void fh_com_looptask() {
    3c6c:	ef 92       	push	r14
    3c6e:	ff 92       	push	r15
    3c70:	0f 93       	push	r16
    3c72:	1f 93       	push	r17

	if (uart_str_complete == 1) {
    3c74:	80 91 bf 0d 	lds	r24, 0x0DBF
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <fh_com_looptask+0x12>
    3c7c:	86 c0       	rjmp	.+268    	; 0x3d8a <fh_com_looptask+0x11e>
		//Bearbeitung der Data-Link Befehle
		command[0] = 0;
    3c7e:	10 92 14 19 	sts	0x1914, r1
		paraBuffer[0] = 0;
    3c82:	10 92 29 19 	sts	0x1929, r1
		uart_str_complete = 0;
    3c86:	10 92 bf 0d 	sts	0x0DBF, r1

		//	Mit UART-String
		raute_pos = (unsigned char) strlen(
    3c8a:	01 ec       	ldi	r16, 0xC1	; 193
    3c8c:	1d e0       	ldi	r17, 0x0D	; 13
    3c8e:	c8 01       	movw	r24, r16
    3c90:	63 e2       	ldi	r22, 0x23	; 35
    3c92:	70 e0       	ldi	r23, 0x00	; 0
    3c94:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <strchr>
    3c98:	fc 01       	movw	r30, r24
    3c9a:	01 90       	ld	r0, Z+
    3c9c:	00 20       	and	r0, r0
    3c9e:	e9 f7       	brne	.-6      	; 0x3c9a <fh_com_looptask+0x2e>
    3ca0:	31 97       	sbiw	r30, 0x01	; 1
    3ca2:	e8 1b       	sub	r30, r24
    3ca4:	f9 0b       	sbc	r31, r25
    3ca6:	d8 01       	movw	r26, r16
    3ca8:	0d 90       	ld	r0, X+
    3caa:	00 20       	and	r0, r0
    3cac:	e9 f7       	brne	.-6      	; 0x3ca8 <fh_com_looptask+0x3c>
    3cae:	8d 01       	movw	r16, r26
    3cb0:	01 50       	subi	r16, 0x01	; 1
    3cb2:	10 40       	sbci	r17, 0x00	; 0
    3cb4:	01 5c       	subi	r16, 0xC1	; 193
    3cb6:	1d 40       	sbci	r17, 0x0D	; 13
    3cb8:	e0 1b       	sub	r30, r16
    3cba:	e0 93 28 19 	sts	0x1928, r30
				(char*) strstr((char *) uart_string, "#")) - strlen(
				(char *) uart_string);
		if (raute_pos == 255)
    3cbe:	ef 3f       	cpi	r30, 0xFF	; 255
    3cc0:	11 f4       	brne	.+4      	; 0x3cc6 <fh_com_looptask+0x5a>
			raute_pos = 0;
    3cc2:	10 92 28 19 	sts	0x1928, r1

		command[19] = 0;
    3cc6:	10 92 27 19 	sts	0x1927, r1
		paraBuffer[19] = 0;
    3cca:	10 92 3c 19 	sts	0x193C, r1

		sscanf((char*) &uart_string[raute_pos], "%s %s\n", command, paraBuffer);
    3cce:	ed b7       	in	r30, 0x3d	; 61
    3cd0:	fe b7       	in	r31, 0x3e	; 62
    3cd2:	38 97       	sbiw	r30, 0x08	; 8
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	f8 94       	cli
    3cd8:	fe bf       	out	0x3e, r31	; 62
    3cda:	0f be       	out	0x3f, r0	; 63
    3cdc:	ed bf       	out	0x3d, r30	; 61
    3cde:	31 96       	adiw	r30, 0x01	; 1
    3ce0:	80 91 28 19 	lds	r24, 0x1928
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	8f 53       	subi	r24, 0x3F	; 63
    3ce8:	92 4f       	sbci	r25, 0xF2	; 242
    3cea:	ad b7       	in	r26, 0x3d	; 61
    3cec:	be b7       	in	r27, 0x3e	; 62
    3cee:	12 96       	adiw	r26, 0x02	; 2
    3cf0:	9c 93       	st	X, r25
    3cf2:	8e 93       	st	-X, r24
    3cf4:	11 97       	sbiw	r26, 0x01	; 1
    3cf6:	82 e2       	ldi	r24, 0x22	; 34
    3cf8:	98 e0       	ldi	r25, 0x08	; 8
    3cfa:	93 83       	std	Z+3, r25	; 0x03
    3cfc:	82 83       	std	Z+2, r24	; 0x02
    3cfe:	04 e1       	ldi	r16, 0x14	; 20
    3d00:	19 e1       	ldi	r17, 0x19	; 25
    3d02:	15 83       	std	Z+5, r17	; 0x05
    3d04:	04 83       	std	Z+4, r16	; 0x04
    3d06:	89 e2       	ldi	r24, 0x29	; 41
    3d08:	e8 2e       	mov	r14, r24
    3d0a:	89 e1       	ldi	r24, 0x19	; 25
    3d0c:	f8 2e       	mov	r15, r24
    3d0e:	f7 82       	std	Z+7, r15	; 0x07
    3d10:	e6 82       	std	Z+6, r14	; 0x06
    3d12:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <sscanf>

		UART_PRINT("command: %s\n", command);
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	89 e2       	ldi	r24, 0x29	; 41
    3d20:	98 e0       	ldi	r25, 0x08	; 8
    3d22:	ed b7       	in	r30, 0x3d	; 61
    3d24:	fe b7       	in	r31, 0x3e	; 62
    3d26:	92 83       	std	Z+2, r25	; 0x02
    3d28:	81 83       	std	Z+1, r24	; 0x01
    3d2a:	14 83       	std	Z+4, r17	; 0x04
    3d2c:	03 83       	std	Z+3, r16	; 0x03
    3d2e:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
		UART_PRINT("paraBuffer %s\n", paraBuffer);
    3d32:	86 e3       	ldi	r24, 0x36	; 54
    3d34:	98 e0       	ldi	r25, 0x08	; 8
    3d36:	ad b7       	in	r26, 0x3d	; 61
    3d38:	be b7       	in	r27, 0x3e	; 62
    3d3a:	12 96       	adiw	r26, 0x02	; 2
    3d3c:	9c 93       	st	X, r25
    3d3e:	8e 93       	st	-X, r24
    3d40:	11 97       	sbiw	r26, 0x01	; 1
    3d42:	14 96       	adiw	r26, 0x04	; 4
    3d44:	fc 92       	st	X, r15
    3d46:	ee 92       	st	-X, r14
    3d48:	13 97       	sbiw	r26, 0x03	; 3
    3d4a:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>

		if (strcmp(command, "#getdata") == 0) {
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	c8 01       	movw	r24, r16
    3d58:	65 e4       	ldi	r22, 0x45	; 69
    3d5a:	78 e0       	ldi	r23, 0x08	; 8
    3d5c:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <strcmp>
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	99 f4       	brne	.+38     	; 0x3d8a <fh_com_looptask+0x11e>
			printf("#BOData\n");
    3d64:	8e e4       	ldi	r24, 0x4E	; 78
    3d66:	98 e0       	ldi	r25, 0x08	; 8
    3d68:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>

			printf("bin die daten");
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <fh_com_looptask+0x102>
    3d6e:	86 e5       	ldi	r24, 0x56	; 86
    3d70:	98 e0       	ldi	r25, 0x08	; 8
    3d72:	ed b7       	in	r30, 0x3d	; 61
    3d74:	fe b7       	in	r31, 0x3e	; 62
    3d76:	92 83       	std	Z+2, r25	; 0x02
    3d78:	81 83       	std	Z+1, r24	; 0x01
    3d7a:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
			//TODO Implement Wireless_UART
			printf("#EOData\n");
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	84 e6       	ldi	r24, 0x64	; 100
    3d84:	98 e0       	ldi	r25, 0x08	; 8
    3d86:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
			//TODO Implement
		}

	}

}
    3d8a:	1f 91       	pop	r17
    3d8c:	0f 91       	pop	r16
    3d8e:	ff 90       	pop	r15
    3d90:	ef 90       	pop	r14
    3d92:	08 95       	ret

00003d94 <setButtonDebounce>:
int count = 0;
char mac_buf[MAX_FRAME_LENGTH_SN];

//MACRO for debounce delay
void setButtonDebounce(void) {
	buttondebounce = 0;
    3d94:	10 92 c1 0e 	sts	0x0EC1, r1
}
    3d98:	08 95       	ret

00003d9a <process_endnode_udp_packet_SN>:
 * param: pUDPpacket pointer zur payload
 * param: payloadlen
 * param: address packet originates from
 */
void process_endnode_udp_packet_SN(uint8_t* pUDPpacket, uint8_t payloadlen,
		uint16_t originAddr) {
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	ec 01       	movw	r28, r24
    3da6:	f6 2e       	mov	r15, r22
    3da8:	8a 01       	movw	r16, r20

	/*
	 * Process incoming Ping packets
	 */
if ((*pUDPpacket == COMMAND_PING_REQUEST) || (*pUDPpacket == COMMAND_PING_RESPONSE)) {
    3daa:	88 81       	ld	r24, Y
    3dac:	81 50       	subi	r24, 0x01	; 1
    3dae:	82 30       	cpi	r24, 0x02	; 2
    3db0:	28 f4       	brcc	.+10     	; 0x3dbc <process_endnode_udp_packet_SN+0x22>
	app_ping_device_process(pUDPpacket,originAddr);
    3db2:	ce 01       	movw	r24, r28
    3db4:	ba 01       	movw	r22, r20
    3db6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <app_ping_device_process>
    3dba:	3f c0       	rjmp	.+126    	; 0x3e3a <process_endnode_udp_packet_SN+0xa0>
else
/*
 * Process incoming unknown package and print it as String
 */
{
	UART_PRINT("-----ENDNODE hat ein unbekanntes Paket empfangen\r\n");
    3dbc:	8c e6       	ldi	r24, 0x6C	; 108
    3dbe:	98 e0       	ldi	r25, 0x08	; 8
    3dc0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
	UART_PRINT("-----Payloadlen: %u\r\n",payloadlen);
    3dc4:	00 d0       	rcall	.+0      	; 0x3dc6 <process_endnode_udp_packet_SN+0x2c>
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <process_endnode_udp_packet_SN+0x2e>
    3dc8:	ed b7       	in	r30, 0x3d	; 61
    3dca:	fe b7       	in	r31, 0x3e	; 62
    3dcc:	31 96       	adiw	r30, 0x01	; 1
    3dce:	8e e9       	ldi	r24, 0x9E	; 158
    3dd0:	98 e0       	ldi	r25, 0x08	; 8
    3dd2:	ad b7       	in	r26, 0x3d	; 61
    3dd4:	be b7       	in	r27, 0x3e	; 62
    3dd6:	12 96       	adiw	r26, 0x02	; 2
    3dd8:	9c 93       	st	X, r25
    3dda:	8e 93       	st	-X, r24
    3ddc:	11 97       	sbiw	r26, 0x01	; 1
    3dde:	f2 82       	std	Z+2, r15	; 0x02
    3de0:	13 82       	std	Z+3, r1	; 0x03
    3de2:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
	UART_PRINT("-----originAddr: 0x%u\r\n", originAddr);
    3de6:	84 eb       	ldi	r24, 0xB4	; 180
    3de8:	98 e0       	ldi	r25, 0x08	; 8
    3dea:	ed b7       	in	r30, 0x3d	; 61
    3dec:	fe b7       	in	r31, 0x3e	; 62
    3dee:	92 83       	std	Z+2, r25	; 0x02
    3df0:	81 83       	std	Z+1, r24	; 0x01
    3df2:	14 83       	std	Z+4, r17	; 0x04
    3df4:	03 83       	std	Z+3, r16	; 0x03
    3df6:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
	memcpy(mac_buf, pUDPpacket, payloadlen);
    3dfa:	08 ed       	ldi	r16, 0xD8	; 216
    3dfc:	19 e1       	ldi	r17, 0x19	; 25
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	c8 01       	movw	r24, r16
    3e08:	be 01       	movw	r22, r28
    3e0a:	4f 2d       	mov	r20, r15
    3e0c:	50 e0       	ldi	r21, 0x00	; 0
    3e0e:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memcpy>
	UART_PRINT("-----%s\r\n",mac_buf);
    3e12:	00 d0       	rcall	.+0      	; 0x3e14 <process_endnode_udp_packet_SN+0x7a>
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <process_endnode_udp_packet_SN+0x7c>
    3e16:	8c ec       	ldi	r24, 0xCC	; 204
    3e18:	98 e0       	ldi	r25, 0x08	; 8
    3e1a:	ad b7       	in	r26, 0x3d	; 61
    3e1c:	be b7       	in	r27, 0x3e	; 62
    3e1e:	12 96       	adiw	r26, 0x02	; 2
    3e20:	9c 93       	st	X, r25
    3e22:	8e 93       	st	-X, r24
    3e24:	11 97       	sbiw	r26, 0x01	; 1
    3e26:	14 96       	adiw	r26, 0x04	; 4
    3e28:	1c 93       	st	X, r17
    3e2a:	0e 93       	st	-X, r16
    3e2c:	13 97       	sbiw	r26, 0x03	; 3
    3e2e:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
}
}
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	1f 91       	pop	r17
    3e40:	0f 91       	pop	r16
    3e42:	ff 90       	pop	r15
    3e44:	08 95       	ret

00003e46 <process_coord_udp_packet_SN>:
 * param: pUDPpacket Pointer zur Payload
 * param: payloadlen
 * param: address packet originates from
 */
void process_coord_udp_packet_SN(uint8_t* pUDPpacket, uint8_t payloadlen,
		uint16_t originAddr) {
    3e46:	1f 93       	push	r17
    3e48:	cf 93       	push	r28
    3e4a:	df 93       	push	r29
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	16 2f       	mov	r17, r22
    3e50:	ea 01       	movw	r28, r20

	/*
	 * Process incoming Ping packets
	 */
		if ((*pUDPpacket == COMMAND_PING_REQUEST) || (*pUDPpacket == COMMAND_PING_RESPONSE)) {
    3e52:	80 81       	ld	r24, Z
    3e54:	81 50       	subi	r24, 0x01	; 1
    3e56:	82 30       	cpi	r24, 0x02	; 2
    3e58:	28 f4       	brcc	.+10     	; 0x3e64 <process_coord_udp_packet_SN+0x1e>
			app_ping_coord_process(pUDPpacket,originAddr);
    3e5a:	cf 01       	movw	r24, r30
    3e5c:	ba 01       	movw	r22, r20
    3e5e:	0e 94 06 20 	call	0x400c	; 0x400c <app_ping_coord_process>
    3e62:	23 c0       	rjmp	.+70     	; 0x3eaa <process_coord_udp_packet_SN+0x64>
		} else {

#ifdef APP_PERF
		compare_test_data(pUDPpacket, payloadlen);
#else
		UART_PRINT("-----Coord hat einen String oder ein unbekanntes Paket empfangen\r\n");
    3e64:	86 ed       	ldi	r24, 0xD6	; 214
    3e66:	98 e0       	ldi	r25, 0x08	; 8
    3e68:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
		UART_PRINT("-----Payloadlen: %u\r\n",payloadlen);
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <process_coord_udp_packet_SN+0x28>
    3e6e:	00 d0       	rcall	.+0      	; 0x3e70 <process_coord_udp_packet_SN+0x2a>
    3e70:	ed b7       	in	r30, 0x3d	; 61
    3e72:	fe b7       	in	r31, 0x3e	; 62
    3e74:	31 96       	adiw	r30, 0x01	; 1
    3e76:	8e e9       	ldi	r24, 0x9E	; 158
    3e78:	98 e0       	ldi	r25, 0x08	; 8
    3e7a:	ad b7       	in	r26, 0x3d	; 61
    3e7c:	be b7       	in	r27, 0x3e	; 62
    3e7e:	12 96       	adiw	r26, 0x02	; 2
    3e80:	9c 93       	st	X, r25
    3e82:	8e 93       	st	-X, r24
    3e84:	11 97       	sbiw	r26, 0x01	; 1
    3e86:	12 83       	std	Z+2, r17	; 0x02
    3e88:	13 82       	std	Z+3, r1	; 0x03
    3e8a:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
		UART_PRINT("-----originAddr: 0x%u\r\n", originAddr);
    3e8e:	84 eb       	ldi	r24, 0xB4	; 180
    3e90:	98 e0       	ldi	r25, 0x08	; 8
    3e92:	ed b7       	in	r30, 0x3d	; 61
    3e94:	fe b7       	in	r31, 0x3e	; 62
    3e96:	92 83       	std	Z+2, r25	; 0x02
    3e98:	81 83       	std	Z+1, r24	; 0x01
    3e9a:	d4 83       	std	Z+4, r29	; 0x04
    3e9c:	c3 83       	std	Z+3, r28	; 0x03
    3e9e:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
#endif
	}
}
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	1f 91       	pop	r17
    3eb0:	08 95       	ret

00003eb2 <loopTask>:
#ifdef APP_PERF
	perf_loop_task();
#endif

#ifdef SENSORNETWORK
	fh_com_looptask();
    3eb2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <fh_com_looptask>

	/*
	 * Button Press
	 * Here the applications button press logic should be called
	 */
	if (button_pressed(PLATFORM_RCB) && buttondebounce == 0) {
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	0e 94 02 29 	call	0x5204	; 0x5204 <button_pressed>
    3ebc:	88 23       	and	r24, r24
    3ebe:	79 f0       	breq	.+30     	; 0x3ede <loopTask+0x2c>
    3ec0:	80 91 c1 0e 	lds	r24, 0x0EC1
    3ec4:	88 23       	and	r24, r24
    3ec6:	59 f4       	brne	.+22     	; 0x3ede <loopTask+0x2c>
#ifdef APP_PERF
		perf_button_ev();
#endif

#ifdef APP_PING
		ping_button_ev();
    3ec8:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <ping_button_ev>
#endif

		// code to debbounce the button and avoid multiple button press
		buttondebounce = 1;
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	80 93 c1 0e 	sts	0x0EC1, r24
		macSetAlarm(200, setButtonDebounce);
    3ed2:	88 ec       	ldi	r24, 0xC8	; 200
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	6a ec       	ldi	r22, 0xCA	; 202
    3ed8:	7e e1       	ldi	r23, 0x1E	; 30
    3eda:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    3ede:	08 95       	ret

00003ee0 <alive_pulse>:
		macScan();
	}
}

void alive_pulse() {
	LED_TOGGLE(LED_ALIVE);
    3ee0:	8e b1       	in	r24, 0x0e	; 14
    3ee2:	90 e1       	ldi	r25, 0x10	; 16
    3ee4:	89 27       	eor	r24, r25
    3ee6:	8e b9       	out	0x0e, r24	; 14
    3ee8:	6c 9a       	sbi	0x0d, 4	; 13
	macSetAlarm(1000, alive_pulse);
    3eea:	88 ee       	ldi	r24, 0xE8	; 232
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	60 e7       	ldi	r22, 0x70	; 112
    3ef0:	7f e1       	ldi	r23, 0x1F	; 31
    3ef2:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
}
    3ef6:	08 95       	ret

00003ef8 <appStartScan>:
 This node will either scan all available channels, or just one
 channel if @ref macSetScanChannel() is called.  @see macScan().
 */
void appStartScan(void) {
	if (NODETYPE != COORD) {
		macInit(0xff);
    3ef8:	8f ef       	ldi	r24, 0xFF	; 255
    3efa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <macInit>
		macScan();
    3efe:	0e 94 c2 11 	call	0x2384	; 0x2384 <macScan>
	}
}
    3f02:	08 95       	ret

00003f04 <app_init>:
 */
void app_init() {

#if (__AVR__)
	// If the EEPROM is cleared, init it to something useful
	checkEeprom();
    3f04:	0e 94 b9 19 	call	0x3372	; 0x3372 <checkEeprom>
#endif // __AVR__
	alive_pulse();
    3f08:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <alive_pulse>
	BUTTON_SETUP();
    3f0c:	6d 98       	cbi	0x0d, 5	; 13
    3f0e:	75 9a       	sbi	0x0e, 5	; 14

	if (NODETYPE == ENDDEVICE || NODETYPE == ROUTER) {
		appStartScan();
    3f10:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <appStartScan>
		if (IPV6LOWPAN == 1)
			sixlowpan_init();
    3f14:	0e 94 c0 00 	call	0x180	; 0x180 <sixlowpan_init>
		if (NODETYPE == ENDDEVICE) {
			UART_PRINT("--Device is EndNode\r\n");
    3f18:	88 e1       	ldi	r24, 0x18	; 24
    3f1a:	99 e0       	ldi	r25, 0x09	; 9
    3f1c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
		macFindClearChannel();
		sixlowpan_init();
		UART_PRINT("--Device is Coordinator\r\n");
	}

}
    3f20:	08 95       	ret

00003f22 <app_ping_device_process>:
		UART_PRINT("coord got a ping response, ping took: %ums\r\n", pingdelay);
	}

}

void app_ping_device_process(uint8_t* pUDPpacket, int16_t originAddr) {
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	eb 97       	sbiw	r28, 0x3b	; 59
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	7c 01       	movw	r14, r24
    3f40:	8b 01       	movw	r16, r22
	if (*pUDPpacket == COMMAND_PING_REQUEST) {
    3f42:	fc 01       	movw	r30, r24
    3f44:	80 81       	ld	r24, Z
    3f46:	81 30       	cpi	r24, 0x01	; 1
    3f48:	79 f5       	brne	.+94     	; 0x3fa8 <app_ping_device_process+0x86>
		UART_PRINT("Node/Router got Ping request\r\n");
    3f4a:	8d e2       	ldi	r24, 0x2D	; 45
    3f4c:	99 e0       	ldi	r25, 0x09	; 9
    3f4e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
		LED_TOGGLE(LED_WORKING);
    3f52:	8e b1       	in	r24, 0x0e	; 14
    3f54:	94 e0       	ldi	r25, 0x04	; 4
    3f56:	89 27       	eor	r24, r25
    3f58:	8e b9       	out	0x0e, r24	; 14
    3f5a:	6a 9a       	sbi	0x0d, 2	; 13

		//setup response frame TODO response with a modified frame not a new one
		deRFprotocol_t frame;
		payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
		frame.command = COMMAND_PING_RESPONSE;
    3f5c:	82 e0       	ldi	r24, 0x02	; 2
    3f5e:	89 83       	std	Y+1, r24	; 0x01
		frame.option = NO_OPTION;
    3f60:	1a 82       	std	Y+2, r1	; 0x02
		pingFrame->mac = macConfig.longAddr;
    3f62:	80 91 51 18 	lds	r24, 0x1851
    3f66:	8b 83       	std	Y+3, r24	; 0x03
    3f68:	80 91 52 18 	lds	r24, 0x1852
    3f6c:	8c 83       	std	Y+4, r24	; 0x04
    3f6e:	80 91 53 18 	lds	r24, 0x1853
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	80 91 54 18 	lds	r24, 0x1854
    3f78:	8e 83       	std	Y+6, r24	; 0x06
    3f7a:	80 91 55 18 	lds	r24, 0x1855
    3f7e:	8f 83       	std	Y+7, r24	; 0x07
    3f80:	80 91 56 18 	lds	r24, 0x1856
    3f84:	88 87       	std	Y+8, r24	; 0x08
    3f86:	80 91 57 18 	lds	r24, 0x1857
    3f8a:	89 87       	std	Y+9, r24	; 0x09
    3f8c:	80 91 58 18 	lds	r24, 0x1858
    3f90:	8a 87       	std	Y+10, r24	; 0x0a

		// send ping response to origin device/node
		send_data_wireless(originAddr, (uint8_t *) &frame,
    3f92:	c8 01       	movw	r24, r16
    3f94:	be 01       	movw	r22, r28
    3f96:	6f 5f       	subi	r22, 0xFF	; 255
    3f98:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9a:	4b e3       	ldi	r20, 0x3B	; 59
    3f9c:	2e eb       	ldi	r18, 0xBE	; 190
    3f9e:	30 ef       	ldi	r19, 0xF0	; 240
    3fa0:	0d eb       	ldi	r16, 0xBD	; 189
    3fa2:	10 ef       	ldi	r17, 0xF0	; 240
    3fa4:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_END_ROUTER,
				UDP_PORT_SENSN_COORD);
	}
	if (*pUDPpacket == COMMAND_PING_RESPONSE) {
    3fa8:	f7 01       	movw	r30, r14
    3faa:	80 81       	ld	r24, Z
    3fac:	82 30       	cpi	r24, 0x02	; 2
    3fae:	09 f5       	brne	.+66     	; 0x3ff2 <app_ping_device_process+0xd0>
		pingdelay = macGetTime() - pingdelay;
    3fb0:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    3fb4:	20 91 c5 0e 	lds	r18, 0x0EC5
    3fb8:	30 91 c6 0e 	lds	r19, 0x0EC6
    3fbc:	82 1b       	sub	r24, r18
    3fbe:	93 0b       	sbc	r25, r19
    3fc0:	90 93 c6 0e 	sts	0x0EC6, r25
    3fc4:	80 93 c5 0e 	sts	0x0EC5, r24
		LED_TOGGLE(LED_WORKING);
    3fc8:	2e b1       	in	r18, 0x0e	; 14
    3fca:	34 e0       	ldi	r19, 0x04	; 4
    3fcc:	23 27       	eor	r18, r19
    3fce:	2e b9       	out	0x0e, r18	; 14
    3fd0:	6a 9a       	sbi	0x0d, 2	; 13
		UART_PRINT("Node/Router got a ping response, ping took: %ums\r\n", pingdelay);
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <app_ping_device_process+0xb2>
    3fd4:	00 d0       	rcall	.+0      	; 0x3fd6 <app_ping_device_process+0xb4>
    3fd6:	2b e4       	ldi	r18, 0x4B	; 75
    3fd8:	39 e0       	ldi	r19, 0x09	; 9
    3fda:	ed b7       	in	r30, 0x3d	; 61
    3fdc:	fe b7       	in	r31, 0x3e	; 62
    3fde:	32 83       	std	Z+2, r19	; 0x02
    3fe0:	21 83       	std	Z+1, r18	; 0x01
    3fe2:	94 83       	std	Z+4, r25	; 0x04
    3fe4:	83 83       	std	Z+3, r24	; 0x03
    3fe6:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
	}
}
    3ff2:	eb 96       	adiw	r28, 0x3b	; 59
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	de bf       	out	0x3e, r29	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	cf 91       	pop	r28
    4000:	df 91       	pop	r29
    4002:	1f 91       	pop	r17
    4004:	0f 91       	pop	r16
    4006:	ff 90       	pop	r15
    4008:	ef 90       	pop	r14
    400a:	08 95       	ret

0000400c <app_ping_coord_process>:
	} else {
		cvar = 0;
	}
}

void app_ping_coord_process(uint8_t* pUDPpacket, int16_t originAddr) {
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	eb 97       	sbiw	r28, 0x3b	; 59
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	7c 01       	movw	r14, r24
    402a:	8b 01       	movw	r16, r22
	if (*pUDPpacket == COMMAND_PING_REQUEST) {
    402c:	fc 01       	movw	r30, r24
    402e:	80 81       	ld	r24, Z
    4030:	81 30       	cpi	r24, 0x01	; 1
    4032:	79 f5       	brne	.+94     	; 0x4092 <app_ping_coord_process+0x86>
		UART_PRINT("Coord got Ping request\r\n");
    4034:	8e e7       	ldi	r24, 0x7E	; 126
    4036:	99 e0       	ldi	r25, 0x09	; 9
    4038:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
		LED_TOGGLE(LED_WORKING);
    403c:	8e b1       	in	r24, 0x0e	; 14
    403e:	94 e0       	ldi	r25, 0x04	; 4
    4040:	89 27       	eor	r24, r25
    4042:	8e b9       	out	0x0e, r24	; 14
    4044:	6a 9a       	sbi	0x0d, 2	; 13

		//setup response frame TODO response with a modified frame not a new one
		deRFprotocol_t frame;
		payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
		frame.command = COMMAND_PING_RESPONSE;
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	89 83       	std	Y+1, r24	; 0x01
		frame.option = NO_OPTION;
    404a:	1a 82       	std	Y+2, r1	; 0x02
		pingFrame->mac = macConfig.longAddr;
    404c:	80 91 51 18 	lds	r24, 0x1851
    4050:	8b 83       	std	Y+3, r24	; 0x03
    4052:	80 91 52 18 	lds	r24, 0x1852
    4056:	8c 83       	std	Y+4, r24	; 0x04
    4058:	80 91 53 18 	lds	r24, 0x1853
    405c:	8d 83       	std	Y+5, r24	; 0x05
    405e:	80 91 54 18 	lds	r24, 0x1854
    4062:	8e 83       	std	Y+6, r24	; 0x06
    4064:	80 91 55 18 	lds	r24, 0x1855
    4068:	8f 83       	std	Y+7, r24	; 0x07
    406a:	80 91 56 18 	lds	r24, 0x1856
    406e:	88 87       	std	Y+8, r24	; 0x08
    4070:	80 91 57 18 	lds	r24, 0x1857
    4074:	89 87       	std	Y+9, r24	; 0x09
    4076:	80 91 58 18 	lds	r24, 0x1858
    407a:	8a 87       	std	Y+10, r24	; 0x0a

		// send ping response to origin device/node
		send_data_wireless(originAddr, (uint8_t *) &frame,
    407c:	c8 01       	movw	r24, r16
    407e:	be 01       	movw	r22, r28
    4080:	6f 5f       	subi	r22, 0xFF	; 255
    4082:	7f 4f       	sbci	r23, 0xFF	; 255
    4084:	4b e3       	ldi	r20, 0x3B	; 59
    4086:	2d eb       	ldi	r18, 0xBD	; 189
    4088:	30 ef       	ldi	r19, 0xF0	; 240
    408a:	0e eb       	ldi	r16, 0xBE	; 190
    408c:	10 ef       	ldi	r17, 0xF0	; 240
    408e:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_COORD,
				UDP_PORT_SENSN_END_ROUTER);
	}
	if (*pUDPpacket == COMMAND_PING_RESPONSE) {
    4092:	f7 01       	movw	r30, r14
    4094:	80 81       	ld	r24, Z
    4096:	82 30       	cpi	r24, 0x02	; 2
    4098:	09 f5       	brne	.+66     	; 0x40dc <app_ping_coord_process+0xd0>
		pingdelay = macGetTime() - pingdelay;
    409a:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    409e:	20 91 c5 0e 	lds	r18, 0x0EC5
    40a2:	30 91 c6 0e 	lds	r19, 0x0EC6
    40a6:	82 1b       	sub	r24, r18
    40a8:	93 0b       	sbc	r25, r19
    40aa:	90 93 c6 0e 	sts	0x0EC6, r25
    40ae:	80 93 c5 0e 	sts	0x0EC5, r24
		LED_TOGGLE(LED_WORKING);
    40b2:	2e b1       	in	r18, 0x0e	; 14
    40b4:	34 e0       	ldi	r19, 0x04	; 4
    40b6:	23 27       	eor	r18, r19
    40b8:	2e b9       	out	0x0e, r18	; 14
    40ba:	6a 9a       	sbi	0x0d, 2	; 13
		UART_PRINT("coord got a ping response, ping took: %ums\r\n", pingdelay);
    40bc:	00 d0       	rcall	.+0      	; 0x40be <app_ping_coord_process+0xb2>
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <app_ping_coord_process+0xb4>
    40c0:	26 e9       	ldi	r18, 0x96	; 150
    40c2:	39 e0       	ldi	r19, 0x09	; 9
    40c4:	ed b7       	in	r30, 0x3d	; 61
    40c6:	fe b7       	in	r31, 0x3e	; 62
    40c8:	32 83       	std	Z+2, r19	; 0x02
    40ca:	21 83       	std	Z+1, r18	; 0x01
    40cc:	94 83       	std	Z+4, r25	; 0x04
    40ce:	83 83       	std	Z+3, r24	; 0x03
    40d0:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
	}

}
    40dc:	eb 96       	adiw	r28, 0x3b	; 59
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	08 95       	ret

000040f6 <sendPing>:

/*
 * function sends a periodic ping request over UDP to the dest_addr_ping
 * @param dest_addr Address the ping request to be sent
 */
void sendPing() {
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	eb 97       	sbiw	r28, 0x3b	; 59
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	cd bf       	out	0x3d, r28	; 61
	// Setup a Ping Request packet to be send to the destination address
	deRFprotocol_t frame;
	payloadPingFrame_t* pingFrame = (payloadPingFrame_t*) &frame.payload;
	frame.command = COMMAND_PING_REQUEST;
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	89 83       	std	Y+1, r24	; 0x01
	frame.option = NO_OPTION;
    4112:	1a 82       	std	Y+2, r1	; 0x02
	pingFrame->mac = macConfig.longAddr;
    4114:	80 91 51 18 	lds	r24, 0x1851
    4118:	8b 83       	std	Y+3, r24	; 0x03
    411a:	80 91 52 18 	lds	r24, 0x1852
    411e:	8c 83       	std	Y+4, r24	; 0x04
    4120:	80 91 53 18 	lds	r24, 0x1853
    4124:	8d 83       	std	Y+5, r24	; 0x05
    4126:	80 91 54 18 	lds	r24, 0x1854
    412a:	8e 83       	std	Y+6, r24	; 0x06
    412c:	80 91 55 18 	lds	r24, 0x1855
    4130:	8f 83       	std	Y+7, r24	; 0x07
    4132:	80 91 56 18 	lds	r24, 0x1856
    4136:	88 87       	std	Y+8, r24	; 0x08
    4138:	80 91 57 18 	lds	r24, 0x1857
    413c:	89 87       	std	Y+9, r24	; 0x09
    413e:	80 91 58 18 	lds	r24, 0x1858
    4142:	8a 87       	std	Y+10, r24	; 0x0a
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_COORD,
				UDP_PORT_SENSN_END_ROUTER);
	}

	if (NODETYPE == ENDDEVICE || NODETYPE == ROUTER) {
		pingdelay = macGetTime();
    4144:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4148:	90 93 c6 0e 	sts	0x0EC6, r25
    414c:	80 93 c5 0e 	sts	0x0EC5, r24
		send_data_wireless(dest_addr_ping, (uint8_t *) &frame,
    4150:	80 91 79 19 	lds	r24, 0x1979
    4154:	90 91 7a 19 	lds	r25, 0x197A
    4158:	be 01       	movw	r22, r28
    415a:	6f 5f       	subi	r22, 0xFF	; 255
    415c:	7f 4f       	sbci	r23, 0xFF	; 255
    415e:	4b e3       	ldi	r20, 0x3B	; 59
    4160:	2e eb       	ldi	r18, 0xBE	; 190
    4162:	30 ef       	ldi	r19, 0xF0	; 240
    4164:	0d eb       	ldi	r16, 0xBD	; 189
    4166:	10 ef       	ldi	r17, 0xF0	; 240
    4168:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
				sizeof(deRFprotocol_t), UDP_PORT_SENSN_END_ROUTER,
				UDP_PORT_SENSN_COORD);
		UART_PRINT("Send Ping Request to 0x%u \r\n", dest_addr_ping);
    416c:	00 d0       	rcall	.+0      	; 0x416e <sendPing+0x78>
    416e:	00 d0       	rcall	.+0      	; 0x4170 <sendPing+0x7a>
    4170:	83 ec       	ldi	r24, 0xC3	; 195
    4172:	99 e0       	ldi	r25, 0x09	; 9
    4174:	ed b7       	in	r30, 0x3d	; 61
    4176:	fe b7       	in	r31, 0x3e	; 62
    4178:	92 83       	std	Z+2, r25	; 0x02
    417a:	81 83       	std	Z+1, r24	; 0x01
    417c:	80 91 79 19 	lds	r24, 0x1979
    4180:	90 91 7a 19 	lds	r25, 0x197A
    4184:	94 83       	std	Z+4, r25	; 0x04
    4186:	83 83       	std	Z+3, r24	; 0x03
    4188:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
	}
	// cvar repeats
	if (cvar < 4) { // limit number of pings by ++ cvar
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	80 91 c7 0e 	lds	r24, 0x0EC7
    4198:	84 30       	cpi	r24, 0x04	; 4
    419a:	48 f4       	brcc	.+18     	; 0x41ae <sendPing+0xb8>
		utimer = macSetAlarm(500, sendPing);
    419c:	84 ef       	ldi	r24, 0xF4	; 244
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	6b e7       	ldi	r22, 0x7B	; 123
    41a2:	70 e2       	ldi	r23, 0x20	; 32
    41a4:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
    41a8:	80 93 7b 19 	sts	0x197B, r24
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <sendPing+0xbc>
	} else {
		cvar = 0;
    41ae:	10 92 c7 0e 	sts	0x0EC7, r1
	}
}
    41b2:	eb 96       	adiw	r28, 0x3b	; 59
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
    41be:	cf 91       	pop	r28
    41c0:	df 91       	pop	r29
    41c2:	1f 91       	pop	r17
    41c4:	0f 91       	pop	r16
    41c6:	08 95       	ret

000041c8 <ping_button_ev>:
u8 cvar = 0;
u8 utimer;
bool do_ = false;

void ping_button_ev() {
	if (do_ == true) {
    41c8:	80 91 c8 0e 	lds	r24, 0x0EC8
    41cc:	88 23       	and	r24, r24
    41ce:	39 f0       	breq	.+14     	; 0x41de <ping_button_ev+0x16>
		do_ = false;
    41d0:	10 92 c8 0e 	sts	0x0EC8, r1
		macTimerEnd(utimer);
    41d4:	80 91 7b 19 	lds	r24, 0x197B
    41d8:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>
    41dc:	08 95       	ret

	} else {
		do_ = true;
    41de:	81 e0       	ldi	r24, 0x01	; 1
    41e0:	80 93 c8 0e 	sts	0x0EC8, r24
		if (NODETYPE == COORD) {
			dest_addr_ping = DEFAULT_FIRST_NODE_ADDR;
		} else {
			dest_addr_ping = DEFAULT_COORD_ADDR;
    41e4:	10 92 7a 19 	sts	0x197A, r1
    41e8:	10 92 79 19 	sts	0x1979, r1
		}
		sendPing();
    41ec:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <sendPing>
    41f0:	08 95       	ret

000041f2 <perf_init>:
uint16_t netto_troughput;
bool do__ = false;
u8 utimer;

void perf_init() {
	do__ = false;
    41f2:	10 92 cd 0e 	sts	0x0ECD, r1
}
    41f6:	08 95       	ret

000041f8 <compare_test_data>:

	send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t *) &s_send, strlen(s_send),
			UDP_PORT_SENSN_END_ROUTER, UDP_PORT_SENSN_COORD);
}

void compare_test_data(uint8_t* pUDPpacket, uint8_t payloadlen) {
    41f8:	ef 92       	push	r14
    41fa:	ff 92       	push	r15
    41fc:	0f 93       	push	r16
    41fe:	1f 93       	push	r17
    4200:	28 2f       	mov	r18, r24
    4202:	79 2f       	mov	r23, r25
    4204:	46 2f       	mov	r20, r22
	//Check integrity of the data in a very simple way
	memcpy(mac_buf, pUDPpacket, payloadlen);
    4206:	08 ed       	ldi	r16, 0xD8	; 216
    4208:	19 e1       	ldi	r17, 0x19	; 25
    420a:	c8 01       	movw	r24, r16
    420c:	62 2f       	mov	r22, r18
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memcpy>

	if (strcmp(
    4214:	c8 01       	movw	r24, r16
    4216:	60 ee       	ldi	r22, 0xE0	; 224
    4218:	79 e0       	ldi	r23, 0x09	; 9
    421a:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <strcmp>
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	09 f0       	breq	.+2      	; 0x4224 <__stack+0x25>
    4222:	b3 c0       	rjmp	.+358    	; 0x438a <__stack+0x18b>
			mac_buf,
			"Lorem ipsum dolor sit amet, consectetuers adipiscing elit. Aenaaaaaaean commodo ligul")
			== 0) {

		//measure time from first successfully received frame
		if (pro_counter == 1) {
    4224:	80 91 c9 0e 	lds	r24, 0x0EC9
    4228:	90 91 ca 0e 	lds	r25, 0x0ECA
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	31 f4       	brne	.+12     	; 0x423c <__stack+0x3d>
			time_from = macGetTime();
    4230:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4234:	90 93 d7 19 	sts	0x19D7, r25
    4238:	80 93 d6 19 	sts	0x19D6, r24
		}
		//UART_PRINT(" ");
		//UART_PRINT("successfully received packet No. %u\r\n",pro_counter);

		if (++pro_counter >= P_COUNT) {
    423c:	80 91 c9 0e 	lds	r24, 0x0EC9
    4240:	90 91 ca 0e 	lds	r25, 0x0ECA
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	90 93 ca 0e 	sts	0x0ECA, r25
    424a:	80 93 c9 0e 	sts	0x0EC9, r24
    424e:	c2 97       	sbiw	r24, 0x32	; 50
    4250:	08 f4       	brcc	.+2      	; 0x4254 <__stack+0x55>
    4252:	a8 c0       	rjmp	.+336    	; 0x43a4 <__stack+0x1a5>
			time_test = macGetTime() - time_from;
    4254:	0e 94 20 09 	call	0x1240	; 0x1240 <macGetTime>
    4258:	20 91 d6 19 	lds	r18, 0x19D6
    425c:	30 91 d7 19 	lds	r19, 0x19D7
    4260:	82 1b       	sub	r24, r18
    4262:	93 0b       	sbc	r25, r19
    4264:	90 93 d3 19 	sts	0x19D3, r25
    4268:	80 93 d2 19 	sts	0x19D2, r24

			// evaluate time and co_counter
			LED_TOGGLE(LED_WORKING);
    426c:	2e b1       	in	r18, 0x0e	; 14
    426e:	34 e0       	ldi	r19, 0x04	; 4
    4270:	23 27       	eor	r18, r19
    4272:	2e b9       	out	0x0e, r18	; 14
    4274:	6a 9a       	sbi	0x0d, 2	; 13
			//UART_PRINT("\033[2J\r\n");
			UART_PRINT("Received %u Frames in : %ums\r\n",pro_counter, time_test);
    4276:	00 d0       	rcall	.+0      	; 0x4278 <__stack+0x79>
    4278:	00 d0       	rcall	.+0      	; 0x427a <__stack+0x7b>
    427a:	00 d0       	rcall	.+0      	; 0x427c <__stack+0x7d>
    427c:	ed b7       	in	r30, 0x3d	; 61
    427e:	fe b7       	in	r31, 0x3e	; 62
    4280:	31 96       	adiw	r30, 0x01	; 1
    4282:	26 e3       	ldi	r18, 0x36	; 54
    4284:	3a e0       	ldi	r19, 0x0A	; 10
    4286:	ad b7       	in	r26, 0x3d	; 61
    4288:	be b7       	in	r27, 0x3e	; 62
    428a:	12 96       	adiw	r26, 0x02	; 2
    428c:	3c 93       	st	X, r19
    428e:	2e 93       	st	-X, r18
    4290:	11 97       	sbiw	r26, 0x01	; 1
    4292:	20 91 c9 0e 	lds	r18, 0x0EC9
    4296:	30 91 ca 0e 	lds	r19, 0x0ECA
    429a:	33 83       	std	Z+3, r19	; 0x03
    429c:	22 83       	std	Z+2, r18	; 0x02
    429e:	95 83       	std	Z+5, r25	; 0x05
    42a0:	84 83       	std	Z+4, r24	; 0x04
    42a2:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
			netto_troughput = (((float) MAX_PERFTEST_FRAME_LENGTH * pro_counter)
    42a6:	60 91 c9 0e 	lds	r22, 0x0EC9
    42aa:	70 91 ca 0e 	lds	r23, 0x0ECA
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__floatunsisf>
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	4c ea       	ldi	r20, 0xAC	; 172
    42bc:	52 e4       	ldi	r21, 0x42	; 66
    42be:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__mulsf3>
    42c2:	7b 01       	movw	r14, r22
    42c4:	8c 01       	movw	r16, r24
    42c6:	60 91 d2 19 	lds	r22, 0x19D2
    42ca:	70 91 d3 19 	lds	r23, 0x19D3
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__floatunsisf>
    42d6:	9b 01       	movw	r18, r22
    42d8:	ac 01       	movw	r20, r24
    42da:	c8 01       	movw	r24, r16
    42dc:	b7 01       	movw	r22, r14
    42de:	0e 94 af 2c 	call	0x595e	; 0x595e <__divsf3>
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	4a e7       	ldi	r20, 0x7A	; 122
    42e8:	54 e4       	ldi	r21, 0x44	; 68
    42ea:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__mulsf3>
    42ee:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <__fixunssfsi>
    42f2:	70 93 d5 19 	sts	0x19D5, r23
    42f6:	60 93 d4 19 	sts	0x19D4, r22
					/ time_test) * 1000;
			UART_PRINT("Netto troughput was %u Bytes/s\r\n",netto_troughput);
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	ed b7       	in	r30, 0x3d	; 61
    4300:	fe b7       	in	r31, 0x3e	; 62
    4302:	31 96       	adiw	r30, 0x01	; 1
    4304:	25 e5       	ldi	r18, 0x55	; 85
    4306:	3a e0       	ldi	r19, 0x0A	; 10
    4308:	ad b7       	in	r26, 0x3d	; 61
    430a:	be b7       	in	r27, 0x3e	; 62
    430c:	12 96       	adiw	r26, 0x02	; 2
    430e:	3c 93       	st	X, r19
    4310:	2e 93       	st	-X, r18
    4312:	11 97       	sbiw	r26, 0x01	; 1
    4314:	73 83       	std	Z+3, r23	; 0x03
    4316:	62 83       	std	Z+2, r22	; 0x02
    4318:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
			UART_PRINT("Es wurden %u Pakete erfolgreich empfangen\r\nDefekte Pakete: %u\r\n",pro_counter,co_counter);
    431c:	00 d0       	rcall	.+0      	; 0x431e <__stack+0x11f>
    431e:	ed b7       	in	r30, 0x3d	; 61
    4320:	fe b7       	in	r31, 0x3e	; 62
    4322:	31 96       	adiw	r30, 0x01	; 1
    4324:	86 e7       	ldi	r24, 0x76	; 118
    4326:	9a e0       	ldi	r25, 0x0A	; 10
    4328:	ad b7       	in	r26, 0x3d	; 61
    432a:	be b7       	in	r27, 0x3e	; 62
    432c:	12 96       	adiw	r26, 0x02	; 2
    432e:	9c 93       	st	X, r25
    4330:	8e 93       	st	-X, r24
    4332:	11 97       	sbiw	r26, 0x01	; 1
    4334:	80 91 c9 0e 	lds	r24, 0x0EC9
    4338:	90 91 ca 0e 	lds	r25, 0x0ECA
    433c:	93 83       	std	Z+3, r25	; 0x03
    433e:	82 83       	std	Z+2, r24	; 0x02
    4340:	80 91 cb 0e 	lds	r24, 0x0ECB
    4344:	90 91 cc 0e 	lds	r25, 0x0ECC
    4348:	95 83       	std	Z+5, r25	; 0x05
    434a:	84 83       	std	Z+4, r24	; 0x04
    434c:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
			UART_PRINT("%u\r\n", netto_troughput);
    4350:	0f 90       	pop	r0
    4352:	0f 90       	pop	r0
    4354:	86 eb       	ldi	r24, 0xB6	; 182
    4356:	9a e0       	ldi	r25, 0x0A	; 10
    4358:	ed b7       	in	r30, 0x3d	; 61
    435a:	fe b7       	in	r31, 0x3e	; 62
    435c:	92 83       	std	Z+2, r25	; 0x02
    435e:	81 83       	std	Z+1, r24	; 0x01
    4360:	80 91 d4 19 	lds	r24, 0x19D4
    4364:	90 91 d5 19 	lds	r25, 0x19D5
    4368:	94 83       	std	Z+4, r25	; 0x04
    436a:	83 83       	std	Z+3, r24	; 0x03
    436c:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <printf>
			pro_counter = 0;
    4370:	10 92 ca 0e 	sts	0x0ECA, r1
    4374:	10 92 c9 0e 	sts	0x0EC9, r1
			co_counter = 0;
    4378:	10 92 cc 0e 	sts	0x0ECC, r1
    437c:	10 92 cb 0e 	sts	0x0ECB, r1
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0d c0       	rjmp	.+26     	; 0x43a4 <__stack+0x1a5>
		}

	} else {
		co_counter++;
    438a:	80 91 cb 0e 	lds	r24, 0x0ECB
    438e:	90 91 cc 0e 	lds	r25, 0x0ECC
    4392:	01 96       	adiw	r24, 0x01	; 1
    4394:	90 93 cc 0e 	sts	0x0ECC, r25
    4398:	80 93 cb 0e 	sts	0x0ECB, r24
		UART_PRINT("defect frame\r\n");
    439c:	8b eb       	ldi	r24, 0xBB	; 187
    439e:	9a e0       	ldi	r25, 0x0A	; 10
    43a0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
	}

	//UART_PRINT("-----%s\r\n",mac_buf);

}
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	ff 90       	pop	r15
    43aa:	ef 90       	pop	r14
    43ac:	08 95       	ret

000043ae <send_test_data>:

}
/*
 * sends test string in a UDP packet to coordinator
 */
void send_test_data() {
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
	//	char s_append[15];
	//	uint8_t len;
	// UART_PRINT("\r\nSende %d. Paket\r\n", ++count);
	LED_TOGGLE(LED_WORKING);
    43b2:	8e b1       	in	r24, 0x0e	; 14
    43b4:	94 e0       	ldi	r25, 0x04	; 4
    43b6:	89 27       	eor	r24, r25
    43b8:	8e b9       	out	0x0e, r24	; 14
    43ba:	6a 9a       	sbi	0x0d, 2	; 13
	//sprintf(s_send, "Bin das %d. Paket von 0x%d (shortadress)  ", ++count,
	//		macConfig.shortAddress);
	// Teststring to be send periodic
	sprintf(
    43bc:	0c e7       	ldi	r16, 0x7C	; 124
    43be:	19 e1       	ldi	r17, 0x19	; 25
    43c0:	c8 01       	movw	r24, r16
    43c2:	60 ee       	ldi	r22, 0xE0	; 224
    43c4:	79 e0       	ldi	r23, 0x09	; 9
    43c6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <strcpy>
	//	sprintf(s_append, "L\x84nge: %d\r\n", (len + 11));
	//	strcat(s_send, s_append);
	//	UART_PRINT("String to be send:  %s",s_send);
	//	UART_PRINT("strlen of s_send: %d\r\n",strlen(s_send));

	send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t *) &s_send, strlen(s_send),
    43ca:	f8 01       	movw	r30, r16
    43cc:	01 90       	ld	r0, Z+
    43ce:	00 20       	and	r0, r0
    43d0:	e9 f7       	brne	.-6      	; 0x43cc <send_test_data+0x1e>
    43d2:	31 97       	sbiw	r30, 0x01	; 1
    43d4:	e0 1b       	sub	r30, r16
    43d6:	f1 0b       	sbc	r31, r17
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	b8 01       	movw	r22, r16
    43de:	4e 2f       	mov	r20, r30
    43e0:	2e eb       	ldi	r18, 0xBE	; 190
    43e2:	30 ef       	ldi	r19, 0xF0	; 240
    43e4:	0d eb       	ldi	r16, 0xBD	; 189
    43e6:	10 ef       	ldi	r17, 0xF0	; 240
    43e8:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
			UDP_PORT_SENSN_END_ROUTER, UDP_PORT_SENSN_COORD);
}
    43ec:	1f 91       	pop	r17
    43ee:	0f 91       	pop	r16
    43f0:	08 95       	ret

000043f2 <perf_loop_task>:
void perf_init() {
	do__ = false;
}

void perf_loop_task() {
	if (do__) {
    43f2:	80 91 cd 0e 	lds	r24, 0x0ECD
    43f6:	88 23       	and	r24, r24
    43f8:	11 f0       	breq	.+4      	; 0x43fe <perf_loop_task+0xc>
		send_test_data();
    43fa:	0e 94 d7 21 	call	0x43ae	; 0x43ae <send_test_data>
    43fe:	08 95       	ret

00004400 <perf_button_ev>:
void perf_button_ev() {

	if (NODETYPE == COORD) {
		UART_PRINT("APP_PERF COORD:Button pressed");
	} else if (NODETYPE == ENDDEVICE) {
		if (do__ == true) {
    4400:	80 91 cd 0e 	lds	r24, 0x0ECD
    4404:	88 23       	and	r24, r24
    4406:	69 f0       	breq	.+26     	; 0x4422 <perf_button_ev+0x22>
			do__ = false;
    4408:	10 92 cd 0e 	sts	0x0ECD, r1
			UART_PRINT("stop throughput test\r\n");
    440c:	89 ec       	ldi	r24, 0xC9	; 201
    440e:	9a e0       	ldi	r25, 0x0A	; 10
    4410:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
			macTimerEnd(utimer);
    4414:	80 91 7b 19 	lds	r24, 0x197B
    4418:	0e 94 08 0a 	call	0x1410	; 0x1410 <macTimerEnd>
			LED_OFF(LED_WORKING);
    441c:	72 9a       	sbi	0x0e, 2	; 14
    441e:	6a 9a       	sbi	0x0d, 2	; 13
    4420:	08 95       	ret

		} else {
			UART_PRINT("start throughput test\r\n");
    4422:	8f ed       	ldi	r24, 0xDF	; 223
    4424:	9a e0       	ldi	r25, 0x0A	; 10
    4426:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
			do__ = true;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	80 93 cd 0e 	sts	0x0ECD, r24
			send_test_data();
    4430:	0e 94 d7 21 	call	0x43ae	; 0x43ae <send_test_data>
    4434:	08 95       	ret

00004436 <bmm_buffer_init>:
 * @brief Initialize buffer pool. Must called inside main initialization
 * routine (before first frame transmission starts).
 *
 */
void bmm_buffer_init(void)
{
    4436:	ec e6       	ldi	r30, 0x6C	; 108
    4438:	f6 e1       	ldi	r31, 0x16	; 22
    443a:	8e ec       	ldi	r24, 0xCE	; 206
    443c:	9e e0       	ldi	r25, 0x0E	; 14
   uint8_t index = 0;
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      free_map[index] = buf_pool + (sizeof(buffer_t) * index);
    443e:	81 93       	st	Z+, r24
    4440:	91 93       	st	Z+, r25
    4442:	8e 57       	subi	r24, 0x7E	; 126
    4444:	9f 4f       	sbci	r25, 0xFF	; 255
 *
 */
void bmm_buffer_init(void)
{
   uint8_t index = 0;
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    4446:	26 e1       	ldi	r18, 0x16	; 22
    4448:	ea 38       	cpi	r30, 0x8A	; 138
    444a:	f2 07       	cpc	r31, r18
    444c:	c1 f7       	brne	.-16     	; 0x443e <bmm_buffer_init+0x8>
   {
      free_map[index] = buf_pool + (sizeof(buffer_t) * index);
   }
#if DEBUG_BUFFER
   counter = TOTAL_NUMBER_OF_BUFS;
    444e:	8f e0       	ldi	r24, 0x0F	; 15
    4450:	80 93 2e 1a 	sts	0x1A2E, r24
      index_map[i].pFrame = NULL;
      index_map[i].id = 0;
   }
#endif // BMM_DEBUG_ENABLE
#endif
}
    4454:	08 95       	ret

00004456 <bmm_buffer_alloc>:
 * Allocates buffer if available. If there is no free buffer, NULL is returned.
 *
 * @return pointer to free buffer area, or NULL if no free buffer is available
 */
uint8_t* bmm_buffer_alloc()
{
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	0f 92       	push	r0
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
   uint8_t index = 0;
   uint8_t* pFreeSpace = NULL;

   AVR_ENTER_CRITICAL_REGION();
    4460:	8f b7       	in	r24, 0x3f	; 63
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	f8 94       	cli
    4466:	ac e6       	ldi	r26, 0x6C	; 108
    4468:	b6 e1       	ldi	r27, 0x16	; 22
    446a:	e0 e0       	ldi	r30, 0x00	; 0
    446c:	f0 e0       	ldi	r31, 0x00	; 0
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      if(free_map[index] != NULL)
    446e:	2d 91       	ld	r18, X+
    4470:	3c 91       	ld	r19, X
    4472:	11 97       	sbiw	r26, 0x01	; 1
    4474:	21 15       	cp	r18, r1
    4476:	31 05       	cpc	r19, r1
    4478:	61 f0       	breq	.+24     	; 0x4492 <bmm_buffer_alloc+0x3c>
      {
         pFreeSpace = free_map[index];
         free_map[index] = NULL;
    447a:	ee 0f       	add	r30, r30
    447c:	ff 1f       	adc	r31, r31
    447e:	e4 59       	subi	r30, 0x94	; 148
    4480:	f9 4e       	sbci	r31, 0xE9	; 233
    4482:	11 82       	std	Z+1, r1	; 0x01
    4484:	10 82       	st	Z, r1
#if DEBUG_BUFFER
         counter--;
    4486:	80 91 2e 1a 	lds	r24, 0x1A2E
    448a:	81 50       	subi	r24, 0x01	; 1
    448c:	80 93 2e 1a 	sts	0x1A2E, r24
    4490:	05 c0       	rjmp	.+10     	; 0x449c <bmm_buffer_alloc+0x46>
            }
         }
         UART_PRINT(" b_a (%u - %u)\n", counter, id_counter);
#endif // BMM_DEBUG_ENABLE
#endif
         break;
    4492:	31 96       	adiw	r30, 0x01	; 1
    4494:	12 96       	adiw	r26, 0x02	; 2
{
   uint8_t index = 0;
   uint8_t* pFreeSpace = NULL;

   AVR_ENTER_CRITICAL_REGION();
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    4496:	ef 30       	cpi	r30, 0x0F	; 15
    4498:	f1 05       	cpc	r31, r1
    449a:	49 f7       	brne	.-46     	; 0x446e <bmm_buffer_alloc+0x18>
#endif // BMM_DEBUG_ENABLE
#endif
         break;
      }
   }
   AVR_LEAVE_CRITICAL_REGION();
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	8f bf       	out	0x3f, r24	; 63

   return pFreeSpace;
}
    44a0:	c9 01       	movw	r24, r18
    44a2:	0f 90       	pop	r0
    44a4:	cf 91       	pop	r28
    44a6:	df 91       	pop	r29
    44a8:	08 95       	ret

000044aa <bmm_buffer_free>:
 * Free allocated buffer area by simply add to free buffer list
 *
 * @param buf pointer to buffer area which should be freed
 */
void bmm_buffer_free(uint8_t* buf)
{
    44aa:	df 93       	push	r29
    44ac:	cf 93       	push	r28
    44ae:	0f 92       	push	r0
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62
    44b4:	9c 01       	movw	r18, r24
   uint8_t index = 0;

   AVR_ENTER_CRITICAL_REGION();
    44b6:	8f b7       	in	r24, 0x3f	; 63
    44b8:	89 83       	std	Y+1, r24	; 0x01
    44ba:	f8 94       	cli
    44bc:	ac e6       	ldi	r26, 0x6C	; 108
    44be:	b6 e1       	ldi	r27, 0x16	; 22
    44c0:	e0 e0       	ldi	r30, 0x00	; 0
    44c2:	f0 e0       	ldi	r31, 0x00	; 0
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
   {
      if(free_map[index] == NULL)
    44c4:	8d 91       	ld	r24, X+
    44c6:	9c 91       	ld	r25, X
    44c8:	11 97       	sbiw	r26, 0x01	; 1
    44ca:	89 2b       	or	r24, r25
    44cc:	39 f4       	brne	.+14     	; 0x44dc <bmm_buffer_free+0x32>
      {
         free_map[index] = buf;
    44ce:	ee 0f       	add	r30, r30
    44d0:	ff 1f       	adc	r31, r31
    44d2:	e4 59       	subi	r30, 0x94	; 148
    44d4:	f9 4e       	sbci	r31, 0xE9	; 233
    44d6:	31 83       	std	Z+1, r19	; 0x01
    44d8:	20 83       	st	Z, r18
    44da:	05 c0       	rjmp	.+10     	; 0x44e6 <bmm_buffer_free+0x3c>
         break;
    44dc:	31 96       	adiw	r30, 0x01	; 1
    44de:	12 96       	adiw	r26, 0x02	; 2
void bmm_buffer_free(uint8_t* buf)
{
   uint8_t index = 0;

   AVR_ENTER_CRITICAL_REGION();
   for(; index < TOTAL_NUMBER_OF_BUFS; index++)
    44e0:	ef 30       	cpi	r30, 0x0F	; 15
    44e2:	f1 05       	cpc	r31, r1
    44e4:	79 f7       	brne	.-34     	; 0x44c4 <bmm_buffer_free+0x1a>
         break;
      }
   }

#if DEBUG_BUFFER
   counter++;
    44e6:	80 91 2e 1a 	lds	r24, 0x1A2E
    44ea:	8f 5f       	subi	r24, 0xFF	; 255
    44ec:	80 93 2e 1a 	sts	0x1A2E, r24
   }
   UART_PRINT(" b_f (%u - %u)\n", counter, temp_id);
#endif // BMM_DEBUG_ENABLE
#endif

   AVR_LEAVE_CRITICAL_REGION();
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	8f bf       	out	0x3f, r24	; 63
}
    44f4:	0f 90       	pop	r0
    44f6:	cf 91       	pop	r28
    44f8:	df 91       	pop	r29
    44fa:	08 95       	ret

000044fc <number_of_free_buffers>:
{
#if DEBUG_BUFFER
   return counter;
#endif
   return 0;
}
    44fc:	80 91 2e 1a 	lds	r24, 0x1A2E
    4500:	08 95       	ret

00004502 <set_output>:
 * @param   protocol_bit   defines the bit position of output pin inside the data frame port
 * @param   hardware_port  select the port where output pin is connected to
 * @param   hardware_bit   select the bit on port 'hardware_port' where output pin is connected
 */
void set_output(uint8_t protocol_port, uint8_t protocol_bit, uint8_t hardware_port, uint8_t hardware_bit)
{
    4502:	52 2f       	mov	r21, r18
#if NODETYPE != COORD
   payloadDataFrame_t* dataFrame = (payloadDataFrame_t*)&dataConfiguration.payload;
   // check if output
   if((dataFrame->digitalIODirection[protocol_port] & _BV(protocol_bit)) == 0x00)
    4504:	e8 2f       	mov	r30, r24
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	ef 5c       	subi	r30, 0xCF	; 207
    450a:	f5 4e       	sbci	r31, 0xE5	; 229
    450c:	80 85       	ldd	r24, Z+8	; 0x08
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	06 2e       	mov	r0, r22
    4512:	02 c0       	rjmp	.+4      	; 0x4518 <set_output+0x16>
    4514:	95 95       	asr	r25
    4516:	87 95       	ror	r24
    4518:	0a 94       	dec	r0
    451a:	e2 f7       	brpl	.-8      	; 0x4514 <set_output+0x12>
    451c:	80 fd       	sbrc	r24, 0
    451e:	be c0       	rjmp	.+380    	; 0x469c <set_output+0x19a>
   {
      if((dataFrame->digitalData[protocol_port] & _BV(protocol_bit)) != 0x00)
    4520:	81 89       	ldd	r24, Z+17	; 0x11
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	02 c0       	rjmp	.+4      	; 0x452a <set_output+0x28>
    4526:	95 95       	asr	r25
    4528:	87 95       	ror	r24
    452a:	6a 95       	dec	r22
    452c:	e2 f7       	brpl	.-8      	; 0x4526 <set_output+0x24>
    452e:	80 ff       	sbrs	r24, 0
    4530:	60 c0       	rjmp	.+192    	; 0x45f2 <set_output+0xf0>
      {// switch on
         switch(hardware_port)
    4532:	43 30       	cpi	r20, 0x03	; 3
    4534:	71 f1       	breq	.+92     	; 0x4592 <set_output+0x90>
    4536:	44 30       	cpi	r20, 0x04	; 4
    4538:	30 f4       	brcc	.+12     	; 0x4546 <set_output+0x44>
    453a:	44 23       	and	r20, r20
    453c:	51 f0       	breq	.+20     	; 0x4552 <set_output+0x50>
    453e:	41 30       	cpi	r20, 0x01	; 1
    4540:	09 f0       	breq	.+2      	; 0x4544 <set_output+0x42>
    4542:	ac c0       	rjmp	.+344    	; 0x469c <set_output+0x19a>
    4544:	16 c0       	rjmp	.+44     	; 0x4572 <set_output+0x70>
    4546:	44 30       	cpi	r20, 0x04	; 4
    4548:	a1 f1       	breq	.+104    	; 0x45b2 <set_output+0xb0>
    454a:	46 30       	cpi	r20, 0x06	; 6
    454c:	09 f0       	breq	.+2      	; 0x4550 <set_output+0x4e>
    454e:	a6 c0       	rjmp	.+332    	; 0x469c <set_output+0x19a>
    4550:	40 c0       	rjmp	.+128    	; 0x45d2 <set_output+0xd0>
         {
         case SELECT_PORT_A:
            PORTA &= ~_BV(hardware_bit);
    4552:	32 b1       	in	r19, 0x02	; 2
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	02 c0       	rjmp	.+4      	; 0x455e <set_output+0x5c>
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	2a 95       	dec	r18
    4560:	e2 f7       	brpl	.-8      	; 0x455a <set_output+0x58>
    4562:	28 2f       	mov	r18, r24
    4564:	20 95       	com	r18
    4566:	23 23       	and	r18, r19
    4568:	22 b9       	out	0x02, r18	; 2
            DDRA  |=  _BV(hardware_bit);
    456a:	21 b1       	in	r18, 0x01	; 1
    456c:	82 2b       	or	r24, r18
    456e:	81 b9       	out	0x01, r24	; 1
    4570:	08 95       	ret
            break;
         case SELECT_PORT_B:
            PORTB &= ~_BV(hardware_bit);
    4572:	35 b1       	in	r19, 0x05	; 5
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	02 c0       	rjmp	.+4      	; 0x457e <set_output+0x7c>
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	2a 95       	dec	r18
    4580:	e2 f7       	brpl	.-8      	; 0x457a <set_output+0x78>
    4582:	28 2f       	mov	r18, r24
    4584:	20 95       	com	r18
    4586:	23 23       	and	r18, r19
    4588:	25 b9       	out	0x05, r18	; 5
            DDRB  |=  _BV(hardware_bit);
    458a:	24 b1       	in	r18, 0x04	; 4
    458c:	82 2b       	or	r24, r18
    458e:	84 b9       	out	0x04, r24	; 4
    4590:	08 95       	ret
            break;
         case SELECT_PORT_D:
            PORTD &= ~_BV(hardware_bit);
    4592:	3b b1       	in	r19, 0x0b	; 11
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	02 c0       	rjmp	.+4      	; 0x459e <set_output+0x9c>
    459a:	88 0f       	add	r24, r24
    459c:	99 1f       	adc	r25, r25
    459e:	2a 95       	dec	r18
    45a0:	e2 f7       	brpl	.-8      	; 0x459a <set_output+0x98>
    45a2:	28 2f       	mov	r18, r24
    45a4:	20 95       	com	r18
    45a6:	23 23       	and	r18, r19
    45a8:	2b b9       	out	0x0b, r18	; 11
            DDRD  |=  _BV(hardware_bit);
    45aa:	2a b1       	in	r18, 0x0a	; 10
    45ac:	82 2b       	or	r24, r18
    45ae:	8a b9       	out	0x0a, r24	; 10
    45b0:	08 95       	ret
            break;
         case SELECT_PORT_E:
            PORTE &= ~_BV(hardware_bit);
    45b2:	3e b1       	in	r19, 0x0e	; 14
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <set_output+0xbc>
    45ba:	88 0f       	add	r24, r24
    45bc:	99 1f       	adc	r25, r25
    45be:	2a 95       	dec	r18
    45c0:	e2 f7       	brpl	.-8      	; 0x45ba <set_output+0xb8>
    45c2:	28 2f       	mov	r18, r24
    45c4:	20 95       	com	r18
    45c6:	23 23       	and	r18, r19
    45c8:	2e b9       	out	0x0e, r18	; 14
            DDRE  |=  _BV(hardware_bit);
    45ca:	2d b1       	in	r18, 0x0d	; 13
    45cc:	82 2b       	or	r24, r18
    45ce:	8d b9       	out	0x0d, r24	; 13
    45d0:	08 95       	ret
            break;
         case SELECT_PORT_G:
            PORTG &= ~_BV(hardware_bit);
    45d2:	34 b3       	in	r19, 0x14	; 20
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	02 c0       	rjmp	.+4      	; 0x45de <set_output+0xdc>
    45da:	88 0f       	add	r24, r24
    45dc:	99 1f       	adc	r25, r25
    45de:	2a 95       	dec	r18
    45e0:	e2 f7       	brpl	.-8      	; 0x45da <set_output+0xd8>
    45e2:	28 2f       	mov	r18, r24
    45e4:	20 95       	com	r18
    45e6:	23 23       	and	r18, r19
    45e8:	24 bb       	out	0x14, r18	; 20
            DDRG  |=  _BV(hardware_bit);
    45ea:	23 b3       	in	r18, 0x13	; 19
    45ec:	82 2b       	or	r24, r18
    45ee:	83 bb       	out	0x13, r24	; 19
    45f0:	08 95       	ret
            break;
         }
      }
      else
      { // switch off
         switch(hardware_port)
    45f2:	43 30       	cpi	r20, 0x03	; 3
    45f4:	51 f1       	breq	.+84     	; 0x464a <set_output+0x148>
    45f6:	44 30       	cpi	r20, 0x04	; 4
    45f8:	30 f4       	brcc	.+12     	; 0x4606 <set_output+0x104>
    45fa:	44 23       	and	r20, r20
    45fc:	51 f0       	breq	.+20     	; 0x4612 <set_output+0x110>
    45fe:	41 30       	cpi	r20, 0x01	; 1
    4600:	09 f0       	breq	.+2      	; 0x4604 <set_output+0x102>
    4602:	4c c0       	rjmp	.+152    	; 0x469c <set_output+0x19a>
    4604:	14 c0       	rjmp	.+40     	; 0x462e <set_output+0x12c>
    4606:	44 30       	cpi	r20, 0x04	; 4
    4608:	71 f1       	breq	.+92     	; 0x4666 <set_output+0x164>
    460a:	46 30       	cpi	r20, 0x06	; 6
    460c:	09 f0       	breq	.+2      	; 0x4610 <set_output+0x10e>
    460e:	46 c0       	rjmp	.+140    	; 0x469c <set_output+0x19a>
    4610:	38 c0       	rjmp	.+112    	; 0x4682 <set_output+0x180>
         {
         case SELECT_PORT_A:
            PORTA |= _BV(hardware_bit);
    4612:	82 b1       	in	r24, 0x02	; 2
    4614:	21 e0       	ldi	r18, 0x01	; 1
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	02 c0       	rjmp	.+4      	; 0x461e <set_output+0x11c>
    461a:	22 0f       	add	r18, r18
    461c:	33 1f       	adc	r19, r19
    461e:	5a 95       	dec	r21
    4620:	e2 f7       	brpl	.-8      	; 0x461a <set_output+0x118>
    4622:	82 2b       	or	r24, r18
    4624:	82 b9       	out	0x02, r24	; 2
            DDRA  |= _BV(hardware_bit);
    4626:	81 b1       	in	r24, 0x01	; 1
    4628:	28 2b       	or	r18, r24
    462a:	21 b9       	out	0x01, r18	; 1
    462c:	08 95       	ret
            break;
         case SELECT_PORT_B:
            PORTB |= _BV(hardware_bit);
    462e:	85 b1       	in	r24, 0x05	; 5
    4630:	21 e0       	ldi	r18, 0x01	; 1
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	02 c0       	rjmp	.+4      	; 0x463a <set_output+0x138>
    4636:	22 0f       	add	r18, r18
    4638:	33 1f       	adc	r19, r19
    463a:	5a 95       	dec	r21
    463c:	e2 f7       	brpl	.-8      	; 0x4636 <set_output+0x134>
    463e:	82 2b       	or	r24, r18
    4640:	85 b9       	out	0x05, r24	; 5
            DDRB  |= _BV(hardware_bit);
    4642:	84 b1       	in	r24, 0x04	; 4
    4644:	28 2b       	or	r18, r24
    4646:	24 b9       	out	0x04, r18	; 4
    4648:	08 95       	ret
            break;
         case SELECT_PORT_D:
            PORTD |= _BV(hardware_bit);
    464a:	8b b1       	in	r24, 0x0b	; 11
    464c:	21 e0       	ldi	r18, 0x01	; 1
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <set_output+0x154>
    4652:	22 0f       	add	r18, r18
    4654:	33 1f       	adc	r19, r19
    4656:	5a 95       	dec	r21
    4658:	e2 f7       	brpl	.-8      	; 0x4652 <set_output+0x150>
    465a:	82 2b       	or	r24, r18
    465c:	8b b9       	out	0x0b, r24	; 11
            DDRD  |= _BV(hardware_bit);
    465e:	8a b1       	in	r24, 0x0a	; 10
    4660:	28 2b       	or	r18, r24
    4662:	2a b9       	out	0x0a, r18	; 10
    4664:	08 95       	ret
            break;
         case SELECT_PORT_E:
            PORTE |= _BV(hardware_bit);
    4666:	8e b1       	in	r24, 0x0e	; 14
    4668:	21 e0       	ldi	r18, 0x01	; 1
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	02 c0       	rjmp	.+4      	; 0x4672 <set_output+0x170>
    466e:	22 0f       	add	r18, r18
    4670:	33 1f       	adc	r19, r19
    4672:	5a 95       	dec	r21
    4674:	e2 f7       	brpl	.-8      	; 0x466e <set_output+0x16c>
    4676:	82 2b       	or	r24, r18
    4678:	8e b9       	out	0x0e, r24	; 14
            DDRE  |= _BV(hardware_bit);
    467a:	8d b1       	in	r24, 0x0d	; 13
    467c:	28 2b       	or	r18, r24
    467e:	2d b9       	out	0x0d, r18	; 13
    4680:	08 95       	ret
            break;
         case SELECT_PORT_G:
            PORTG |= _BV(hardware_bit);
    4682:	84 b3       	in	r24, 0x14	; 20
    4684:	21 e0       	ldi	r18, 0x01	; 1
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	02 c0       	rjmp	.+4      	; 0x468e <set_output+0x18c>
    468a:	22 0f       	add	r18, r18
    468c:	33 1f       	adc	r19, r19
    468e:	5a 95       	dec	r21
    4690:	e2 f7       	brpl	.-8      	; 0x468a <set_output+0x188>
    4692:	82 2b       	or	r24, r18
    4694:	84 bb       	out	0x14, r24	; 20
            DDRG  |= _BV(hardware_bit);
    4696:	83 b3       	in	r24, 0x13	; 19
    4698:	28 2b       	or	r18, r24
    469a:	23 bb       	out	0x13, r18	; 19
    469c:	08 95       	ret

0000469e <read_io>:
 */
bool read_io(uint8_t port, uint8_t pin)
{
   bool result = false;
#if NODETYPE != COORD
   switch(port)
    469e:	83 30       	cpi	r24, 0x03	; 3
    46a0:	81 f1       	breq	.+96     	; 0x4702 <read_io+0x64>
    46a2:	84 30       	cpi	r24, 0x04	; 4
    46a4:	28 f4       	brcc	.+10     	; 0x46b0 <read_io+0x12>
    46a6:	88 23       	and	r24, r24
    46a8:	51 f0       	breq	.+20     	; 0x46be <read_io+0x20>
    46aa:	81 30       	cpi	r24, 0x01	; 1
    46ac:	31 f4       	brne	.+12     	; 0x46ba <read_io+0x1c>
    46ae:	18 c0       	rjmp	.+48     	; 0x46e0 <read_io+0x42>
    46b0:	84 30       	cpi	r24, 0x04	; 4
    46b2:	c1 f1       	breq	.+112    	; 0x4724 <read_io+0x86>
    46b4:	86 30       	cpi	r24, 0x06	; 6
    46b6:	09 f4       	brne	.+2      	; 0x46ba <read_io+0x1c>
    46b8:	4d c0       	rjmp	.+154    	; 0x4754 <read_io+0xb6>
    46ba:	80 e0       	ldi	r24, 0x00	; 0
    46bc:	08 95       	ret
   {
   case SELECT_PORT_A:
      PORTA |= (1 << pin);
    46be:	22 b1       	in	r18, 0x02	; 2
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	06 2e       	mov	r0, r22
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <read_io+0x2e>
    46c8:	88 0f       	add	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	0a 94       	dec	r0
    46ce:	e2 f7       	brpl	.-8      	; 0x46c8 <read_io+0x2a>
    46d0:	28 2b       	or	r18, r24
    46d2:	22 b9       	out	0x02, r18	; 2
      DDRA &= ~(1 << pin);
    46d4:	21 b1       	in	r18, 0x01	; 1
    46d6:	80 95       	com	r24
    46d8:	82 23       	and	r24, r18
    46da:	81 b9       	out	0x01, r24	; 1
      if(PINA & (1 << pin)) { result = true; }
    46dc:	80 b1       	in	r24, 0x00	; 0
    46de:	32 c0       	rjmp	.+100    	; 0x4744 <read_io+0xa6>
      break;
   case SELECT_PORT_B:
      PORTB |= (1 << pin);
    46e0:	25 b1       	in	r18, 0x05	; 5
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	06 2e       	mov	r0, r22
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <read_io+0x50>
    46ea:	88 0f       	add	r24, r24
    46ec:	99 1f       	adc	r25, r25
    46ee:	0a 94       	dec	r0
    46f0:	e2 f7       	brpl	.-8      	; 0x46ea <read_io+0x4c>
    46f2:	28 2b       	or	r18, r24
    46f4:	25 b9       	out	0x05, r18	; 5
      DDRB &= ~(1 << pin);
    46f6:	24 b1       	in	r18, 0x04	; 4
    46f8:	80 95       	com	r24
    46fa:	82 23       	and	r24, r18
    46fc:	84 b9       	out	0x04, r24	; 4
      if(PINB & (1 << pin)) { result = true; }
    46fe:	83 b1       	in	r24, 0x03	; 3
    4700:	21 c0       	rjmp	.+66     	; 0x4744 <read_io+0xa6>
      break;
   case SELECT_PORT_D:
      PORTD |= (1 << pin);
    4702:	2b b1       	in	r18, 0x0b	; 11
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	06 2e       	mov	r0, r22
    470a:	02 c0       	rjmp	.+4      	; 0x4710 <read_io+0x72>
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	0a 94       	dec	r0
    4712:	e2 f7       	brpl	.-8      	; 0x470c <read_io+0x6e>
    4714:	28 2b       	or	r18, r24
    4716:	2b b9       	out	0x0b, r18	; 11
      DDRD &= ~(1 << pin);
    4718:	2a b1       	in	r18, 0x0a	; 10
    471a:	80 95       	com	r24
    471c:	82 23       	and	r24, r18
    471e:	8a b9       	out	0x0a, r24	; 10
      if(PIND & (1 << pin)) { result = true; }
    4720:	89 b1       	in	r24, 0x09	; 9
    4722:	10 c0       	rjmp	.+32     	; 0x4744 <read_io+0xa6>
      break;
   case SELECT_PORT_E:
      PORTE |= (1 << pin);
    4724:	2e b1       	in	r18, 0x0e	; 14
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	06 2e       	mov	r0, r22
    472c:	02 c0       	rjmp	.+4      	; 0x4732 <read_io+0x94>
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	0a 94       	dec	r0
    4734:	e2 f7       	brpl	.-8      	; 0x472e <read_io+0x90>
    4736:	28 2b       	or	r18, r24
    4738:	2e b9       	out	0x0e, r18	; 14
      DDRE &= ~(1 << pin);
    473a:	2d b1       	in	r18, 0x0d	; 13
    473c:	80 95       	com	r24
    473e:	82 23       	and	r24, r18
    4740:	8d b9       	out	0x0d, r24	; 13
      if(PINE & (1 << pin)) { result = true; }
    4742:	8c b1       	in	r24, 0x0c	; 12
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	02 c0       	rjmp	.+4      	; 0x474c <read_io+0xae>
    4748:	95 95       	asr	r25
    474a:	87 95       	ror	r24
    474c:	6a 95       	dec	r22
    474e:	e2 f7       	brpl	.-8      	; 0x4748 <read_io+0xaa>
    4750:	81 70       	andi	r24, 0x01	; 1
    4752:	08 95       	ret
      break;
   case SELECT_PORT_G:
      PORTG |= (1 << pin);
    4754:	24 b3       	in	r18, 0x14	; 20
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	06 2e       	mov	r0, r22
    475c:	02 c0       	rjmp	.+4      	; 0x4762 <read_io+0xc4>
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	0a 94       	dec	r0
    4764:	e2 f7       	brpl	.-8      	; 0x475e <read_io+0xc0>
    4766:	28 2b       	or	r18, r24
    4768:	24 bb       	out	0x14, r18	; 20
      DDRG &= ~(1 << pin);
    476a:	23 b3       	in	r18, 0x13	; 19
    476c:	80 95       	com	r24
    476e:	82 23       	and	r24, r18
    4770:	83 bb       	out	0x13, r24	; 19
      if(PING & (1 << pin)) { result = true; }
    4772:	82 b3       	in	r24, 0x12	; 18
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	02 c0       	rjmp	.+4      	; 0x477c <read_io+0xde>
    4778:	95 95       	asr	r25
    477a:	87 95       	ror	r24
    477c:	6a 95       	dec	r22
    477e:	e2 f7       	brpl	.-8      	; 0x4778 <read_io+0xda>
    4780:	81 70       	andi	r24, 0x01	; 1
      break;
   }
#endif // NODETYPE != COORD
   return result;
}
    4782:	08 95       	ret

00004784 <check_input>:
 * @param   protocol_bit   defines the bit position of output pin inside the data frame port
 * @param   hardware_port  select the port where output pin is connected to
 * @param   hardware_bit   select the bit on port 'hardware_port' where output pin is connected
 */
uint8_t check_input(uint8_t protocol_port, uint8_t protocol_bit, uint8_t hardware_port, uint8_t hardware_bit)
{
    4784:	1f 93       	push	r17
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	16 2f       	mov	r17, r22
   uint8_t stateChanged = 0;
#if NODETYPE != COORD

   payloadDataFrame_t* dataFrame = (payloadDataFrame_t*)&dataConfiguration.payload;

   if((dataFrame->digitalIODirection[protocol_port] & _BV(protocol_bit)) != 0x00)
    478c:	c8 2f       	mov	r28, r24
    478e:	d0 e0       	ldi	r29, 0x00	; 0
    4790:	cf 5c       	subi	r28, 0xCF	; 207
    4792:	d5 4e       	sbci	r29, 0xE5	; 229
    4794:	88 85       	ldd	r24, Y+8	; 0x08
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	06 2e       	mov	r0, r22
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <check_input+0x1c>
    479c:	95 95       	asr	r25
    479e:	87 95       	ror	r24
    47a0:	0a 94       	dec	r0
    47a2:	e2 f7       	brpl	.-8      	; 0x479c <check_input+0x18>
    47a4:	80 ff       	sbrs	r24, 0
    47a6:	32 c0       	rjmp	.+100    	; 0x480c <check_input+0x88>
   {
      if(read_io(hardware_port, hardware_bit))
    47a8:	84 2f       	mov	r24, r20
    47aa:	62 2f       	mov	r22, r18
    47ac:	0e 94 4f 23 	call	0x469e	; 0x469e <read_io>
    47b0:	88 23       	and	r24, r24
    47b2:	a9 f0       	breq	.+42     	; 0x47de <check_input+0x5a>
      {
         if((dataFrame->digitalData[protocol_port] & _BV(protocol_bit)) == 0x00)
    47b4:	29 89       	ldd	r18, Y+17	; 0x11
    47b6:	82 2f       	mov	r24, r18
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	01 2e       	mov	r0, r17
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <check_input+0x3e>
    47be:	95 95       	asr	r25
    47c0:	87 95       	ror	r24
    47c2:	0a 94       	dec	r0
    47c4:	e2 f7       	brpl	.-8      	; 0x47be <check_input+0x3a>
    47c6:	80 fd       	sbrc	r24, 0
    47c8:	21 c0       	rjmp	.+66     	; 0x480c <check_input+0x88>
         { // if zero, bit was not set -> we have to set it
            dataFrame->digitalData[protocol_port] |= _BV(protocol_bit);
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <check_input+0x50>
    47d0:	88 0f       	add	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	1a 95       	dec	r17
    47d6:	e2 f7       	brpl	.-8      	; 0x47d0 <check_input+0x4c>
    47d8:	28 2b       	or	r18, r24
    47da:	29 8b       	std	Y+17, r18	; 0x11
    47dc:	15 c0       	rjmp	.+42     	; 0x4808 <check_input+0x84>
            stateChanged = 1;
         }
      }
      else
      {
         if((dataFrame->digitalData[protocol_port] & _BV(protocol_bit)) != 0x00)
    47de:	29 89       	ldd	r18, Y+17	; 0x11
    47e0:	82 2f       	mov	r24, r18
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	01 2e       	mov	r0, r17
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <check_input+0x68>
    47e8:	95 95       	asr	r25
    47ea:	87 95       	ror	r24
    47ec:	0a 94       	dec	r0
    47ee:	e2 f7       	brpl	.-8      	; 0x47e8 <check_input+0x64>
    47f0:	80 ff       	sbrs	r24, 0
    47f2:	0c c0       	rjmp	.+24     	; 0x480c <check_input+0x88>
         { // if not zero, bit was set -> we have to reset it
            dataFrame->digitalData[protocol_port] &= ~_BV(protocol_bit);
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	02 c0       	rjmp	.+4      	; 0x47fe <check_input+0x7a>
    47fa:	88 0f       	add	r24, r24
    47fc:	99 1f       	adc	r25, r25
    47fe:	1a 95       	dec	r17
    4800:	e2 f7       	brpl	.-8      	; 0x47fa <check_input+0x76>
    4802:	80 95       	com	r24
    4804:	82 23       	and	r24, r18
    4806:	89 8b       	std	Y+17, r24	; 0x11
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	01 c0       	rjmp	.+2      	; 0x480e <check_input+0x8a>
    480c:	80 e0       	ldi	r24, 0x00	; 0
         }
      }
   }
#endif // NODETYPE != COORD
   return stateChanged;
}
    480e:	df 91       	pop	r29
    4810:	cf 91       	pop	r28
    4812:	1f 91       	pop	r17
    4814:	08 95       	ret

00004816 <check_temp_and_vcc>:
 * If any changes recognized, a message is generated and the actual temperature and voltage
 * is send out over wireless interface. This function is called after timer with preloaded
 * value ITERATION_TIME_TEMP_VCC expired.
 */
void check_temp_and_vcc(void)
{
    4816:	af 92       	push	r10
    4818:	bf 92       	push	r11
    481a:	cf 92       	push	r12
    481c:	df 92       	push	r13
    481e:	ef 92       	push	r14
    4820:	ff 92       	push	r15
    4822:	0f 93       	push	r16
    4824:	1f 93       	push	r17
#if NODETYPE != COORD
   uint8_t stateChanged = 0;

   payloadDataFrame_t* dataFrame = (payloadDataFrame_t*)&dataConfiguration.payload;

   init_adc();
    4826:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <init_adc>

   //SingleChip does not use STB temperature sensor -> no need to activate STB temp sensor
#ifdef SINGLE_CHIP
   uint32_t volt = get_vcc();
    482a:	0e 94 81 2b 	call	0x5702	; 0x5702 <get_vcc>
    482e:	5b 01       	movw	r10, r22
    4830:	6c 01       	movw	r12, r24
   int32_t temp = temp_get_degrcelc();
    4832:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <temp_get_degrcelc>
    4836:	7b 01       	movw	r14, r22
    4838:	8c 01       	movw	r16, r24
   int32_t temp = temp_get_degrcelc();
   stb_status_temperature(STB_TEMPERATURE_OFF);
#endif

   //check if temperature changed -> only send changes about +-TEMPERATURE_DIFFERENCE milli degree
   if((actual_temp + TEMPERATURE_DIFFERENCE) <= temp || (actual_temp - TEMPERATURE_DIFFERENCE) > temp)
    483a:	20 91 8a 16 	lds	r18, 0x168A
    483e:	30 91 8b 16 	lds	r19, 0x168B
    4842:	40 91 8c 16 	lds	r20, 0x168C
    4846:	50 91 8d 16 	lds	r21, 0x168D
    484a:	da 01       	movw	r26, r20
    484c:	c9 01       	movw	r24, r18
    484e:	81 55       	subi	r24, 0x51	; 81
    4850:	9b 4f       	sbci	r25, 0xFB	; 251
    4852:	af 4f       	sbci	r26, 0xFF	; 255
    4854:	bf 4f       	sbci	r27, 0xFF	; 255
    4856:	8e 15       	cp	r24, r14
    4858:	9f 05       	cpc	r25, r15
    485a:	a0 07       	cpc	r26, r16
    485c:	b1 07       	cpc	r27, r17
    485e:	5c f0       	brlt	.+22     	; 0x4876 <check_temp_and_vcc+0x60>
    4860:	20 5b       	subi	r18, 0xB0	; 176
    4862:	34 40       	sbci	r19, 0x04	; 4
    4864:	40 40       	sbci	r20, 0x00	; 0
    4866:	50 40       	sbci	r21, 0x00	; 0
    4868:	e2 16       	cp	r14, r18
    486a:	f3 06       	cpc	r15, r19
    486c:	04 07       	cpc	r16, r20
    486e:	15 07       	cpc	r17, r21
    4870:	14 f0       	brlt	.+4      	; 0x4876 <check_temp_and_vcc+0x60>
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	09 c0       	rjmp	.+18     	; 0x4888 <check_temp_and_vcc+0x72>
   {
      actual_temp = temp;
    4876:	e0 92 8a 16 	sts	0x168A, r14
    487a:	f0 92 8b 16 	sts	0x168B, r15
    487e:	00 93 8c 16 	sts	0x168C, r16
    4882:	10 93 8d 16 	sts	0x168D, r17
    4886:	61 e0       	ldi	r22, 0x01	; 1
      stateChanged++;
   }

   //check if voltage changed -> only send changes about +-VCC_DIFFERENCE micro volt
   if((actual_vcc + VCC_DIFFERENCE) <= volt || (actual_vcc - VCC_DIFFERENCE) > volt)
    4888:	20 91 8e 16 	lds	r18, 0x168E
    488c:	30 91 8f 16 	lds	r19, 0x168F
    4890:	40 91 90 16 	lds	r20, 0x1690
    4894:	50 91 91 16 	lds	r21, 0x1691
    4898:	da 01       	movw	r26, r20
    489a:	c9 01       	movw	r24, r18
    489c:	80 56       	subi	r24, 0x60	; 96
    489e:	99 47       	sbci	r25, 0x79	; 121
    48a0:	ae 4f       	sbci	r26, 0xFE	; 254
    48a2:	bf 4f       	sbci	r27, 0xFF	; 255
    48a4:	a8 16       	cp	r10, r24
    48a6:	b9 06       	cpc	r11, r25
    48a8:	ca 06       	cpc	r12, r26
    48aa:	db 06       	cpc	r13, r27
    48ac:	48 f4       	brcc	.+18     	; 0x48c0 <check_temp_and_vcc+0xaa>
    48ae:	20 5a       	subi	r18, 0xA0	; 160
    48b0:	36 48       	sbci	r19, 0x86	; 134
    48b2:	41 40       	sbci	r20, 0x01	; 1
    48b4:	50 40       	sbci	r21, 0x00	; 0
    48b6:	a2 16       	cp	r10, r18
    48b8:	b3 06       	cpc	r11, r19
    48ba:	c4 06       	cpc	r12, r20
    48bc:	d5 06       	cpc	r13, r21
    48be:	48 f4       	brcc	.+18     	; 0x48d2 <check_temp_and_vcc+0xbc>
   {
      actual_vcc = volt;
    48c0:	a0 92 8e 16 	sts	0x168E, r10
    48c4:	b0 92 8f 16 	sts	0x168F, r11
    48c8:	c0 92 90 16 	sts	0x1690, r12
    48cc:	d0 92 91 16 	sts	0x1691, r13
    48d0:	03 c0       	rjmp	.+6      	; 0x48d8 <check_temp_and_vcc+0xc2>
      stateChanged++;
   }

   if(stateChanged > 0)
    48d2:	66 23       	and	r22, r22
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <check_temp_and_vcc+0xc2>
    48d6:	50 c0       	rjmp	.+160    	; 0x4978 <check_temp_and_vcc+0x162>
   {
      dataConfiguration.command = COMMAND_DATA_FRAME_RESPONSE;
    48d8:	84 e0       	ldi	r24, 0x04	; 4
    48da:	80 93 2f 1a 	sts	0x1A2F, r24
      dataConfiguration.option = NO_OPTION;
    48de:	10 92 30 1a 	sts	0x1A30, r1
      dataFrame->mac = macConfig.longAddr;
    48e2:	80 91 51 18 	lds	r24, 0x1851
    48e6:	80 93 31 1a 	sts	0x1A31, r24
    48ea:	80 91 52 18 	lds	r24, 0x1852
    48ee:	80 93 32 1a 	sts	0x1A32, r24
    48f2:	80 91 53 18 	lds	r24, 0x1853
    48f6:	80 93 33 1a 	sts	0x1A33, r24
    48fa:	80 91 54 18 	lds	r24, 0x1854
    48fe:	80 93 34 1a 	sts	0x1A34, r24
    4902:	80 91 55 18 	lds	r24, 0x1855
    4906:	80 93 35 1a 	sts	0x1A35, r24
    490a:	80 91 56 18 	lds	r24, 0x1856
    490e:	80 93 36 1a 	sts	0x1A36, r24
    4912:	80 91 57 18 	lds	r24, 0x1857
    4916:	80 93 37 1a 	sts	0x1A37, r24
    491a:	80 91 58 18 	lds	r24, 0x1858
    491e:	80 93 38 1a 	sts	0x1A38, r24

      dataFrame->analogData[0] = actual_temp;
    4922:	80 91 8a 16 	lds	r24, 0x168A
    4926:	90 91 8b 16 	lds	r25, 0x168B
    492a:	a0 91 8c 16 	lds	r26, 0x168C
    492e:	b0 91 8d 16 	lds	r27, 0x168D
    4932:	80 93 4a 1a 	sts	0x1A4A, r24
    4936:	90 93 4b 1a 	sts	0x1A4B, r25
    493a:	a0 93 4c 1a 	sts	0x1A4C, r26
    493e:	b0 93 4d 1a 	sts	0x1A4D, r27
      dataFrame->analogData[1] = actual_vcc;
    4942:	80 91 8e 16 	lds	r24, 0x168E
    4946:	90 91 8f 16 	lds	r25, 0x168F
    494a:	a0 91 90 16 	lds	r26, 0x1690
    494e:	b0 91 91 16 	lds	r27, 0x1691
    4952:	80 93 4e 1a 	sts	0x1A4E, r24
    4956:	90 93 4f 1a 	sts	0x1A4F, r25
    495a:	a0 93 50 1a 	sts	0x1A50, r26
    495e:	b0 93 51 1a 	sts	0x1A51, r27

      send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t*)&dataConfiguration, sizeof(deRFprotocol_t) ,UDP_PORT_END_ROUTER, UDP_PORT_COORD);
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	6f e2       	ldi	r22, 0x2F	; 47
    4968:	7a e1       	ldi	r23, 0x1A	; 26
    496a:	4b e3       	ldi	r20, 0x3B	; 59
    496c:	2b eb       	ldi	r18, 0xBB	; 187
    496e:	30 ef       	ldi	r19, 0xF0	; 240
    4970:	0c eb       	ldi	r16, 0xBC	; 188
    4972:	10 ef       	ldi	r17, 0xF0	; 240
    4974:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
   }

   // call again after ITERATION_TIME_TEMP_VCC timeouts
   macSetAlarm(ITERATION_TIME_TEMP_VCC, check_temp_and_vcc);
    4978:	88 e8       	ldi	r24, 0x88	; 136
    497a:	93 e1       	ldi	r25, 0x13	; 19
    497c:	6b e0       	ldi	r22, 0x0B	; 11
    497e:	74 e2       	ldi	r23, 0x24	; 36
    4980:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>
#endif // NODETYPE != COORD
}
    4984:	1f 91       	pop	r17
    4986:	0f 91       	pop	r16
    4988:	ff 90       	pop	r15
    498a:	ef 90       	pop	r14
    498c:	df 90       	pop	r13
    498e:	cf 90       	pop	r12
    4990:	bf 90       	pop	r11
    4992:	af 90       	pop	r10
    4994:	08 95       	ret

00004996 <check_io_components>:
 *
 * If any change occurs, a new data message is generated and is transmitted to coordinator.
 * This function is called after timer with preloaded value ITERATION_TIME_INPUT_IO expired.
 */
void check_io_components(void)
{
    4996:	cf 92       	push	r12
    4998:	df 92       	push	r13
    499a:	ef 92       	push	r14
    499c:	ff 92       	push	r15
    499e:	0f 93       	push	r16
    49a0:	1f 93       	push	r17
   payloadDataFrame_t* dataFrame     = (payloadDataFrame_t*)&dataConfiguration.payload;

   /*
    * RCB Input Components -> just button
    */
   if(!button_pressed(PLATFORM_RCB))
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	0e 94 02 29 	call	0x5204	; 0x5204 <button_pressed>
    49a8:	90 91 42 1a 	lds	r25, 0x1A42
    49ac:	88 23       	and	r24, r24
    49ae:	21 f4       	brne	.+8      	; 0x49b8 <check_io_components+0x22>
   {
      // if button not pressed but it was before -> change data
      if((dataFrame->digitalData[RCB_BUTTON_PORT_POSITION] & _BV(RCB_BUTTON_BIT_POSITION)) != 0x00)
    49b0:	90 ff       	sbrs	r25, 0
    49b2:	0a c0       	rjmp	.+20     	; 0x49c8 <check_io_components+0x32>
      {
         dataFrame->digitalData[RCB_BUTTON_PORT_POSITION] &= ~_BV(RCB_BUTTON_BIT_POSITION);
    49b4:	9e 7f       	andi	r25, 0xFE	; 254
    49b6:	03 c0       	rjmp	.+6      	; 0x49be <check_io_components+0x28>
   }
   // button is not pressed OR not ANY MORE
   else
   {
      // if button pressed and it was not before -> change data
      if((dataFrame->digitalData[RCB_BUTTON_PORT_POSITION] & _BV(RCB_BUTTON_BIT_POSITION)) == 0x00)
    49b8:	90 fd       	sbrc	r25, 0
    49ba:	06 c0       	rjmp	.+12     	; 0x49c8 <check_io_components+0x32>
      {
         dataFrame->digitalData[RCB_BUTTON_PORT_POSITION] |= _BV(RCB_BUTTON_BIT_POSITION);
    49bc:	91 60       	ori	r25, 0x01	; 1
    49be:	90 93 42 1a 	sts	0x1A42, r25
    49c2:	cc 24       	eor	r12, r12
    49c4:	c3 94       	inc	r12
    49c6:	01 c0       	rjmp	.+2      	; 0x49ca <check_io_components+0x34>
    49c8:	cc 24       	eor	r12, r12
   stateChanged += check_input(PROTOCOL_PORT_PE7, PROTOCOL_BIT_PE7, PORT_PE7, BIT_PE7);
#else
   /*
    * STB Predefined Input Components -> just button
    */
   if(!button_pressed(PLATFORM_STB))
    49ca:	82 e0       	ldi	r24, 0x02	; 2
    49cc:	0e 94 02 29 	call	0x5204	; 0x5204 <button_pressed>
    49d0:	90 91 43 1a 	lds	r25, 0x1A43
    49d4:	88 23       	and	r24, r24
    49d6:	21 f4       	brne	.+8      	; 0x49e0 <check_io_components+0x4a>
   {
      // if button not pressed but it was before -> change data
      if((dataFrame->digitalData[STB_BUTTON_PORT_PROTOCOL] & _BV(STB_BUTTON_BIT_POSITION)) != 0x00)
    49d8:	97 ff       	sbrs	r25, 7
    49da:	08 c0       	rjmp	.+16     	; 0x49ec <check_io_components+0x56>
      {
         dataFrame->digitalData[STB_BUTTON_PORT_PROTOCOL] &= ~_BV(STB_BUTTON_BIT_POSITION);
    49dc:	9f 77       	andi	r25, 0x7F	; 127
    49de:	03 c0       	rjmp	.+6      	; 0x49e6 <check_io_components+0x50>
   }
   // button is not pressed OR not ANY MORE
   else
   {
      // if button pressed and it was not before -> change data
      if((dataFrame->digitalData[STB_BUTTON_PORT_PROTOCOL] & _BV(STB_BUTTON_BIT_POSITION)) == 0x00)
    49e0:	97 fd       	sbrc	r25, 7
    49e2:	04 c0       	rjmp	.+8      	; 0x49ec <check_io_components+0x56>
      {
         dataFrame->digitalData[STB_BUTTON_PORT_PROTOCOL] |= _BV(STB_BUTTON_BIT_POSITION);
    49e4:	90 68       	ori	r25, 0x80	; 128
    49e6:	90 93 43 1a 	sts	0x1A43, r25
         stateChanged++;
    49ea:	c3 94       	inc	r12
    * PORT_PE5 - not set, on STB its routed to PE5 AND #RD Pin, on deRFtoRCBAdapter it's the Button
    * PORT_PD7 - not set, on STB its routed to PD7 AND PC7, but PC7 is also enable pin for STB I/O's (USB_CE/IO_CE)
    * PORT_PB6 - not set, on STB Pin PB6 it's set to GND and on deRFtoRCBAdapter its routed to EXT1.29 which is PA6 on STB
    */
#if PLATFORM == RCBSINGLE
   stateChanged += check_input(PROTOCOL_PORT_PD5, PROTOCOL_BIT_PD5, PORT_PD5, BIT_PD5);
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	62 e0       	ldi	r22, 0x02	; 2
    49f0:	43 e0       	ldi	r20, 0x03	; 3
    49f2:	25 e0       	ldi	r18, 0x05	; 5
    49f4:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    49f8:	18 2f       	mov	r17, r24
   stateChanged += check_input(PROTOCOL_PORT_PB7, PROTOCOL_BIT_PB7, PORT_PB7, BIT_PB7);
    49fa:	82 e0       	ldi	r24, 0x02	; 2
    49fc:	65 e0       	ldi	r22, 0x05	; 5
    49fe:	46 e0       	ldi	r20, 0x06	; 6
    4a00:	21 e0       	ldi	r18, 0x01	; 1
    4a02:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    4a06:	d8 2e       	mov	r13, r24

   stateChanged += check_input(PROTOCOL_PORT_I2C_SDA, PROTOCOL_BIT_I2C_SDA, PORT_I2C_SDA, BIT_I2C_SDA);
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	67 e0       	ldi	r22, 0x07	; 7
    4a0c:	43 e0       	ldi	r20, 0x03	; 3
    4a0e:	21 e0       	ldi	r18, 0x01	; 1
    4a10:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    4a14:	e8 2e       	mov	r14, r24
   stateChanged += check_input(PROTOCOL_PORT_I2C_SCL, PROTOCOL_BIT_I2C_SCL, PORT_I2C_SCL, BIT_I2C_SCL);
    4a16:	82 e0       	ldi	r24, 0x02	; 2
    4a18:	66 e0       	ldi	r22, 0x06	; 6
    4a1a:	43 e0       	ldi	r20, 0x03	; 3
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    4a22:	f8 2e       	mov	r15, r24
   stateChanged += check_input(PROTOCOL_PORT_UART_RXD, PROTOCOL_BIT_UART_RXD, PORT_UART_RXD, BIT_UART_RXD);
    4a24:	83 e0       	ldi	r24, 0x03	; 3
    4a26:	60 e0       	ldi	r22, 0x00	; 0
    4a28:	43 e0       	ldi	r20, 0x03	; 3
    4a2a:	22 e0       	ldi	r18, 0x02	; 2
    4a2c:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    4a30:	08 2f       	mov	r16, r24
   stateChanged += check_input(PROTOCOL_PORT_UART_TXD, PROTOCOL_BIT_UART_TXD, PORT_UART_TXD, BIT_UART_TXD);
    4a32:	83 e0       	ldi	r24, 0x03	; 3
    4a34:	61 e0       	ldi	r22, 0x01	; 1
    4a36:	43 e0       	ldi	r20, 0x03	; 3
    4a38:	23 e0       	ldi	r18, 0x03	; 3
    4a3a:	0e 94 c2 23 	call	0x4784	; 0x4784 <check_input>
    * PORT_PE5 - not set, on STB its routed to PE5 AND #RD Pin, on deRFtoRCBAdapter it's the Button
    * PORT_PD7 - not set, on STB its routed to PD7 AND PC7, but PC7 is also enable pin for STB I/O's (USB_CE/IO_CE)
    * PORT_PB6 - not set, on STB Pin PB6 it's set to GND and on deRFtoRCBAdapter its routed to EXT1.29 which is PA6 on STB
    */
#if PLATFORM == RCBSINGLE
   stateChanged += check_input(PROTOCOL_PORT_PD5, PROTOCOL_BIT_PD5, PORT_PD5, BIT_PD5);
    4a3e:	1c 0d       	add	r17, r12
   stateChanged += check_input(PROTOCOL_PORT_PB7, PROTOCOL_BIT_PB7, PORT_PB7, BIT_PB7);
    4a40:	1d 0d       	add	r17, r13

   stateChanged += check_input(PROTOCOL_PORT_I2C_SDA, PROTOCOL_BIT_I2C_SDA, PORT_I2C_SDA, BIT_I2C_SDA);
    4a42:	1e 0d       	add	r17, r14
   stateChanged += check_input(PROTOCOL_PORT_I2C_SCL, PROTOCOL_BIT_I2C_SCL, PORT_I2C_SCL, BIT_I2C_SCL);
    4a44:	1f 0d       	add	r17, r15
   stateChanged += check_input(PROTOCOL_PORT_UART_RXD, PROTOCOL_BIT_UART_RXD, PORT_UART_RXD, BIT_UART_RXD);
    4a46:	10 0f       	add	r17, r16
#endif


#endif

   if(stateChanged > 0)
    4a48:	18 0f       	add	r17, r24
    4a4a:	09 f4       	brne	.+2      	; 0x4a4e <check_io_components+0xb8>
    4a4c:	50 c0       	rjmp	.+160    	; 0x4aee <check_io_components+0x158>
   {
      dataConfiguration.command = COMMAND_DATA_FRAME_RESPONSE;
    4a4e:	84 e0       	ldi	r24, 0x04	; 4
    4a50:	80 93 2f 1a 	sts	0x1A2F, r24
      dataConfiguration.option = NO_OPTION;
    4a54:	10 92 30 1a 	sts	0x1A30, r1
      dataFrame->mac = macConfig.longAddr;
    4a58:	80 91 51 18 	lds	r24, 0x1851
    4a5c:	80 93 31 1a 	sts	0x1A31, r24
    4a60:	80 91 52 18 	lds	r24, 0x1852
    4a64:	80 93 32 1a 	sts	0x1A32, r24
    4a68:	80 91 53 18 	lds	r24, 0x1853
    4a6c:	80 93 33 1a 	sts	0x1A33, r24
    4a70:	80 91 54 18 	lds	r24, 0x1854
    4a74:	80 93 34 1a 	sts	0x1A34, r24
    4a78:	80 91 55 18 	lds	r24, 0x1855
    4a7c:	80 93 35 1a 	sts	0x1A35, r24
    4a80:	80 91 56 18 	lds	r24, 0x1856
    4a84:	80 93 36 1a 	sts	0x1A36, r24
    4a88:	80 91 57 18 	lds	r24, 0x1857
    4a8c:	80 93 37 1a 	sts	0x1A37, r24
    4a90:	80 91 58 18 	lds	r24, 0x1858
    4a94:	80 93 38 1a 	sts	0x1A38, r24

      // refresh actual temperature
      payloadDataFrame_t* dataFrame = (payloadDataFrame_t*)&dataConfiguration.payload;
      dataFrame->analogData[0] = actual_temp;
    4a98:	80 91 8a 16 	lds	r24, 0x168A
    4a9c:	90 91 8b 16 	lds	r25, 0x168B
    4aa0:	a0 91 8c 16 	lds	r26, 0x168C
    4aa4:	b0 91 8d 16 	lds	r27, 0x168D
    4aa8:	80 93 4a 1a 	sts	0x1A4A, r24
    4aac:	90 93 4b 1a 	sts	0x1A4B, r25
    4ab0:	a0 93 4c 1a 	sts	0x1A4C, r26
    4ab4:	b0 93 4d 1a 	sts	0x1A4D, r27
      dataFrame->analogData[1] = actual_vcc;
    4ab8:	80 91 8e 16 	lds	r24, 0x168E
    4abc:	90 91 8f 16 	lds	r25, 0x168F
    4ac0:	a0 91 90 16 	lds	r26, 0x1690
    4ac4:	b0 91 91 16 	lds	r27, 0x1691
    4ac8:	80 93 4e 1a 	sts	0x1A4E, r24
    4acc:	90 93 4f 1a 	sts	0x1A4F, r25
    4ad0:	a0 93 50 1a 	sts	0x1A50, r26
    4ad4:	b0 93 51 1a 	sts	0x1A51, r27

      send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t*)&dataConfiguration, sizeof(deRFprotocol_t) ,UDP_PORT_END_ROUTER, UDP_PORT_COORD);
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	6f e2       	ldi	r22, 0x2F	; 47
    4ade:	7a e1       	ldi	r23, 0x1A	; 26
    4ae0:	4b e3       	ldi	r20, 0x3B	; 59
    4ae2:	2b eb       	ldi	r18, 0xBB	; 187
    4ae4:	30 ef       	ldi	r19, 0xF0	; 240
    4ae6:	0c eb       	ldi	r16, 0xBC	; 188
    4ae8:	10 ef       	ldi	r17, 0xF0	; 240
    4aea:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
   }

   macSetAlarm(ITERATION_TIME_INPUT_IO, check_io_components);
    4aee:	84 e1       	ldi	r24, 0x14	; 20
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	6b ec       	ldi	r22, 0xCB	; 203
    4af4:	74 e2       	ldi	r23, 0x24	; 36
    4af6:	0e 94 af 09 	call	0x135e	; 0x135e <macSetAlarm>

#endif // NODETYPE != COORD
}
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	ff 90       	pop	r15
    4b00:	ef 90       	pop	r14
    4b02:	df 90       	pop	r13
    4b04:	cf 90       	pop	r12
    4b06:	08 95       	ret

00004b08 <evaluate_data_frame>:
 * be served, because there are less pins than e.g. a RCB231 has.
 *
 * @param   pFrame  pointer to data packet
 */
void evaluate_data_frame(uint8_t* pFrame)
{
    4b08:	0f 93       	push	r16
    4b0a:	1f 93       	push	r17
#if NODETYPE != COORD
   // copy incoming data configuration to be able recognizes changes later (e.g. button pressed, ...)
   memcpy((uint8_t*)&dataConfiguration, pFrame, sizeof(dataConfiguration));
    4b0c:	af e2       	ldi	r26, 0x2F	; 47
    4b0e:	ba e1       	ldi	r27, 0x1A	; 26
    4b10:	fc 01       	movw	r30, r24
    4b12:	8b e3       	ldi	r24, 0x3B	; 59
    4b14:	01 90       	ld	r0, Z+
    4b16:	0d 92       	st	X+, r0
    4b18:	81 50       	subi	r24, 0x01	; 1
    4b1a:	e1 f7       	brne	.-8      	; 0x4b14 <evaluate_data_frame+0xc>
   (dataRCB & 0x04) ? led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_OFF);
   (dataRCB & 0x08) ? led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);

#else

   uint8_t dataRCB = dataFrame->digitalData[0];
    4b1c:	00 91 42 1a 	lds	r16, 0x1A42
   uint8_t dataSTBOnboard = dataFrame->digitalData[1];

   (dataSTBOnboard & 0x01) ? led_set(PLATFORM_STB, STB_LED_0, PLATFORM_LED_ON) : led_set(PLATFORM_STB, STB_LED_0, PLATFORM_LED_OFF);
    4b20:	80 91 43 1a 	lds	r24, 0x1A43
    4b24:	18 2f       	mov	r17, r24
    4b26:	80 ff       	sbrs	r24, 0
    4b28:	04 c0       	rjmp	.+8      	; 0x4b32 <evaluate_data_frame+0x2a>
    4b2a:	82 e0       	ldi	r24, 0x02	; 2
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	41 e0       	ldi	r20, 0x01	; 1
    4b30:	03 c0       	rjmp	.+6      	; 0x4b38 <evaluate_data_frame+0x30>
    4b32:	82 e0       	ldi	r24, 0x02	; 2
    4b34:	60 e0       	ldi	r22, 0x00	; 0
    4b36:	42 e0       	ldi	r20, 0x02	; 2
    4b38:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
   (dataSTBOnboard & 0x02) ? led_set(PLATFORM_STB, STB_LED_1, PLATFORM_LED_ON) : led_set(PLATFORM_STB, STB_LED_1, PLATFORM_LED_OFF);
    4b3c:	11 ff       	sbrs	r17, 1
    4b3e:	04 c0       	rjmp	.+8      	; 0x4b48 <evaluate_data_frame+0x40>
    4b40:	82 e0       	ldi	r24, 0x02	; 2
    4b42:	61 e0       	ldi	r22, 0x01	; 1
    4b44:	41 e0       	ldi	r20, 0x01	; 1
    4b46:	03 c0       	rjmp	.+6      	; 0x4b4e <evaluate_data_frame+0x46>
    4b48:	82 e0       	ldi	r24, 0x02	; 2
    4b4a:	61 e0       	ldi	r22, 0x01	; 1
    4b4c:	42 e0       	ldi	r20, 0x02	; 2
    4b4e:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
    * PORT_PD7 - not set, on STB its routed to PD7 AND PC7, but PC7 is also enable pin for STB I/O's (USB_CE/IO_CE)
    * PORT_PB6 - not set, on STB Pin PB6 it's set to GND and on deRFtoRCBAdapter its routed to EXT1.29 which is PA6 on STB
    */
#if PLATFORM == RCBSINGLE
   // PD5 is routed on STB to PD5 AND PC5 (but this doesn't matter)
   set_output(PROTOCOL_PORT_PD5, PROTOCOL_BIT_PD5, PORT_PD5, BIT_PD5);
    4b52:	82 e0       	ldi	r24, 0x02	; 2
    4b54:	62 e0       	ldi	r22, 0x02	; 2
    4b56:	43 e0       	ldi	r20, 0x03	; 3
    4b58:	25 e0       	ldi	r18, 0x05	; 5
    4b5a:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   // on Single Chip Platform PB7 is PG1
   set_output(PROTOCOL_PORT_PB7, PROTOCOL_BIT_PB7, PORT_PB7, BIT_PB7);
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	65 e0       	ldi	r22, 0x05	; 5
    4b62:	46 e0       	ldi	r20, 0x06	; 6
    4b64:	21 e0       	ldi	r18, 0x01	; 1
    4b66:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>

   set_output(PROTOCOL_PORT_X4_REL1, PROTOCOL_BIT_X4_REL1, PORT_X4_REL1, BIT_X4_REL1);
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	62 e0       	ldi	r22, 0x02	; 2
    4b6e:	44 e0       	ldi	r20, 0x04	; 4
    4b70:	22 e0       	ldi	r18, 0x02	; 2
    4b72:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   set_output(PROTOCOL_PORT_X4_REL2, PROTOCOL_BIT_X4_REL2, PORT_X4_REL2, BIT_X4_REL2);
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	63 e0       	ldi	r22, 0x03	; 3
    4b7a:	44 e0       	ldi	r20, 0x04	; 4
    4b7c:	23 e0       	ldi	r18, 0x03	; 3
    4b7e:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   set_output(PROTOCOL_PORT_I2C_SCL, PROTOCOL_BIT_I2C_SCL, PORT_I2C_SCL, BIT_I2C_SCL);
    4b82:	82 e0       	ldi	r24, 0x02	; 2
    4b84:	66 e0       	ldi	r22, 0x06	; 6
    4b86:	43 e0       	ldi	r20, 0x03	; 3
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   set_output(PROTOCOL_PORT_I2C_SDA, PROTOCOL_BIT_I2C_SDA, PORT_I2C_SDA, BIT_I2C_SDA);
    4b8e:	82 e0       	ldi	r24, 0x02	; 2
    4b90:	67 e0       	ldi	r22, 0x07	; 7
    4b92:	43 e0       	ldi	r20, 0x03	; 3
    4b94:	21 e0       	ldi	r18, 0x01	; 1
    4b96:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   set_output(PROTOCOL_PORT_UART_RXD, PROTOCOL_BIT_UART_RXD, PORT_UART_RXD, BIT_UART_RXD);
    4b9a:	83 e0       	ldi	r24, 0x03	; 3
    4b9c:	60 e0       	ldi	r22, 0x00	; 0
    4b9e:	43 e0       	ldi	r20, 0x03	; 3
    4ba0:	22 e0       	ldi	r18, 0x02	; 2
    4ba2:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
   set_output(PROTOCOL_PORT_UART_TXD, PROTOCOL_BIT_UART_TXD, PORT_UART_TXD, BIT_UART_TXD);
    4ba6:	83 e0       	ldi	r24, 0x03	; 3
    4ba8:	61 e0       	ldi	r22, 0x01	; 1
    4baa:	43 e0       	ldi	r20, 0x03	; 3
    4bac:	23 e0       	ldi	r18, 0x03	; 3
    4bae:	0e 94 81 22 	call	0x4502	; 0x4502 <set_output>
#endif

   (dataRCB & 0x02) ? led_set(PLATFORM_RCB, RCB_LED_0, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_0, PLATFORM_LED_OFF);
    4bb2:	10 2f       	mov	r17, r16
    4bb4:	01 ff       	sbrs	r16, 1
    4bb6:	04 c0       	rjmp	.+8      	; 0x4bc0 <evaluate_data_frame+0xb8>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	62 e0       	ldi	r22, 0x02	; 2
    4bbc:	41 e0       	ldi	r20, 0x01	; 1
    4bbe:	03 c0       	rjmp	.+6      	; 0x4bc6 <evaluate_data_frame+0xbe>
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	62 e0       	ldi	r22, 0x02	; 2
    4bc4:	42 e0       	ldi	r20, 0x02	; 2
    4bc6:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
   (dataRCB & 0x04) ? led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_1, PLATFORM_LED_OFF);
    4bca:	12 ff       	sbrs	r17, 2
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <evaluate_data_frame+0xce>
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	63 e0       	ldi	r22, 0x03	; 3
    4bd2:	41 e0       	ldi	r20, 0x01	; 1
    4bd4:	03 c0       	rjmp	.+6      	; 0x4bdc <evaluate_data_frame+0xd4>
    4bd6:	81 e0       	ldi	r24, 0x01	; 1
    4bd8:	63 e0       	ldi	r22, 0x03	; 3
    4bda:	42 e0       	ldi	r20, 0x02	; 2
    4bdc:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>
   (dataRCB & 0x08) ? led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_ON) : led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);
    4be0:	13 ff       	sbrs	r17, 3
    4be2:	04 c0       	rjmp	.+8      	; 0x4bec <evaluate_data_frame+0xe4>
    4be4:	81 e0       	ldi	r24, 0x01	; 1
    4be6:	64 e0       	ldi	r22, 0x04	; 4
    4be8:	41 e0       	ldi	r20, 0x01	; 1
    4bea:	03 c0       	rjmp	.+6      	; 0x4bf2 <evaluate_data_frame+0xea>
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	64 e0       	ldi	r22, 0x04	; 4
    4bf0:	42 e0       	ldi	r20, 0x02	; 2
    4bf2:	0e 94 29 29 	call	0x5252	; 0x5252 <led_set>

#endif // RCB_BREAKOUT
#endif // NODETYPE != COORD
}
    4bf6:	1f 91       	pop	r17
    4bf8:	0f 91       	pop	r16
    4bfa:	08 95       	ret

00004bfc <process_coord_udp_packet>:
      // there is no request, status message is send periodically
   }
#endif //STATUS_DEBUG

#endif // NODETYPE == COORD
}
    4bfc:	08 95       	ret

00004bfe <process_incoming_user_data>:
      // send message wireless to target node

      send_data_wireless(shortAddress, pUserData, (userDataFrame->length + USER_DATA_HLEN), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
   }
#endif // NODETYPE == COORD
}
    4bfe:	08 95       	ret

00004c00 <getNodeAddressByMAC>:
         return i; //return short address -> short address = index
      }
   }
#endif // NODETYPE == COORD
   return -1;
}
    4c00:	8f ef       	ldi	r24, 0xFF	; 255
    4c02:	9f ef       	ldi	r25, 0xFF	; 255
    4c04:	08 95       	ret

00004c06 <getMACAddressBySA>:
   {
      return (uint8_t*)&node->nodeLongAddress;
   }
#endif // NODETYPE == COORD
   return NULL;
                  }
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	08 95       	ret

00004c0c <send_node_info>:

      // send frame out to usb
      send_data_wired((uint8_t*)&frame, sizeof(deRFprotocol_t));
   }
#endif // NODETYPE == COORD
}
    4c0c:	08 95       	ret

00004c0e <send_data_wired>:
 *
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
    4c0e:	9c 01       	movw	r18, r24
    4c10:	46 2f       	mov	r20, r22
   protocol_send(0, pData, length);
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	b9 01       	movw	r22, r18
    4c16:	50 e0       	ldi	r21, 0x00	; 0
    4c18:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <protocol_send>
}
    4c1c:	08 95       	ret

00004c1e <send_data_wireless>:
 * @param   len         length of data packet
 * @param   srcUDPPort  UDP port of source node
 * @param   destUDPPort UDP port of destination node
 */
void send_data_wireless(uint16_t destAddr, uint8_t* pData, uint8_t len, uint16_t srcUDPPort, uint16_t destUDPPort)
{
    4c1e:	bf 92       	push	r11
    4c20:	cf 92       	push	r12
    4c22:	df 92       	push	r13
    4c24:	ef 92       	push	r14
    4c26:	ff 92       	push	r15
    4c28:	0f 93       	push	r16
    4c2a:	1f 93       	push	r17
    4c2c:	c6 2e       	mov	r12, r22
    4c2e:	b7 2e       	mov	r11, r23
    4c30:	d4 2e       	mov	r13, r20
    4c32:	79 01       	movw	r14, r18
   sixlowpan_hc01_udp_setup_iplocal(destAddr);
    4c34:	0e 94 19 01 	call	0x232	; 0x232 <sixlowpan_hc01_udp_setup_iplocal>
   sixlowpan_hc01_udp_setup_ports(srcUDPPort, destUDPPort);
    4c38:	c7 01       	movw	r24, r14
    4c3a:	b8 01       	movw	r22, r16
    4c3c:	0e 94 37 01 	call	0x26e	; 0x26e <sixlowpan_hc01_udp_setup_ports>

   memcpy( sixlowpan_hc01_udp_get_payloadptr(), pData, len);
    4c40:	0e 94 91 01 	call	0x322	; 0x322 <sixlowpan_hc01_udp_get_payloadptr>
    4c44:	6c 2d       	mov	r22, r12
    4c46:	7b 2d       	mov	r23, r11
    4c48:	4d 2d       	mov	r20, r13
    4c4a:	50 e0       	ldi	r21, 0x00	; 0
    4c4c:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <memcpy>
   sixlowpan_hc01_udp_set_payloadsize(len);
    4c50:	8d 2d       	mov	r24, r13
    4c52:	0e 94 96 01 	call	0x32c	; 0x32c <sixlowpan_hc01_udp_set_payloadsize>
   sixlowpan_hc01_udp_send();
    4c56:	0e 94 3e 03 	call	0x67c	; 0x67c <sixlowpan_hc01_udp_send>
}
    4c5a:	1f 91       	pop	r17
    4c5c:	0f 91       	pop	r16
    4c5e:	ff 90       	pop	r15
    4c60:	ef 90       	pop	r14
    4c62:	df 90       	pop	r13
    4c64:	cf 90       	pop	r12
    4c66:	bf 90       	pop	r11
    4c68:	08 95       	ret

00004c6a <evaluate_wired_data>:
 *
 * @param   pData pointer to data
 * @param   len   length of data
 */
uint8_t evaluate_wired_data(uint8_t* pData, uint16_t len)
{
    4c6a:	0f 93       	push	r16
    4c6c:	1f 93       	push	r17
    4c6e:	cf 93       	push	r28
    4c70:	df 93       	push	r29
    4c72:	fc 01       	movw	r30, r24
   if(*pData == COMMAND_USER_DATA_REQUEST)
    4c74:	80 81       	ld	r24, Z
    4c76:	80 37       	cpi	r24, 0x70	; 112
    4c78:	89 f4       	brne	.+34     	; 0x4c9c <evaluate_wired_data+0x32>
   {
      userData_t* userDataFrame = (userData_t*)pData;
      // check that length not exceed, if so, shorten length
      if(userDataFrame->length > MAX_USER_DATA_PAYLOAD)
    4c7a:	81 81       	ldd	r24, Z+1	; 0x01
    4c7c:	86 34       	cpi	r24, 0x46	; 70
    4c7e:	10 f0       	brcs	.+4      	; 0x4c84 <evaluate_wired_data+0x1a>
      {
         userDataFrame->length = MAX_USER_DATA_PAYLOAD;
    4c80:	85 e4       	ldi	r24, 0x45	; 69
    4c82:	81 83       	std	Z+1, r24	; 0x01
      // if shortAddress == 0, than coord receives an wired message and should send
      // message back to itself, why should we do that?
#else
      // this node is an endnode/router node, so send message to coord node
      // an end node/router node does not replace MAC address, because Coord never knows where to send message
      send_data_wireless(DEFAULT_COORD_ADDR, pData, (userDataFrame->length + USER_DATA_HLEN), UDP_PORT_COORD, UDP_PORT_END_ROUTER);
    4c84:	41 81       	ldd	r20, Z+1	; 0x01
    4c86:	46 5f       	subi	r20, 0xF6	; 246
    4c88:	80 e0       	ldi	r24, 0x00	; 0
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	bf 01       	movw	r22, r30
    4c8e:	2c eb       	ldi	r18, 0xBC	; 188
    4c90:	30 ef       	ldi	r19, 0xF0	; 240
    4c92:	0b eb       	ldi	r16, 0xBB	; 187
    4c94:	10 ef       	ldi	r17, 0xF0	; 240
    4c96:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
    4c9a:	17 c0       	rjmp	.+46     	; 0x4cca <evaluate_wired_data+0x60>
#endif
   }
   else if(*pData == COMMAND_NODE_INFO_REQUEST)
    4c9c:	87 30       	cpi	r24, 0x07	; 7
    4c9e:	a9 f4       	brne	.+42     	; 0x4cca <evaluate_wired_data+0x60>
   {
      nodeInfo_t* nodeInfoFrame = (nodeInfo_t*) pData;
      nodeInfoFrame->command = COMMAND_NODE_INFO_RESPONSE;
    4ca0:	88 e0       	ldi	r24, 0x08	; 8
    4ca2:	80 83       	st	Z, r24
      nodeInfoFrame->length = sizeof(macConfig_t) + 1; // 25 + 1 Bytes
    4ca4:	8a e1       	ldi	r24, 0x1A	; 26
    4ca6:	81 83       	std	Z+1, r24	; 0x01
      nodeInfoFrame->macConfig = macConfig;
    4ca8:	ef 01       	movw	r28, r30
    4caa:	22 96       	adiw	r28, 0x02	; 2
    4cac:	a1 e5       	ldi	r26, 0x51	; 81
    4cae:	b8 e1       	ldi	r27, 0x18	; 24
    4cb0:	89 e1       	ldi	r24, 0x19	; 25
    4cb2:	0d 90       	ld	r0, X+
    4cb4:	09 92       	st	Y+, r0
    4cb6:	81 50       	subi	r24, 0x01	; 1
    4cb8:	e1 f7       	brne	.-8      	; 0x4cb2 <evaluate_wired_data+0x48>
#if   (NODETYPE == COORD)
      nodeInfoFrame->nodeType = 1;
#elif (NODETYPE == ROUTER)
      nodeInfoFrame->nodeType = 2;
#elif (NODETYPE == ENDDEVICE)
      nodeInfoFrame->nodeType = 3;
    4cba:	83 e0       	ldi	r24, 0x03	; 3
    4cbc:	83 8f       	std	Z+27, r24	; 0x1b
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	bf 01       	movw	r22, r30
    4cc2:	4c e1       	ldi	r20, 0x1C	; 28
    4cc4:	50 e0       	ldi	r21, 0x00	; 0
    4cc6:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <protocol_send>
      }
   }
#endif // NODETYPE == COORD

   return 0;
}
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	08 95       	ret

00004cd6 <wired_packet_task>:
 * This function have to be called periodically. It checks serial interface (USB/RS232) for
 * new incoming messages. If not called periodically, messages can be lost.
 */
void wired_packet_task(void)
{
   protocol_receive(1);
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	0e 94 82 28 	call	0x5104	; 0x5104 <protocol_receive>
}
    4cdc:	08 95       	ret

00004cde <hdlc_init>:
/*
 * @brief Initialize HDLC layer (frame tagging unit).
 */
void hdlc_init(void)
{
   protocol_init();
    4cde:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <protocol_init>
   );

   protocol_set_buffer(1, (uint8_t*)hdlcDataBufferReceive, DATA_BUFFER_SIZE);
#endif

}
    4ce2:	08 95       	ret

00004ce4 <process_endnode_udp_packet>:
 *
 * @param   pUDPpacket  pointer to udp packet (length of packet depends on evaluation of command)
 * @param   originAddr  short address from originating node (this is the node where the message is originally from)
 */
void process_endnode_udp_packet(uint8_t* pUDPpacket, uint16_t originAddr)
{
    4ce4:	0f 93       	push	r16
    4ce6:	1f 93       	push	r17
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	ec 01       	movw	r28, r24
#if NODETYPE != COORD

   if(*pUDPpacket == COMMAND_DATA_FRAME_REQUEST)
    4cee:	88 81       	ld	r24, Y
    4cf0:	83 30       	cpi	r24, 0x03	; 3
    4cf2:	41 f4       	brne	.+16     	; 0x4d04 <process_endnode_udp_packet+0x20>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" data frame\n");
    4cf4:	86 ef       	ldi	r24, 0xF6	; 246
    4cf6:	9a e0       	ldi	r25, 0x0A	; 10
    4cf8:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
#endif
      evaluate_data_frame(pUDPpacket);
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	0e 94 84 25 	call	0x4b08	; 0x4b08 <evaluate_data_frame>
    4d02:	40 c0       	rjmp	.+128    	; 0x4d84 <process_endnode_udp_packet+0xa0>
   }
   else if(*pUDPpacket == COMMAND_PING_REQUEST)
    4d04:	85 30       	cpi	r24, 0x05	; 5
    4d06:	51 f5       	brne	.+84     	; 0x4d5c <process_endnode_udp_packet+0x78>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" ping frame\n");
    4d08:	82 e0       	ldi	r24, 0x02	; 2
    4d0a:	9b e0       	ldi	r25, 0x0B	; 11
    4d0c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
#endif
      deRFprotocol_t* dataFrame = (deRFprotocol_t*)pUDPpacket;
      dataFrame->command = COMMAND_PING_RESPONSE;
    4d10:	86 e0       	ldi	r24, 0x06	; 6
    4d12:	88 83       	st	Y, r24
      dataFrame->option = NO_OPTION;
    4d14:	19 82       	std	Y+1, r1	; 0x01
      payloadPingFrame_t* pingFrame = (payloadPingFrame_t*)&dataFrame->payload;
      pingFrame->mac = macConfig.longAddr;
    4d16:	80 91 51 18 	lds	r24, 0x1851
    4d1a:	8a 83       	std	Y+2, r24	; 0x02
    4d1c:	80 91 52 18 	lds	r24, 0x1852
    4d20:	8b 83       	std	Y+3, r24	; 0x03
    4d22:	80 91 53 18 	lds	r24, 0x1853
    4d26:	8c 83       	std	Y+4, r24	; 0x04
    4d28:	80 91 54 18 	lds	r24, 0x1854
    4d2c:	8d 83       	std	Y+5, r24	; 0x05
    4d2e:	80 91 55 18 	lds	r24, 0x1855
    4d32:	8e 83       	std	Y+6, r24	; 0x06
    4d34:	80 91 56 18 	lds	r24, 0x1856
    4d38:	8f 83       	std	Y+7, r24	; 0x07
    4d3a:	80 91 57 18 	lds	r24, 0x1857
    4d3e:	88 87       	std	Y+8, r24	; 0x08
    4d40:	80 91 58 18 	lds	r24, 0x1858
    4d44:	89 87       	std	Y+9, r24	; 0x09

      send_data_wireless(DEFAULT_COORD_ADDR, pUDPpacket, sizeof(deRFprotocol_t), UDP_PORT_END_ROUTER, UDP_PORT_COORD);
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	be 01       	movw	r22, r28
    4d4c:	4b e3       	ldi	r20, 0x3B	; 59
    4d4e:	2b eb       	ldi	r18, 0xBB	; 187
    4d50:	30 ef       	ldi	r19, 0xF0	; 240
    4d52:	0c eb       	ldi	r16, 0xBC	; 188
    4d54:	10 ef       	ldi	r17, 0xF0	; 240
    4d56:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <send_data_wireless>
    4d5a:	14 c0       	rjmp	.+40     	; 0x4d84 <process_endnode_udp_packet+0xa0>
   }
   else if(*pUDPpacket == COMMAND_INTERN_LINK_QUALITY_REQUEST)
    4d5c:	80 32       	cpi	r24, 0x20	; 32
    4d5e:	19 f4       	brne	.+6      	; 0x4d66 <process_endnode_udp_packet+0x82>
   {
      evaluate_quality_request();
    4d60:	0e 94 c1 29 	call	0x5382	; 0x5382 <evaluate_quality_request>
    4d64:	0f c0       	rjmp	.+30     	; 0x4d84 <process_endnode_udp_packet+0xa0>
   }
   // an User Data frame should be send out wired (USB, RS232)
   // the incoming User Data contains MAC address from origin node
   // origin User Data contains MAC address from destination node, but all messages
   // delivered over Coord node. Coord node than replaces destination MAC by originating MAC
   else if(*pUDPpacket == COMMAND_USER_DATA_REQUEST)
    4d66:	80 37       	cpi	r24, 0x70	; 112
    4d68:	69 f4       	brne	.+26     	; 0x4d84 <process_endnode_udp_packet+0xa0>
   {
#if RFAPP_UART_ENABLE
      UART_PRINT(" user data frame\n");
    4d6a:	8e e0       	ldi	r24, 0x0E	; 14
    4d6c:	9b e0       	ldi	r25, 0x0B	; 11
    4d6e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <puts>
#endif
      userData_t* userDataFrame = (userData_t*)pUDPpacket;
      userDataFrame->command = COMMAND_USER_DATA_RESPONSE;
    4d72:	81 e7       	ldi	r24, 0x71	; 113
    4d74:	88 83       	st	Y, r24
 * @param   pData    pointer da data packet
 * @param   length   length of data packet
 */
void send_data_wired(uint8_t* pData, uint8_t length)
{
   protocol_send(0, pData, length);
    4d76:	49 81       	ldd	r20, Y+1	; 0x01
    4d78:	46 5f       	subi	r20, 0xF6	; 246
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	be 01       	movw	r22, r28
    4d7e:	50 e0       	ldi	r21, 0x00	; 0
    4d80:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <protocol_send>
      userDataFrame->command = COMMAND_USER_DATA_RESPONSE;
      send_data_wired(pUDPpacket, (userDataFrame->length + USER_DATA_HLEN));
   }

#endif // NODETYPE != COORD
}
    4d84:	df 91       	pop	r29
    4d86:	cf 91       	pop	r28
    4d88:	1f 91       	pop	r17
    4d8a:	0f 91       	pop	r16
    4d8c:	08 95       	ret

00004d8e <protocol_init>:
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    4d8e:	10 92 96 16 	sts	0x1696, r1
      arDevices[i].u8Escaped = 0;
    4d92:	10 92 93 16 	sts	0x1693, r1
      arDevices[i].pGetC = NULL;
    4d96:	10 92 98 16 	sts	0x1698, r1
    4d9a:	10 92 97 16 	sts	0x1697, r1
      arDevices[i].pIsC = NULL;
    4d9e:	10 92 9a 16 	sts	0x169A, r1
    4da2:	10 92 99 16 	sts	0x1699, r1
      arDevices[i].pPutC = NULL;
    4da6:	10 92 9c 16 	sts	0x169C, r1
    4daa:	10 92 9b 16 	sts	0x169B, r1
      arDevices[i].pPacket = NULL;
    4dae:	10 92 a0 16 	sts	0x16A0, r1
    4db2:	10 92 9f 16 	sts	0x169F, r1

      arDevices[i].pBuffer = NULL;
    4db6:	10 92 a2 16 	sts	0x16A2, r1
    4dba:	10 92 a1 16 	sts	0x16A1, r1
      arDevices[i].u16BufferLen = 0;
    4dbe:	10 92 a4 16 	sts	0x16A4, r1
    4dc2:	10 92 a3 16 	sts	0x16A3, r1
      arDevices[i].u16BufferPos = 0;
    4dc6:	10 92 a6 16 	sts	0x16A6, r1
    4dca:	10 92 a5 16 	sts	0x16A5, r1
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    4dce:	10 92 aa 16 	sts	0x16AA, r1
      arDevices[i].u8Escaped = 0;
    4dd2:	10 92 a7 16 	sts	0x16A7, r1
      arDevices[i].pGetC = NULL;
    4dd6:	10 92 ac 16 	sts	0x16AC, r1
    4dda:	10 92 ab 16 	sts	0x16AB, r1
      arDevices[i].pIsC = NULL;
    4dde:	10 92 ae 16 	sts	0x16AE, r1
    4de2:	10 92 ad 16 	sts	0x16AD, r1
      arDevices[i].pPutC = NULL;
    4de6:	10 92 b0 16 	sts	0x16B0, r1
    4dea:	10 92 af 16 	sts	0x16AF, r1
      arDevices[i].pPacket = NULL;
    4dee:	10 92 b4 16 	sts	0x16B4, r1
    4df2:	10 92 b3 16 	sts	0x16B3, r1

      arDevices[i].pBuffer = NULL;
    4df6:	10 92 b6 16 	sts	0x16B6, r1
    4dfa:	10 92 b5 16 	sts	0x16B5, r1
      arDevices[i].u16BufferLen = 0;
    4dfe:	10 92 b8 16 	sts	0x16B8, r1
    4e02:	10 92 b7 16 	sts	0x16B7, r1
      arDevices[i].u16BufferPos = 0;
    4e06:	10 92 ba 16 	sts	0x16BA, r1
    4e0a:	10 92 b9 16 	sts	0x16B9, r1
   }

   bInit = TTRUE;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	80 93 92 16 	sts	0x1692, r24
}
    4e14:	08 95       	ret

00004e16 <protocol_exit>:
{
   uint8_t  i;

   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      arDevices[i].u8Options = 0;
    4e16:	10 92 96 16 	sts	0x1696, r1
    4e1a:	10 92 aa 16 	sts	0x16AA, r1
   }

   bInit = TFALSE;
    4e1e:	10 92 92 16 	sts	0x1692, r1
}
    4e22:	08 95       	ret

00004e24 <protocol_add>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
uint8_t protocol_add(uint8_t u8Options, tGetCFN pGetC, tIsCFN pIsC, tPutCFN pPutC, tFlushFN pFlush, tPacketFN pPacket)
{
    4e24:	cf 92       	push	r12
    4e26:	df 92       	push	r13
    4e28:	ef 92       	push	r14
    4e2a:	ff 92       	push	r15
    4e2c:	0f 93       	push	r16
    4e2e:	1f 93       	push	r17
    4e30:	cf 93       	push	r28
    4e32:	df 93       	push	r29
    4e34:	e8 2f       	mov	r30, r24
    4e36:	ea 01       	movw	r28, r20
    4e38:	69 01       	movw	r12, r18
   uint8_t  i;

   // get a free device
   for (i = 0; i < PROTO_MAX_DEV; i++)
   {
      if (arDevices[i].u8Options == 0)
    4e3a:	80 91 96 16 	lds	r24, 0x1696
    4e3e:	88 23       	and	r24, r24
    4e40:	21 f4       	brne	.+8      	; 0x4e4a <protocol_add+0x26>
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e0       	ldi	r20, 0x00	; 0
    4e48:	08 c0       	rjmp	.+16     	; 0x4e5a <protocol_add+0x36>
    4e4a:	80 91 aa 16 	lds	r24, 0x16AA
    4e4e:	88 23       	and	r24, r24
    4e50:	09 f0       	breq	.+2      	; 0x4e54 <protocol_add+0x30>
    4e52:	4e c0       	rjmp	.+156    	; 0x4ef0 <protocol_add+0xcc>
    4e54:	21 e0       	ldi	r18, 0x01	; 1
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	41 e0       	ldi	r20, 0x01	; 1
      {
         if (pGetC && pIsC && pPutC && pPacket && (u8Options != 0))
    4e5a:	61 15       	cp	r22, r1
    4e5c:	71 05       	cpc	r23, r1
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <protocol_add+0x3e>
    4e60:	47 c0       	rjmp	.+142    	; 0x4ef0 <protocol_add+0xcc>
    4e62:	20 97       	sbiw	r28, 0x00	; 0
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <protocol_add+0x44>
    4e66:	44 c0       	rjmp	.+136    	; 0x4ef0 <protocol_add+0xcc>
    4e68:	c1 14       	cp	r12, r1
    4e6a:	d1 04       	cpc	r13, r1
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <protocol_add+0x4c>
    4e6e:	40 c0       	rjmp	.+128    	; 0x4ef0 <protocol_add+0xcc>
    4e70:	e1 14       	cp	r14, r1
    4e72:	f1 04       	cpc	r15, r1
    4e74:	e9 f1       	breq	.+122    	; 0x4ef0 <protocol_add+0xcc>
    4e76:	ee 23       	and	r30, r30
    4e78:	d9 f1       	breq	.+118    	; 0x4ef0 <protocol_add+0xcc>
         {
            arDevices[i].u8Options = u8Options;
    4e7a:	84 e1       	ldi	r24, 0x14	; 20
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	28 9f       	mul	r18, r24
    4e80:	d0 01       	movw	r26, r0
    4e82:	29 9f       	mul	r18, r25
    4e84:	b0 0d       	add	r27, r0
    4e86:	38 9f       	mul	r19, r24
    4e88:	b0 0d       	add	r27, r0
    4e8a:	11 24       	eor	r1, r1
    4e8c:	ad 56       	subi	r26, 0x6D	; 109
    4e8e:	b9 4e       	sbci	r27, 0xE9	; 233
    4e90:	13 96       	adiw	r26, 0x03	; 3
    4e92:	ec 93       	st	X, r30
    4e94:	13 97       	sbiw	r26, 0x03	; 3
            arDevices[i].u8Escaped = 0;
    4e96:	1c 92       	st	X, r1

            arDevices[i].pBuffer = NULL;
    4e98:	1f 96       	adiw	r26, 0x0f	; 15
    4e9a:	1c 92       	st	X, r1
    4e9c:	1e 92       	st	-X, r1
    4e9e:	1e 97       	sbiw	r26, 0x0e	; 14
            arDevices[i].u16BufferLen = 0;
    4ea0:	51 96       	adiw	r26, 0x11	; 17
    4ea2:	1c 92       	st	X, r1
    4ea4:	1e 92       	st	-X, r1
    4ea6:	50 97       	sbiw	r26, 0x10	; 16
            arDevices[i].u16BufferPos = 0;
    4ea8:	53 96       	adiw	r26, 0x13	; 19
    4eaa:	1c 92       	st	X, r1
    4eac:	1e 92       	st	-X, r1
    4eae:	52 97       	sbiw	r26, 0x12	; 18

            arDevices[i].pGetC = pGetC;
    4eb0:	f9 01       	movw	r30, r18
    4eb2:	ee 0f       	add	r30, r30
    4eb4:	ff 1f       	adc	r31, r31
    4eb6:	ee 0f       	add	r30, r30
    4eb8:	ff 1f       	adc	r31, r31
    4eba:	e2 0f       	add	r30, r18
    4ebc:	f3 1f       	adc	r31, r19
    4ebe:	ee 0f       	add	r30, r30
    4ec0:	ff 1f       	adc	r31, r31
    4ec2:	ee 0f       	add	r30, r30
    4ec4:	ff 1f       	adc	r31, r31
    4ec6:	e9 56       	subi	r30, 0x69	; 105
    4ec8:	f9 4e       	sbci	r31, 0xE9	; 233
    4eca:	71 83       	std	Z+1, r23	; 0x01
    4ecc:	60 83       	st	Z, r22
            arDevices[i].pIsC = pIsC;
    4ece:	17 96       	adiw	r26, 0x07	; 7
    4ed0:	dc 93       	st	X, r29
    4ed2:	ce 93       	st	-X, r28
    4ed4:	16 97       	sbiw	r26, 0x06	; 6
            arDevices[i].pPutC = pPutC;
    4ed6:	19 96       	adiw	r26, 0x09	; 9
    4ed8:	dc 92       	st	X, r13
    4eda:	ce 92       	st	-X, r12
    4edc:	18 97       	sbiw	r26, 0x08	; 8
            arDevices[i].pFlush = pFlush;
    4ede:	1b 96       	adiw	r26, 0x0b	; 11
    4ee0:	1c 93       	st	X, r17
    4ee2:	0e 93       	st	-X, r16
    4ee4:	1a 97       	sbiw	r26, 0x0a	; 10
            arDevices[i].pPacket = pPacket;
    4ee6:	1d 96       	adiw	r26, 0x0d	; 13
    4ee8:	fc 92       	st	X, r15
    4eea:	ee 92       	st	-X, r14
    4eec:	1c 97       	sbiw	r26, 0x0c	; 12
    4eee:	01 c0       	rjmp	.+2      	; 0x4ef2 <protocol_add+0xce>
            return i;
    4ef0:	4f ef       	ldi	r20, 0xFF	; 255
         }
         break;
      }
   }
   return PROTO_NO_PROTOCOL;
}
    4ef2:	84 2f       	mov	r24, r20
    4ef4:	df 91       	pop	r29
    4ef6:	cf 91       	pop	r28
    4ef8:	1f 91       	pop	r17
    4efa:	0f 91       	pop	r16
    4efc:	ff 90       	pop	r15
    4efe:	ef 90       	pop	r14
    4f00:	df 90       	pop	r13
    4f02:	cf 90       	pop	r12
    4f04:	08 95       	ret

00004f06 <protocol_remove>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
tbool protocol_remove(uint8_t u8Instance)
{
    4f06:	28 2f       	mov	r18, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    4f08:	80 91 92 16 	lds	r24, 0x1692
    4f0c:	88 23       	and	r24, r24
    4f0e:	89 f0       	breq	.+34     	; 0x4f32 <protocol_remove+0x2c>
    4f10:	22 30       	cpi	r18, 0x02	; 2
    4f12:	78 f4       	brcc	.+30     	; 0x4f32 <protocol_remove+0x2c>
   {
      arDevices[u8Instance].u8Options = 0;
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	84 e1       	ldi	r24, 0x14	; 20
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	28 9f       	mul	r18, r24
    4f1c:	f0 01       	movw	r30, r0
    4f1e:	29 9f       	mul	r18, r25
    4f20:	f0 0d       	add	r31, r0
    4f22:	38 9f       	mul	r19, r24
    4f24:	f0 0d       	add	r31, r0
    4f26:	11 24       	eor	r1, r1
    4f28:	ed 56       	subi	r30, 0x6D	; 109
    4f2a:	f9 4e       	sbci	r31, 0xE9	; 233
    4f2c:	13 82       	std	Z+3, r1	; 0x03
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
    4f30:	08 95       	ret
      return TTRUE;
    4f32:	80 e0       	ldi	r24, 0x00	; 0
   }
   return TFALSE;
}
    4f34:	08 95       	ret

00004f36 <protocol_set_buffer>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
tbool protocol_set_buffer(uint8_t u8Instance, uint8_t* pBuffer, uint16_t u16Len)
{
    4f36:	a8 2f       	mov	r26, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    4f38:	80 91 92 16 	lds	r24, 0x1692
    4f3c:	88 23       	and	r24, r24
    4f3e:	e1 f1       	breq	.+120    	; 0x4fb8 <protocol_set_buffer+0x82>
    4f40:	a2 30       	cpi	r26, 0x02	; 2
    4f42:	d0 f5       	brcc	.+116    	; 0x4fb8 <protocol_set_buffer+0x82>
   {
      if (pBuffer && (u16Len > 0))
    4f44:	61 15       	cp	r22, r1
    4f46:	71 05       	cpc	r23, r1
    4f48:	a9 f0       	breq	.+42     	; 0x4f74 <protocol_set_buffer+0x3e>
    4f4a:	41 15       	cp	r20, r1
    4f4c:	51 05       	cpc	r21, r1
    4f4e:	91 f0       	breq	.+36     	; 0x4f74 <protocol_set_buffer+0x3e>
      {
         arDevices[u8Instance].pBuffer = pBuffer;
    4f50:	2a 2f       	mov	r18, r26
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	84 e1       	ldi	r24, 0x14	; 20
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	28 9f       	mul	r18, r24
    4f5a:	f0 01       	movw	r30, r0
    4f5c:	29 9f       	mul	r18, r25
    4f5e:	f0 0d       	add	r31, r0
    4f60:	38 9f       	mul	r19, r24
    4f62:	f0 0d       	add	r31, r0
    4f64:	11 24       	eor	r1, r1
    4f66:	ed 56       	subi	r30, 0x6D	; 109
    4f68:	f9 4e       	sbci	r31, 0xE9	; 233
    4f6a:	77 87       	std	Z+15, r23	; 0x0f
    4f6c:	66 87       	std	Z+14, r22	; 0x0e
         arDevices[u8Instance].u16BufferLen = u16Len;
    4f6e:	51 8b       	std	Z+17, r21	; 0x11
    4f70:	40 8b       	std	Z+16, r20	; 0x10
    4f72:	11 c0       	rjmp	.+34     	; 0x4f96 <protocol_set_buffer+0x60>
      }
      else
      {
         arDevices[u8Instance].pBuffer = NULL;
    4f74:	2a 2f       	mov	r18, r26
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	84 e1       	ldi	r24, 0x14	; 20
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	28 9f       	mul	r18, r24
    4f7e:	f0 01       	movw	r30, r0
    4f80:	29 9f       	mul	r18, r25
    4f82:	f0 0d       	add	r31, r0
    4f84:	38 9f       	mul	r19, r24
    4f86:	f0 0d       	add	r31, r0
    4f88:	11 24       	eor	r1, r1
    4f8a:	ed 56       	subi	r30, 0x6D	; 109
    4f8c:	f9 4e       	sbci	r31, 0xE9	; 233
    4f8e:	17 86       	std	Z+15, r1	; 0x0f
    4f90:	16 86       	std	Z+14, r1	; 0x0e
         arDevices[u8Instance].u16BufferLen = 0;
    4f92:	11 8a       	std	Z+17, r1	; 0x11
    4f94:	10 8a       	std	Z+16, r1	; 0x10
      }

      arDevices[u8Instance].u16BufferPos = 0;
    4f96:	2a 2f       	mov	r18, r26
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	84 e1       	ldi	r24, 0x14	; 20
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	28 9f       	mul	r18, r24
    4fa0:	f0 01       	movw	r30, r0
    4fa2:	29 9f       	mul	r18, r25
    4fa4:	f0 0d       	add	r31, r0
    4fa6:	38 9f       	mul	r19, r24
    4fa8:	f0 0d       	add	r31, r0
    4faa:	11 24       	eor	r1, r1
    4fac:	ed 56       	subi	r30, 0x6D	; 109
    4fae:	f9 4e       	sbci	r31, 0xE9	; 233
    4fb0:	13 8a       	std	Z+19, r1	; 0x13
    4fb2:	12 8a       	std	Z+18, r1	; 0x12
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	08 95       	ret
      return TTRUE;
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
   }
   return TFALSE;
}
    4fba:	08 95       	ret

00004fbc <protocol_send>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
void protocol_send(uint8_t u8Instance, uint8_t* pData, uint16_t u16Len)
{
    4fbc:	8f 92       	push	r8
    4fbe:	9f 92       	push	r9
    4fc0:	af 92       	push	r10
    4fc2:	bf 92       	push	r11
    4fc4:	cf 92       	push	r12
    4fc6:	df 92       	push	r13
    4fc8:	ff 92       	push	r15
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	cf 93       	push	r28
    4fd0:	df 93       	push	r29
    4fd2:	a8 2f       	mov	r26, r24
    4fd4:	4b 01       	movw	r8, r22
    4fd6:	5a 01       	movw	r10, r20
   if (bInit && (u8Instance < PROTO_MAX_DEV) && pData && (u16Len > 0))
    4fd8:	80 91 92 16 	lds	r24, 0x1692
    4fdc:	88 23       	and	r24, r24
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <protocol_send+0x26>
    4fe0:	85 c0       	rjmp	.+266    	; 0x50ec <protocol_send+0x130>
    4fe2:	a2 30       	cpi	r26, 0x02	; 2
    4fe4:	08 f0       	brcs	.+2      	; 0x4fe8 <protocol_send+0x2c>
    4fe6:	82 c0       	rjmp	.+260    	; 0x50ec <protocol_send+0x130>
    4fe8:	61 15       	cp	r22, r1
    4fea:	71 05       	cpc	r23, r1
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <protocol_send+0x34>
    4fee:	7e c0       	rjmp	.+252    	; 0x50ec <protocol_send+0x130>
    4ff0:	41 15       	cp	r20, r1
    4ff2:	51 05       	cpc	r21, r1
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <protocol_send+0x3c>
    4ff6:	7a c0       	rjmp	.+244    	; 0x50ec <protocol_send+0x130>
   {
      if (arDevices[u8Instance].u8Options & PROTO_TX)
    4ff8:	2a 2f       	mov	r18, r26
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	84 e1       	ldi	r24, 0x14	; 20
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	28 9f       	mul	r18, r24
    5002:	f0 01       	movw	r30, r0
    5004:	29 9f       	mul	r18, r25
    5006:	f0 0d       	add	r31, r0
    5008:	38 9f       	mul	r19, r24
    500a:	f0 0d       	add	r31, r0
    500c:	11 24       	eor	r1, r1
    500e:	ed 56       	subi	r30, 0x6D	; 109
    5010:	f9 4e       	sbci	r31, 0xE9	; 233
    5012:	83 81       	ldd	r24, Z+3	; 0x03
    5014:	82 ff       	sbrs	r24, 2
    5016:	6a c0       	rjmp	.+212    	; 0x50ec <protocol_send+0x130>
      {
         uint8_t c;
         tProtocol* pDev = &arDevices[u8Instance];
    5018:	84 e1       	ldi	r24, 0x14	; 20
    501a:	a8 9f       	mul	r26, r24
    501c:	e0 01       	movw	r28, r0
    501e:	11 24       	eor	r1, r1
    5020:	cd 56       	subi	r28, 0x6D	; 109
    5022:	d9 4e       	sbci	r29, 0xE9	; 233
         uint16_t i = 0;
         uint16_t u16Crc = 0;

         // put an end before the packet
         pDev->pPutC(FR_END);
    5024:	e8 85       	ldd	r30, Y+8	; 0x08
    5026:	f9 85       	ldd	r31, Y+9	; 0x09
    5028:	80 ec       	ldi	r24, 0xC0	; 192
    502a:	09 95       	icall
    502c:	00 e0       	ldi	r16, 0x00	; 0
    502e:	10 e0       	ldi	r17, 0x00	; 0
    5030:	cc 24       	eor	r12, r12
    5032:	dd 24       	eor	r13, r13
    5034:	20 c0       	rjmp	.+64     	; 0x5076 <protocol_send+0xba>
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
         {
            c = pData[i++];
    5036:	f4 01       	movw	r30, r8
    5038:	e0 0f       	add	r30, r16
    503a:	f1 1f       	adc	r31, r17
    503c:	f0 80       	ld	r15, Z
            u16Crc += c;
#if HDLC_DEBUG_ENABLE
            UART_PRINT("%02X " , c);
#endif
            switch (c)
    503e:	80 ec       	ldi	r24, 0xC0	; 192
    5040:	f8 16       	cp	r15, r24
    5042:	59 f0       	breq	.+22     	; 0x505a <protocol_send+0x9e>
    5044:	e8 85       	ldd	r30, Y+8	; 0x08
    5046:	f9 85       	ldd	r31, Y+9	; 0x09
    5048:	8b ed       	ldi	r24, 0xDB	; 219
    504a:	f8 16       	cp	r15, r24
    504c:	71 f4       	brne	.+28     	; 0x506a <protocol_send+0xae>
            {
            case FR_ESC:
               pDev->pPutC(FR_ESC);
    504e:	8b ed       	ldi	r24, 0xDB	; 219
    5050:	09 95       	icall
               pDev->pPutC(T_FR_ESC);
    5052:	e8 85       	ldd	r30, Y+8	; 0x08
    5054:	f9 85       	ldd	r31, Y+9	; 0x09
    5056:	8d ed       	ldi	r24, 0xDD	; 221
    5058:	09 c0       	rjmp	.+18     	; 0x506c <protocol_send+0xb0>
               break;
            case FR_END:
               pDev->pPutC(FR_ESC);
    505a:	e8 85       	ldd	r30, Y+8	; 0x08
    505c:	f9 85       	ldd	r31, Y+9	; 0x09
    505e:	8b ed       	ldi	r24, 0xDB	; 219
    5060:	09 95       	icall
               pDev->pPutC(T_FR_END);
    5062:	e8 85       	ldd	r30, Y+8	; 0x08
    5064:	f9 85       	ldd	r31, Y+9	; 0x09
    5066:	8c ed       	ldi	r24, 0xDC	; 220
    5068:	01 c0       	rjmp	.+2      	; 0x506c <protocol_send+0xb0>
               break;
            default:
               pDev->pPutC(c);
    506a:	8f 2d       	mov	r24, r15
    506c:	09 95       	icall
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
         {
            c = pData[i++];
    506e:	0f 5f       	subi	r16, 0xFF	; 255
    5070:	1f 4f       	sbci	r17, 0xFF	; 255
            u16Crc += c;
    5072:	cf 0c       	add	r12, r15
    5074:	d1 1c       	adc	r13, r1
         // put an end before the packet
         pDev->pPutC(FR_END);
#if HDLC_DEBUG_ENABLE
         UART_PRINT("OUT[%d] ", u8Instance);
#endif
         while (i < u16Len)
    5076:	0a 15       	cp	r16, r10
    5078:	1b 05       	cpc	r17, r11
    507a:	e8 f2       	brcs	.-70     	; 0x5036 <protocol_send+0x7a>
               pDev->pPutC(c);
               break;
            }
         }

         c = (~u16Crc + 1) & 0xFF;
    507c:	8c 2d       	mov	r24, r12
    507e:	81 95       	neg	r24
         if (c == FR_ESC)
    5080:	8b 3d       	cpi	r24, 0xDB	; 219
    5082:	39 f4       	brne	.+14     	; 0x5092 <protocol_send+0xd6>
         {
            pDev->pPutC(FR_ESC);
    5084:	e8 85       	ldd	r30, Y+8	; 0x08
    5086:	f9 85       	ldd	r31, Y+9	; 0x09
    5088:	09 95       	icall
            pDev->pPutC(T_FR_ESC);
    508a:	e8 85       	ldd	r30, Y+8	; 0x08
    508c:	f9 85       	ldd	r31, Y+9	; 0x09
    508e:	8d ed       	ldi	r24, 0xDD	; 221
    5090:	09 c0       	rjmp	.+18     	; 0x50a4 <protocol_send+0xe8>
    5092:	e8 85       	ldd	r30, Y+8	; 0x08
    5094:	f9 85       	ldd	r31, Y+9	; 0x09
         }
         else if (c == FR_END)
    5096:	80 3c       	cpi	r24, 0xC0	; 192
    5098:	29 f4       	brne	.+10     	; 0x50a4 <protocol_send+0xe8>
         {
            pDev->pPutC(FR_ESC);
    509a:	8b ed       	ldi	r24, 0xDB	; 219
    509c:	09 95       	icall
            pDev->pPutC(T_FR_END);
    509e:	e8 85       	ldd	r30, Y+8	; 0x08
    50a0:	f9 85       	ldd	r31, Y+9	; 0x09
    50a2:	8c ed       	ldi	r24, 0xDC	; 220
         }
         else
         {
            pDev->pPutC(c);
    50a4:	09 95       	icall
         }

         c = ((~u16Crc + 1) >> 8)   & 0xFF;
    50a6:	88 27       	eor	r24, r24
    50a8:	99 27       	eor	r25, r25
    50aa:	8c 19       	sub	r24, r12
    50ac:	9d 09       	sbc	r25, r13
         if (c == FR_ESC)
    50ae:	9b 3d       	cpi	r25, 0xDB	; 219
    50b0:	41 f4       	brne	.+16     	; 0x50c2 <protocol_send+0x106>
         {
            pDev->pPutC(FR_ESC);
    50b2:	e8 85       	ldd	r30, Y+8	; 0x08
    50b4:	f9 85       	ldd	r31, Y+9	; 0x09
    50b6:	8b ed       	ldi	r24, 0xDB	; 219
    50b8:	09 95       	icall
            pDev->pPutC(T_FR_ESC);
    50ba:	e8 85       	ldd	r30, Y+8	; 0x08
    50bc:	f9 85       	ldd	r31, Y+9	; 0x09
    50be:	8d ed       	ldi	r24, 0xDD	; 221
    50c0:	0b c0       	rjmp	.+22     	; 0x50d8 <protocol_send+0x11c>
    50c2:	e8 85       	ldd	r30, Y+8	; 0x08
    50c4:	f9 85       	ldd	r31, Y+9	; 0x09
         }
         else if (c == FR_END)
    50c6:	90 3c       	cpi	r25, 0xC0	; 192
    50c8:	31 f4       	brne	.+12     	; 0x50d6 <protocol_send+0x11a>
         {
            pDev->pPutC(FR_ESC);
    50ca:	8b ed       	ldi	r24, 0xDB	; 219
    50cc:	09 95       	icall
            pDev->pPutC(T_FR_END);
    50ce:	e8 85       	ldd	r30, Y+8	; 0x08
    50d0:	f9 85       	ldd	r31, Y+9	; 0x09
    50d2:	8c ed       	ldi	r24, 0xDC	; 220
    50d4:	01 c0       	rjmp	.+2      	; 0x50d8 <protocol_send+0x11c>
         }
         else
         {
            pDev->pPutC(c);
    50d6:	89 2f       	mov	r24, r25
    50d8:	09 95       	icall
         }
#if HDLC_DEBUG_ENABLE
         UART_PRINT(("\n"));
#endif
         // tie off the packet
         pDev->pPutC(FR_END);
    50da:	e8 85       	ldd	r30, Y+8	; 0x08
    50dc:	f9 85       	ldd	r31, Y+9	; 0x09
    50de:	80 ec       	ldi	r24, 0xC0	; 192
    50e0:	09 95       	icall

         if (pDev->pFlush)
    50e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    50e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    50e6:	30 97       	sbiw	r30, 0x00	; 0
    50e8:	09 f0       	breq	.+2      	; 0x50ec <protocol_send+0x130>
         {
            pDev->pFlush();
    50ea:	09 95       	icall
         }
      }
   }
}
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	1f 91       	pop	r17
    50f2:	0f 91       	pop	r16
    50f4:	ff 90       	pop	r15
    50f6:	df 90       	pop	r13
    50f8:	cf 90       	pop	r12
    50fa:	bf 90       	pop	r11
    50fc:	af 90       	pop	r10
    50fe:	9f 90       	pop	r9
    5100:	8f 90       	pop	r8
    5102:	08 95       	ret

00005104 <protocol_receive>:
  * @author
  * @date          05.05.2006 11:23
  *
  */
void protocol_receive(uint8_t u8Instance)
{
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	98 2f       	mov	r25, r24
   if (bInit && (u8Instance < PROTO_MAX_DEV))
    510a:	80 91 92 16 	lds	r24, 0x1692
    510e:	88 23       	and	r24, r24
    5110:	09 f4       	brne	.+2      	; 0x5114 <protocol_receive+0x10>
    5112:	75 c0       	rjmp	.+234    	; 0x51fe <protocol_receive+0xfa>
    5114:	92 30       	cpi	r25, 0x02	; 2
    5116:	08 f0       	brcs	.+2      	; 0x511a <protocol_receive+0x16>
    5118:	72 c0       	rjmp	.+228    	; 0x51fe <protocol_receive+0xfa>
   {
     tProtocol* pDev = &arDevices[u8Instance];
    511a:	84 e1       	ldi	r24, 0x14	; 20
    511c:	98 9f       	mul	r25, r24
    511e:	e0 01       	movw	r28, r0
    5120:	11 24       	eor	r1, r1
    5122:	cd 56       	subi	r28, 0x6D	; 109
    5124:	d9 4e       	sbci	r29, 0xE9	; 233
      if ((pDev->u8Options & PROTO_RX) && pDev->pIsC())
    5126:	8b 81       	ldd	r24, Y+3	; 0x03
    5128:	81 ff       	sbrs	r24, 1
    512a:	69 c0       	rjmp	.+210    	; 0x51fe <protocol_receive+0xfa>
    512c:	ee 81       	ldd	r30, Y+6	; 0x06
    512e:	ff 81       	ldd	r31, Y+7	; 0x07
    5130:	09 95       	icall
    5132:	88 23       	and	r24, r24
    5134:	09 f4       	brne	.+2      	; 0x5138 <protocol_receive+0x34>
    5136:	63 c0       	rjmp	.+198    	; 0x51fe <protocol_receive+0xfa>
      {
         uint8_t c;
         if (pDev->u8Options & PROTO_TX_ON_RX)
    5138:	8b 81       	ldd	r24, Y+3	; 0x03
    513a:	83 ff       	sbrs	r24, 3
    513c:	02 c0       	rjmp	.+4      	; 0x5142 <protocol_receive+0x3e>
         {
            // enable TX
            pDev->u8Options |= PROTO_TX;
    513e:	84 60       	ori	r24, 0x04	; 4
    5140:	8b 83       	std	Y+3, r24	; 0x03
#if HDLC_DEBUG_ENABLE
         UART_PRINT("IN[%d] ", u8Instance);
#endif
         do
         {
            c = pDev->pGetC();
    5142:	ec 81       	ldd	r30, Y+4	; 0x04
    5144:	fd 81       	ldd	r31, Y+5	; 0x05
    5146:	09 95       	icall
    5148:	48 2f       	mov	r20, r24
#if HDLC_DEBUG_ENABLE
            UART_PRINT("%02X " , c);
#endif
            switch (c)
    514a:	80 3c       	cpi	r24, 0xC0	; 192
    514c:	21 f0       	breq	.+8      	; 0x5156 <protocol_receive+0x52>
    514e:	88 81       	ld	r24, Y
    5150:	4b 3d       	cpi	r20, 0xDB	; 219
    5152:	61 f5       	brne	.+88     	; 0x51ac <protocol_receive+0xa8>
    5154:	28 c0       	rjmp	.+80     	; 0x51a6 <protocol_receive+0xa2>
            {
            case FR_END:
               if (pDev->u8Escaped)
    5156:	88 81       	ld	r24, Y
    5158:	88 23       	and	r24, r24
    515a:	f1 f4       	brne	.+60     	; 0x5198 <protocol_receive+0x94>
                  pDev->u16BufferPos = 0;
                  pDev->u16Crc = 0;
               }
               else
               {
                  if (pDev->u16BufferPos >= 2)
    515c:	6a 89       	ldd	r22, Y+18	; 0x12
    515e:	7b 89       	ldd	r23, Y+19	; 0x13
    5160:	62 30       	cpi	r22, 0x02	; 2
    5162:	71 05       	cpc	r23, r1
    5164:	c8 f0       	brcs	.+50     	; 0x5198 <protocol_receive+0x94>
                  {
                     tbool bCRCok = TFALSE;
                     // Checksum bytes are added to the checksum pDev->u16Crc - substract them here
                     pDev->u16Crc -= pDev->pBuffer[pDev->u16BufferPos - 1];
    5166:	4e 85       	ldd	r20, Y+14	; 0x0e
    5168:	5f 85       	ldd	r21, Y+15	; 0x0f
    516a:	fa 01       	movw	r30, r20
    516c:	e6 0f       	add	r30, r22
    516e:	f7 1f       	adc	r31, r23
    5170:	22 91       	ld	r18, -Z
    5172:	89 81       	ldd	r24, Y+1	; 0x01
    5174:	9a 81       	ldd	r25, Y+2	; 0x02
    5176:	82 1b       	sub	r24, r18
    5178:	91 09       	sbc	r25, r1
    517a:	9a 83       	std	Y+2, r25	; 0x02
    517c:	89 83       	std	Y+1, r24	; 0x01
                     pDev->u16Crc -= pDev->pBuffer[pDev->u16BufferPos - 2];
    517e:	22 91       	ld	r18, -Z
    5180:	82 1b       	sub	r24, r18
    5182:	91 09       	sbc	r25, r1
    5184:	9a 83       	std	Y+2, r25	; 0x02
    5186:	89 83       	std	Y+1, r24	; 0x01
                     if (1)   // handle the packet even for invalid CRC
#else
                     if (bCRCok)
#endif
                     {
                        if (pDev->pPacket)
    5188:	ec 85       	ldd	r30, Y+12	; 0x0c
    518a:	fd 85       	ldd	r31, Y+13	; 0x0d
    518c:	30 97       	sbiw	r30, 0x00	; 0
    518e:	21 f0       	breq	.+8      	; 0x5198 <protocol_receive+0x94>
                        {
                           pDev->pPacket(&pDev->pBuffer[0], (uint16_t)(pDev->u16BufferPos - 2));
    5190:	62 50       	subi	r22, 0x02	; 2
    5192:	70 40       	sbci	r23, 0x00	; 0
    5194:	ca 01       	movw	r24, r20
    5196:	09 95       	icall
#if HDLC_DEBUG_ENABLE
                        UART_PRINT((("PROTO: CRC error")));
#endif
                     }
                  }
                  pDev->u16BufferPos = 0;
    5198:	1b 8a       	std	Y+19, r1	; 0x13
    519a:	1a 8a       	std	Y+18, r1	; 0x12
                  pDev->u16Crc = 0;
    519c:	1a 82       	std	Y+2, r1	; 0x02
    519e:	19 82       	std	Y+1, r1	; 0x01
               }
               pDev->u8Escaped &= ~ASC_FLAG;
    51a0:	88 81       	ld	r24, Y
    51a2:	8e 7f       	andi	r24, 0xFE	; 254
    51a4:	01 c0       	rjmp	.+2      	; 0x51a8 <protocol_receive+0xa4>
               return;
            case FR_ESC:
               pDev->u8Escaped |= ASC_FLAG;
    51a6:	81 60       	ori	r24, 0x01	; 1
    51a8:	88 83       	st	Y, r24
    51aa:	29 c0       	rjmp	.+82     	; 0x51fe <protocol_receive+0xfa>
               return;
            }

            if (pDev->u8Escaped & ASC_FLAG)
    51ac:	80 ff       	sbrs	r24, 0
    51ae:	09 c0       	rjmp	.+18     	; 0x51c2 <protocol_receive+0xbe>
            {
               // translate the 2 byte escape sequence back to original char
               pDev->u8Escaped &= ~ASC_FLAG;
    51b0:	8e 7f       	andi	r24, 0xFE	; 254
    51b2:	88 83       	st	Y, r24

               switch (c)
    51b4:	4c 3d       	cpi	r20, 0xDC	; 220
    51b6:	21 f0       	breq	.+8      	; 0x51c0 <protocol_receive+0xbc>
    51b8:	4d 3d       	cpi	r20, 0xDD	; 221
    51ba:	19 f4       	brne	.+6      	; 0x51c2 <protocol_receive+0xbe>
    51bc:	4b ed       	ldi	r20, 0xDB	; 219
    51be:	01 c0       	rjmp	.+2      	; 0x51c2 <protocol_receive+0xbe>
    51c0:	40 ec       	ldi	r20, 0xC0	; 192
               }
            }

            // we reach here with every byte for the buffer
            // BUG: checksum bytes are added but should not be
            if (pDev->pBuffer && (pDev->u16BufferPos < pDev->u16BufferLen))
    51c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    51c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    51c6:	30 97       	sbiw	r30, 0x00	; 0
    51c8:	a1 f0       	breq	.+40     	; 0x51f2 <protocol_receive+0xee>
    51ca:	2a 89       	ldd	r18, Y+18	; 0x12
    51cc:	3b 89       	ldd	r19, Y+19	; 0x13
    51ce:	88 89       	ldd	r24, Y+16	; 0x10
    51d0:	99 89       	ldd	r25, Y+17	; 0x11
    51d2:	28 17       	cp	r18, r24
    51d4:	39 07       	cpc	r19, r25
    51d6:	68 f4       	brcc	.+26     	; 0x51f2 <protocol_receive+0xee>
            {
               pDev->pBuffer[pDev->u16BufferPos++] = c;
    51d8:	e2 0f       	add	r30, r18
    51da:	f3 1f       	adc	r31, r19
    51dc:	40 83       	st	Z, r20
    51de:	2f 5f       	subi	r18, 0xFF	; 255
    51e0:	3f 4f       	sbci	r19, 0xFF	; 255
    51e2:	3b 8b       	std	Y+19, r19	; 0x13
    51e4:	2a 8b       	std	Y+18, r18	; 0x12
               pDev->u16Crc += c;
    51e6:	89 81       	ldd	r24, Y+1	; 0x01
    51e8:	9a 81       	ldd	r25, Y+2	; 0x02
    51ea:	84 0f       	add	r24, r20
    51ec:	91 1d       	adc	r25, r1
    51ee:	9a 83       	std	Y+2, r25	; 0x02
    51f0:	89 83       	std	Y+1, r24	; 0x01
            }
         }
         while(pDev->pIsC());
    51f2:	ee 81       	ldd	r30, Y+6	; 0x06
    51f4:	ff 81       	ldd	r31, Y+7	; 0x07
    51f6:	09 95       	icall
    51f8:	88 23       	and	r24, r24
    51fa:	09 f0       	breq	.+2      	; 0x51fe <protocol_receive+0xfa>
    51fc:	a2 cf       	rjmp	.-188    	; 0x5142 <protocol_receive+0x3e>
#if HDLC_DEBUG_ENABLE
         UART_PRINT(("\n"));
#endif
      }
   }
}
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	08 95       	ret

00005204 <button_pressed>:
 *
 * @return           button state pressed (1) or unpressed (0)
 */
uint8_t button_pressed(uint8_t platform)
{
   if(platform == PLATFORM_RCB)
    5204:	81 30       	cpi	r24, 0x01	; 1
    5206:	41 f4       	brne	.+16     	; 0x5218 <button_pressed+0x14>
   {
      /* Switch port to input. */
      RCB_BUTTON_PORT |= (1 << RCB_BUTTON_0);
    5208:	75 9a       	sbi	0x0e, 5	; 14
      RCB_BUTTON_DDR  &= ~(1 << RCB_BUTTON_0);
    520a:	6d 98       	cbi	0x0d, 5	; 13

      return (!(RCB_BUTTON_PINS & (1 << RCB_BUTTON_0)) ? 1 : 0);
    520c:	2c b1       	in	r18, 0x0c	; 12
    520e:	22 95       	swap	r18
    5210:	26 95       	lsr	r18
    5212:	27 70       	andi	r18, 0x07	; 7
    5214:	20 95       	com	r18
    5216:	1a c0       	rjmp	.+52     	; 0x524c <button_pressed+0x48>
   }
   else if(platform == PLATFORM_STB)
    5218:	82 30       	cpi	r24, 0x02	; 2
    521a:	11 f0       	breq	.+4      	; 0x5220 <button_pressed+0x1c>
    521c:	20 e0       	ldi	r18, 0x00	; 0
    521e:	17 c0       	rjmp	.+46     	; 0x524e <button_pressed+0x4a>
   {
#ifdef SINGLE_CHIP
      uint8_t data = 0;

      // save registers to restore later
      uint8_t sControlPORT = STB_CONTROL_PORT;
    5220:	8e b1       	in	r24, 0x0e	; 14
      uint8_t sControlDDR  = STB_CONTROL_DDR;
    5222:	9d b1       	in	r25, 0x0d	; 13

      // set #WR bit inactive
      STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5224:	74 9a       	sbi	0x0e, 4	; 14
      STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5226:	6c 9a       	sbi	0x0d, 4	; 13

      // prepare chip select for io
      STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5228:	5e 9a       	sbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    522a:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    522c:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    522e:	57 9a       	sbi	0x0a, 7	; 10

      // generate a single low / hi edge RD
      STB_CONTROL_PORT |= _BV(STB_RD_BIT); // #RD bit
    5230:	75 9a       	sbi	0x0e, 5	; 14
      STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    5232:	6d 9a       	sbi	0x0d, 5	; 13
      // and now back ...
      STB_CONTROL_PORT &= ~_BV(STB_RD_BIT);
    5234:	75 98       	cbi	0x0e, 5	; 14

      // Switch port to input
      STB_DATA_DDR  &= ~_BV(STB_BUTTON_0);
    5236:	20 98       	cbi	0x04, 0	; 4
      STB_DATA_PORT |=  _BV(STB_BUTTON_0);
    5238:	28 9a       	sbi	0x05, 0	; 5

      // read input pin
      data = STB_DATA_PINS;
    523a:	23 b1       	in	r18, 0x03	; 3

      // disable input read
      STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    523c:	75 9a       	sbi	0x0e, 5	; 14

      // Switch port back to output
      STB_DATA_DDR |= _BV(STB_BUTTON_0);
    523e:	20 9a       	sbi	0x04, 0	; 4

      // disable chip select
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    5240:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5242:	5e 98       	cbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    5244:	57 9a       	sbi	0x0a, 7	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    5246:	5f 98       	cbi	0x0b, 7	; 11

      // restore registers
      STB_CONTROL_PORT  = sControlPORT;
    5248:	8e b9       	out	0x0e, r24	; 14
      STB_CONTROL_DDR   = sControlDDR;
    524a:	9d b9       	out	0x0d, r25	; 13

      return ((data & _BV(STB_BUTTON_0)) ? 1 : 0);
    524c:	21 70       	andi	r18, 0x01	; 1
#endif
      return 0;
   }

   return 0;
}
    524e:	82 2f       	mov	r24, r18
    5250:	08 95       	ret

00005252 <led_set>:
 * @param led LED which should set
 * @param mode switch mode from LED (PLATFORM_LED_ON, PLATFORM_LED_OFF and PLATFORM_LED_TOGGLE)
 */
void led_set (uint8_t platform, uint8_t led, uint8_t mode)
{
   if(platform == PLATFORM_RCB)
    5252:	81 30       	cpi	r24, 0x01	; 1
    5254:	79 f5       	brne	.+94     	; 0x52b4 <led_set+0x62>
   {
      switch(mode)
    5256:	42 30       	cpi	r20, 0x02	; 2
    5258:	a9 f0       	breq	.+42     	; 0x5284 <led_set+0x32>
    525a:	43 30       	cpi	r20, 0x03	; 3
    525c:	e9 f0       	breq	.+58     	; 0x5298 <led_set+0x46>
    525e:	41 30       	cpi	r20, 0x01	; 1
    5260:	09 f0       	breq	.+2      	; 0x5264 <led_set+0x12>
    5262:	62 c0       	rjmp	.+196    	; 0x5328 <led_set+0xd6>
      {
      case PLATFORM_LED_ON:
         RCB_LED_PORT &= ~(1 << (led));
    5264:	3e b1       	in	r19, 0x0e	; 14
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	02 c0       	rjmp	.+4      	; 0x5270 <led_set+0x1e>
    526c:	88 0f       	add	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	6a 95       	dec	r22
    5272:	e2 f7       	brpl	.-8      	; 0x526c <led_set+0x1a>
    5274:	28 2f       	mov	r18, r24
    5276:	20 95       	com	r18
    5278:	23 23       	and	r18, r19
    527a:	2e b9       	out	0x0e, r18	; 14
         RCB_LED_DDR  |=  (1 << (led));
    527c:	2d b1       	in	r18, 0x0d	; 13
    527e:	82 2b       	or	r24, r18
    5280:	8d b9       	out	0x0d, r24	; 13
    5282:	08 95       	ret
         break;
      case PLATFORM_LED_OFF:
         RCB_LED_PORT |= (1 << (led));
    5284:	8e b1       	in	r24, 0x0e	; 14
    5286:	21 e0       	ldi	r18, 0x01	; 1
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	02 c0       	rjmp	.+4      	; 0x5290 <led_set+0x3e>
    528c:	22 0f       	add	r18, r18
    528e:	33 1f       	adc	r19, r19
    5290:	6a 95       	dec	r22
    5292:	e2 f7       	brpl	.-8      	; 0x528c <led_set+0x3a>
    5294:	82 2b       	or	r24, r18
    5296:	09 c0       	rjmp	.+18     	; 0x52aa <led_set+0x58>
         RCB_LED_DDR  |= (1 << (led));
         break;
      case PLATFORM_LED_TOGGLE:
         RCB_LED_PORT ^= (1 << (led));
    5298:	8e b1       	in	r24, 0x0e	; 14
    529a:	21 e0       	ldi	r18, 0x01	; 1
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	02 c0       	rjmp	.+4      	; 0x52a4 <led_set+0x52>
    52a0:	22 0f       	add	r18, r18
    52a2:	33 1f       	adc	r19, r19
    52a4:	6a 95       	dec	r22
    52a6:	e2 f7       	brpl	.-8      	; 0x52a0 <led_set+0x4e>
    52a8:	82 27       	eor	r24, r18
    52aa:	8e b9       	out	0x0e, r24	; 14
         RCB_LED_DDR  |= (1 << (led));
    52ac:	8d b1       	in	r24, 0x0d	; 13
    52ae:	28 2b       	or	r18, r24
    52b0:	2d b9       	out	0x0d, r18	; 13
    52b2:	08 95       	ret
         break;
      }
   }
   else if(platform == PLATFORM_STB)
    52b4:	82 30       	cpi	r24, 0x02	; 2
    52b6:	c1 f5       	brne	.+112    	; 0x5328 <led_set+0xd6>
   {
#ifdef SINGLE_CHIP
      switch(mode)
    52b8:	41 30       	cpi	r20, 0x01	; 1
    52ba:	19 f0       	breq	.+6      	; 0x52c2 <led_set+0x70>
    52bc:	42 30       	cpi	r20, 0x02	; 2
    52be:	c9 f4       	brne	.+50     	; 0x52f2 <led_set+0xa0>
    52c0:	0c c0       	rjmp	.+24     	; 0x52da <led_set+0x88>
      {
      case PLATFORM_LED_ON:
         PERIPHERAL &= ~_BV(led);
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	02 c0       	rjmp	.+4      	; 0x52cc <led_set+0x7a>
    52c8:	88 0f       	add	r24, r24
    52ca:	99 1f       	adc	r25, r25
    52cc:	6a 95       	dec	r22
    52ce:	e2 f7       	brpl	.-8      	; 0x52c8 <led_set+0x76>
    52d0:	80 95       	com	r24
    52d2:	20 91 bb 16 	lds	r18, 0x16BB
    52d6:	28 23       	and	r18, r24
    52d8:	0a c0       	rjmp	.+20     	; 0x52ee <led_set+0x9c>
         break;
      case PLATFORM_LED_OFF:
         PERIPHERAL |= _BV(led);
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <led_set+0x92>
    52e0:	88 0f       	add	r24, r24
    52e2:	99 1f       	adc	r25, r25
    52e4:	6a 95       	dec	r22
    52e6:	e2 f7       	brpl	.-8      	; 0x52e0 <led_set+0x8e>
    52e8:	20 91 bb 16 	lds	r18, 0x16BB
    52ec:	28 2b       	or	r18, r24
    52ee:	20 93 bb 16 	sts	0x16BB, r18
         break;
      }
      // save registers to restore later
      uint8_t sControlPORT = STB_CONTROL_PORT;
    52f2:	9e b1       	in	r25, 0x0e	; 14
      uint8_t sControlDDR  = STB_CONTROL_DDR;
    52f4:	2d b1       	in	r18, 0x0d	; 13
      uint8_t sDataPORT    = STB_DATA_PORT;
    52f6:	35 b1       	in	r19, 0x05	; 5
      uint8_t sDataDDR     = STB_DATA_DDR;
    52f8:	44 b1       	in	r20, 0x04	; 4

      // set #RD bit inactive
      STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    52fa:	75 9a       	sbi	0x0e, 5	; 14
      STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    52fc:	6d 9a       	sbi	0x0d, 5	; 13

      STB_DATA_PORT = PERIPHERAL; // low active
    52fe:	80 91 bb 16 	lds	r24, 0x16BB
    5302:	85 b9       	out	0x05, r24	; 5
      STB_DATA_DDR |= _BV(STB_LED_0); // set LED0 output active
    5304:	20 9a       	sbi	0x04, 0	; 4
      STB_DATA_DDR |= _BV(STB_LED_1); // set LED1 output active
    5306:	21 9a       	sbi	0x04, 1	; 4

      // prepare chip select for io
      STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5308:	5e 9a       	sbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    530a:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    530c:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    530e:	57 9a       	sbi	0x0a, 7	; 10

      // generate a single low / hi edge WR
      STB_CONTROL_PORT |= _BV(STB_WR_BIT); // #WR bit
    5310:	74 9a       	sbi	0x0e, 4	; 14
      STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5312:	6c 9a       	sbi	0x0d, 4	; 13
      // and now back ...
      STB_CONTROL_PORT &= ~_BV(STB_WR_BIT);
    5314:	74 98       	cbi	0x0e, 4	; 14
      STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5316:	74 9a       	sbi	0x0e, 4	; 14

      // disable chip select
      STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5318:	5e 98       	cbi	0x0b, 6	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    531a:	56 9a       	sbi	0x0a, 6	; 10
      STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    531c:	5f 98       	cbi	0x0b, 7	; 11
      STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    531e:	57 9a       	sbi	0x0a, 7	; 10

      // restore registers
      STB_CONTROL_PORT  = sControlPORT;
    5320:	9e b9       	out	0x0e, r25	; 14
      STB_CONTROL_DDR   = sControlDDR;
    5322:	2d b9       	out	0x0d, r18	; 13
      STB_DATA_PORT     = sDataPORT;
    5324:	35 b9       	out	0x05, r19	; 5
      STB_DATA_DDR      = sDataDDR;
    5326:	44 b9       	out	0x04, r20	; 4
    5328:	08 95       	ret

0000532a <stb_status_temperature>:
 *
 * @param mode activate/deactivate temperature sensor (STB_TEMPERATURE_ON and STB_TEMPERATURE_OFF)
 */
void stb_status_temperature(uint8_t mode)
{
   if(mode == STB_TEMPERATURE_ON)
    532a:	81 30       	cpi	r24, 0x01	; 1
    532c:	21 f4       	brne	.+8      	; 0x5336 <stb_status_temperature+0xc>
   {
#ifdef SINGLE_CHIP
      PERIPHERAL &= ~_BV(2);
    532e:	80 91 bb 16 	lds	r24, 0x16BB
    5332:	8b 7f       	andi	r24, 0xFB	; 251
    5334:	05 c0       	rjmp	.+10     	; 0x5340 <stb_status_temperature+0x16>
#else
      PERIPHERAL |= _BV(2);
#endif
   }
   else if(mode == STB_TEMPERATURE_OFF)
    5336:	82 30       	cpi	r24, 0x02	; 2
    5338:	29 f4       	brne	.+10     	; 0x5344 <stb_status_temperature+0x1a>
   {
#ifdef SINGLE_CHIP
      PERIPHERAL |= _BV(2);
    533a:	80 91 bb 16 	lds	r24, 0x16BB
    533e:	84 60       	ori	r24, 0x04	; 4
    5340:	80 93 bb 16 	sts	0x16BB, r24
      PERIPHERAL &= ~_BV(2);
#endif
   }
#ifdef SINGLE_CHIP
   // save registers to restore later
   uint8_t sControlPORT = STB_CONTROL_PORT;
    5344:	9e b1       	in	r25, 0x0e	; 14
   uint8_t sControlDDR  = STB_CONTROL_DDR;
    5346:	2d b1       	in	r18, 0x0d	; 13
   uint8_t sDataPORT    = STB_DATA_PORT;
    5348:	35 b1       	in	r19, 0x05	; 5
   uint8_t sDataDDR     = STB_DATA_DDR;
    534a:	44 b1       	in	r20, 0x04	; 4

   // set #RD bit inactive
   STB_CONTROL_PORT |= _BV(STB_RD_BIT);
    534c:	75 9a       	sbi	0x0e, 5	; 14
   STB_CONTROL_DDR  |= _BV(STB_RD_BIT);
    534e:	6d 9a       	sbi	0x0d, 5	; 13

   STB_DATA_PORT   = PERIPHERAL; // low active
    5350:	80 91 bb 16 	lds	r24, 0x16BB
    5354:	85 b9       	out	0x05, r24	; 5
   STB_DATA_DDR   |= _BV(STB_TEMPERATURE); // set temperature output active
    5356:	22 9a       	sbi	0x04, 2	; 4

   // prepare chip select for io
   STB_SELECT_PORT |=  _BV(STB_CS0_BIT); //CS0 bit
    5358:	5e 9a       	sbi	0x0b, 6	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    535a:	56 9a       	sbi	0x0a, 6	; 10
   STB_SELECT_PORT &= ~_BV(STB_CS1_BIT); //CS1 bit
    535c:	5f 98       	cbi	0x0b, 7	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    535e:	57 9a       	sbi	0x0a, 7	; 10

   // generate a single low / hi edge WR
   STB_CONTROL_PORT |= _BV(STB_WR_BIT); // #WR bit
    5360:	74 9a       	sbi	0x0e, 4	; 14
   STB_CONTROL_DDR  |= _BV(STB_WR_BIT);
    5362:	6c 9a       	sbi	0x0d, 4	; 13
   // and now back ...
   STB_CONTROL_PORT &= ~_BV(STB_WR_BIT);
    5364:	74 98       	cbi	0x0e, 4	; 14
   STB_CONTROL_PORT |= _BV(STB_WR_BIT);
    5366:	74 9a       	sbi	0x0e, 4	; 14

   // disable chip select
   STB_SELECT_PORT &= ~_BV(STB_CS0_BIT);
    5368:	5e 98       	cbi	0x0b, 6	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS0_BIT);
    536a:	56 9a       	sbi	0x0a, 6	; 10
   STB_SELECT_PORT &= ~_BV(STB_CS1_BIT);
    536c:	5f 98       	cbi	0x0b, 7	; 11
   STB_SELECT_DDR  |=  _BV(STB_CS1_BIT);
    536e:	57 9a       	sbi	0x0a, 7	; 10

   // set temperature output inactive
   STB_DATA_DDR    &= ~_BV(STB_TEMPERATURE);
    5370:	22 98       	cbi	0x04, 2	; 4

   // restore registers
   STB_CONTROL_PORT  = sControlPORT;
    5372:	9e b9       	out	0x0e, r25	; 14
   STB_CONTROL_DDR   = sControlDDR;
    5374:	2d b9       	out	0x0d, r18	; 13
   STB_DATA_PORT     = sDataPORT;
    5376:	35 b9       	out	0x05, r19	; 5
   STB_DATA_DDR      = sDataDDR;
    5378:	44 b9       	out	0x04, r20	; 4
#else
   *pPERIPHERAL = ~PERIPHERAL | ~0x07; // Memory mapped IO
#endif
}
    537a:	08 95       	ret

0000537c <check_and_save_quality_values>:
#endif

#if (NODETYPE == ENDDEVICE)
   shortAddress = shortAddress; // make compiler happy
#endif
}
    537c:	08 95       	ret

0000537e <setup_info_for_request>:
      }
   }
#endif

   return 0;
}
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	08 95       	ret

00005382 <evaluate_quality_request>:
      frame.option = numberOfNodes;

      send_data_wireless(DEFAULT_COORD_ADDR, (uint8_t*)&frame, sizeof(frame), UDP_PORT_END_ROUTER, UDP_PORT_COORD);
   }
#endif
}
    5382:	08 95       	ret

00005384 <evaluate_quality_response>:
         }
      }
      pPayload += sizeof(payloadQualityFrame_t);
   }
#endif
}
    5384:	08 95       	ret

00005386 <send_quality_request>:
   }

   // call function again after timer with preloaded value ITERATION_TIME_QUALITY is expired
   macSetAlarm(ITERATION_TIME_QUALITY, send_quality_request);
#endif
}
    5386:	08 95       	ret

00005388 <queue_char_pending>:
 *
 * @return if any char is available it return 1, else 0
 */
uint8_t queue_char_pending(void)
{
   return (uart_queue.head != uart_queue.tail);
    5388:	90 91 46 1b 	lds	r25, 0x1B46
    538c:	80 91 47 1b 	lds	r24, 0x1B47
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	98 13       	cpse	r25, r24
    5394:	21 e0       	ldi	r18, 0x01	; 1
}
    5396:	82 2f       	mov	r24, r18
    5398:	08 95       	ret

0000539a <queue_put_char>:
 * @brief Put char into buffer
 *
 * @param   c  character for buffer
 */
void queue_put_char(uint8_t c)
{
    539a:	df 93       	push	r29
    539c:	cf 93       	push	r28
    539e:	0f 92       	push	r0
    53a0:	cd b7       	in	r28, 0x3d	; 61
    53a2:	de b7       	in	r29, 0x3e	; 62
    53a4:	48 2f       	mov	r20, r24
   AVR_ENTER_CRITICAL_REGION();
    53a6:	8f b7       	in	r24, 0x3f	; 63
    53a8:	89 83       	std	Y+1, r24	; 0x01
    53aa:	f8 94       	cli
   uint8_t newhead;

   if ((uart_queue.head + 1) % MAX_CHARS == uart_queue.tail)
    53ac:	80 91 46 1b 	lds	r24, 0x1B46
    53b0:	20 91 47 1b 	lds	r18, 0x1B47
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	01 96       	adiw	r24, 0x01	; 1
    53b8:	68 ee       	ldi	r22, 0xE8	; 232
    53ba:	73 e0       	ldi	r23, 0x03	; 3
    53bc:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <__divmodhi4>
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	82 17       	cp	r24, r18
    53c4:	93 07       	cpc	r25, r19
    53c6:	61 f0       	breq	.+24     	; 0x53e0 <queue_put_char+0x46>
   {
      // queue full, get outta here
      return;
   }

   newhead = uart_queue.head;
    53c8:	80 91 46 1b 	lds	r24, 0x1B46

   // store in queue
   uart_queue.buffer[newhead] = c;
    53cc:	e8 2f       	mov	r30, r24
    53ce:	f0 e0       	ldi	r31, 0x00	; 0
    53d0:	ea 5b       	subi	r30, 0xBA	; 186
    53d2:	f4 4e       	sbci	r31, 0xE4	; 228
    53d4:	42 83       	std	Z+2, r20	; 0x02

   // calculate new head index
   newhead++;
    53d6:	8f 5f       	subi	r24, 0xFF	; 255
   if (newhead >= MAX_CHARS)
   {
      newhead = 0;
   }
   uart_queue.head = newhead;
    53d8:	80 93 46 1b 	sts	0x1B46, r24
   AVR_LEAVE_CRITICAL_REGION();
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
    53de:	8f bf       	out	0x3f, r24	; 63
}
    53e0:	0f 90       	pop	r0
    53e2:	cf 91       	pop	r28
    53e4:	df 91       	pop	r29
    53e6:	08 95       	ret

000053e8 <queue_put_char_std>:
 *
 * @param   c           character for buffer
 * @param   dummy_file  not used
 */
int queue_put_char_std (char c, FILE *dummy_file)
{
    53e8:	1f 93       	push	r17
    53ea:	18 2f       	mov	r17, r24
   queue_put_char((uint8_t)c);
    53ec:	0e 94 cd 29 	call	0x539a	; 0x539a <queue_put_char>
   return c;
}
    53f0:	81 2f       	mov	r24, r17
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	1f 91       	pop	r17
    53f6:	08 95       	ret

000053f8 <queue_get_char>:
 * @brief Return oldest character
 *
 * @return  oldest character
 */
uint8_t queue_get_char(void)
{
    53f8:	df 93       	push	r29
    53fa:	cf 93       	push	r28
    53fc:	00 d0       	rcall	.+0      	; 0x53fe <queue_get_char+0x6>
    53fe:	cd b7       	in	r28, 0x3d	; 61
    5400:	de b7       	in	r29, 0x3e	; 62
   uint8_t c;
   AVR_ENTER_CRITICAL_REGION();
    5402:	8f b7       	in	r24, 0x3f	; 63
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	f8 94       	cli
   volatile uint8_t newtail;

   newtail = uart_queue.tail;
    5408:	80 91 47 1b 	lds	r24, 0x1B47
    540c:	8a 83       	std	Y+2, r24	; 0x02

   c = uart_queue.buffer[newtail];
    540e:	8a 81       	ldd	r24, Y+2	; 0x02
    5410:	e6 e4       	ldi	r30, 0x46	; 70
    5412:	fb e1       	ldi	r31, 0x1B	; 27
    5414:	e8 0f       	add	r30, r24
    5416:	f1 1d       	adc	r31, r1
    5418:	82 81       	ldd	r24, Z+2	; 0x02

   // calculate new tail
   newtail++;
    541a:	9a 81       	ldd	r25, Y+2	; 0x02
    541c:	9f 5f       	subi	r25, 0xFF	; 255
    541e:	9a 83       	std	Y+2, r25	; 0x02
   if (newtail >= MAX_CHARS)
    5420:	9a 81       	ldd	r25, Y+2	; 0x02
   {
      newtail = 0;
   }

   uart_queue.tail = newtail;
    5422:	9a 81       	ldd	r25, Y+2	; 0x02
    5424:	90 93 47 1b 	sts	0x1B47, r25

   AVR_LEAVE_CRITICAL_REGION();
    5428:	99 81       	ldd	r25, Y+1	; 0x01
    542a:	9f bf       	out	0x3f, r25	; 63
   return(c);
}
    542c:	0f 90       	pop	r0
    542e:	0f 90       	pop	r0
    5430:	cf 91       	pop	r28
    5432:	df 91       	pop	r29
    5434:	08 95       	ret

00005436 <queue_get_char_std>:
 *
 * @return  oldest character
 */
int queue_get_char_std(FILE* dummy_file)
{
   return queue_get_char();
    5436:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <queue_get_char>
}
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	08 95       	ret

0000543e <queue_put_string>:
 *
 * @param str  Pointer to String
 * @param len  length of String
 */
void queue_put_string(char* str, uint8_t len)
{
    543e:	1f 93       	push	r17
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
    5444:	ec 01       	movw	r28, r24
    5446:	16 2f       	mov	r17, r22
    5448:	04 c0       	rjmp	.+8      	; 0x5452 <queue_put_string+0x14>
   while(len > 0)
   {
      queue_put_char(*str);
    544a:	89 91       	ld	r24, Y+
    544c:	0e 94 cd 29 	call	0x539a	; 0x539a <queue_put_char>
      str++;
      len--;
    5450:	11 50       	subi	r17, 0x01	; 1
 * @param str  Pointer to String
 * @param len  length of String
 */
void queue_put_string(char* str, uint8_t len)
{
   while(len > 0)
    5452:	11 23       	and	r17, r17
    5454:	d1 f7       	brne	.-12     	; 0x544a <queue_put_string+0xc>
   {
      queue_put_char(*str);
      i++;
   }
   */
}
    5456:	df 91       	pop	r29
    5458:	cf 91       	pop	r28
    545a:	1f 91       	pop	r17
    545c:	08 95       	ret

0000545e <queue_task>:
/*
 * @brief Task which is executed in free time, to send out all saved chars from queue.
 *
 */
void queue_task(void)
{
    545e:	06 c0       	rjmp	.+12     	; 0x546c <queue_task+0xe>
   while(queue_char_pending())
   {
      uart_putc(queue_get_char(), NULL);
    5460:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <queue_get_char>
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	70 e0       	ldi	r23, 0x00	; 0
    5468:	0e 94 05 2b 	call	0x560a	; 0x560a <uart_putc>
 *
 * @return if any char is available it return 1, else 0
 */
uint8_t queue_char_pending(void)
{
   return (uart_queue.head != uart_queue.tail);
    546c:	90 91 46 1b 	lds	r25, 0x1B46
    5470:	80 91 47 1b 	lds	r24, 0x1B47
 * @brief Task which is executed in free time, to send out all saved chars from queue.
 *
 */
void queue_task(void)
{
   while(queue_char_pending())
    5474:	98 17       	cp	r25, r24
    5476:	a1 f7       	brne	.-24     	; 0x5460 <queue_task+0x2>
   {
      uart_putc(queue_get_char(), NULL);
   }
}
    5478:	08 95       	ret

0000547a <queue_put_dec32>:
 * @brief Convert long int to string and push on queue
 *
 * @param n unsigned long integer
 */
void queue_put_dec32(uint32_t n)
{
    547a:	0f 93       	push	r16
    547c:	1f 93       	push	r17
    547e:	df 93       	push	r29
    5480:	cf 93       	push	r28
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	2b 97       	sbiw	r28, 0x0b	; 11
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	f8 94       	cli
    548c:	de bf       	out	0x3e, r29	; 62
    548e:	0f be       	out	0x3f, r0	; 63
    5490:	cd bf       	out	0x3d, r28	; 61
    5492:	fe 01       	movw	r30, r28
    5494:	31 96       	adiw	r30, 0x01	; 1
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
   {
      buf[i] = 32; // 32 = space character
    5496:	40 e2       	ldi	r20, 0x20	; 32
 */
void queue_put_dec32(uint32_t n)
{
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
    5498:	9e 01       	movw	r18, r28
    549a:	24 5f       	subi	r18, 0xF4	; 244
    549c:	3f 4f       	sbci	r19, 0xFF	; 255
   {
      buf[i] = 32; // 32 = space character
    549e:	41 93       	st	Z+, r20
 */
void queue_put_dec32(uint32_t n)
{
   char buf[11]; // 10*max number (2^32) + 1* zero terminated string [+ 1* minus sign]
   uint8_t i = 0;
   for(; i < sizeof(buf); i++)
    54a0:	e2 17       	cp	r30, r18
    54a2:	f3 07       	cpc	r31, r19
    54a4:	e1 f7       	brne	.-8      	; 0x549e <queue_put_dec32+0x24>
   {
      buf[i] = 32; // 32 = space character
   }
   itoa(n, buf, 10);
    54a6:	cb 01       	movw	r24, r22
    54a8:	8e 01       	movw	r16, r28
    54aa:	0f 5f       	subi	r16, 0xFF	; 255
    54ac:	1f 4f       	sbci	r17, 0xFF	; 255
    54ae:	b8 01       	movw	r22, r16
    54b0:	4a e0       	ldi	r20, 0x0A	; 10
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <itoa>
   queue_put_string(buf, sizeof(buf));
    54b8:	c8 01       	movw	r24, r16
    54ba:	6b e0       	ldi	r22, 0x0B	; 11
    54bc:	0e 94 1f 2a 	call	0x543e	; 0x543e <queue_put_string>
}
    54c0:	2b 96       	adiw	r28, 0x0b	; 11
    54c2:	0f b6       	in	r0, 0x3f	; 63
    54c4:	f8 94       	cli
    54c6:	de bf       	out	0x3e, r29	; 62
    54c8:	0f be       	out	0x3f, r0	; 63
    54ca:	cd bf       	out	0x3d, r28	; 61
    54cc:	cf 91       	pop	r28
    54ce:	df 91       	pop	r29
    54d0:	1f 91       	pop	r17
    54d2:	0f 91       	pop	r16
    54d4:	08 95       	ret

000054d6 <queue_put_dec16>:
 * @brief Convert int to string and push on queue
 *
 * @param n unsigned integer
 */
void queue_put_dec16(uint16_t n)
{
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	df 93       	push	r29
    54dc:	cf 93       	push	r28
    54de:	00 d0       	rcall	.+0      	; 0x54e0 <queue_put_dec16+0xa>
    54e0:	00 d0       	rcall	.+0      	; 0x54e2 <queue_put_dec16+0xc>
    54e2:	00 d0       	rcall	.+0      	; 0x54e4 <queue_put_dec16+0xe>
    54e4:	cd b7       	in	r28, 0x3d	; 61
    54e6:	de b7       	in	r29, 0x3e	; 62
   char buf[6]; // 5*max number (65536) + 1* zero terminated string [+ 1* minus sign]
   // 32 = space character
   buf[0] = 32; buf[1] = 32; buf[2] = 32; buf[3] = 32; buf[4] = 32; buf[5] = 32;
    54e8:	20 e2       	ldi	r18, 0x20	; 32
    54ea:	29 83       	std	Y+1, r18	; 0x01
    54ec:	2a 83       	std	Y+2, r18	; 0x02
    54ee:	2b 83       	std	Y+3, r18	; 0x03
    54f0:	2c 83       	std	Y+4, r18	; 0x04
    54f2:	2d 83       	std	Y+5, r18	; 0x05
    54f4:	2e 83       	std	Y+6, r18	; 0x06
   itoa(n, buf, 10);
    54f6:	8e 01       	movw	r16, r28
    54f8:	0f 5f       	subi	r16, 0xFF	; 255
    54fa:	1f 4f       	sbci	r17, 0xFF	; 255
    54fc:	b8 01       	movw	r22, r16
    54fe:	4a e0       	ldi	r20, 0x0A	; 10
    5500:	50 e0       	ldi	r21, 0x00	; 0
    5502:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <itoa>
   queue_put_string(buf, sizeof(buf));
    5506:	c8 01       	movw	r24, r16
    5508:	66 e0       	ldi	r22, 0x06	; 6
    550a:	0e 94 1f 2a 	call	0x543e	; 0x543e <queue_put_string>
}
    550e:	26 96       	adiw	r28, 0x06	; 6
    5510:	0f b6       	in	r0, 0x3f	; 63
    5512:	f8 94       	cli
    5514:	de bf       	out	0x3e, r29	; 62
    5516:	0f be       	out	0x3f, r0	; 63
    5518:	cd bf       	out	0x3d, r28	; 61
    551a:	cf 91       	pop	r28
    551c:	df 91       	pop	r29
    551e:	1f 91       	pop	r17
    5520:	0f 91       	pop	r16
    5522:	08 95       	ret

00005524 <queue_put_dec8>:
 * @brief Convert byte to string and push on queue
 *
 * @param n unsigned byte
 */
void queue_put_dec8(uint8_t n)
{
    5524:	0f 93       	push	r16
    5526:	1f 93       	push	r17
    5528:	df 93       	push	r29
    552a:	cf 93       	push	r28
    552c:	00 d0       	rcall	.+0      	; 0x552e <queue_put_dec8+0xa>
    552e:	00 d0       	rcall	.+0      	; 0x5530 <queue_put_dec8+0xc>
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
   char buf[4]; // 3*max number (256) + 1* zero terminated string [+ 1* minus sign]
   // 32 = space character
   buf[0] = 32; buf[1] = 32; buf[2] = 32; buf[3] = 32;
    5534:	90 e2       	ldi	r25, 0x20	; 32
    5536:	99 83       	std	Y+1, r25	; 0x01
    5538:	9a 83       	std	Y+2, r25	; 0x02
    553a:	9b 83       	std	Y+3, r25	; 0x03
    553c:	9c 83       	std	Y+4, r25	; 0x04
   itoa(n, buf, 10);
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	8e 01       	movw	r16, r28
    5542:	0f 5f       	subi	r16, 0xFF	; 255
    5544:	1f 4f       	sbci	r17, 0xFF	; 255
    5546:	b8 01       	movw	r22, r16
    5548:	4a e0       	ldi	r20, 0x0A	; 10
    554a:	50 e0       	ldi	r21, 0x00	; 0
    554c:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <itoa>
   queue_put_string(buf, sizeof(buf));
    5550:	c8 01       	movw	r24, r16
    5552:	64 e0       	ldi	r22, 0x04	; 4
    5554:	0e 94 1f 2a 	call	0x543e	; 0x543e <queue_put_string>
}
    5558:	0f 90       	pop	r0
    555a:	0f 90       	pop	r0
    555c:	0f 90       	pop	r0
    555e:	0f 90       	pop	r0
    5560:	cf 91       	pop	r28
    5562:	df 91       	pop	r29
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	08 95       	ret

0000556a <led_3_off>:
void led_3_off(void)
{
#ifdef STATUS_DEBUG
   led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_OFF);
#endif
}
    556a:	08 95       	ret

0000556c <blink_led_3>:
{
#ifdef STATUS_DEBUG
   led_set(PLATFORM_RCB, RCB_LED_2, PLATFORM_LED_ON);
   macSetAlarm(30, led_3_off);
#endif
}
    556c:	08 95       	ret

0000556e <evaluate_status_request>:

   blink_led_3();
   macSetAlarm(STATUS_ALARM_TIMER, evaluate_status_request);
#endif
#endif
}
    556e:	08 95       	ret

00005570 <evaluate_status_response>:

   // send frame out to serial interface
   send_data_wired(pFrame, sizeof(deRFprotocol_t));
#endif
#endif
}
    5570:	08 95       	ret

00005572 <init_status_timer>:
   TCCR4B |= (1 << CS41) | (1 << WGM42);  //prescaler to 8, free running, output compare
   OCR4A   = (MS_PER_TICK * 1000 / (8000000UL/F_CPU)); // compare every 1ms

   running_timer = 0;
#endif
}
    5572:	08 95       	ret

00005574 <status_timer_enable>:
{
#ifdef STATUS_DEBUG
   TIMSK4 |= (1 << OCIE4A);
   status_active = 1;
#endif
}
    5574:	08 95       	ret

00005576 <status_timer_disable>:
{
#ifdef STATUS_DEBUG
   TIMSK4 &= ~(1 << OCIE4A);
   status_active = 0;
#endif
}
    5576:	08 95       	ret

00005578 <is_status_active>:
{
#ifdef STATUS_DEBUG
   return status_active;
#endif
   return 0;
}
    5578:	80 e0       	ldi	r24, 0x00	; 0
    557a:	08 95       	ret

0000557c <uart_init>:
/**
 * @brief Initialize UART interface
 *
 */
void uart_init (unsigned long BaudRate)
{
    557c:	9b 01       	movw	r18, r22
    557e:	ac 01       	movw	r20, r24
   UCSR0A = (1<<U2X0);                              // enable double speed
    5580:	82 e0       	ldi	r24, 0x02	; 2
    5582:	80 93 c0 00 	sts	0x00C0, r24

   UBRR0L = (UART_BAUD(BaudRate)) & 0xFF;           // set the baudrate register
    5586:	ca 01       	movw	r24, r20
    5588:	b9 01       	movw	r22, r18
    558a:	60 58       	subi	r22, 0x80	; 128
    558c:	7b 47       	sbci	r23, 0x7B	; 123
    558e:	81 4e       	sbci	r24, 0xE1	; 225
    5590:	9f 4f       	sbci	r25, 0xFF	; 255
    5592:	f2 e0       	ldi	r31, 0x02	; 2
    5594:	66 0f       	add	r22, r22
    5596:	77 1f       	adc	r23, r23
    5598:	88 1f       	adc	r24, r24
    559a:	99 1f       	adc	r25, r25
    559c:	fa 95       	dec	r31
    559e:	d1 f7       	brne	.-12     	; 0x5594 <uart_init+0x18>
    55a0:	e3 e0       	ldi	r30, 0x03	; 3
    55a2:	22 0f       	add	r18, r18
    55a4:	33 1f       	adc	r19, r19
    55a6:	44 1f       	adc	r20, r20
    55a8:	55 1f       	adc	r21, r21
    55aa:	ea 95       	dec	r30
    55ac:	d1 f7       	brne	.-12     	; 0x55a2 <uart_init+0x26>
    55ae:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <__udivmodsi4>
    55b2:	21 50       	subi	r18, 0x01	; 1
    55b4:	20 93 c4 00 	sts	0x00C4, r18
   UBRR0H = 0;
    55b8:	10 92 c5 00 	sts	0x00C5, r1

   UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);                // enable Receiver and Transmitter
    55bc:	88 e9       	ldi	r24, 0x98	; 152
    55be:	80 93 c1 00 	sts	0x00C1, r24
   UCSR0C = (3<<UCSZ00);                            // 8 Data, No Parity, 1 Stop bit
    55c2:	86 e0       	ldi	r24, 0x06	; 6
    55c4:	80 93 c2 00 	sts	0x00C2, r24

#if UART_QUEUED
   stderr = &debug_stream;
#endif

   stdout = &uart_stream;                           // init standard output over UART
    55c8:	8f e1       	ldi	r24, 0x1F	; 31
    55ca:	9b e0       	ldi	r25, 0x0B	; 11
    55cc:	90 93 33 1f 	sts	0x1F33, r25
    55d0:	80 93 32 1f 	sts	0x1F32, r24
   stdin  = &uart_stream;                           // init standard input over UART
    55d4:	90 93 31 1f 	sts	0x1F31, r25
    55d8:	80 93 30 1f 	sts	0x1F30, r24
//UART_QUEUED

}
    55dc:	08 95       	ret

000055de <uart_keypressed>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    55de:	80 91 c0 00 	lds	r24, 0x00C0
}
    55e2:	88 1f       	adc	r24, r24
    55e4:	88 27       	eor	r24, r24
    55e6:	88 1f       	adc	r24, r24
    55e8:	08 95       	ret

000055ea <uart_getc>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    55ea:	80 91 c0 00 	lds	r24, 0x00C0
 * @return  character on the UART
 *
 */
int uart_getc (FILE *dummy_file)
{
   while (!uart_keypressed());  // check for incomming data
    55ee:	87 ff       	sbrs	r24, 7
    55f0:	fc cf       	rjmp	.-8      	; 0x55ea <uart_getc>

   return UDR0;  // Return the data
    55f2:	80 91 c6 00 	lds	r24, 0x00C6

}
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	08 95       	ret

000055fa <uart_getc_std>:
 * @return    0 : No Char available, 1 : a char is available
 *
 */
uint8_t uart_keypressed (void)
{
   return ((UCSR0A & _BV(RXC0)) != 0) ? 1 : 0; // data received? return true
    55fa:	80 91 c0 00 	lds	r24, 0x00C0
 * @return  character on the UART
 *
 */
int uart_getc (FILE *dummy_file)
{
   while (!uart_keypressed());  // check for incomming data
    55fe:	87 ff       	sbrs	r24, 7
    5600:	fc cf       	rjmp	.-8      	; 0x55fa <uart_getc_std>

   return UDR0;  // Return the data
    5602:	80 91 c6 00 	lds	r24, 0x00C6
 *
 */
int16_t uart_getc_std (void)
{
   return uart_getc(NULL);
}
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	08 95       	ret

0000560a <uart_putc>:
 * @param     c          the char to send
 * @param     dummy_file not used
 *
 */
int uart_putc (char c, FILE *dummy_file)
{
    560a:	98 2f       	mov	r25, r24
   while ( !(UCSR0A & _BV(UDRE0)) );                // wait for empty tx buffer
    560c:	80 91 c0 00 	lds	r24, 0x00C0
    5610:	85 ff       	sbrs	r24, 5
    5612:	fc cf       	rjmp	.-8      	; 0x560c <uart_putc+0x2>
   UDR0 = c;                                        // Start transmittion
    5614:	90 93 c6 00 	sts	0x00C6, r25
   return c;                                        // return the char
}
    5618:	89 2f       	mov	r24, r25
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	08 95       	ret

0000561e <uart_putc_std>:
 *
 * @param     val        the char to send
 *
 */
uint8_t uart_putc_std (uint8_t val)
{
    561e:	98 2f       	mov	r25, r24
 * @param     dummy_file not used
 *
 */
int uart_putc (char c, FILE *dummy_file)
{
   while ( !(UCSR0A & _BV(UDRE0)) );                // wait for empty tx buffer
    5620:	80 91 c0 00 	lds	r24, 0x00C0
    5624:	85 ff       	sbrs	r24, 5
    5626:	fc cf       	rjmp	.-8      	; 0x5620 <uart_putc_std+0x2>
   UDR0 = c;                                        // Start transmittion
    5628:	90 93 c6 00 	sts	0x00C6, r25
 *
 */
uint8_t uart_putc_std (uint8_t val)
{
   return (uint8_t)uart_putc((uint8_t)val, NULL);
}
    562c:	89 2f       	mov	r24, r25
    562e:	08 95       	ret

00005630 <usb_init>:
#ifdef COMMUNICATION_USB
	/* Make sure USB_RXF and USB_TXE are inputs */
	USB_DDR  &= ~(USB_RXF | USB_TXE);           // USB's status signals are inputs
	USB_PORT |=  (USB_RXF | USB_TXE);           // switch internal pull up resitors on
#endif
}
    5630:	08 95       	ret

00005632 <usb_keypressed>:
	//USB_DDR  &= ~(USB_RXF | USB_TXE);               // USB's status signals are inputs
	//USB_PORT |=  (USB_RXF | USB_TXE);               // switch internal pull up resitors on
	return (!(USB_PIN & USB_RXF)) ? 0x01 : 0x00;   // FIFO is not full? return true
#endif // COMMUNICATION_USB
	return 0;
}
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	08 95       	ret

00005636 <usb_putc_std>:
   *pUSB_Fifo = c;                                  // write the byte into the USB FIFO
#endif
   return c;                                        // return the char
#endif // COMMUNICATION_USB
   return 0;
}
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	08 95       	ret

0000563c <usb_putc>:
#ifdef COMMUNICATION_USB
   return usb_putc_std(c, NULL);
#endif // COMMUNICATION_USB
   return 0;

}
    563c:	80 e0       	ldi	r24, 0x00	; 0
    563e:	08 95       	ret

00005640 <usb_getc_std>:
#else
	return *pUSB_Fifo;                     // return received char
#endif // SINGLE_CHIP
#endif // COMMUNICATION_USB
	return 0;
}
    5640:	80 e0       	ldi	r24, 0x00	; 0
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	08 95       	ret

00005646 <pwr_read_adc>:
  *
  */
uint32_t pwr_read_adc (uint8_t measurement)
{
#ifdef SINGLE_CHIP
  if(measurement == VOLTAGE_MEASUREMENT)
    5646:	81 30       	cpi	r24, 0x01	; 1
    5648:	29 f4       	brne	.+10     	; 0x5654 <pwr_read_adc+0xe>
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	40 e0       	ldi	r20, 0x00	; 0
    5650:	50 e0       	ldi	r21, 0x00	; 0
    5652:	24 c0       	rjmp	.+72     	; 0x569c <pwr_read_adc+0x56>
  {
    return 0; // Single Chip does not provide an external VCC reference on ADC
  }
  else if(measurement == TEMPERATURE_MEASUREMENT)
    5654:	82 30       	cpi	r24, 0x02	; 2
    5656:	69 f4       	brne	.+26     	; 0x5672 <pwr_read_adc+0x2c>
  {
    ADMUX = (1 << MUX3) | (1 << MUX0);   // preselect temperatur sensor
    5658:	89 e0       	ldi	r24, 0x09	; 9
    565a:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB |= (1 << MUX5);               // select temperature sensor
    565e:	80 91 7b 00 	lds	r24, 0x007B
    5662:	88 60       	ori	r24, 0x08	; 8
    5664:	80 93 7b 00 	sts	0x007B, r24
    ADMUX |= _BV(REFS1) | _BV(REFS0);    // reference is 1.6V intern
    5668:	80 91 7c 00 	lds	r24, 0x007C
    566c:	80 6c       	ori	r24, 0xC0	; 192
    566e:	80 93 7c 00 	sts	0x007C, r24
    ADMUX = _BV(MUX1) | _BV(MUX0); // external temperature sensor
    ADMUX |= (1<<REFS0);           // reference is 3,3V VCC
  }
#endif
  
  ADCSRA |= (1<<ADEN);             // enable ADC
    5672:	80 91 7a 00 	lds	r24, 0x007A
    5676:	80 68       	ori	r24, 0x80	; 128
    5678:	80 93 7a 00 	sts	0x007A, r24
  ADCSRA |= (1<<ADSC);             // single ADC conversion
    567c:	80 91 7a 00 	lds	r24, 0x007A
    5680:	80 64       	ori	r24, 0x40	; 64
    5682:	80 93 7a 00 	sts	0x007A, r24
  while ( ADCSRA & (1<<ADSC) ) {;} // wait until conversion is completed
    5686:	80 91 7a 00 	lds	r24, 0x007A
    568a:	86 fd       	sbrc	r24, 6
    568c:	fc cf       	rjmp	.-8      	; 0x5686 <pwr_read_adc+0x40>

  return ADC;
    568e:	80 91 78 00 	lds	r24, 0x0078
    5692:	90 91 79 00 	lds	r25, 0x0079
    5696:	9c 01       	movw	r18, r24
    5698:	40 e0       	ldi	r20, 0x00	; 0
    569a:	50 e0       	ldi	r21, 0x00	; 0
}
    569c:	b9 01       	movw	r22, r18
    569e:	ca 01       	movw	r24, r20
    56a0:	08 95       	ret

000056a2 <init_adc>:
  * be used.
  *
  */
void init_adc (void)
{
  PRR0 &= ~(1 << PRADC);                 // power up ADC
    56a2:	e4 e6       	ldi	r30, 0x64	; 100
    56a4:	f0 e0       	ldi	r31, 0x00	; 0
    56a6:	80 81       	ld	r24, Z
    56a8:	8e 7f       	andi	r24, 0xFE	; 254
    56aa:	80 83       	st	Z, r24
  ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // divider 64 (250 kHz clock frequency)
    56ac:	ea e7       	ldi	r30, 0x7A	; 122
    56ae:	f0 e0       	ldi	r31, 0x00	; 0
    56b0:	80 81       	ld	r24, Z
    56b2:	86 60       	ori	r24, 0x06	; 6
    56b4:	80 83       	st	Z, r24
}
    56b6:	08 95       	ret

000056b8 <temp_get_degrcelc>:
int32_t temp_get_degrcelc (void)
{
  static int32_t temp;

#ifdef SINGLE_CHIP
  uint32_t t = pwr_read_adc(TEMPERATURE_MEASUREMENT);
    56b8:	82 e0       	ldi	r24, 0x02	; 2
    56ba:	0e 94 23 2b 	call	0x5646	; 0x5646 <pwr_read_adc>
  temp = (int32_t)(((float)1.13*(float)t - 272.8) * 1000);
    56be:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <__floatunsisf>
    56c2:	27 ed       	ldi	r18, 0xD7	; 215
    56c4:	33 ea       	ldi	r19, 0xA3	; 163
    56c6:	40 e9       	ldi	r20, 0x90	; 144
    56c8:	5f e3       	ldi	r21, 0x3F	; 63
    56ca:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__mulsf3>
    56ce:	26 e6       	ldi	r18, 0x66	; 102
    56d0:	36 e6       	ldi	r19, 0x66	; 102
    56d2:	48 e8       	ldi	r20, 0x88	; 136
    56d4:	53 e4       	ldi	r21, 0x43	; 67
    56d6:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	4a e7       	ldi	r20, 0x7A	; 122
    56e0:	54 e4       	ldi	r21, 0x44	; 68
    56e2:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__mulsf3>
    56e6:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <__fixsfsi>
    56ea:	9b 01       	movw	r18, r22
    56ec:	ac 01       	movw	r20, r24
    56ee:	60 93 c0 16 	sts	0x16C0, r22
    56f2:	70 93 c1 16 	sts	0x16C1, r23
    56f6:	80 93 c2 16 	sts	0x16C2, r24
    56fa:	90 93 c3 16 	sts	0x16C3, r25
      break;
    }
  }
#endif
  return temp; // give back the temperature
}
    56fe:	ca 01       	movw	r24, r20
    5700:	08 95       	ret

00005702 <get_vcc>:
   static uint32_t volt;

// Single Chip does not provide conversion via ADC, so the Batmon is choosen instead
#ifdef SINGLE_CHIP
   uint8_t val;
   uint8_t batmon = BATMON;        // backup
    5702:	90 91 51 01 	lds	r25, 0x0151

   BATMON &= ~_BV(BAT_LOW_EN);     // disable the interrupt
    5706:	80 91 51 01 	lds	r24, 0x0151
    570a:	8f 7b       	andi	r24, 0xBF	; 191
    570c:	80 93 51 01 	sts	0x0151, r24
    5710:	2f e1       	ldi	r18, 0x1F	; 31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5712:	32 e0       	ldi	r19, 0x02	; 2

   // linear search, starting at the maximum value
   // The high range switch bit is interpreted as the MSB
   val = 0x1F;
   do{
       BATMON = (BATMON & ~0x1F) | val;
    5714:	80 91 51 01 	lds	r24, 0x0151
    5718:	80 7e       	andi	r24, 0xE0	; 224
    571a:	82 2b       	or	r24, r18
    571c:	80 93 51 01 	sts	0x0151, r24
    5720:	83 2f       	mov	r24, r19
    5722:	8a 95       	dec	r24
    5724:	f1 f7       	brne	.-4      	; 0x5722 <get_vcc+0x20>
       _delay_us(1); // wait until conversion is completed
   }while( !(BATMON & _BV(BATMON_OK)) && (--val > 0) );
    5726:	80 91 51 01 	lds	r24, 0x0151
    572a:	85 fd       	sbrc	r24, 5
    572c:	02 c0       	rjmp	.+4      	; 0x5732 <get_vcc+0x30>
    572e:	21 50       	subi	r18, 0x01	; 1
    5730:	89 f7       	brne	.-30     	; 0x5714 <get_vcc+0x12>

   BATMON = batmon;        // restore previuos value
    5732:	90 93 51 01 	sts	0x0151, r25
    5736:	62 2f       	mov	r22, r18
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	90 e0       	ldi	r25, 0x00	; 0

   if( val & 0x10 ) // BATMON_HR is set
    573e:	24 ff       	sbrs	r18, 4
    5740:	0f c0       	rjmp	.+30     	; 0x5760 <get_vcc+0x5e>
   {        
       volt = (uint32_t)(2550000UL+(val&0x0F)*75UL); // result in uV
    5742:	6f 70       	andi	r22, 0x0F	; 15
    5744:	70 70       	andi	r23, 0x00	; 0
    5746:	80 70       	andi	r24, 0x00	; 0
    5748:	90 70       	andi	r25, 0x00	; 0
    574a:	2b e4       	ldi	r18, 0x4B	; 75
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 e0       	ldi	r20, 0x00	; 0
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <__mulsi3>
    5756:	60 51       	subi	r22, 0x10	; 16
    5758:	77 41       	sbci	r23, 0x17	; 23
    575a:	89 4d       	sbci	r24, 0xD9	; 217
    575c:	9f 4f       	sbci	r25, 0xFF	; 255
    575e:	0a c0       	rjmp	.+20     	; 0x5774 <get_vcc+0x72>
   }
   else
   {
       volt = (uint32_t)(1700000UL+val*50UL);        // result in uV
    5760:	22 e3       	ldi	r18, 0x32	; 50
    5762:	30 e0       	ldi	r19, 0x00	; 0
    5764:	40 e0       	ldi	r20, 0x00	; 0
    5766:	50 e0       	ldi	r21, 0x00	; 0
    5768:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <__mulsi3>
    576c:	60 56       	subi	r22, 0x60	; 96
    576e:	7f 40       	sbci	r23, 0x0F	; 15
    5770:	86 4e       	sbci	r24, 0xE6	; 230
    5772:	9f 4f       	sbci	r25, 0xFF	; 255
    5774:	60 93 bc 16 	sts	0x16BC, r22
    5778:	70 93 bd 16 	sts	0x16BD, r23
    577c:	80 93 be 16 	sts	0x16BE, r24
    5780:	90 93 bf 16 	sts	0x16BF, r25
    5784:	60 91 bc 16 	lds	r22, 0x16BC
    5788:	70 91 bd 16 	lds	r23, 0x16BD
  volt = pwr_read_adc(VOLTAGE_MEASUREMENT); // read RAW ADC data
  volt = ((float)(1024 * 1.1) / (float)volt) * 1000000; // 1.1V reference selection
#endif

  return volt;
}
    578c:	80 91 be 16 	lds	r24, 0x16BE
    5790:	90 91 bf 16 	lds	r25, 0x16BF
    5794:	08 95       	ret

00005796 <__lshrdi3>:
    5796:	ef 92       	push	r14
    5798:	ff 92       	push	r15
    579a:	0f 93       	push	r16
    579c:	df 93       	push	r29
    579e:	cf 93       	push	r28
    57a0:	cd b7       	in	r28, 0x3d	; 61
    57a2:	de b7       	in	r29, 0x3e	; 62
    57a4:	60 97       	sbiw	r28, 0x10	; 16
    57a6:	0f b6       	in	r0, 0x3f	; 63
    57a8:	f8 94       	cli
    57aa:	de bf       	out	0x3e, r29	; 62
    57ac:	0f be       	out	0x3f, r0	; 63
    57ae:	cd bf       	out	0x3d, r28	; 61
    57b0:	a8 2f       	mov	r26, r24
    57b2:	00 23       	and	r16, r16
    57b4:	09 f4       	brne	.+2      	; 0x57b8 <__lshrdi3+0x22>
    57b6:	61 c0       	rjmp	.+194    	; 0x587a <__lshrdi3+0xe4>
    57b8:	7e 01       	movw	r14, r28
    57ba:	08 94       	sec
    57bc:	e1 1c       	adc	r14, r1
    57be:	f1 1c       	adc	r15, r1
    57c0:	88 e0       	ldi	r24, 0x08	; 8
    57c2:	f7 01       	movw	r30, r14
    57c4:	11 92       	st	Z+, r1
    57c6:	8a 95       	dec	r24
    57c8:	e9 f7       	brne	.-6      	; 0x57c4 <__lshrdi3+0x2e>
    57ca:	29 83       	std	Y+1, r18	; 0x01
    57cc:	3a 83       	std	Y+2, r19	; 0x02
    57ce:	4b 83       	std	Y+3, r20	; 0x03
    57d0:	5c 83       	std	Y+4, r21	; 0x04
    57d2:	6d 83       	std	Y+5, r22	; 0x05
    57d4:	7e 83       	std	Y+6, r23	; 0x06
    57d6:	af 83       	std	Y+7, r26	; 0x07
    57d8:	98 87       	std	Y+8, r25	; 0x08
    57da:	80 e2       	ldi	r24, 0x20	; 32
    57dc:	80 1b       	sub	r24, r16
    57de:	e8 2f       	mov	r30, r24
    57e0:	ff 27       	eor	r31, r31
    57e2:	e7 fd       	sbrc	r30, 7
    57e4:	f0 95       	com	r31
    57e6:	4d 81       	ldd	r20, Y+5	; 0x05
    57e8:	5e 81       	ldd	r21, Y+6	; 0x06
    57ea:	6f 81       	ldd	r22, Y+7	; 0x07
    57ec:	78 85       	ldd	r23, Y+8	; 0x08
    57ee:	18 16       	cp	r1, r24
    57f0:	84 f0       	brlt	.+32     	; 0x5812 <__lshrdi3+0x7c>
    57f2:	1d 86       	std	Y+13, r1	; 0x0d
    57f4:	1e 86       	std	Y+14, r1	; 0x0e
    57f6:	1f 86       	std	Y+15, r1	; 0x0f
    57f8:	18 8a       	std	Y+16, r1	; 0x10
    57fa:	88 27       	eor	r24, r24
    57fc:	99 27       	eor	r25, r25
    57fe:	8e 1b       	sub	r24, r30
    5800:	9f 0b       	sbc	r25, r31
    5802:	04 c0       	rjmp	.+8      	; 0x580c <__lshrdi3+0x76>
    5804:	76 95       	lsr	r23
    5806:	67 95       	ror	r22
    5808:	57 95       	ror	r21
    580a:	47 95       	ror	r20
    580c:	8a 95       	dec	r24
    580e:	d2 f7       	brpl	.-12     	; 0x5804 <__lshrdi3+0x6e>
    5810:	28 c0       	rjmp	.+80     	; 0x5862 <__lshrdi3+0xcc>
    5812:	20 2f       	mov	r18, r16
    5814:	33 27       	eor	r19, r19
    5816:	27 fd       	sbrc	r18, 7
    5818:	30 95       	com	r19
    581a:	db 01       	movw	r26, r22
    581c:	ca 01       	movw	r24, r20
    581e:	02 2e       	mov	r0, r18
    5820:	04 c0       	rjmp	.+8      	; 0x582a <__lshrdi3+0x94>
    5822:	b6 95       	lsr	r27
    5824:	a7 95       	ror	r26
    5826:	97 95       	ror	r25
    5828:	87 95       	ror	r24
    582a:	0a 94       	dec	r0
    582c:	d2 f7       	brpl	.-12     	; 0x5822 <__lshrdi3+0x8c>
    582e:	8d 87       	std	Y+13, r24	; 0x0d
    5830:	9e 87       	std	Y+14, r25	; 0x0e
    5832:	af 87       	std	Y+15, r26	; 0x0f
    5834:	b8 8b       	std	Y+16, r27	; 0x10
    5836:	04 c0       	rjmp	.+8      	; 0x5840 <__lshrdi3+0xaa>
    5838:	44 0f       	add	r20, r20
    583a:	55 1f       	adc	r21, r21
    583c:	66 1f       	adc	r22, r22
    583e:	77 1f       	adc	r23, r23
    5840:	ea 95       	dec	r30
    5842:	d2 f7       	brpl	.-12     	; 0x5838 <__lshrdi3+0xa2>
    5844:	89 81       	ldd	r24, Y+1	; 0x01
    5846:	9a 81       	ldd	r25, Y+2	; 0x02
    5848:	ab 81       	ldd	r26, Y+3	; 0x03
    584a:	bc 81       	ldd	r27, Y+4	; 0x04
    584c:	04 c0       	rjmp	.+8      	; 0x5856 <__lshrdi3+0xc0>
    584e:	b6 95       	lsr	r27
    5850:	a7 95       	ror	r26
    5852:	97 95       	ror	r25
    5854:	87 95       	ror	r24
    5856:	2a 95       	dec	r18
    5858:	d2 f7       	brpl	.-12     	; 0x584e <__lshrdi3+0xb8>
    585a:	48 2b       	or	r20, r24
    585c:	59 2b       	or	r21, r25
    585e:	6a 2b       	or	r22, r26
    5860:	7b 2b       	or	r23, r27
    5862:	49 87       	std	Y+9, r20	; 0x09
    5864:	5a 87       	std	Y+10, r21	; 0x0a
    5866:	6b 87       	std	Y+11, r22	; 0x0b
    5868:	7c 87       	std	Y+12, r23	; 0x0c
    586a:	29 85       	ldd	r18, Y+9	; 0x09
    586c:	3a 85       	ldd	r19, Y+10	; 0x0a
    586e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5870:	5c 85       	ldd	r21, Y+12	; 0x0c
    5872:	6d 85       	ldd	r22, Y+13	; 0x0d
    5874:	7e 85       	ldd	r23, Y+14	; 0x0e
    5876:	af 85       	ldd	r26, Y+15	; 0x0f
    5878:	98 89       	ldd	r25, Y+16	; 0x10
    587a:	8a 2f       	mov	r24, r26
    587c:	60 96       	adiw	r28, 0x10	; 16
    587e:	0f b6       	in	r0, 0x3f	; 63
    5880:	f8 94       	cli
    5882:	de bf       	out	0x3e, r29	; 62
    5884:	0f be       	out	0x3f, r0	; 63
    5886:	cd bf       	out	0x3d, r28	; 61
    5888:	cf 91       	pop	r28
    588a:	df 91       	pop	r29
    588c:	0f 91       	pop	r16
    588e:	ff 90       	pop	r15
    5890:	ef 90       	pop	r14
    5892:	08 95       	ret

00005894 <__subsf3>:
    5894:	50 58       	subi	r21, 0x80	; 128

00005896 <__addsf3>:
    5896:	bb 27       	eor	r27, r27
    5898:	aa 27       	eor	r26, r26
    589a:	0e d0       	rcall	.+28     	; 0x58b8 <__addsf3x>
    589c:	4d c1       	rjmp	.+666    	; 0x5b38 <__fp_round>
    589e:	3e d1       	rcall	.+636    	; 0x5b1c <__fp_pscA>
    58a0:	30 f0       	brcs	.+12     	; 0x58ae <__addsf3+0x18>
    58a2:	43 d1       	rcall	.+646    	; 0x5b2a <__fp_pscB>
    58a4:	20 f0       	brcs	.+8      	; 0x58ae <__addsf3+0x18>
    58a6:	31 f4       	brne	.+12     	; 0x58b4 <__addsf3+0x1e>
    58a8:	9f 3f       	cpi	r25, 0xFF	; 255
    58aa:	11 f4       	brne	.+4      	; 0x58b0 <__addsf3+0x1a>
    58ac:	1e f4       	brtc	.+6      	; 0x58b4 <__addsf3+0x1e>
    58ae:	33 c1       	rjmp	.+614    	; 0x5b16 <__fp_nan>
    58b0:	0e f4       	brtc	.+2      	; 0x58b4 <__addsf3+0x1e>
    58b2:	e0 95       	com	r30
    58b4:	e7 fb       	bst	r30, 7
    58b6:	29 c1       	rjmp	.+594    	; 0x5b0a <__fp_inf>

000058b8 <__addsf3x>:
    58b8:	e9 2f       	mov	r30, r25
    58ba:	4f d1       	rcall	.+670    	; 0x5b5a <__fp_split3>
    58bc:	80 f3       	brcs	.-32     	; 0x589e <__addsf3+0x8>
    58be:	ba 17       	cp	r27, r26
    58c0:	62 07       	cpc	r22, r18
    58c2:	73 07       	cpc	r23, r19
    58c4:	84 07       	cpc	r24, r20
    58c6:	95 07       	cpc	r25, r21
    58c8:	18 f0       	brcs	.+6      	; 0x58d0 <__addsf3x+0x18>
    58ca:	71 f4       	brne	.+28     	; 0x58e8 <__addsf3x+0x30>
    58cc:	9e f5       	brtc	.+102    	; 0x5934 <__addsf3x+0x7c>
    58ce:	67 c1       	rjmp	.+718    	; 0x5b9e <__fp_zero>
    58d0:	0e f4       	brtc	.+2      	; 0x58d4 <__addsf3x+0x1c>
    58d2:	e0 95       	com	r30
    58d4:	0b 2e       	mov	r0, r27
    58d6:	ba 2f       	mov	r27, r26
    58d8:	a0 2d       	mov	r26, r0
    58da:	0b 01       	movw	r0, r22
    58dc:	b9 01       	movw	r22, r18
    58de:	90 01       	movw	r18, r0
    58e0:	0c 01       	movw	r0, r24
    58e2:	ca 01       	movw	r24, r20
    58e4:	a0 01       	movw	r20, r0
    58e6:	11 24       	eor	r1, r1
    58e8:	ff 27       	eor	r31, r31
    58ea:	59 1b       	sub	r21, r25
    58ec:	99 f0       	breq	.+38     	; 0x5914 <__addsf3x+0x5c>
    58ee:	59 3f       	cpi	r21, 0xF9	; 249
    58f0:	50 f4       	brcc	.+20     	; 0x5906 <__addsf3x+0x4e>
    58f2:	50 3e       	cpi	r21, 0xE0	; 224
    58f4:	68 f1       	brcs	.+90     	; 0x5950 <__addsf3x+0x98>
    58f6:	1a 16       	cp	r1, r26
    58f8:	f0 40       	sbci	r31, 0x00	; 0
    58fa:	a2 2f       	mov	r26, r18
    58fc:	23 2f       	mov	r18, r19
    58fe:	34 2f       	mov	r19, r20
    5900:	44 27       	eor	r20, r20
    5902:	58 5f       	subi	r21, 0xF8	; 248
    5904:	f3 cf       	rjmp	.-26     	; 0x58ec <__addsf3x+0x34>
    5906:	46 95       	lsr	r20
    5908:	37 95       	ror	r19
    590a:	27 95       	ror	r18
    590c:	a7 95       	ror	r26
    590e:	f0 40       	sbci	r31, 0x00	; 0
    5910:	53 95       	inc	r21
    5912:	c9 f7       	brne	.-14     	; 0x5906 <__addsf3x+0x4e>
    5914:	7e f4       	brtc	.+30     	; 0x5934 <__addsf3x+0x7c>
    5916:	1f 16       	cp	r1, r31
    5918:	ba 0b       	sbc	r27, r26
    591a:	62 0b       	sbc	r22, r18
    591c:	73 0b       	sbc	r23, r19
    591e:	84 0b       	sbc	r24, r20
    5920:	ba f0       	brmi	.+46     	; 0x5950 <__addsf3x+0x98>
    5922:	91 50       	subi	r25, 0x01	; 1
    5924:	a1 f0       	breq	.+40     	; 0x594e <__addsf3x+0x96>
    5926:	ff 0f       	add	r31, r31
    5928:	bb 1f       	adc	r27, r27
    592a:	66 1f       	adc	r22, r22
    592c:	77 1f       	adc	r23, r23
    592e:	88 1f       	adc	r24, r24
    5930:	c2 f7       	brpl	.-16     	; 0x5922 <__addsf3x+0x6a>
    5932:	0e c0       	rjmp	.+28     	; 0x5950 <__addsf3x+0x98>
    5934:	ba 0f       	add	r27, r26
    5936:	62 1f       	adc	r22, r18
    5938:	73 1f       	adc	r23, r19
    593a:	84 1f       	adc	r24, r20
    593c:	48 f4       	brcc	.+18     	; 0x5950 <__addsf3x+0x98>
    593e:	87 95       	ror	r24
    5940:	77 95       	ror	r23
    5942:	67 95       	ror	r22
    5944:	b7 95       	ror	r27
    5946:	f7 95       	ror	r31
    5948:	9e 3f       	cpi	r25, 0xFE	; 254
    594a:	08 f0       	brcs	.+2      	; 0x594e <__addsf3x+0x96>
    594c:	b3 cf       	rjmp	.-154    	; 0x58b4 <__addsf3+0x1e>
    594e:	93 95       	inc	r25
    5950:	88 0f       	add	r24, r24
    5952:	08 f0       	brcs	.+2      	; 0x5956 <__addsf3x+0x9e>
    5954:	99 27       	eor	r25, r25
    5956:	ee 0f       	add	r30, r30
    5958:	97 95       	ror	r25
    595a:	87 95       	ror	r24
    595c:	08 95       	ret

0000595e <__divsf3>:
    595e:	0c d0       	rcall	.+24     	; 0x5978 <__divsf3x>
    5960:	eb c0       	rjmp	.+470    	; 0x5b38 <__fp_round>
    5962:	e3 d0       	rcall	.+454    	; 0x5b2a <__fp_pscB>
    5964:	40 f0       	brcs	.+16     	; 0x5976 <__divsf3+0x18>
    5966:	da d0       	rcall	.+436    	; 0x5b1c <__fp_pscA>
    5968:	30 f0       	brcs	.+12     	; 0x5976 <__divsf3+0x18>
    596a:	21 f4       	brne	.+8      	; 0x5974 <__divsf3+0x16>
    596c:	5f 3f       	cpi	r21, 0xFF	; 255
    596e:	19 f0       	breq	.+6      	; 0x5976 <__divsf3+0x18>
    5970:	cc c0       	rjmp	.+408    	; 0x5b0a <__fp_inf>
    5972:	51 11       	cpse	r21, r1
    5974:	15 c1       	rjmp	.+554    	; 0x5ba0 <__fp_szero>
    5976:	cf c0       	rjmp	.+414    	; 0x5b16 <__fp_nan>

00005978 <__divsf3x>:
    5978:	f0 d0       	rcall	.+480    	; 0x5b5a <__fp_split3>
    597a:	98 f3       	brcs	.-26     	; 0x5962 <__divsf3+0x4>

0000597c <__divsf3_pse>:
    597c:	99 23       	and	r25, r25
    597e:	c9 f3       	breq	.-14     	; 0x5972 <__divsf3+0x14>
    5980:	55 23       	and	r21, r21
    5982:	b1 f3       	breq	.-20     	; 0x5970 <__divsf3+0x12>
    5984:	95 1b       	sub	r25, r21
    5986:	55 0b       	sbc	r21, r21
    5988:	bb 27       	eor	r27, r27
    598a:	aa 27       	eor	r26, r26
    598c:	62 17       	cp	r22, r18
    598e:	73 07       	cpc	r23, r19
    5990:	84 07       	cpc	r24, r20
    5992:	38 f0       	brcs	.+14     	; 0x59a2 <__divsf3_pse+0x26>
    5994:	9f 5f       	subi	r25, 0xFF	; 255
    5996:	5f 4f       	sbci	r21, 0xFF	; 255
    5998:	22 0f       	add	r18, r18
    599a:	33 1f       	adc	r19, r19
    599c:	44 1f       	adc	r20, r20
    599e:	aa 1f       	adc	r26, r26
    59a0:	a9 f3       	breq	.-22     	; 0x598c <__divsf3_pse+0x10>
    59a2:	33 d0       	rcall	.+102    	; 0x5a0a <__divsf3_pse+0x8e>
    59a4:	0e 2e       	mov	r0, r30
    59a6:	3a f0       	brmi	.+14     	; 0x59b6 <__divsf3_pse+0x3a>
    59a8:	e0 e8       	ldi	r30, 0x80	; 128
    59aa:	30 d0       	rcall	.+96     	; 0x5a0c <__divsf3_pse+0x90>
    59ac:	91 50       	subi	r25, 0x01	; 1
    59ae:	50 40       	sbci	r21, 0x00	; 0
    59b0:	e6 95       	lsr	r30
    59b2:	00 1c       	adc	r0, r0
    59b4:	ca f7       	brpl	.-14     	; 0x59a8 <__divsf3_pse+0x2c>
    59b6:	29 d0       	rcall	.+82     	; 0x5a0a <__divsf3_pse+0x8e>
    59b8:	fe 2f       	mov	r31, r30
    59ba:	27 d0       	rcall	.+78     	; 0x5a0a <__divsf3_pse+0x8e>
    59bc:	66 0f       	add	r22, r22
    59be:	77 1f       	adc	r23, r23
    59c0:	88 1f       	adc	r24, r24
    59c2:	bb 1f       	adc	r27, r27
    59c4:	26 17       	cp	r18, r22
    59c6:	37 07       	cpc	r19, r23
    59c8:	48 07       	cpc	r20, r24
    59ca:	ab 07       	cpc	r26, r27
    59cc:	b0 e8       	ldi	r27, 0x80	; 128
    59ce:	09 f0       	breq	.+2      	; 0x59d2 <__divsf3_pse+0x56>
    59d0:	bb 0b       	sbc	r27, r27
    59d2:	80 2d       	mov	r24, r0
    59d4:	bf 01       	movw	r22, r30
    59d6:	ff 27       	eor	r31, r31
    59d8:	93 58       	subi	r25, 0x83	; 131
    59da:	5f 4f       	sbci	r21, 0xFF	; 255
    59dc:	2a f0       	brmi	.+10     	; 0x59e8 <__divsf3_pse+0x6c>
    59de:	9e 3f       	cpi	r25, 0xFE	; 254
    59e0:	51 05       	cpc	r21, r1
    59e2:	68 f0       	brcs	.+26     	; 0x59fe <__divsf3_pse+0x82>
    59e4:	92 c0       	rjmp	.+292    	; 0x5b0a <__fp_inf>
    59e6:	dc c0       	rjmp	.+440    	; 0x5ba0 <__fp_szero>
    59e8:	5f 3f       	cpi	r21, 0xFF	; 255
    59ea:	ec f3       	brlt	.-6      	; 0x59e6 <__divsf3_pse+0x6a>
    59ec:	98 3e       	cpi	r25, 0xE8	; 232
    59ee:	dc f3       	brlt	.-10     	; 0x59e6 <__divsf3_pse+0x6a>
    59f0:	86 95       	lsr	r24
    59f2:	77 95       	ror	r23
    59f4:	67 95       	ror	r22
    59f6:	b7 95       	ror	r27
    59f8:	f7 95       	ror	r31
    59fa:	9f 5f       	subi	r25, 0xFF	; 255
    59fc:	c9 f7       	brne	.-14     	; 0x59f0 <__divsf3_pse+0x74>
    59fe:	88 0f       	add	r24, r24
    5a00:	91 1d       	adc	r25, r1
    5a02:	96 95       	lsr	r25
    5a04:	87 95       	ror	r24
    5a06:	97 f9       	bld	r25, 7
    5a08:	08 95       	ret
    5a0a:	e1 e0       	ldi	r30, 0x01	; 1
    5a0c:	66 0f       	add	r22, r22
    5a0e:	77 1f       	adc	r23, r23
    5a10:	88 1f       	adc	r24, r24
    5a12:	bb 1f       	adc	r27, r27
    5a14:	62 17       	cp	r22, r18
    5a16:	73 07       	cpc	r23, r19
    5a18:	84 07       	cpc	r24, r20
    5a1a:	ba 07       	cpc	r27, r26
    5a1c:	20 f0       	brcs	.+8      	; 0x5a26 <__divsf3_pse+0xaa>
    5a1e:	62 1b       	sub	r22, r18
    5a20:	73 0b       	sbc	r23, r19
    5a22:	84 0b       	sbc	r24, r20
    5a24:	ba 0b       	sbc	r27, r26
    5a26:	ee 1f       	adc	r30, r30
    5a28:	88 f7       	brcc	.-30     	; 0x5a0c <__divsf3_pse+0x90>
    5a2a:	e0 95       	com	r30
    5a2c:	08 95       	ret

00005a2e <__fixsfsi>:
    5a2e:	04 d0       	rcall	.+8      	; 0x5a38 <__fixunssfsi>
    5a30:	68 94       	set
    5a32:	b1 11       	cpse	r27, r1
    5a34:	b5 c0       	rjmp	.+362    	; 0x5ba0 <__fp_szero>
    5a36:	08 95       	ret

00005a38 <__fixunssfsi>:
    5a38:	98 d0       	rcall	.+304    	; 0x5b6a <__fp_splitA>
    5a3a:	88 f0       	brcs	.+34     	; 0x5a5e <__fixunssfsi+0x26>
    5a3c:	9f 57       	subi	r25, 0x7F	; 127
    5a3e:	90 f0       	brcs	.+36     	; 0x5a64 <__fixunssfsi+0x2c>
    5a40:	b9 2f       	mov	r27, r25
    5a42:	99 27       	eor	r25, r25
    5a44:	b7 51       	subi	r27, 0x17	; 23
    5a46:	a0 f0       	brcs	.+40     	; 0x5a70 <__fixunssfsi+0x38>
    5a48:	d1 f0       	breq	.+52     	; 0x5a7e <__fixunssfsi+0x46>
    5a4a:	66 0f       	add	r22, r22
    5a4c:	77 1f       	adc	r23, r23
    5a4e:	88 1f       	adc	r24, r24
    5a50:	99 1f       	adc	r25, r25
    5a52:	1a f0       	brmi	.+6      	; 0x5a5a <__fixunssfsi+0x22>
    5a54:	ba 95       	dec	r27
    5a56:	c9 f7       	brne	.-14     	; 0x5a4a <__fixunssfsi+0x12>
    5a58:	12 c0       	rjmp	.+36     	; 0x5a7e <__fixunssfsi+0x46>
    5a5a:	b1 30       	cpi	r27, 0x01	; 1
    5a5c:	81 f0       	breq	.+32     	; 0x5a7e <__fixunssfsi+0x46>
    5a5e:	9f d0       	rcall	.+318    	; 0x5b9e <__fp_zero>
    5a60:	b1 e0       	ldi	r27, 0x01	; 1
    5a62:	08 95       	ret
    5a64:	9c c0       	rjmp	.+312    	; 0x5b9e <__fp_zero>
    5a66:	67 2f       	mov	r22, r23
    5a68:	78 2f       	mov	r23, r24
    5a6a:	88 27       	eor	r24, r24
    5a6c:	b8 5f       	subi	r27, 0xF8	; 248
    5a6e:	39 f0       	breq	.+14     	; 0x5a7e <__fixunssfsi+0x46>
    5a70:	b9 3f       	cpi	r27, 0xF9	; 249
    5a72:	cc f3       	brlt	.-14     	; 0x5a66 <__fixunssfsi+0x2e>
    5a74:	86 95       	lsr	r24
    5a76:	77 95       	ror	r23
    5a78:	67 95       	ror	r22
    5a7a:	b3 95       	inc	r27
    5a7c:	d9 f7       	brne	.-10     	; 0x5a74 <__fixunssfsi+0x3c>
    5a7e:	3e f4       	brtc	.+14     	; 0x5a8e <__fixunssfsi+0x56>
    5a80:	90 95       	com	r25
    5a82:	80 95       	com	r24
    5a84:	70 95       	com	r23
    5a86:	61 95       	neg	r22
    5a88:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8e:	08 95       	ret

00005a90 <__floatunsisf>:
    5a90:	e8 94       	clt
    5a92:	09 c0       	rjmp	.+18     	; 0x5aa6 <__floatsisf+0x12>

00005a94 <__floatsisf>:
    5a94:	97 fb       	bst	r25, 7
    5a96:	3e f4       	brtc	.+14     	; 0x5aa6 <__floatsisf+0x12>
    5a98:	90 95       	com	r25
    5a9a:	80 95       	com	r24
    5a9c:	70 95       	com	r23
    5a9e:	61 95       	neg	r22
    5aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    5aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa6:	99 23       	and	r25, r25
    5aa8:	a9 f0       	breq	.+42     	; 0x5ad4 <__floatsisf+0x40>
    5aaa:	f9 2f       	mov	r31, r25
    5aac:	96 e9       	ldi	r25, 0x96	; 150
    5aae:	bb 27       	eor	r27, r27
    5ab0:	93 95       	inc	r25
    5ab2:	f6 95       	lsr	r31
    5ab4:	87 95       	ror	r24
    5ab6:	77 95       	ror	r23
    5ab8:	67 95       	ror	r22
    5aba:	b7 95       	ror	r27
    5abc:	f1 11       	cpse	r31, r1
    5abe:	f8 cf       	rjmp	.-16     	; 0x5ab0 <__floatsisf+0x1c>
    5ac0:	fa f4       	brpl	.+62     	; 0x5b00 <__floatsisf+0x6c>
    5ac2:	bb 0f       	add	r27, r27
    5ac4:	11 f4       	brne	.+4      	; 0x5aca <__floatsisf+0x36>
    5ac6:	60 ff       	sbrs	r22, 0
    5ac8:	1b c0       	rjmp	.+54     	; 0x5b00 <__floatsisf+0x6c>
    5aca:	6f 5f       	subi	r22, 0xFF	; 255
    5acc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ace:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad2:	16 c0       	rjmp	.+44     	; 0x5b00 <__floatsisf+0x6c>
    5ad4:	88 23       	and	r24, r24
    5ad6:	11 f0       	breq	.+4      	; 0x5adc <__floatsisf+0x48>
    5ad8:	96 e9       	ldi	r25, 0x96	; 150
    5ada:	11 c0       	rjmp	.+34     	; 0x5afe <__floatsisf+0x6a>
    5adc:	77 23       	and	r23, r23
    5ade:	21 f0       	breq	.+8      	; 0x5ae8 <__floatsisf+0x54>
    5ae0:	9e e8       	ldi	r25, 0x8E	; 142
    5ae2:	87 2f       	mov	r24, r23
    5ae4:	76 2f       	mov	r23, r22
    5ae6:	05 c0       	rjmp	.+10     	; 0x5af2 <__floatsisf+0x5e>
    5ae8:	66 23       	and	r22, r22
    5aea:	71 f0       	breq	.+28     	; 0x5b08 <__floatsisf+0x74>
    5aec:	96 e8       	ldi	r25, 0x86	; 134
    5aee:	86 2f       	mov	r24, r22
    5af0:	70 e0       	ldi	r23, 0x00	; 0
    5af2:	60 e0       	ldi	r22, 0x00	; 0
    5af4:	2a f0       	brmi	.+10     	; 0x5b00 <__floatsisf+0x6c>
    5af6:	9a 95       	dec	r25
    5af8:	66 0f       	add	r22, r22
    5afa:	77 1f       	adc	r23, r23
    5afc:	88 1f       	adc	r24, r24
    5afe:	da f7       	brpl	.-10     	; 0x5af6 <__floatsisf+0x62>
    5b00:	88 0f       	add	r24, r24
    5b02:	96 95       	lsr	r25
    5b04:	87 95       	ror	r24
    5b06:	97 f9       	bld	r25, 7
    5b08:	08 95       	ret

00005b0a <__fp_inf>:
    5b0a:	97 f9       	bld	r25, 7
    5b0c:	9f 67       	ori	r25, 0x7F	; 127
    5b0e:	80 e8       	ldi	r24, 0x80	; 128
    5b10:	70 e0       	ldi	r23, 0x00	; 0
    5b12:	60 e0       	ldi	r22, 0x00	; 0
    5b14:	08 95       	ret

00005b16 <__fp_nan>:
    5b16:	9f ef       	ldi	r25, 0xFF	; 255
    5b18:	80 ec       	ldi	r24, 0xC0	; 192
    5b1a:	08 95       	ret

00005b1c <__fp_pscA>:
    5b1c:	00 24       	eor	r0, r0
    5b1e:	0a 94       	dec	r0
    5b20:	16 16       	cp	r1, r22
    5b22:	17 06       	cpc	r1, r23
    5b24:	18 06       	cpc	r1, r24
    5b26:	09 06       	cpc	r0, r25
    5b28:	08 95       	ret

00005b2a <__fp_pscB>:
    5b2a:	00 24       	eor	r0, r0
    5b2c:	0a 94       	dec	r0
    5b2e:	12 16       	cp	r1, r18
    5b30:	13 06       	cpc	r1, r19
    5b32:	14 06       	cpc	r1, r20
    5b34:	05 06       	cpc	r0, r21
    5b36:	08 95       	ret

00005b38 <__fp_round>:
    5b38:	09 2e       	mov	r0, r25
    5b3a:	03 94       	inc	r0
    5b3c:	00 0c       	add	r0, r0
    5b3e:	11 f4       	brne	.+4      	; 0x5b44 <__fp_round+0xc>
    5b40:	88 23       	and	r24, r24
    5b42:	52 f0       	brmi	.+20     	; 0x5b58 <__fp_round+0x20>
    5b44:	bb 0f       	add	r27, r27
    5b46:	40 f4       	brcc	.+16     	; 0x5b58 <__fp_round+0x20>
    5b48:	bf 2b       	or	r27, r31
    5b4a:	11 f4       	brne	.+4      	; 0x5b50 <__fp_round+0x18>
    5b4c:	60 ff       	sbrs	r22, 0
    5b4e:	04 c0       	rjmp	.+8      	; 0x5b58 <__fp_round+0x20>
    5b50:	6f 5f       	subi	r22, 0xFF	; 255
    5b52:	7f 4f       	sbci	r23, 0xFF	; 255
    5b54:	8f 4f       	sbci	r24, 0xFF	; 255
    5b56:	9f 4f       	sbci	r25, 0xFF	; 255
    5b58:	08 95       	ret

00005b5a <__fp_split3>:
    5b5a:	57 fd       	sbrc	r21, 7
    5b5c:	90 58       	subi	r25, 0x80	; 128
    5b5e:	44 0f       	add	r20, r20
    5b60:	55 1f       	adc	r21, r21
    5b62:	59 f0       	breq	.+22     	; 0x5b7a <__fp_splitA+0x10>
    5b64:	5f 3f       	cpi	r21, 0xFF	; 255
    5b66:	71 f0       	breq	.+28     	; 0x5b84 <__fp_splitA+0x1a>
    5b68:	47 95       	ror	r20

00005b6a <__fp_splitA>:
    5b6a:	88 0f       	add	r24, r24
    5b6c:	97 fb       	bst	r25, 7
    5b6e:	99 1f       	adc	r25, r25
    5b70:	61 f0       	breq	.+24     	; 0x5b8a <__fp_splitA+0x20>
    5b72:	9f 3f       	cpi	r25, 0xFF	; 255
    5b74:	79 f0       	breq	.+30     	; 0x5b94 <__fp_splitA+0x2a>
    5b76:	87 95       	ror	r24
    5b78:	08 95       	ret
    5b7a:	12 16       	cp	r1, r18
    5b7c:	13 06       	cpc	r1, r19
    5b7e:	14 06       	cpc	r1, r20
    5b80:	55 1f       	adc	r21, r21
    5b82:	f2 cf       	rjmp	.-28     	; 0x5b68 <__fp_split3+0xe>
    5b84:	46 95       	lsr	r20
    5b86:	f1 df       	rcall	.-30     	; 0x5b6a <__fp_splitA>
    5b88:	08 c0       	rjmp	.+16     	; 0x5b9a <__fp_splitA+0x30>
    5b8a:	16 16       	cp	r1, r22
    5b8c:	17 06       	cpc	r1, r23
    5b8e:	18 06       	cpc	r1, r24
    5b90:	99 1f       	adc	r25, r25
    5b92:	f1 cf       	rjmp	.-30     	; 0x5b76 <__fp_splitA+0xc>
    5b94:	86 95       	lsr	r24
    5b96:	71 05       	cpc	r23, r1
    5b98:	61 05       	cpc	r22, r1
    5b9a:	08 94       	sec
    5b9c:	08 95       	ret

00005b9e <__fp_zero>:
    5b9e:	e8 94       	clt

00005ba0 <__fp_szero>:
    5ba0:	bb 27       	eor	r27, r27
    5ba2:	66 27       	eor	r22, r22
    5ba4:	77 27       	eor	r23, r23
    5ba6:	cb 01       	movw	r24, r22
    5ba8:	97 f9       	bld	r25, 7
    5baa:	08 95       	ret

00005bac <__mulsf3>:
    5bac:	0b d0       	rcall	.+22     	; 0x5bc4 <__mulsf3x>
    5bae:	c4 cf       	rjmp	.-120    	; 0x5b38 <__fp_round>
    5bb0:	b5 df       	rcall	.-150    	; 0x5b1c <__fp_pscA>
    5bb2:	28 f0       	brcs	.+10     	; 0x5bbe <__mulsf3+0x12>
    5bb4:	ba df       	rcall	.-140    	; 0x5b2a <__fp_pscB>
    5bb6:	18 f0       	brcs	.+6      	; 0x5bbe <__mulsf3+0x12>
    5bb8:	95 23       	and	r25, r21
    5bba:	09 f0       	breq	.+2      	; 0x5bbe <__mulsf3+0x12>
    5bbc:	a6 cf       	rjmp	.-180    	; 0x5b0a <__fp_inf>
    5bbe:	ab cf       	rjmp	.-170    	; 0x5b16 <__fp_nan>
    5bc0:	11 24       	eor	r1, r1
    5bc2:	ee cf       	rjmp	.-36     	; 0x5ba0 <__fp_szero>

00005bc4 <__mulsf3x>:
    5bc4:	ca df       	rcall	.-108    	; 0x5b5a <__fp_split3>
    5bc6:	a0 f3       	brcs	.-24     	; 0x5bb0 <__mulsf3+0x4>

00005bc8 <__mulsf3_pse>:
    5bc8:	95 9f       	mul	r25, r21
    5bca:	d1 f3       	breq	.-12     	; 0x5bc0 <__mulsf3+0x14>
    5bcc:	95 0f       	add	r25, r21
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	55 1f       	adc	r21, r21
    5bd2:	62 9f       	mul	r22, r18
    5bd4:	f0 01       	movw	r30, r0
    5bd6:	72 9f       	mul	r23, r18
    5bd8:	bb 27       	eor	r27, r27
    5bda:	f0 0d       	add	r31, r0
    5bdc:	b1 1d       	adc	r27, r1
    5bde:	63 9f       	mul	r22, r19
    5be0:	aa 27       	eor	r26, r26
    5be2:	f0 0d       	add	r31, r0
    5be4:	b1 1d       	adc	r27, r1
    5be6:	aa 1f       	adc	r26, r26
    5be8:	64 9f       	mul	r22, r20
    5bea:	66 27       	eor	r22, r22
    5bec:	b0 0d       	add	r27, r0
    5bee:	a1 1d       	adc	r26, r1
    5bf0:	66 1f       	adc	r22, r22
    5bf2:	82 9f       	mul	r24, r18
    5bf4:	22 27       	eor	r18, r18
    5bf6:	b0 0d       	add	r27, r0
    5bf8:	a1 1d       	adc	r26, r1
    5bfa:	62 1f       	adc	r22, r18
    5bfc:	73 9f       	mul	r23, r19
    5bfe:	b0 0d       	add	r27, r0
    5c00:	a1 1d       	adc	r26, r1
    5c02:	62 1f       	adc	r22, r18
    5c04:	83 9f       	mul	r24, r19
    5c06:	a0 0d       	add	r26, r0
    5c08:	61 1d       	adc	r22, r1
    5c0a:	22 1f       	adc	r18, r18
    5c0c:	74 9f       	mul	r23, r20
    5c0e:	33 27       	eor	r19, r19
    5c10:	a0 0d       	add	r26, r0
    5c12:	61 1d       	adc	r22, r1
    5c14:	23 1f       	adc	r18, r19
    5c16:	84 9f       	mul	r24, r20
    5c18:	60 0d       	add	r22, r0
    5c1a:	21 1d       	adc	r18, r1
    5c1c:	82 2f       	mov	r24, r18
    5c1e:	76 2f       	mov	r23, r22
    5c20:	6a 2f       	mov	r22, r26
    5c22:	11 24       	eor	r1, r1
    5c24:	9f 57       	subi	r25, 0x7F	; 127
    5c26:	50 40       	sbci	r21, 0x00	; 0
    5c28:	8a f0       	brmi	.+34     	; 0x5c4c <__mulsf3_pse+0x84>
    5c2a:	e1 f0       	breq	.+56     	; 0x5c64 <__mulsf3_pse+0x9c>
    5c2c:	88 23       	and	r24, r24
    5c2e:	4a f0       	brmi	.+18     	; 0x5c42 <__mulsf3_pse+0x7a>
    5c30:	ee 0f       	add	r30, r30
    5c32:	ff 1f       	adc	r31, r31
    5c34:	bb 1f       	adc	r27, r27
    5c36:	66 1f       	adc	r22, r22
    5c38:	77 1f       	adc	r23, r23
    5c3a:	88 1f       	adc	r24, r24
    5c3c:	91 50       	subi	r25, 0x01	; 1
    5c3e:	50 40       	sbci	r21, 0x00	; 0
    5c40:	a9 f7       	brne	.-22     	; 0x5c2c <__mulsf3_pse+0x64>
    5c42:	9e 3f       	cpi	r25, 0xFE	; 254
    5c44:	51 05       	cpc	r21, r1
    5c46:	70 f0       	brcs	.+28     	; 0x5c64 <__mulsf3_pse+0x9c>
    5c48:	60 cf       	rjmp	.-320    	; 0x5b0a <__fp_inf>
    5c4a:	aa cf       	rjmp	.-172    	; 0x5ba0 <__fp_szero>
    5c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5c4e:	ec f3       	brlt	.-6      	; 0x5c4a <__mulsf3_pse+0x82>
    5c50:	98 3e       	cpi	r25, 0xE8	; 232
    5c52:	dc f3       	brlt	.-10     	; 0x5c4a <__mulsf3_pse+0x82>
    5c54:	86 95       	lsr	r24
    5c56:	77 95       	ror	r23
    5c58:	67 95       	ror	r22
    5c5a:	b7 95       	ror	r27
    5c5c:	f7 95       	ror	r31
    5c5e:	e7 95       	ror	r30
    5c60:	9f 5f       	subi	r25, 0xFF	; 255
    5c62:	c1 f7       	brne	.-16     	; 0x5c54 <__mulsf3_pse+0x8c>
    5c64:	fe 2b       	or	r31, r30
    5c66:	88 0f       	add	r24, r24
    5c68:	91 1d       	adc	r25, r1
    5c6a:	96 95       	lsr	r25
    5c6c:	87 95       	ror	r24
    5c6e:	97 f9       	bld	r25, 7
    5c70:	08 95       	ret

00005c72 <__mulsi3>:
    5c72:	62 9f       	mul	r22, r18
    5c74:	d0 01       	movw	r26, r0
    5c76:	73 9f       	mul	r23, r19
    5c78:	f0 01       	movw	r30, r0
    5c7a:	82 9f       	mul	r24, r18
    5c7c:	e0 0d       	add	r30, r0
    5c7e:	f1 1d       	adc	r31, r1
    5c80:	64 9f       	mul	r22, r20
    5c82:	e0 0d       	add	r30, r0
    5c84:	f1 1d       	adc	r31, r1
    5c86:	92 9f       	mul	r25, r18
    5c88:	f0 0d       	add	r31, r0
    5c8a:	83 9f       	mul	r24, r19
    5c8c:	f0 0d       	add	r31, r0
    5c8e:	74 9f       	mul	r23, r20
    5c90:	f0 0d       	add	r31, r0
    5c92:	65 9f       	mul	r22, r21
    5c94:	f0 0d       	add	r31, r0
    5c96:	99 27       	eor	r25, r25
    5c98:	72 9f       	mul	r23, r18
    5c9a:	b0 0d       	add	r27, r0
    5c9c:	e1 1d       	adc	r30, r1
    5c9e:	f9 1f       	adc	r31, r25
    5ca0:	63 9f       	mul	r22, r19
    5ca2:	b0 0d       	add	r27, r0
    5ca4:	e1 1d       	adc	r30, r1
    5ca6:	f9 1f       	adc	r31, r25
    5ca8:	bd 01       	movw	r22, r26
    5caa:	cf 01       	movw	r24, r30
    5cac:	11 24       	eor	r1, r1
    5cae:	08 95       	ret

00005cb0 <__udivmodhi4>:
    5cb0:	aa 1b       	sub	r26, r26
    5cb2:	bb 1b       	sub	r27, r27
    5cb4:	51 e1       	ldi	r21, 0x11	; 17
    5cb6:	07 c0       	rjmp	.+14     	; 0x5cc6 <__udivmodhi4_ep>

00005cb8 <__udivmodhi4_loop>:
    5cb8:	aa 1f       	adc	r26, r26
    5cba:	bb 1f       	adc	r27, r27
    5cbc:	a6 17       	cp	r26, r22
    5cbe:	b7 07       	cpc	r27, r23
    5cc0:	10 f0       	brcs	.+4      	; 0x5cc6 <__udivmodhi4_ep>
    5cc2:	a6 1b       	sub	r26, r22
    5cc4:	b7 0b       	sbc	r27, r23

00005cc6 <__udivmodhi4_ep>:
    5cc6:	88 1f       	adc	r24, r24
    5cc8:	99 1f       	adc	r25, r25
    5cca:	5a 95       	dec	r21
    5ccc:	a9 f7       	brne	.-22     	; 0x5cb8 <__udivmodhi4_loop>
    5cce:	80 95       	com	r24
    5cd0:	90 95       	com	r25
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	08 95       	ret

00005cd8 <__divmodhi4>:
    5cd8:	97 fb       	bst	r25, 7
    5cda:	09 2e       	mov	r0, r25
    5cdc:	07 26       	eor	r0, r23
    5cde:	0a d0       	rcall	.+20     	; 0x5cf4 <__divmodhi4_neg1>
    5ce0:	77 fd       	sbrc	r23, 7
    5ce2:	04 d0       	rcall	.+8      	; 0x5cec <__divmodhi4_neg2>
    5ce4:	e5 df       	rcall	.-54     	; 0x5cb0 <__udivmodhi4>
    5ce6:	06 d0       	rcall	.+12     	; 0x5cf4 <__divmodhi4_neg1>
    5ce8:	00 20       	and	r0, r0
    5cea:	1a f4       	brpl	.+6      	; 0x5cf2 <__divmodhi4_exit>

00005cec <__divmodhi4_neg2>:
    5cec:	70 95       	com	r23
    5cee:	61 95       	neg	r22
    5cf0:	7f 4f       	sbci	r23, 0xFF	; 255

00005cf2 <__divmodhi4_exit>:
    5cf2:	08 95       	ret

00005cf4 <__divmodhi4_neg1>:
    5cf4:	f6 f7       	brtc	.-4      	; 0x5cf2 <__divmodhi4_exit>
    5cf6:	90 95       	com	r25
    5cf8:	81 95       	neg	r24
    5cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cfc:	08 95       	ret

00005cfe <__udivmodsi4>:
    5cfe:	a1 e2       	ldi	r26, 0x21	; 33
    5d00:	1a 2e       	mov	r1, r26
    5d02:	aa 1b       	sub	r26, r26
    5d04:	bb 1b       	sub	r27, r27
    5d06:	fd 01       	movw	r30, r26
    5d08:	0d c0       	rjmp	.+26     	; 0x5d24 <__udivmodsi4_ep>

00005d0a <__udivmodsi4_loop>:
    5d0a:	aa 1f       	adc	r26, r26
    5d0c:	bb 1f       	adc	r27, r27
    5d0e:	ee 1f       	adc	r30, r30
    5d10:	ff 1f       	adc	r31, r31
    5d12:	a2 17       	cp	r26, r18
    5d14:	b3 07       	cpc	r27, r19
    5d16:	e4 07       	cpc	r30, r20
    5d18:	f5 07       	cpc	r31, r21
    5d1a:	20 f0       	brcs	.+8      	; 0x5d24 <__udivmodsi4_ep>
    5d1c:	a2 1b       	sub	r26, r18
    5d1e:	b3 0b       	sbc	r27, r19
    5d20:	e4 0b       	sbc	r30, r20
    5d22:	f5 0b       	sbc	r31, r21

00005d24 <__udivmodsi4_ep>:
    5d24:	66 1f       	adc	r22, r22
    5d26:	77 1f       	adc	r23, r23
    5d28:	88 1f       	adc	r24, r24
    5d2a:	99 1f       	adc	r25, r25
    5d2c:	1a 94       	dec	r1
    5d2e:	69 f7       	brne	.-38     	; 0x5d0a <__udivmodsi4_loop>
    5d30:	60 95       	com	r22
    5d32:	70 95       	com	r23
    5d34:	80 95       	com	r24
    5d36:	90 95       	com	r25
    5d38:	9b 01       	movw	r18, r22
    5d3a:	ac 01       	movw	r20, r24
    5d3c:	bd 01       	movw	r22, r26
    5d3e:	cf 01       	movw	r24, r30
    5d40:	08 95       	ret

00005d42 <atoi>:
    5d42:	fc 01       	movw	r30, r24
    5d44:	88 27       	eor	r24, r24
    5d46:	99 27       	eor	r25, r25
    5d48:	e8 94       	clt
    5d4a:	21 91       	ld	r18, Z+
    5d4c:	20 32       	cpi	r18, 0x20	; 32
    5d4e:	e9 f3       	breq	.-6      	; 0x5d4a <atoi+0x8>
    5d50:	29 30       	cpi	r18, 0x09	; 9
    5d52:	10 f0       	brcs	.+4      	; 0x5d58 <atoi+0x16>
    5d54:	2e 30       	cpi	r18, 0x0E	; 14
    5d56:	c8 f3       	brcs	.-14     	; 0x5d4a <atoi+0x8>
    5d58:	2b 32       	cpi	r18, 0x2B	; 43
    5d5a:	41 f0       	breq	.+16     	; 0x5d6c <atoi+0x2a>
    5d5c:	2d 32       	cpi	r18, 0x2D	; 45
    5d5e:	39 f4       	brne	.+14     	; 0x5d6e <atoi+0x2c>
    5d60:	68 94       	set
    5d62:	04 c0       	rjmp	.+8      	; 0x5d6c <atoi+0x2a>
    5d64:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <__mulhi_const_10>
    5d68:	82 0f       	add	r24, r18
    5d6a:	91 1d       	adc	r25, r1
    5d6c:	21 91       	ld	r18, Z+
    5d6e:	20 53       	subi	r18, 0x30	; 48
    5d70:	2a 30       	cpi	r18, 0x0A	; 10
    5d72:	c0 f3       	brcs	.-16     	; 0x5d64 <atoi+0x22>
    5d74:	1e f4       	brtc	.+6      	; 0x5d7c <atoi+0x3a>
    5d76:	90 95       	com	r25
    5d78:	81 95       	neg	r24
    5d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d7c:	08 95       	ret

00005d7e <memcpy>:
    5d7e:	fb 01       	movw	r30, r22
    5d80:	dc 01       	movw	r26, r24
    5d82:	02 c0       	rjmp	.+4      	; 0x5d88 <memcpy+0xa>
    5d84:	01 90       	ld	r0, Z+
    5d86:	0d 92       	st	X+, r0
    5d88:	41 50       	subi	r20, 0x01	; 1
    5d8a:	50 40       	sbci	r21, 0x00	; 0
    5d8c:	d8 f7       	brcc	.-10     	; 0x5d84 <memcpy+0x6>
    5d8e:	08 95       	ret

00005d90 <strchr>:
    5d90:	fc 01       	movw	r30, r24
    5d92:	81 91       	ld	r24, Z+
    5d94:	86 17       	cp	r24, r22
    5d96:	21 f0       	breq	.+8      	; 0x5da0 <strchr+0x10>
    5d98:	88 23       	and	r24, r24
    5d9a:	d9 f7       	brne	.-10     	; 0x5d92 <strchr+0x2>
    5d9c:	99 27       	eor	r25, r25
    5d9e:	08 95       	ret
    5da0:	31 97       	sbiw	r30, 0x01	; 1
    5da2:	cf 01       	movw	r24, r30
    5da4:	08 95       	ret

00005da6 <strcmp>:
    5da6:	fb 01       	movw	r30, r22
    5da8:	dc 01       	movw	r26, r24
    5daa:	8d 91       	ld	r24, X+
    5dac:	01 90       	ld	r0, Z+
    5dae:	80 19       	sub	r24, r0
    5db0:	01 10       	cpse	r0, r1
    5db2:	d9 f3       	breq	.-10     	; 0x5daa <strcmp+0x4>
    5db4:	99 0b       	sbc	r25, r25
    5db6:	08 95       	ret

00005db8 <strcpy>:
    5db8:	fb 01       	movw	r30, r22
    5dba:	dc 01       	movw	r26, r24
    5dbc:	01 90       	ld	r0, Z+
    5dbe:	0d 92       	st	X+, r0
    5dc0:	00 20       	and	r0, r0
    5dc2:	e1 f7       	brne	.-8      	; 0x5dbc <strcpy+0x4>
    5dc4:	08 95       	ret

00005dc6 <itoa>:
    5dc6:	fb 01       	movw	r30, r22
    5dc8:	9f 01       	movw	r18, r30
    5dca:	e8 94       	clt
    5dcc:	42 30       	cpi	r20, 0x02	; 2
    5dce:	c4 f0       	brlt	.+48     	; 0x5e00 <itoa+0x3a>
    5dd0:	45 32       	cpi	r20, 0x25	; 37
    5dd2:	b4 f4       	brge	.+44     	; 0x5e00 <itoa+0x3a>
    5dd4:	4a 30       	cpi	r20, 0x0A	; 10
    5dd6:	29 f4       	brne	.+10     	; 0x5de2 <itoa+0x1c>
    5dd8:	97 fb       	bst	r25, 7
    5dda:	1e f4       	brtc	.+6      	; 0x5de2 <itoa+0x1c>
    5ddc:	90 95       	com	r25
    5dde:	81 95       	neg	r24
    5de0:	9f 4f       	sbci	r25, 0xFF	; 255
    5de2:	64 2f       	mov	r22, r20
    5de4:	77 27       	eor	r23, r23
    5de6:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__udivmodhi4>
    5dea:	80 5d       	subi	r24, 0xD0	; 208
    5dec:	8a 33       	cpi	r24, 0x3A	; 58
    5dee:	0c f0       	brlt	.+2      	; 0x5df2 <itoa+0x2c>
    5df0:	89 5d       	subi	r24, 0xD9	; 217
    5df2:	81 93       	st	Z+, r24
    5df4:	cb 01       	movw	r24, r22
    5df6:	00 97       	sbiw	r24, 0x00	; 0
    5df8:	a1 f7       	brne	.-24     	; 0x5de2 <itoa+0x1c>
    5dfa:	16 f4       	brtc	.+4      	; 0x5e00 <itoa+0x3a>
    5dfc:	5d e2       	ldi	r21, 0x2D	; 45
    5dfe:	51 93       	st	Z+, r21
    5e00:	10 82       	st	Z, r1
    5e02:	c9 01       	movw	r24, r18
    5e04:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <strrev>

00005e08 <__mulhi_const_10>:
    5e08:	7a e0       	ldi	r23, 0x0A	; 10
    5e0a:	97 9f       	mul	r25, r23
    5e0c:	90 2d       	mov	r25, r0
    5e0e:	87 9f       	mul	r24, r23
    5e10:	80 2d       	mov	r24, r0
    5e12:	91 0d       	add	r25, r1
    5e14:	11 24       	eor	r1, r1
    5e16:	08 95       	ret

00005e18 <fprintf>:
    5e18:	df 93       	push	r29
    5e1a:	cf 93       	push	r28
    5e1c:	cd b7       	in	r28, 0x3d	; 61
    5e1e:	de b7       	in	r29, 0x3e	; 62
    5e20:	9e 01       	movw	r18, r28
    5e22:	27 5f       	subi	r18, 0xF7	; 247
    5e24:	3f 4f       	sbci	r19, 0xFF	; 255
    5e26:	8d 81       	ldd	r24, Y+5	; 0x05
    5e28:	9e 81       	ldd	r25, Y+6	; 0x06
    5e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e2c:	78 85       	ldd	r23, Y+8	; 0x08
    5e2e:	a9 01       	movw	r20, r18
    5e30:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <vfprintf>
    5e34:	cf 91       	pop	r28
    5e36:	df 91       	pop	r29
    5e38:	08 95       	ret

00005e3a <fputs>:
    5e3a:	ef 92       	push	r14
    5e3c:	ff 92       	push	r15
    5e3e:	0f 93       	push	r16
    5e40:	1f 93       	push	r17
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	7c 01       	movw	r14, r24
    5e48:	8b 01       	movw	r16, r22
    5e4a:	db 01       	movw	r26, r22
    5e4c:	13 96       	adiw	r26, 0x03	; 3
    5e4e:	8c 91       	ld	r24, X
    5e50:	81 fd       	sbrc	r24, 1
    5e52:	03 c0       	rjmp	.+6      	; 0x5e5a <fputs+0x20>
    5e54:	cf ef       	ldi	r28, 0xFF	; 255
    5e56:	df ef       	ldi	r29, 0xFF	; 255
    5e58:	13 c0       	rjmp	.+38     	; 0x5e80 <fputs+0x46>
    5e5a:	c0 e0       	ldi	r28, 0x00	; 0
    5e5c:	d0 e0       	ldi	r29, 0x00	; 0
    5e5e:	0b c0       	rjmp	.+22     	; 0x5e76 <fputs+0x3c>
    5e60:	d8 01       	movw	r26, r16
    5e62:	18 96       	adiw	r26, 0x08	; 8
    5e64:	ed 91       	ld	r30, X+
    5e66:	fc 91       	ld	r31, X
    5e68:	19 97       	sbiw	r26, 0x09	; 9
    5e6a:	b8 01       	movw	r22, r16
    5e6c:	09 95       	icall
    5e6e:	89 2b       	or	r24, r25
    5e70:	11 f0       	breq	.+4      	; 0x5e76 <fputs+0x3c>
    5e72:	cf ef       	ldi	r28, 0xFF	; 255
    5e74:	df ef       	ldi	r29, 0xFF	; 255
    5e76:	f7 01       	movw	r30, r14
    5e78:	81 91       	ld	r24, Z+
    5e7a:	7f 01       	movw	r14, r30
    5e7c:	88 23       	and	r24, r24
    5e7e:	81 f7       	brne	.-32     	; 0x5e60 <fputs+0x26>
    5e80:	ce 01       	movw	r24, r28
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	1f 91       	pop	r17
    5e88:	0f 91       	pop	r16
    5e8a:	ff 90       	pop	r15
    5e8c:	ef 90       	pop	r14
    5e8e:	08 95       	ret

00005e90 <printf>:
    5e90:	df 93       	push	r29
    5e92:	cf 93       	push	r28
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
    5e98:	fe 01       	movw	r30, r28
    5e9a:	35 96       	adiw	r30, 0x05	; 5
    5e9c:	61 91       	ld	r22, Z+
    5e9e:	71 91       	ld	r23, Z+
    5ea0:	80 91 32 1f 	lds	r24, 0x1F32
    5ea4:	90 91 33 1f 	lds	r25, 0x1F33
    5ea8:	af 01       	movw	r20, r30
    5eaa:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <vfprintf>
    5eae:	cf 91       	pop	r28
    5eb0:	df 91       	pop	r29
    5eb2:	08 95       	ret

00005eb4 <puts>:
    5eb4:	0f 93       	push	r16
    5eb6:	1f 93       	push	r17
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	8c 01       	movw	r16, r24
    5ebe:	e0 91 32 1f 	lds	r30, 0x1F32
    5ec2:	f0 91 33 1f 	lds	r31, 0x1F33
    5ec6:	83 81       	ldd	r24, Z+3	; 0x03
    5ec8:	81 ff       	sbrs	r24, 1
    5eca:	21 c0       	rjmp	.+66     	; 0x5f0e <puts+0x5a>
    5ecc:	c0 e0       	ldi	r28, 0x00	; 0
    5ece:	d0 e0       	ldi	r29, 0x00	; 0
    5ed0:	0d c0       	rjmp	.+26     	; 0x5eec <puts+0x38>
    5ed2:	e0 91 32 1f 	lds	r30, 0x1F32
    5ed6:	f0 91 33 1f 	lds	r31, 0x1F33
    5eda:	20 85       	ldd	r18, Z+8	; 0x08
    5edc:	31 85       	ldd	r19, Z+9	; 0x09
    5ede:	bf 01       	movw	r22, r30
    5ee0:	f9 01       	movw	r30, r18
    5ee2:	09 95       	icall
    5ee4:	89 2b       	or	r24, r25
    5ee6:	11 f0       	breq	.+4      	; 0x5eec <puts+0x38>
    5ee8:	cf ef       	ldi	r28, 0xFF	; 255
    5eea:	df ef       	ldi	r29, 0xFF	; 255
    5eec:	f8 01       	movw	r30, r16
    5eee:	81 91       	ld	r24, Z+
    5ef0:	8f 01       	movw	r16, r30
    5ef2:	88 23       	and	r24, r24
    5ef4:	71 f7       	brne	.-36     	; 0x5ed2 <puts+0x1e>
    5ef6:	e0 91 32 1f 	lds	r30, 0x1F32
    5efa:	f0 91 33 1f 	lds	r31, 0x1F33
    5efe:	20 85       	ldd	r18, Z+8	; 0x08
    5f00:	31 85       	ldd	r19, Z+9	; 0x09
    5f02:	8a e0       	ldi	r24, 0x0A	; 10
    5f04:	bf 01       	movw	r22, r30
    5f06:	f9 01       	movw	r30, r18
    5f08:	09 95       	icall
    5f0a:	89 2b       	or	r24, r25
    5f0c:	11 f0       	breq	.+4      	; 0x5f12 <puts+0x5e>
    5f0e:	cf ef       	ldi	r28, 0xFF	; 255
    5f10:	df ef       	ldi	r29, 0xFF	; 255
    5f12:	ce 01       	movw	r24, r28
    5f14:	df 91       	pop	r29
    5f16:	cf 91       	pop	r28
    5f18:	1f 91       	pop	r17
    5f1a:	0f 91       	pop	r16
    5f1c:	08 95       	ret

00005f1e <sprintf>:
    5f1e:	0f 93       	push	r16
    5f20:	1f 93       	push	r17
    5f22:	df 93       	push	r29
    5f24:	cf 93       	push	r28
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	2e 97       	sbiw	r28, 0x0e	; 14
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	0d 89       	ldd	r16, Y+21	; 0x15
    5f38:	1e 89       	ldd	r17, Y+22	; 0x16
    5f3a:	86 e0       	ldi	r24, 0x06	; 6
    5f3c:	8c 83       	std	Y+4, r24	; 0x04
    5f3e:	1a 83       	std	Y+2, r17	; 0x02
    5f40:	09 83       	std	Y+1, r16	; 0x01
    5f42:	8f ef       	ldi	r24, 0xFF	; 255
    5f44:	9f e7       	ldi	r25, 0x7F	; 127
    5f46:	9e 83       	std	Y+6, r25	; 0x06
    5f48:	8d 83       	std	Y+5, r24	; 0x05
    5f4a:	9e 01       	movw	r18, r28
    5f4c:	27 5e       	subi	r18, 0xE7	; 231
    5f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f50:	ce 01       	movw	r24, r28
    5f52:	01 96       	adiw	r24, 0x01	; 1
    5f54:	6f 89       	ldd	r22, Y+23	; 0x17
    5f56:	78 8d       	ldd	r23, Y+24	; 0x18
    5f58:	a9 01       	movw	r20, r18
    5f5a:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <vfprintf>
    5f5e:	2f 81       	ldd	r18, Y+7	; 0x07
    5f60:	38 85       	ldd	r19, Y+8	; 0x08
    5f62:	02 0f       	add	r16, r18
    5f64:	13 1f       	adc	r17, r19
    5f66:	f8 01       	movw	r30, r16
    5f68:	10 82       	st	Z, r1
    5f6a:	2e 96       	adiw	r28, 0x0e	; 14
    5f6c:	0f b6       	in	r0, 0x3f	; 63
    5f6e:	f8 94       	cli
    5f70:	de bf       	out	0x3e, r29	; 62
    5f72:	0f be       	out	0x3f, r0	; 63
    5f74:	cd bf       	out	0x3d, r28	; 61
    5f76:	cf 91       	pop	r28
    5f78:	df 91       	pop	r29
    5f7a:	1f 91       	pop	r17
    5f7c:	0f 91       	pop	r16
    5f7e:	08 95       	ret

00005f80 <sscanf>:
    5f80:	df 93       	push	r29
    5f82:	cf 93       	push	r28
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
    5f88:	2e 97       	sbiw	r28, 0x0e	; 14
    5f8a:	0f b6       	in	r0, 0x3f	; 63
    5f8c:	f8 94       	cli
    5f8e:	de bf       	out	0x3e, r29	; 62
    5f90:	0f be       	out	0x3f, r0	; 63
    5f92:	cd bf       	out	0x3d, r28	; 61
    5f94:	85 e0       	ldi	r24, 0x05	; 5
    5f96:	8c 83       	std	Y+4, r24	; 0x04
    5f98:	8b 89       	ldd	r24, Y+19	; 0x13
    5f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    5f9c:	9a 83       	std	Y+2, r25	; 0x02
    5f9e:	89 83       	std	Y+1, r24	; 0x01
    5fa0:	9e 01       	movw	r18, r28
    5fa2:	29 5e       	subi	r18, 0xE9	; 233
    5fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa6:	ce 01       	movw	r24, r28
    5fa8:	01 96       	adiw	r24, 0x01	; 1
    5faa:	6d 89       	ldd	r22, Y+21	; 0x15
    5fac:	7e 89       	ldd	r23, Y+22	; 0x16
    5fae:	a9 01       	movw	r20, r18
    5fb0:	0e 94 98 33 	call	0x6730	; 0x6730 <vfscanf>
    5fb4:	2e 96       	adiw	r28, 0x0e	; 14
    5fb6:	0f b6       	in	r0, 0x3f	; 63
    5fb8:	f8 94       	cli
    5fba:	de bf       	out	0x3e, r29	; 62
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	cd bf       	out	0x3d, r28	; 61
    5fc0:	cf 91       	pop	r28
    5fc2:	df 91       	pop	r29
    5fc4:	08 95       	ret

00005fc6 <vfprintf>:
    5fc6:	2f 92       	push	r2
    5fc8:	3f 92       	push	r3
    5fca:	4f 92       	push	r4
    5fcc:	5f 92       	push	r5
    5fce:	6f 92       	push	r6
    5fd0:	7f 92       	push	r7
    5fd2:	8f 92       	push	r8
    5fd4:	9f 92       	push	r9
    5fd6:	af 92       	push	r10
    5fd8:	bf 92       	push	r11
    5fda:	cf 92       	push	r12
    5fdc:	df 92       	push	r13
    5fde:	ef 92       	push	r14
    5fe0:	ff 92       	push	r15
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	df 93       	push	r29
    5fe8:	cf 93       	push	r28
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    5fee:	2b 97       	sbiw	r28, 0x0b	; 11
    5ff0:	0f b6       	in	r0, 0x3f	; 63
    5ff2:	f8 94       	cli
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	0f be       	out	0x3f, r0	; 63
    5ff8:	cd bf       	out	0x3d, r28	; 61
    5ffa:	3c 01       	movw	r6, r24
    5ffc:	2b 01       	movw	r4, r22
    5ffe:	5a 01       	movw	r10, r20
    6000:	fc 01       	movw	r30, r24
    6002:	17 82       	std	Z+7, r1	; 0x07
    6004:	16 82       	std	Z+6, r1	; 0x06
    6006:	83 81       	ldd	r24, Z+3	; 0x03
    6008:	81 fd       	sbrc	r24, 1
    600a:	03 c0       	rjmp	.+6      	; 0x6012 <vfprintf+0x4c>
    600c:	6f ef       	ldi	r22, 0xFF	; 255
    600e:	7f ef       	ldi	r23, 0xFF	; 255
    6010:	c6 c1       	rjmp	.+908    	; 0x639e <vfprintf+0x3d8>
    6012:	9a e0       	ldi	r25, 0x0A	; 10
    6014:	89 2e       	mov	r8, r25
    6016:	1e 01       	movw	r2, r28
    6018:	08 94       	sec
    601a:	21 1c       	adc	r2, r1
    601c:	31 1c       	adc	r3, r1
    601e:	f3 01       	movw	r30, r6
    6020:	23 81       	ldd	r18, Z+3	; 0x03
    6022:	f2 01       	movw	r30, r4
    6024:	23 fd       	sbrc	r18, 3
    6026:	85 91       	lpm	r24, Z+
    6028:	23 ff       	sbrs	r18, 3
    602a:	81 91       	ld	r24, Z+
    602c:	2f 01       	movw	r4, r30
    602e:	88 23       	and	r24, r24
    6030:	09 f4       	brne	.+2      	; 0x6034 <vfprintf+0x6e>
    6032:	b2 c1       	rjmp	.+868    	; 0x6398 <vfprintf+0x3d2>
    6034:	85 32       	cpi	r24, 0x25	; 37
    6036:	39 f4       	brne	.+14     	; 0x6046 <vfprintf+0x80>
    6038:	23 fd       	sbrc	r18, 3
    603a:	85 91       	lpm	r24, Z+
    603c:	23 ff       	sbrs	r18, 3
    603e:	81 91       	ld	r24, Z+
    6040:	2f 01       	movw	r4, r30
    6042:	85 32       	cpi	r24, 0x25	; 37
    6044:	29 f4       	brne	.+10     	; 0x6050 <vfprintf+0x8a>
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	b3 01       	movw	r22, r6
    604a:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    604e:	e7 cf       	rjmp	.-50     	; 0x601e <vfprintf+0x58>
    6050:	98 2f       	mov	r25, r24
    6052:	ff 24       	eor	r15, r15
    6054:	ee 24       	eor	r14, r14
    6056:	99 24       	eor	r9, r9
    6058:	ff e1       	ldi	r31, 0x1F	; 31
    605a:	ff 15       	cp	r31, r15
    605c:	d0 f0       	brcs	.+52     	; 0x6092 <vfprintf+0xcc>
    605e:	9b 32       	cpi	r25, 0x2B	; 43
    6060:	69 f0       	breq	.+26     	; 0x607c <vfprintf+0xb6>
    6062:	9c 32       	cpi	r25, 0x2C	; 44
    6064:	28 f4       	brcc	.+10     	; 0x6070 <vfprintf+0xaa>
    6066:	90 32       	cpi	r25, 0x20	; 32
    6068:	59 f0       	breq	.+22     	; 0x6080 <vfprintf+0xba>
    606a:	93 32       	cpi	r25, 0x23	; 35
    606c:	91 f4       	brne	.+36     	; 0x6092 <vfprintf+0xcc>
    606e:	0e c0       	rjmp	.+28     	; 0x608c <vfprintf+0xc6>
    6070:	9d 32       	cpi	r25, 0x2D	; 45
    6072:	49 f0       	breq	.+18     	; 0x6086 <vfprintf+0xc0>
    6074:	90 33       	cpi	r25, 0x30	; 48
    6076:	69 f4       	brne	.+26     	; 0x6092 <vfprintf+0xcc>
    6078:	41 e0       	ldi	r20, 0x01	; 1
    607a:	24 c0       	rjmp	.+72     	; 0x60c4 <vfprintf+0xfe>
    607c:	52 e0       	ldi	r21, 0x02	; 2
    607e:	f5 2a       	or	r15, r21
    6080:	84 e0       	ldi	r24, 0x04	; 4
    6082:	f8 2a       	or	r15, r24
    6084:	28 c0       	rjmp	.+80     	; 0x60d6 <vfprintf+0x110>
    6086:	98 e0       	ldi	r25, 0x08	; 8
    6088:	f9 2a       	or	r15, r25
    608a:	25 c0       	rjmp	.+74     	; 0x60d6 <vfprintf+0x110>
    608c:	e0 e1       	ldi	r30, 0x10	; 16
    608e:	fe 2a       	or	r15, r30
    6090:	22 c0       	rjmp	.+68     	; 0x60d6 <vfprintf+0x110>
    6092:	f7 fc       	sbrc	r15, 7
    6094:	29 c0       	rjmp	.+82     	; 0x60e8 <vfprintf+0x122>
    6096:	89 2f       	mov	r24, r25
    6098:	80 53       	subi	r24, 0x30	; 48
    609a:	8a 30       	cpi	r24, 0x0A	; 10
    609c:	70 f4       	brcc	.+28     	; 0x60ba <vfprintf+0xf4>
    609e:	f6 fe       	sbrs	r15, 6
    60a0:	05 c0       	rjmp	.+10     	; 0x60ac <vfprintf+0xe6>
    60a2:	98 9c       	mul	r9, r8
    60a4:	90 2c       	mov	r9, r0
    60a6:	11 24       	eor	r1, r1
    60a8:	98 0e       	add	r9, r24
    60aa:	15 c0       	rjmp	.+42     	; 0x60d6 <vfprintf+0x110>
    60ac:	e8 9c       	mul	r14, r8
    60ae:	e0 2c       	mov	r14, r0
    60b0:	11 24       	eor	r1, r1
    60b2:	e8 0e       	add	r14, r24
    60b4:	f0 e2       	ldi	r31, 0x20	; 32
    60b6:	ff 2a       	or	r15, r31
    60b8:	0e c0       	rjmp	.+28     	; 0x60d6 <vfprintf+0x110>
    60ba:	9e 32       	cpi	r25, 0x2E	; 46
    60bc:	29 f4       	brne	.+10     	; 0x60c8 <vfprintf+0x102>
    60be:	f6 fc       	sbrc	r15, 6
    60c0:	6b c1       	rjmp	.+726    	; 0x6398 <vfprintf+0x3d2>
    60c2:	40 e4       	ldi	r20, 0x40	; 64
    60c4:	f4 2a       	or	r15, r20
    60c6:	07 c0       	rjmp	.+14     	; 0x60d6 <vfprintf+0x110>
    60c8:	9c 36       	cpi	r25, 0x6C	; 108
    60ca:	19 f4       	brne	.+6      	; 0x60d2 <vfprintf+0x10c>
    60cc:	50 e8       	ldi	r21, 0x80	; 128
    60ce:	f5 2a       	or	r15, r21
    60d0:	02 c0       	rjmp	.+4      	; 0x60d6 <vfprintf+0x110>
    60d2:	98 36       	cpi	r25, 0x68	; 104
    60d4:	49 f4       	brne	.+18     	; 0x60e8 <vfprintf+0x122>
    60d6:	f2 01       	movw	r30, r4
    60d8:	23 fd       	sbrc	r18, 3
    60da:	95 91       	lpm	r25, Z+
    60dc:	23 ff       	sbrs	r18, 3
    60de:	91 91       	ld	r25, Z+
    60e0:	2f 01       	movw	r4, r30
    60e2:	99 23       	and	r25, r25
    60e4:	09 f0       	breq	.+2      	; 0x60e8 <vfprintf+0x122>
    60e6:	b8 cf       	rjmp	.-144    	; 0x6058 <vfprintf+0x92>
    60e8:	89 2f       	mov	r24, r25
    60ea:	85 54       	subi	r24, 0x45	; 69
    60ec:	83 30       	cpi	r24, 0x03	; 3
    60ee:	18 f0       	brcs	.+6      	; 0x60f6 <vfprintf+0x130>
    60f0:	80 52       	subi	r24, 0x20	; 32
    60f2:	83 30       	cpi	r24, 0x03	; 3
    60f4:	38 f4       	brcc	.+14     	; 0x6104 <vfprintf+0x13e>
    60f6:	44 e0       	ldi	r20, 0x04	; 4
    60f8:	50 e0       	ldi	r21, 0x00	; 0
    60fa:	a4 0e       	add	r10, r20
    60fc:	b5 1e       	adc	r11, r21
    60fe:	5f e3       	ldi	r21, 0x3F	; 63
    6100:	59 83       	std	Y+1, r21	; 0x01
    6102:	0f c0       	rjmp	.+30     	; 0x6122 <vfprintf+0x15c>
    6104:	93 36       	cpi	r25, 0x63	; 99
    6106:	31 f0       	breq	.+12     	; 0x6114 <vfprintf+0x14e>
    6108:	93 37       	cpi	r25, 0x73	; 115
    610a:	79 f0       	breq	.+30     	; 0x612a <vfprintf+0x164>
    610c:	93 35       	cpi	r25, 0x53	; 83
    610e:	09 f0       	breq	.+2      	; 0x6112 <vfprintf+0x14c>
    6110:	56 c0       	rjmp	.+172    	; 0x61be <vfprintf+0x1f8>
    6112:	20 c0       	rjmp	.+64     	; 0x6154 <vfprintf+0x18e>
    6114:	f5 01       	movw	r30, r10
    6116:	80 81       	ld	r24, Z
    6118:	89 83       	std	Y+1, r24	; 0x01
    611a:	42 e0       	ldi	r20, 0x02	; 2
    611c:	50 e0       	ldi	r21, 0x00	; 0
    611e:	a4 0e       	add	r10, r20
    6120:	b5 1e       	adc	r11, r21
    6122:	61 01       	movw	r12, r2
    6124:	01 e0       	ldi	r16, 0x01	; 1
    6126:	10 e0       	ldi	r17, 0x00	; 0
    6128:	12 c0       	rjmp	.+36     	; 0x614e <vfprintf+0x188>
    612a:	f5 01       	movw	r30, r10
    612c:	c0 80       	ld	r12, Z
    612e:	d1 80       	ldd	r13, Z+1	; 0x01
    6130:	f6 fc       	sbrc	r15, 6
    6132:	03 c0       	rjmp	.+6      	; 0x613a <vfprintf+0x174>
    6134:	6f ef       	ldi	r22, 0xFF	; 255
    6136:	7f ef       	ldi	r23, 0xFF	; 255
    6138:	02 c0       	rjmp	.+4      	; 0x613e <vfprintf+0x178>
    613a:	69 2d       	mov	r22, r9
    613c:	70 e0       	ldi	r23, 0x00	; 0
    613e:	42 e0       	ldi	r20, 0x02	; 2
    6140:	50 e0       	ldi	r21, 0x00	; 0
    6142:	a4 0e       	add	r10, r20
    6144:	b5 1e       	adc	r11, r21
    6146:	c6 01       	movw	r24, r12
    6148:	0e 94 01 35 	call	0x6a02	; 0x6a02 <strnlen>
    614c:	8c 01       	movw	r16, r24
    614e:	5f e7       	ldi	r21, 0x7F	; 127
    6150:	f5 22       	and	r15, r21
    6152:	14 c0       	rjmp	.+40     	; 0x617c <vfprintf+0x1b6>
    6154:	f5 01       	movw	r30, r10
    6156:	c0 80       	ld	r12, Z
    6158:	d1 80       	ldd	r13, Z+1	; 0x01
    615a:	f6 fc       	sbrc	r15, 6
    615c:	03 c0       	rjmp	.+6      	; 0x6164 <vfprintf+0x19e>
    615e:	6f ef       	ldi	r22, 0xFF	; 255
    6160:	7f ef       	ldi	r23, 0xFF	; 255
    6162:	02 c0       	rjmp	.+4      	; 0x6168 <vfprintf+0x1a2>
    6164:	69 2d       	mov	r22, r9
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	42 e0       	ldi	r20, 0x02	; 2
    616a:	50 e0       	ldi	r21, 0x00	; 0
    616c:	a4 0e       	add	r10, r20
    616e:	b5 1e       	adc	r11, r21
    6170:	c6 01       	movw	r24, r12
    6172:	0e 94 f6 34 	call	0x69ec	; 0x69ec <strnlen_P>
    6176:	8c 01       	movw	r16, r24
    6178:	50 e8       	ldi	r21, 0x80	; 128
    617a:	f5 2a       	or	r15, r21
    617c:	f3 fe       	sbrs	r15, 3
    617e:	07 c0       	rjmp	.+14     	; 0x618e <vfprintf+0x1c8>
    6180:	1a c0       	rjmp	.+52     	; 0x61b6 <vfprintf+0x1f0>
    6182:	80 e2       	ldi	r24, 0x20	; 32
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	b3 01       	movw	r22, r6
    6188:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    618c:	ea 94       	dec	r14
    618e:	8e 2d       	mov	r24, r14
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	08 17       	cp	r16, r24
    6194:	19 07       	cpc	r17, r25
    6196:	a8 f3       	brcs	.-22     	; 0x6182 <vfprintf+0x1bc>
    6198:	0e c0       	rjmp	.+28     	; 0x61b6 <vfprintf+0x1f0>
    619a:	f6 01       	movw	r30, r12
    619c:	f7 fc       	sbrc	r15, 7
    619e:	85 91       	lpm	r24, Z+
    61a0:	f7 fe       	sbrs	r15, 7
    61a2:	81 91       	ld	r24, Z+
    61a4:	6f 01       	movw	r12, r30
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	b3 01       	movw	r22, r6
    61aa:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    61ae:	e1 10       	cpse	r14, r1
    61b0:	ea 94       	dec	r14
    61b2:	01 50       	subi	r16, 0x01	; 1
    61b4:	10 40       	sbci	r17, 0x00	; 0
    61b6:	01 15       	cp	r16, r1
    61b8:	11 05       	cpc	r17, r1
    61ba:	79 f7       	brne	.-34     	; 0x619a <vfprintf+0x1d4>
    61bc:	ea c0       	rjmp	.+468    	; 0x6392 <vfprintf+0x3cc>
    61be:	94 36       	cpi	r25, 0x64	; 100
    61c0:	11 f0       	breq	.+4      	; 0x61c6 <vfprintf+0x200>
    61c2:	99 36       	cpi	r25, 0x69	; 105
    61c4:	69 f5       	brne	.+90     	; 0x6220 <vfprintf+0x25a>
    61c6:	f7 fe       	sbrs	r15, 7
    61c8:	08 c0       	rjmp	.+16     	; 0x61da <vfprintf+0x214>
    61ca:	f5 01       	movw	r30, r10
    61cc:	20 81       	ld	r18, Z
    61ce:	31 81       	ldd	r19, Z+1	; 0x01
    61d0:	42 81       	ldd	r20, Z+2	; 0x02
    61d2:	53 81       	ldd	r21, Z+3	; 0x03
    61d4:	84 e0       	ldi	r24, 0x04	; 4
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	0a c0       	rjmp	.+20     	; 0x61ee <vfprintf+0x228>
    61da:	f5 01       	movw	r30, r10
    61dc:	80 81       	ld	r24, Z
    61de:	91 81       	ldd	r25, Z+1	; 0x01
    61e0:	9c 01       	movw	r18, r24
    61e2:	44 27       	eor	r20, r20
    61e4:	37 fd       	sbrc	r19, 7
    61e6:	40 95       	com	r20
    61e8:	54 2f       	mov	r21, r20
    61ea:	82 e0       	ldi	r24, 0x02	; 2
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	a8 0e       	add	r10, r24
    61f0:	b9 1e       	adc	r11, r25
    61f2:	9f e6       	ldi	r25, 0x6F	; 111
    61f4:	f9 22       	and	r15, r25
    61f6:	57 ff       	sbrs	r21, 7
    61f8:	09 c0       	rjmp	.+18     	; 0x620c <vfprintf+0x246>
    61fa:	50 95       	com	r21
    61fc:	40 95       	com	r20
    61fe:	30 95       	com	r19
    6200:	21 95       	neg	r18
    6202:	3f 4f       	sbci	r19, 0xFF	; 255
    6204:	4f 4f       	sbci	r20, 0xFF	; 255
    6206:	5f 4f       	sbci	r21, 0xFF	; 255
    6208:	e0 e8       	ldi	r30, 0x80	; 128
    620a:	fe 2a       	or	r15, r30
    620c:	ca 01       	movw	r24, r20
    620e:	b9 01       	movw	r22, r18
    6210:	a1 01       	movw	r20, r2
    6212:	2a e0       	ldi	r18, 0x0A	; 10
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__ultoa_invert>
    621a:	d8 2e       	mov	r13, r24
    621c:	d2 18       	sub	r13, r2
    621e:	40 c0       	rjmp	.+128    	; 0x62a0 <vfprintf+0x2da>
    6220:	95 37       	cpi	r25, 0x75	; 117
    6222:	29 f4       	brne	.+10     	; 0x622e <vfprintf+0x268>
    6224:	1f 2d       	mov	r17, r15
    6226:	1f 7e       	andi	r17, 0xEF	; 239
    6228:	2a e0       	ldi	r18, 0x0A	; 10
    622a:	30 e0       	ldi	r19, 0x00	; 0
    622c:	1d c0       	rjmp	.+58     	; 0x6268 <vfprintf+0x2a2>
    622e:	1f 2d       	mov	r17, r15
    6230:	19 7f       	andi	r17, 0xF9	; 249
    6232:	9f 36       	cpi	r25, 0x6F	; 111
    6234:	61 f0       	breq	.+24     	; 0x624e <vfprintf+0x288>
    6236:	90 37       	cpi	r25, 0x70	; 112
    6238:	20 f4       	brcc	.+8      	; 0x6242 <vfprintf+0x27c>
    623a:	98 35       	cpi	r25, 0x58	; 88
    623c:	09 f0       	breq	.+2      	; 0x6240 <vfprintf+0x27a>
    623e:	ac c0       	rjmp	.+344    	; 0x6398 <vfprintf+0x3d2>
    6240:	0f c0       	rjmp	.+30     	; 0x6260 <vfprintf+0x29a>
    6242:	90 37       	cpi	r25, 0x70	; 112
    6244:	39 f0       	breq	.+14     	; 0x6254 <vfprintf+0x28e>
    6246:	98 37       	cpi	r25, 0x78	; 120
    6248:	09 f0       	breq	.+2      	; 0x624c <vfprintf+0x286>
    624a:	a6 c0       	rjmp	.+332    	; 0x6398 <vfprintf+0x3d2>
    624c:	04 c0       	rjmp	.+8      	; 0x6256 <vfprintf+0x290>
    624e:	28 e0       	ldi	r18, 0x08	; 8
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	0a c0       	rjmp	.+20     	; 0x6268 <vfprintf+0x2a2>
    6254:	10 61       	ori	r17, 0x10	; 16
    6256:	14 fd       	sbrc	r17, 4
    6258:	14 60       	ori	r17, 0x04	; 4
    625a:	20 e1       	ldi	r18, 0x10	; 16
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	04 c0       	rjmp	.+8      	; 0x6268 <vfprintf+0x2a2>
    6260:	14 fd       	sbrc	r17, 4
    6262:	16 60       	ori	r17, 0x06	; 6
    6264:	20 e1       	ldi	r18, 0x10	; 16
    6266:	32 e0       	ldi	r19, 0x02	; 2
    6268:	17 ff       	sbrs	r17, 7
    626a:	08 c0       	rjmp	.+16     	; 0x627c <vfprintf+0x2b6>
    626c:	f5 01       	movw	r30, r10
    626e:	60 81       	ld	r22, Z
    6270:	71 81       	ldd	r23, Z+1	; 0x01
    6272:	82 81       	ldd	r24, Z+2	; 0x02
    6274:	93 81       	ldd	r25, Z+3	; 0x03
    6276:	44 e0       	ldi	r20, 0x04	; 4
    6278:	50 e0       	ldi	r21, 0x00	; 0
    627a:	08 c0       	rjmp	.+16     	; 0x628c <vfprintf+0x2c6>
    627c:	f5 01       	movw	r30, r10
    627e:	80 81       	ld	r24, Z
    6280:	91 81       	ldd	r25, Z+1	; 0x01
    6282:	bc 01       	movw	r22, r24
    6284:	80 e0       	ldi	r24, 0x00	; 0
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	42 e0       	ldi	r20, 0x02	; 2
    628a:	50 e0       	ldi	r21, 0x00	; 0
    628c:	a4 0e       	add	r10, r20
    628e:	b5 1e       	adc	r11, r21
    6290:	a1 01       	movw	r20, r2
    6292:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <__ultoa_invert>
    6296:	d8 2e       	mov	r13, r24
    6298:	d2 18       	sub	r13, r2
    629a:	8f e7       	ldi	r24, 0x7F	; 127
    629c:	f8 2e       	mov	r15, r24
    629e:	f1 22       	and	r15, r17
    62a0:	f6 fe       	sbrs	r15, 6
    62a2:	0b c0       	rjmp	.+22     	; 0x62ba <vfprintf+0x2f4>
    62a4:	5e ef       	ldi	r21, 0xFE	; 254
    62a6:	f5 22       	and	r15, r21
    62a8:	d9 14       	cp	r13, r9
    62aa:	38 f4       	brcc	.+14     	; 0x62ba <vfprintf+0x2f4>
    62ac:	f4 fe       	sbrs	r15, 4
    62ae:	07 c0       	rjmp	.+14     	; 0x62be <vfprintf+0x2f8>
    62b0:	f2 fc       	sbrc	r15, 2
    62b2:	05 c0       	rjmp	.+10     	; 0x62be <vfprintf+0x2f8>
    62b4:	8f ee       	ldi	r24, 0xEF	; 239
    62b6:	f8 22       	and	r15, r24
    62b8:	02 c0       	rjmp	.+4      	; 0x62be <vfprintf+0x2f8>
    62ba:	1d 2d       	mov	r17, r13
    62bc:	01 c0       	rjmp	.+2      	; 0x62c0 <vfprintf+0x2fa>
    62be:	19 2d       	mov	r17, r9
    62c0:	f4 fe       	sbrs	r15, 4
    62c2:	0d c0       	rjmp	.+26     	; 0x62de <vfprintf+0x318>
    62c4:	fe 01       	movw	r30, r28
    62c6:	ed 0d       	add	r30, r13
    62c8:	f1 1d       	adc	r31, r1
    62ca:	80 81       	ld	r24, Z
    62cc:	80 33       	cpi	r24, 0x30	; 48
    62ce:	19 f4       	brne	.+6      	; 0x62d6 <vfprintf+0x310>
    62d0:	99 ee       	ldi	r25, 0xE9	; 233
    62d2:	f9 22       	and	r15, r25
    62d4:	08 c0       	rjmp	.+16     	; 0x62e6 <vfprintf+0x320>
    62d6:	1f 5f       	subi	r17, 0xFF	; 255
    62d8:	f2 fe       	sbrs	r15, 2
    62da:	05 c0       	rjmp	.+10     	; 0x62e6 <vfprintf+0x320>
    62dc:	03 c0       	rjmp	.+6      	; 0x62e4 <vfprintf+0x31e>
    62de:	8f 2d       	mov	r24, r15
    62e0:	86 78       	andi	r24, 0x86	; 134
    62e2:	09 f0       	breq	.+2      	; 0x62e6 <vfprintf+0x320>
    62e4:	1f 5f       	subi	r17, 0xFF	; 255
    62e6:	0f 2d       	mov	r16, r15
    62e8:	f3 fc       	sbrc	r15, 3
    62ea:	14 c0       	rjmp	.+40     	; 0x6314 <vfprintf+0x34e>
    62ec:	f0 fe       	sbrs	r15, 0
    62ee:	0f c0       	rjmp	.+30     	; 0x630e <vfprintf+0x348>
    62f0:	1e 15       	cp	r17, r14
    62f2:	10 f0       	brcs	.+4      	; 0x62f8 <vfprintf+0x332>
    62f4:	9d 2c       	mov	r9, r13
    62f6:	0b c0       	rjmp	.+22     	; 0x630e <vfprintf+0x348>
    62f8:	9d 2c       	mov	r9, r13
    62fa:	9e 0c       	add	r9, r14
    62fc:	91 1a       	sub	r9, r17
    62fe:	1e 2d       	mov	r17, r14
    6300:	06 c0       	rjmp	.+12     	; 0x630e <vfprintf+0x348>
    6302:	80 e2       	ldi	r24, 0x20	; 32
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	b3 01       	movw	r22, r6
    6308:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    630c:	1f 5f       	subi	r17, 0xFF	; 255
    630e:	1e 15       	cp	r17, r14
    6310:	c0 f3       	brcs	.-16     	; 0x6302 <vfprintf+0x33c>
    6312:	04 c0       	rjmp	.+8      	; 0x631c <vfprintf+0x356>
    6314:	1e 15       	cp	r17, r14
    6316:	10 f4       	brcc	.+4      	; 0x631c <vfprintf+0x356>
    6318:	e1 1a       	sub	r14, r17
    631a:	01 c0       	rjmp	.+2      	; 0x631e <vfprintf+0x358>
    631c:	ee 24       	eor	r14, r14
    631e:	04 ff       	sbrs	r16, 4
    6320:	0f c0       	rjmp	.+30     	; 0x6340 <vfprintf+0x37a>
    6322:	80 e3       	ldi	r24, 0x30	; 48
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	b3 01       	movw	r22, r6
    6328:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    632c:	02 ff       	sbrs	r16, 2
    632e:	1d c0       	rjmp	.+58     	; 0x636a <vfprintf+0x3a4>
    6330:	01 fd       	sbrc	r16, 1
    6332:	03 c0       	rjmp	.+6      	; 0x633a <vfprintf+0x374>
    6334:	88 e7       	ldi	r24, 0x78	; 120
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	0e c0       	rjmp	.+28     	; 0x6356 <vfprintf+0x390>
    633a:	88 e5       	ldi	r24, 0x58	; 88
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	0b c0       	rjmp	.+22     	; 0x6356 <vfprintf+0x390>
    6340:	80 2f       	mov	r24, r16
    6342:	86 78       	andi	r24, 0x86	; 134
    6344:	91 f0       	breq	.+36     	; 0x636a <vfprintf+0x3a4>
    6346:	01 ff       	sbrs	r16, 1
    6348:	02 c0       	rjmp	.+4      	; 0x634e <vfprintf+0x388>
    634a:	8b e2       	ldi	r24, 0x2B	; 43
    634c:	01 c0       	rjmp	.+2      	; 0x6350 <vfprintf+0x38a>
    634e:	80 e2       	ldi	r24, 0x20	; 32
    6350:	f7 fc       	sbrc	r15, 7
    6352:	8d e2       	ldi	r24, 0x2D	; 45
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	b3 01       	movw	r22, r6
    6358:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    635c:	06 c0       	rjmp	.+12     	; 0x636a <vfprintf+0x3a4>
    635e:	80 e3       	ldi	r24, 0x30	; 48
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	b3 01       	movw	r22, r6
    6364:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    6368:	9a 94       	dec	r9
    636a:	d9 14       	cp	r13, r9
    636c:	c0 f3       	brcs	.-16     	; 0x635e <vfprintf+0x398>
    636e:	da 94       	dec	r13
    6370:	f1 01       	movw	r30, r2
    6372:	ed 0d       	add	r30, r13
    6374:	f1 1d       	adc	r31, r1
    6376:	80 81       	ld	r24, Z
    6378:	90 e0       	ldi	r25, 0x00	; 0
    637a:	b3 01       	movw	r22, r6
    637c:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    6380:	dd 20       	and	r13, r13
    6382:	a9 f7       	brne	.-22     	; 0x636e <vfprintf+0x3a8>
    6384:	06 c0       	rjmp	.+12     	; 0x6392 <vfprintf+0x3cc>
    6386:	80 e2       	ldi	r24, 0x20	; 32
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	b3 01       	movw	r22, r6
    638c:	0e 94 5e 35 	call	0x6abc	; 0x6abc <fputc>
    6390:	ea 94       	dec	r14
    6392:	ee 20       	and	r14, r14
    6394:	c1 f7       	brne	.-16     	; 0x6386 <vfprintf+0x3c0>
    6396:	43 ce       	rjmp	.-890    	; 0x601e <vfprintf+0x58>
    6398:	f3 01       	movw	r30, r6
    639a:	66 81       	ldd	r22, Z+6	; 0x06
    639c:	77 81       	ldd	r23, Z+7	; 0x07
    639e:	cb 01       	movw	r24, r22
    63a0:	2b 96       	adiw	r28, 0x0b	; 11
    63a2:	0f b6       	in	r0, 0x3f	; 63
    63a4:	f8 94       	cli
    63a6:	de bf       	out	0x3e, r29	; 62
    63a8:	0f be       	out	0x3f, r0	; 63
    63aa:	cd bf       	out	0x3d, r28	; 61
    63ac:	cf 91       	pop	r28
    63ae:	df 91       	pop	r29
    63b0:	1f 91       	pop	r17
    63b2:	0f 91       	pop	r16
    63b4:	ff 90       	pop	r15
    63b6:	ef 90       	pop	r14
    63b8:	df 90       	pop	r13
    63ba:	cf 90       	pop	r12
    63bc:	bf 90       	pop	r11
    63be:	af 90       	pop	r10
    63c0:	9f 90       	pop	r9
    63c2:	8f 90       	pop	r8
    63c4:	7f 90       	pop	r7
    63c6:	6f 90       	pop	r6
    63c8:	5f 90       	pop	r5
    63ca:	4f 90       	pop	r4
    63cc:	3f 90       	pop	r3
    63ce:	2f 90       	pop	r2
    63d0:	08 95       	ret

000063d2 <putval>:
    63d2:	fc 01       	movw	r30, r24
    63d4:	20 fd       	sbrc	r18, 0
    63d6:	08 c0       	rjmp	.+16     	; 0x63e8 <putval+0x16>
    63d8:	23 fd       	sbrc	r18, 3
    63da:	05 c0       	rjmp	.+10     	; 0x63e6 <putval+0x14>
    63dc:	22 ff       	sbrs	r18, 2
    63de:	02 c0       	rjmp	.+4      	; 0x63e4 <putval+0x12>
    63e0:	73 83       	std	Z+3, r23	; 0x03
    63e2:	62 83       	std	Z+2, r22	; 0x02
    63e4:	51 83       	std	Z+1, r21	; 0x01
    63e6:	40 83       	st	Z, r20
    63e8:	08 95       	ret

000063ea <mulacc>:
    63ea:	ef 92       	push	r14
    63ec:	ff 92       	push	r15
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	44 ff       	sbrs	r20, 4
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <mulacc+0x10>
    63f6:	33 e0       	ldi	r19, 0x03	; 3
    63f8:	11 c0       	rjmp	.+34     	; 0x641c <mulacc+0x32>
    63fa:	46 ff       	sbrs	r20, 6
    63fc:	02 c0       	rjmp	.+4      	; 0x6402 <mulacc+0x18>
    63fe:	34 e0       	ldi	r19, 0x04	; 4
    6400:	0d c0       	rjmp	.+26     	; 0x641c <mulacc+0x32>
    6402:	db 01       	movw	r26, r22
    6404:	fc 01       	movw	r30, r24
    6406:	aa 0f       	add	r26, r26
    6408:	bb 1f       	adc	r27, r27
    640a:	ee 1f       	adc	r30, r30
    640c:	ff 1f       	adc	r31, r31
    640e:	10 94       	com	r1
    6410:	d1 f7       	brne	.-12     	; 0x6406 <mulacc+0x1c>
    6412:	6a 0f       	add	r22, r26
    6414:	7b 1f       	adc	r23, r27
    6416:	8e 1f       	adc	r24, r30
    6418:	9f 1f       	adc	r25, r31
    641a:	31 e0       	ldi	r19, 0x01	; 1
    641c:	66 0f       	add	r22, r22
    641e:	77 1f       	adc	r23, r23
    6420:	88 1f       	adc	r24, r24
    6422:	99 1f       	adc	r25, r25
    6424:	31 50       	subi	r19, 0x01	; 1
    6426:	d1 f7       	brne	.-12     	; 0x641c <mulacc+0x32>
    6428:	7b 01       	movw	r14, r22
    642a:	8c 01       	movw	r16, r24
    642c:	e2 0e       	add	r14, r18
    642e:	f1 1c       	adc	r15, r1
    6430:	01 1d       	adc	r16, r1
    6432:	11 1d       	adc	r17, r1
    6434:	a8 01       	movw	r20, r16
    6436:	97 01       	movw	r18, r14
    6438:	b7 01       	movw	r22, r14
    643a:	ca 01       	movw	r24, r20
    643c:	1f 91       	pop	r17
    643e:	0f 91       	pop	r16
    6440:	ff 90       	pop	r15
    6442:	ef 90       	pop	r14
    6444:	08 95       	ret

00006446 <skip_spaces>:
    6446:	0f 93       	push	r16
    6448:	1f 93       	push	r17
    644a:	cf 93       	push	r28
    644c:	df 93       	push	r29
    644e:	8c 01       	movw	r16, r24
    6450:	c8 01       	movw	r24, r16
    6452:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    6456:	ec 01       	movw	r28, r24
    6458:	97 fd       	sbrc	r25, 7
    645a:	08 c0       	rjmp	.+16     	; 0x646c <skip_spaces+0x26>
    645c:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <isspace>
    6460:	89 2b       	or	r24, r25
    6462:	b1 f7       	brne	.-20     	; 0x6450 <skip_spaces+0xa>
    6464:	ce 01       	movw	r24, r28
    6466:	b8 01       	movw	r22, r16
    6468:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ungetc>
    646c:	ce 01       	movw	r24, r28
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	1f 91       	pop	r17
    6474:	0f 91       	pop	r16
    6476:	08 95       	ret

00006478 <conv_int>:
    6478:	af 92       	push	r10
    647a:	bf 92       	push	r11
    647c:	cf 92       	push	r12
    647e:	df 92       	push	r13
    6480:	ef 92       	push	r14
    6482:	ff 92       	push	r15
    6484:	0f 93       	push	r16
    6486:	1f 93       	push	r17
    6488:	cf 93       	push	r28
    648a:	df 93       	push	r29
    648c:	ec 01       	movw	r28, r24
    648e:	c6 2e       	mov	r12, r22
    6490:	5a 01       	movw	r10, r20
    6492:	12 2f       	mov	r17, r18
    6494:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    6498:	ac 01       	movw	r20, r24
    649a:	8b 32       	cpi	r24, 0x2B	; 43
    649c:	19 f0       	breq	.+6      	; 0x64a4 <conv_int+0x2c>
    649e:	8d 32       	cpi	r24, 0x2D	; 45
    64a0:	51 f4       	brne	.+20     	; 0x64b6 <conv_int+0x3e>
    64a2:	10 68       	ori	r17, 0x80	; 128
    64a4:	ca 94       	dec	r12
    64a6:	09 f4       	brne	.+2      	; 0x64aa <conv_int+0x32>
    64a8:	6d c0       	rjmp	.+218    	; 0x6584 <conv_int+0x10c>
    64aa:	ce 01       	movw	r24, r28
    64ac:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    64b0:	ac 01       	movw	r20, r24
    64b2:	97 fd       	sbrc	r25, 7
    64b4:	67 c0       	rjmp	.+206    	; 0x6584 <conv_int+0x10c>
    64b6:	6d ef       	ldi	r22, 0xFD	; 253
    64b8:	d6 2e       	mov	r13, r22
    64ba:	d1 22       	and	r13, r17
    64bc:	8d 2d       	mov	r24, r13
    64be:	80 73       	andi	r24, 0x30	; 48
    64c0:	01 f5       	brne	.+64     	; 0x6502 <conv_int+0x8a>
    64c2:	40 33       	cpi	r20, 0x30	; 48
    64c4:	f1 f4       	brne	.+60     	; 0x6502 <conv_int+0x8a>
    64c6:	ca 94       	dec	r12
    64c8:	09 f4       	brne	.+2      	; 0x64cc <conv_int+0x54>
    64ca:	47 c0       	rjmp	.+142    	; 0x655a <conv_int+0xe2>
    64cc:	ce 01       	movw	r24, r28
    64ce:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    64d2:	ac 01       	movw	r20, r24
    64d4:	97 fd       	sbrc	r25, 7
    64d6:	41 c0       	rjmp	.+130    	; 0x655a <conv_int+0xe2>
    64d8:	82 e0       	ldi	r24, 0x02	; 2
    64da:	d8 2a       	or	r13, r24
    64dc:	48 37       	cpi	r20, 0x78	; 120
    64de:	11 f0       	breq	.+4      	; 0x64e4 <conv_int+0x6c>
    64e0:	48 35       	cpi	r20, 0x58	; 88
    64e2:	59 f4       	brne	.+22     	; 0x64fa <conv_int+0x82>
    64e4:	80 e4       	ldi	r24, 0x40	; 64
    64e6:	d8 2a       	or	r13, r24
    64e8:	ca 94       	dec	r12
    64ea:	b9 f1       	breq	.+110    	; 0x655a <conv_int+0xe2>
    64ec:	ce 01       	movw	r24, r28
    64ee:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    64f2:	ac 01       	movw	r20, r24
    64f4:	99 23       	and	r25, r25
    64f6:	2c f4       	brge	.+10     	; 0x6502 <conv_int+0x8a>
    64f8:	30 c0       	rjmp	.+96     	; 0x655a <conv_int+0xe2>
    64fa:	d6 fc       	sbrc	r13, 6
    64fc:	02 c0       	rjmp	.+4      	; 0x6502 <conv_int+0x8a>
    64fe:	80 e1       	ldi	r24, 0x10	; 16
    6500:	d8 2a       	or	r13, r24
    6502:	ee 24       	eor	r14, r14
    6504:	ff 24       	eor	r15, r15
    6506:	87 01       	movw	r16, r14
    6508:	24 2f       	mov	r18, r20
    650a:	20 53       	subi	r18, 0x30	; 48
    650c:	28 30       	cpi	r18, 0x08	; 8
    650e:	88 f0       	brcs	.+34     	; 0x6532 <conv_int+0xba>
    6510:	d4 fc       	sbrc	r13, 4
    6512:	09 c0       	rjmp	.+18     	; 0x6526 <conv_int+0xae>
    6514:	2a 30       	cpi	r18, 0x0A	; 10
    6516:	68 f0       	brcs	.+26     	; 0x6532 <conv_int+0xba>
    6518:	d6 fe       	sbrs	r13, 6
    651a:	05 c0       	rjmp	.+10     	; 0x6526 <conv_int+0xae>
    651c:	2f 7d       	andi	r18, 0xDF	; 223
    651e:	82 2f       	mov	r24, r18
    6520:	81 51       	subi	r24, 0x11	; 17
    6522:	86 30       	cpi	r24, 0x06	; 6
    6524:	28 f0       	brcs	.+10     	; 0x6530 <conv_int+0xb8>
    6526:	ca 01       	movw	r24, r20
    6528:	be 01       	movw	r22, r28
    652a:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ungetc>
    652e:	12 c0       	rjmp	.+36     	; 0x6554 <conv_int+0xdc>
    6530:	27 50       	subi	r18, 0x07	; 7
    6532:	c8 01       	movw	r24, r16
    6534:	b7 01       	movw	r22, r14
    6536:	4d 2d       	mov	r20, r13
    6538:	0e 94 f5 31 	call	0x63ea	; 0x63ea <mulacc>
    653c:	7b 01       	movw	r14, r22
    653e:	8c 01       	movw	r16, r24
    6540:	82 e0       	ldi	r24, 0x02	; 2
    6542:	d8 2a       	or	r13, r24
    6544:	ca 94       	dec	r12
    6546:	61 f0       	breq	.+24     	; 0x6560 <conv_int+0xe8>
    6548:	ce 01       	movw	r24, r28
    654a:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    654e:	ac 01       	movw	r20, r24
    6550:	97 ff       	sbrs	r25, 7
    6552:	da cf       	rjmp	.-76     	; 0x6508 <conv_int+0x90>
    6554:	d1 fc       	sbrc	r13, 1
    6556:	04 c0       	rjmp	.+8      	; 0x6560 <conv_int+0xe8>
    6558:	15 c0       	rjmp	.+42     	; 0x6584 <conv_int+0x10c>
    655a:	ee 24       	eor	r14, r14
    655c:	ff 24       	eor	r15, r15
    655e:	87 01       	movw	r16, r14
    6560:	d7 fe       	sbrs	r13, 7
    6562:	08 c0       	rjmp	.+16     	; 0x6574 <conv_int+0xfc>
    6564:	10 95       	com	r17
    6566:	00 95       	com	r16
    6568:	f0 94       	com	r15
    656a:	e0 94       	com	r14
    656c:	e1 1c       	adc	r14, r1
    656e:	f1 1c       	adc	r15, r1
    6570:	01 1d       	adc	r16, r1
    6572:	11 1d       	adc	r17, r1
    6574:	c5 01       	movw	r24, r10
    6576:	b8 01       	movw	r22, r16
    6578:	a7 01       	movw	r20, r14
    657a:	2d 2d       	mov	r18, r13
    657c:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <putval>
    6580:	81 e0       	ldi	r24, 0x01	; 1
    6582:	01 c0       	rjmp	.+2      	; 0x6586 <conv_int+0x10e>
    6584:	80 e0       	ldi	r24, 0x00	; 0
    6586:	df 91       	pop	r29
    6588:	cf 91       	pop	r28
    658a:	1f 91       	pop	r17
    658c:	0f 91       	pop	r16
    658e:	ff 90       	pop	r15
    6590:	ef 90       	pop	r14
    6592:	df 90       	pop	r13
    6594:	cf 90       	pop	r12
    6596:	bf 90       	pop	r11
    6598:	af 90       	pop	r10
    659a:	08 95       	ret

0000659c <conv_brk>:
    659c:	6f 92       	push	r6
    659e:	7f 92       	push	r7
    65a0:	8f 92       	push	r8
    65a2:	9f 92       	push	r9
    65a4:	af 92       	push	r10
    65a6:	bf 92       	push	r11
    65a8:	cf 92       	push	r12
    65aa:	df 92       	push	r13
    65ac:	ef 92       	push	r14
    65ae:	ff 92       	push	r15
    65b0:	0f 93       	push	r16
    65b2:	1f 93       	push	r17
    65b4:	df 93       	push	r29
    65b6:	cf 93       	push	r28
    65b8:	cd b7       	in	r28, 0x3d	; 61
    65ba:	de b7       	in	r29, 0x3e	; 62
    65bc:	a0 97       	sbiw	r28, 0x20	; 32
    65be:	0f b6       	in	r0, 0x3f	; 63
    65c0:	f8 94       	cli
    65c2:	de bf       	out	0x3e, r29	; 62
    65c4:	0f be       	out	0x3f, r0	; 63
    65c6:	cd bf       	out	0x3d, r28	; 61
    65c8:	6c 01       	movw	r12, r24
    65ca:	a6 2e       	mov	r10, r22
    65cc:	8a 01       	movw	r16, r20
    65ce:	79 01       	movw	r14, r18
    65d0:	fe 01       	movw	r30, r28
    65d2:	31 96       	adiw	r30, 0x01	; 1
    65d4:	80 e2       	ldi	r24, 0x20	; 32
    65d6:	df 01       	movw	r26, r30
    65d8:	1d 92       	st	X+, r1
    65da:	8a 95       	dec	r24
    65dc:	e9 f7       	brne	.-6      	; 0x65d8 <conv_brk+0x3c>
    65de:	70 e0       	ldi	r23, 0x00	; 0
    65e0:	30 e0       	ldi	r19, 0x00	; 0
    65e2:	60 e0       	ldi	r22, 0x00	; 0
    65e4:	40 e0       	ldi	r20, 0x00	; 0
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	4f 01       	movw	r8, r30
    65ea:	a1 e0       	ldi	r26, 0x01	; 1
    65ec:	b0 e0       	ldi	r27, 0x00	; 0
    65ee:	f6 01       	movw	r30, r12
    65f0:	83 81       	ldd	r24, Z+3	; 0x03
    65f2:	f7 01       	movw	r30, r14
    65f4:	83 fd       	sbrc	r24, 3
    65f6:	25 91       	lpm	r18, Z+
    65f8:	83 ff       	sbrs	r24, 3
    65fa:	21 91       	ld	r18, Z+
    65fc:	7f 01       	movw	r14, r30
    65fe:	22 23       	and	r18, r18
    6600:	09 f4       	brne	.+2      	; 0x6604 <conv_brk+0x68>
    6602:	7e c0       	rjmp	.+252    	; 0x6700 <conv_brk+0x164>
    6604:	2e 35       	cpi	r18, 0x5E	; 94
    6606:	19 f4       	brne	.+6      	; 0x660e <conv_brk+0x72>
    6608:	41 15       	cp	r20, r1
    660a:	51 05       	cpc	r21, r1
    660c:	69 f1       	breq	.+90     	; 0x6668 <conv_brk+0xcc>
    660e:	87 2f       	mov	r24, r23
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	84 17       	cp	r24, r20
    6614:	95 07       	cpc	r25, r21
    6616:	44 f4       	brge	.+16     	; 0x6628 <conv_brk+0x8c>
    6618:	2d 35       	cpi	r18, 0x5D	; 93
    661a:	51 f1       	breq	.+84     	; 0x6670 <conv_brk+0xd4>
    661c:	2d 32       	cpi	r18, 0x2D	; 45
    661e:	21 f4       	brne	.+8      	; 0x6628 <conv_brk+0x8c>
    6620:	33 23       	and	r19, r19
    6622:	29 f4       	brne	.+10     	; 0x662e <conv_brk+0x92>
    6624:	31 e0       	ldi	r19, 0x01	; 1
    6626:	21 c0       	rjmp	.+66     	; 0x666a <conv_brk+0xce>
    6628:	33 23       	and	r19, r19
    662a:	09 f4       	brne	.+2      	; 0x662e <conv_brk+0x92>
    662c:	62 2f       	mov	r22, r18
    662e:	32 2f       	mov	r19, r18
    6630:	83 2f       	mov	r24, r19
    6632:	86 95       	lsr	r24
    6634:	86 95       	lsr	r24
    6636:	86 95       	lsr	r24
    6638:	f4 01       	movw	r30, r8
    663a:	e8 0f       	add	r30, r24
    663c:	f1 1d       	adc	r31, r1
    663e:	83 2f       	mov	r24, r19
    6640:	87 70       	andi	r24, 0x07	; 7
    6642:	3d 01       	movw	r6, r26
    6644:	02 c0       	rjmp	.+4      	; 0x664a <conv_brk+0xae>
    6646:	66 0c       	add	r6, r6
    6648:	77 1c       	adc	r7, r7
    664a:	8a 95       	dec	r24
    664c:	e2 f7       	brpl	.-8      	; 0x6646 <conv_brk+0xaa>
    664e:	20 81       	ld	r18, Z
    6650:	26 29       	or	r18, r6
    6652:	20 83       	st	Z, r18
    6654:	36 17       	cp	r19, r22
    6656:	11 f4       	brne	.+4      	; 0x665c <conv_brk+0xc0>
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	07 c0       	rjmp	.+14     	; 0x666a <conv_brk+0xce>
    665c:	36 17       	cp	r19, r22
    665e:	10 f4       	brcc	.+4      	; 0x6664 <conv_brk+0xc8>
    6660:	3f 5f       	subi	r19, 0xFF	; 255
    6662:	e6 cf       	rjmp	.-52     	; 0x6630 <conv_brk+0x94>
    6664:	31 50       	subi	r19, 0x01	; 1
    6666:	e4 cf       	rjmp	.-56     	; 0x6630 <conv_brk+0x94>
    6668:	71 e0       	ldi	r23, 0x01	; 1
    666a:	4f 5f       	subi	r20, 0xFF	; 255
    666c:	5f 4f       	sbci	r21, 0xFF	; 255
    666e:	bf cf       	rjmp	.-130    	; 0x65ee <conv_brk+0x52>
    6670:	33 23       	and	r19, r19
    6672:	19 f0       	breq	.+6      	; 0x667a <conv_brk+0xde>
    6674:	8e 81       	ldd	r24, Y+6	; 0x06
    6676:	80 62       	ori	r24, 0x20	; 32
    6678:	8e 83       	std	Y+6, r24	; 0x06
    667a:	77 23       	and	r23, r23
    667c:	59 f0       	breq	.+22     	; 0x6694 <conv_brk+0xf8>
    667e:	fe 01       	movw	r30, r28
    6680:	31 96       	adiw	r30, 0x01	; 1
    6682:	9e 01       	movw	r18, r28
    6684:	2f 5d       	subi	r18, 0xDF	; 223
    6686:	3f 4f       	sbci	r19, 0xFF	; 255
    6688:	80 81       	ld	r24, Z
    668a:	80 95       	com	r24
    668c:	81 93       	st	Z+, r24
    668e:	e2 17       	cp	r30, r18
    6690:	f3 07       	cpc	r31, r19
    6692:	d1 f7       	brne	.-12     	; 0x6688 <conv_brk+0xec>
    6694:	bb 24       	eor	r11, r11
    6696:	b3 94       	inc	r11
    6698:	4e 01       	movw	r8, r28
    669a:	08 94       	sec
    669c:	81 1c       	adc	r8, r1
    669e:	91 1c       	adc	r9, r1
    66a0:	c6 01       	movw	r24, r12
    66a2:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    66a6:	ac 01       	movw	r20, r24
    66a8:	97 fd       	sbrc	r25, 7
    66aa:	22 c0       	rjmp	.+68     	; 0x66f0 <conv_brk+0x154>
    66ac:	86 95       	lsr	r24
    66ae:	86 95       	lsr	r24
    66b0:	86 95       	lsr	r24
    66b2:	f4 01       	movw	r30, r8
    66b4:	e8 0f       	add	r30, r24
    66b6:	f1 1d       	adc	r31, r1
    66b8:	80 81       	ld	r24, Z
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	9a 01       	movw	r18, r20
    66be:	27 70       	andi	r18, 0x07	; 7
    66c0:	30 70       	andi	r19, 0x00	; 0
    66c2:	02 c0       	rjmp	.+4      	; 0x66c8 <conv_brk+0x12c>
    66c4:	95 95       	asr	r25
    66c6:	87 95       	ror	r24
    66c8:	2a 95       	dec	r18
    66ca:	e2 f7       	brpl	.-8      	; 0x66c4 <conv_brk+0x128>
    66cc:	80 fd       	sbrc	r24, 0
    66ce:	05 c0       	rjmp	.+10     	; 0x66da <conv_brk+0x13e>
    66d0:	ca 01       	movw	r24, r20
    66d2:	b6 01       	movw	r22, r12
    66d4:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ungetc>
    66d8:	0b c0       	rjmp	.+22     	; 0x66f0 <conv_brk+0x154>
    66da:	01 15       	cp	r16, r1
    66dc:	11 05       	cpc	r17, r1
    66de:	19 f0       	breq	.+6      	; 0x66e6 <conv_brk+0x14a>
    66e0:	d8 01       	movw	r26, r16
    66e2:	4d 93       	st	X+, r20
    66e4:	8d 01       	movw	r16, r26
    66e6:	aa 94       	dec	r10
    66e8:	bb 24       	eor	r11, r11
    66ea:	aa 20       	and	r10, r10
    66ec:	c9 f6       	brne	.-78     	; 0x66a0 <conv_brk+0x104>
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <conv_brk+0x158>
    66f0:	bb 20       	and	r11, r11
    66f2:	31 f4       	brne	.+12     	; 0x6700 <conv_brk+0x164>
    66f4:	01 15       	cp	r16, r1
    66f6:	11 05       	cpc	r17, r1
    66f8:	29 f0       	breq	.+10     	; 0x6704 <conv_brk+0x168>
    66fa:	f8 01       	movw	r30, r16
    66fc:	10 82       	st	Z, r1
    66fe:	02 c0       	rjmp	.+4      	; 0x6704 <conv_brk+0x168>
    6700:	ee 24       	eor	r14, r14
    6702:	ff 24       	eor	r15, r15
    6704:	c7 01       	movw	r24, r14
    6706:	a0 96       	adiw	r28, 0x20	; 32
    6708:	0f b6       	in	r0, 0x3f	; 63
    670a:	f8 94       	cli
    670c:	de bf       	out	0x3e, r29	; 62
    670e:	0f be       	out	0x3f, r0	; 63
    6710:	cd bf       	out	0x3d, r28	; 61
    6712:	cf 91       	pop	r28
    6714:	df 91       	pop	r29
    6716:	1f 91       	pop	r17
    6718:	0f 91       	pop	r16
    671a:	ff 90       	pop	r15
    671c:	ef 90       	pop	r14
    671e:	df 90       	pop	r13
    6720:	cf 90       	pop	r12
    6722:	bf 90       	pop	r11
    6724:	af 90       	pop	r10
    6726:	9f 90       	pop	r9
    6728:	8f 90       	pop	r8
    672a:	7f 90       	pop	r7
    672c:	6f 90       	pop	r6
    672e:	08 95       	ret

00006730 <vfscanf>:
    6730:	6f 92       	push	r6
    6732:	7f 92       	push	r7
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	cf 92       	push	r12
    673e:	df 92       	push	r13
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	cf 93       	push	r28
    674a:	df 93       	push	r29
    674c:	5c 01       	movw	r10, r24
    674e:	6b 01       	movw	r12, r22
    6750:	3a 01       	movw	r6, r20
    6752:	fc 01       	movw	r30, r24
    6754:	17 82       	std	Z+7, r1	; 0x07
    6756:	16 82       	std	Z+6, r1	; 0x06
    6758:	88 24       	eor	r8, r8
    675a:	ea c0       	rjmp	.+468    	; 0x6930 <vfscanf+0x200>
    675c:	81 2f       	mov	r24, r17
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <isspace>
    6764:	89 2b       	or	r24, r25
    6766:	21 f0       	breq	.+8      	; 0x6770 <vfscanf+0x40>
    6768:	c5 01       	movw	r24, r10
    676a:	0e 94 23 32 	call	0x6446	; 0x6446 <skip_spaces>
    676e:	e0 c0       	rjmp	.+448    	; 0x6930 <vfscanf+0x200>
    6770:	15 32       	cpi	r17, 0x25	; 37
    6772:	49 f4       	brne	.+18     	; 0x6786 <vfscanf+0x56>
    6774:	f6 01       	movw	r30, r12
    6776:	f3 fc       	sbrc	r15, 3
    6778:	65 91       	lpm	r22, Z+
    677a:	f3 fe       	sbrs	r15, 3
    677c:	61 91       	ld	r22, Z+
    677e:	6f 01       	movw	r12, r30
    6780:	65 32       	cpi	r22, 0x25	; 37
    6782:	69 f4       	brne	.+26     	; 0x679e <vfscanf+0x6e>
    6784:	15 e2       	ldi	r17, 0x25	; 37
    6786:	c5 01       	movw	r24, r10
    6788:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    678c:	97 fd       	sbrc	r25, 7
    678e:	dc c0       	rjmp	.+440    	; 0x6948 <vfscanf+0x218>
    6790:	18 17       	cp	r17, r24
    6792:	09 f4       	brne	.+2      	; 0x6796 <vfscanf+0x66>
    6794:	cd c0       	rjmp	.+410    	; 0x6930 <vfscanf+0x200>
    6796:	b5 01       	movw	r22, r10
    6798:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ungetc>
    679c:	da c0       	rjmp	.+436    	; 0x6952 <vfscanf+0x222>
    679e:	6a 32       	cpi	r22, 0x2A	; 42
    67a0:	19 f0       	breq	.+6      	; 0x67a8 <vfscanf+0x78>
    67a2:	16 2f       	mov	r17, r22
    67a4:	00 e0       	ldi	r16, 0x00	; 0
    67a6:	06 c0       	rjmp	.+12     	; 0x67b4 <vfscanf+0x84>
    67a8:	f3 fc       	sbrc	r15, 3
    67aa:	15 91       	lpm	r17, Z+
    67ac:	f3 fe       	sbrs	r15, 3
    67ae:	11 91       	ld	r17, Z+
    67b0:	6f 01       	movw	r12, r30
    67b2:	01 e0       	ldi	r16, 0x01	; 1
    67b4:	99 24       	eor	r9, r9
    67b6:	0f c0       	rjmp	.+30     	; 0x67d6 <vfscanf+0xa6>
    67b8:	02 60       	ori	r16, 0x02	; 2
    67ba:	69 2d       	mov	r22, r9
    67bc:	70 e0       	ldi	r23, 0x00	; 0
    67be:	80 e0       	ldi	r24, 0x00	; 0
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	40 e2       	ldi	r20, 0x20	; 32
    67c4:	0e 94 f5 31 	call	0x63ea	; 0x63ea <mulacc>
    67c8:	96 2e       	mov	r9, r22
    67ca:	f6 01       	movw	r30, r12
    67cc:	f3 fc       	sbrc	r15, 3
    67ce:	15 91       	lpm	r17, Z+
    67d0:	f3 fe       	sbrs	r15, 3
    67d2:	11 91       	ld	r17, Z+
    67d4:	6f 01       	movw	r12, r30
    67d6:	21 2f       	mov	r18, r17
    67d8:	20 53       	subi	r18, 0x30	; 48
    67da:	2a 30       	cpi	r18, 0x0A	; 10
    67dc:	68 f3       	brcs	.-38     	; 0x67b8 <vfscanf+0x88>
    67de:	01 fd       	sbrc	r16, 1
    67e0:	03 c0       	rjmp	.+6      	; 0x67e8 <vfscanf+0xb8>
    67e2:	99 24       	eor	r9, r9
    67e4:	9a 94       	dec	r9
    67e6:	03 c0       	rjmp	.+6      	; 0x67ee <vfscanf+0xbe>
    67e8:	99 20       	and	r9, r9
    67ea:	09 f4       	brne	.+2      	; 0x67ee <vfscanf+0xbe>
    67ec:	b2 c0       	rjmp	.+356    	; 0x6952 <vfscanf+0x222>
    67ee:	18 36       	cpi	r17, 0x68	; 104
    67f0:	21 f0       	breq	.+8      	; 0x67fa <vfscanf+0xca>
    67f2:	1c 36       	cpi	r17, 0x6C	; 108
    67f4:	99 f4       	brne	.+38     	; 0x681c <vfscanf+0xec>
    67f6:	f6 01       	movw	r30, r12
    67f8:	0b c0       	rjmp	.+22     	; 0x6810 <vfscanf+0xe0>
    67fa:	f6 01       	movw	r30, r12
    67fc:	f3 fc       	sbrc	r15, 3
    67fe:	65 91       	lpm	r22, Z+
    6800:	f3 fe       	sbrs	r15, 3
    6802:	61 91       	ld	r22, Z+
    6804:	68 36       	cpi	r22, 0x68	; 104
    6806:	19 f0       	breq	.+6      	; 0x680e <vfscanf+0xde>
    6808:	6f 01       	movw	r12, r30
    680a:	16 2f       	mov	r17, r22
    680c:	07 c0       	rjmp	.+14     	; 0x681c <vfscanf+0xec>
    680e:	08 60       	ori	r16, 0x08	; 8
    6810:	04 60       	ori	r16, 0x04	; 4
    6812:	f3 fc       	sbrc	r15, 3
    6814:	15 91       	lpm	r17, Z+
    6816:	f3 fe       	sbrs	r15, 3
    6818:	11 91       	ld	r17, Z+
    681a:	6f 01       	movw	r12, r30
    681c:	11 23       	and	r17, r17
    681e:	09 f4       	brne	.+2      	; 0x6822 <vfscanf+0xf2>
    6820:	98 c0       	rjmp	.+304    	; 0x6952 <vfscanf+0x222>
    6822:	80 e2       	ldi	r24, 0x20	; 32
    6824:	91 e0       	ldi	r25, 0x01	; 1
    6826:	61 2f       	mov	r22, r17
    6828:	70 e0       	ldi	r23, 0x00	; 0
    682a:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <strchr_P>
    682e:	89 2b       	or	r24, r25
    6830:	09 f4       	brne	.+2      	; 0x6834 <vfscanf+0x104>
    6832:	8f c0       	rjmp	.+286    	; 0x6952 <vfscanf+0x222>
    6834:	80 2f       	mov	r24, r16
    6836:	00 ff       	sbrs	r16, 0
    6838:	03 c0       	rjmp	.+6      	; 0x6840 <vfscanf+0x110>
    683a:	ee 24       	eor	r14, r14
    683c:	ff 24       	eor	r15, r15
    683e:	07 c0       	rjmp	.+14     	; 0x684e <vfscanf+0x11e>
    6840:	f3 01       	movw	r30, r6
    6842:	e0 80       	ld	r14, Z
    6844:	f1 80       	ldd	r15, Z+1	; 0x01
    6846:	22 e0       	ldi	r18, 0x02	; 2
    6848:	30 e0       	ldi	r19, 0x00	; 0
    684a:	62 0e       	add	r6, r18
    684c:	73 1e       	adc	r7, r19
    684e:	1e 36       	cpi	r17, 0x6E	; 110
    6850:	51 f4       	brne	.+20     	; 0x6866 <vfscanf+0x136>
    6852:	f5 01       	movw	r30, r10
    6854:	46 81       	ldd	r20, Z+6	; 0x06
    6856:	57 81       	ldd	r21, Z+7	; 0x07
    6858:	60 e0       	ldi	r22, 0x00	; 0
    685a:	70 e0       	ldi	r23, 0x00	; 0
    685c:	c7 01       	movw	r24, r14
    685e:	20 2f       	mov	r18, r16
    6860:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <putval>
    6864:	65 c0       	rjmp	.+202    	; 0x6930 <vfscanf+0x200>
    6866:	13 36       	cpi	r17, 0x63	; 99
    6868:	91 f4       	brne	.+36     	; 0x688e <vfscanf+0x15e>
    686a:	81 fd       	sbrc	r24, 1
    686c:	02 c0       	rjmp	.+4      	; 0x6872 <vfscanf+0x142>
    686e:	99 24       	eor	r9, r9
    6870:	93 94       	inc	r9
    6872:	c5 01       	movw	r24, r10
    6874:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    6878:	97 fd       	sbrc	r25, 7
    687a:	66 c0       	rjmp	.+204    	; 0x6948 <vfscanf+0x218>
    687c:	e1 14       	cp	r14, r1
    687e:	f1 04       	cpc	r15, r1
    6880:	19 f0       	breq	.+6      	; 0x6888 <vfscanf+0x158>
    6882:	f7 01       	movw	r30, r14
    6884:	81 93       	st	Z+, r24
    6886:	7f 01       	movw	r14, r30
    6888:	9a 94       	dec	r9
    688a:	99 f7       	brne	.-26     	; 0x6872 <vfscanf+0x142>
    688c:	4f c0       	rjmp	.+158    	; 0x692c <vfscanf+0x1fc>
    688e:	1b 35       	cpi	r17, 0x5B	; 91
    6890:	59 f4       	brne	.+22     	; 0x68a8 <vfscanf+0x178>
    6892:	c5 01       	movw	r24, r10
    6894:	69 2d       	mov	r22, r9
    6896:	a7 01       	movw	r20, r14
    6898:	96 01       	movw	r18, r12
    689a:	0e 94 ce 32 	call	0x659c	; 0x659c <conv_brk>
    689e:	6c 01       	movw	r12, r24
    68a0:	00 97       	sbiw	r24, 0x00	; 0
    68a2:	09 f0       	breq	.+2      	; 0x68a6 <vfscanf+0x176>
    68a4:	43 c0       	rjmp	.+134    	; 0x692c <vfscanf+0x1fc>
    68a6:	3d c0       	rjmp	.+122    	; 0x6922 <vfscanf+0x1f2>
    68a8:	c5 01       	movw	r24, r10
    68aa:	0e 94 23 32 	call	0x6446	; 0x6446 <skip_spaces>
    68ae:	97 fd       	sbrc	r25, 7
    68b0:	4b c0       	rjmp	.+150    	; 0x6948 <vfscanf+0x218>
    68b2:	1f 36       	cpi	r17, 0x6F	; 111
    68b4:	59 f1       	breq	.+86     	; 0x690c <vfscanf+0x1dc>
    68b6:	10 37       	cpi	r17, 0x70	; 112
    68b8:	28 f4       	brcc	.+10     	; 0x68c4 <vfscanf+0x194>
    68ba:	14 36       	cpi	r17, 0x64	; 100
    68bc:	29 f1       	breq	.+74     	; 0x6908 <vfscanf+0x1d8>
    68be:	19 36       	cpi	r17, 0x69	; 105
    68c0:	39 f5       	brne	.+78     	; 0x6910 <vfscanf+0x1e0>
    68c2:	27 c0       	rjmp	.+78     	; 0x6912 <vfscanf+0x1e2>
    68c4:	13 37       	cpi	r17, 0x73	; 115
    68c6:	19 f0       	breq	.+6      	; 0x68ce <vfscanf+0x19e>
    68c8:	15 37       	cpi	r17, 0x75	; 117
    68ca:	11 f5       	brne	.+68     	; 0x6910 <vfscanf+0x1e0>
    68cc:	1d c0       	rjmp	.+58     	; 0x6908 <vfscanf+0x1d8>
    68ce:	c5 01       	movw	r24, r10
    68d0:	0e 94 1c 35 	call	0x6a38	; 0x6a38 <fgetc>
    68d4:	ec 01       	movw	r28, r24
    68d6:	97 fd       	sbrc	r25, 7
    68d8:	11 c0       	rjmp	.+34     	; 0x68fc <vfscanf+0x1cc>
    68da:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <isspace>
    68de:	89 2b       	or	r24, r25
    68e0:	29 f0       	breq	.+10     	; 0x68ec <vfscanf+0x1bc>
    68e2:	ce 01       	movw	r24, r28
    68e4:	b5 01       	movw	r22, r10
    68e6:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <ungetc>
    68ea:	08 c0       	rjmp	.+16     	; 0x68fc <vfscanf+0x1cc>
    68ec:	e1 14       	cp	r14, r1
    68ee:	f1 04       	cpc	r15, r1
    68f0:	19 f0       	breq	.+6      	; 0x68f8 <vfscanf+0x1c8>
    68f2:	f7 01       	movw	r30, r14
    68f4:	c1 93       	st	Z+, r28
    68f6:	7f 01       	movw	r14, r30
    68f8:	9a 94       	dec	r9
    68fa:	49 f7       	brne	.-46     	; 0x68ce <vfscanf+0x19e>
    68fc:	e1 14       	cp	r14, r1
    68fe:	f1 04       	cpc	r15, r1
    6900:	a9 f0       	breq	.+42     	; 0x692c <vfscanf+0x1fc>
    6902:	f7 01       	movw	r30, r14
    6904:	10 82       	st	Z, r1
    6906:	12 c0       	rjmp	.+36     	; 0x692c <vfscanf+0x1fc>
    6908:	00 62       	ori	r16, 0x20	; 32
    690a:	03 c0       	rjmp	.+6      	; 0x6912 <vfscanf+0x1e2>
    690c:	00 61       	ori	r16, 0x10	; 16
    690e:	01 c0       	rjmp	.+2      	; 0x6912 <vfscanf+0x1e2>
    6910:	00 64       	ori	r16, 0x40	; 64
    6912:	c5 01       	movw	r24, r10
    6914:	69 2d       	mov	r22, r9
    6916:	a7 01       	movw	r20, r14
    6918:	20 2f       	mov	r18, r16
    691a:	0e 94 3c 32 	call	0x6478	; 0x6478 <conv_int>
    691e:	88 23       	and	r24, r24
    6920:	29 f4       	brne	.+10     	; 0x692c <vfscanf+0x1fc>
    6922:	f5 01       	movw	r30, r10
    6924:	83 81       	ldd	r24, Z+3	; 0x03
    6926:	80 73       	andi	r24, 0x30	; 48
    6928:	79 f4       	brne	.+30     	; 0x6948 <vfscanf+0x218>
    692a:	13 c0       	rjmp	.+38     	; 0x6952 <vfscanf+0x222>
    692c:	00 ff       	sbrs	r16, 0
    692e:	83 94       	inc	r8
    6930:	f5 01       	movw	r30, r10
    6932:	f3 80       	ldd	r15, Z+3	; 0x03
    6934:	f6 01       	movw	r30, r12
    6936:	f3 fc       	sbrc	r15, 3
    6938:	15 91       	lpm	r17, Z+
    693a:	f3 fe       	sbrs	r15, 3
    693c:	11 91       	ld	r17, Z+
    693e:	6f 01       	movw	r12, r30
    6940:	11 23       	and	r17, r17
    6942:	09 f0       	breq	.+2      	; 0x6946 <vfscanf+0x216>
    6944:	0b cf       	rjmp	.-490    	; 0x675c <vfscanf+0x2c>
    6946:	05 c0       	rjmp	.+10     	; 0x6952 <vfscanf+0x222>
    6948:	88 20       	and	r8, r8
    694a:	19 f4       	brne	.+6      	; 0x6952 <vfscanf+0x222>
    694c:	2f ef       	ldi	r18, 0xFF	; 255
    694e:	3f ef       	ldi	r19, 0xFF	; 255
    6950:	02 c0       	rjmp	.+4      	; 0x6956 <vfscanf+0x226>
    6952:	28 2d       	mov	r18, r8
    6954:	30 e0       	ldi	r19, 0x00	; 0
    6956:	c9 01       	movw	r24, r18
    6958:	df 91       	pop	r29
    695a:	cf 91       	pop	r28
    695c:	1f 91       	pop	r17
    695e:	0f 91       	pop	r16
    6960:	ff 90       	pop	r15
    6962:	ef 90       	pop	r14
    6964:	df 90       	pop	r13
    6966:	cf 90       	pop	r12
    6968:	bf 90       	pop	r11
    696a:	af 90       	pop	r10
    696c:	9f 90       	pop	r9
    696e:	8f 90       	pop	r8
    6970:	7f 90       	pop	r7
    6972:	6f 90       	pop	r6
    6974:	08 95       	ret

00006976 <__eerd_block_m128rfa1>:
    6976:	dc 01       	movw	r26, r24
    6978:	cb 01       	movw	r24, r22

0000697a <__eerd_blraw_m128rfa1>:
    697a:	fc 01       	movw	r30, r24
    697c:	f9 99       	sbic	0x1f, 1	; 31
    697e:	fe cf       	rjmp	.-4      	; 0x697c <__eerd_blraw_m128rfa1+0x2>
    6980:	06 c0       	rjmp	.+12     	; 0x698e <__eerd_blraw_m128rfa1+0x14>
    6982:	f2 bd       	out	0x22, r31	; 34
    6984:	e1 bd       	out	0x21, r30	; 33
    6986:	f8 9a       	sbi	0x1f, 0	; 31
    6988:	31 96       	adiw	r30, 0x01	; 1
    698a:	00 b4       	in	r0, 0x20	; 32
    698c:	0d 92       	st	X+, r0
    698e:	41 50       	subi	r20, 0x01	; 1
    6990:	50 40       	sbci	r21, 0x00	; 0
    6992:	b8 f7       	brcc	.-18     	; 0x6982 <__eerd_blraw_m128rfa1+0x8>
    6994:	08 95       	ret

00006996 <__eewr_block_m128rfa1>:
    6996:	dc 01       	movw	r26, r24
    6998:	cb 01       	movw	r24, r22
    699a:	03 c0       	rjmp	.+6      	; 0x69a2 <__eewr_block_m128rfa1+0xc>
    699c:	2d 91       	ld	r18, X+
    699e:	0e 94 d6 34 	call	0x69ac	; 0x69ac <__eewr_r18_m128rfa1>
    69a2:	41 50       	subi	r20, 0x01	; 1
    69a4:	50 40       	sbci	r21, 0x00	; 0
    69a6:	d0 f7       	brcc	.-12     	; 0x699c <__eewr_block_m128rfa1+0x6>
    69a8:	08 95       	ret

000069aa <__eewr_byte_m128rfa1>:
    69aa:	26 2f       	mov	r18, r22

000069ac <__eewr_r18_m128rfa1>:
    69ac:	f9 99       	sbic	0x1f, 1	; 31
    69ae:	fe cf       	rjmp	.-4      	; 0x69ac <__eewr_r18_m128rfa1>
    69b0:	1f ba       	out	0x1f, r1	; 31
    69b2:	92 bd       	out	0x22, r25	; 34
    69b4:	81 bd       	out	0x21, r24	; 33
    69b6:	20 bd       	out	0x20, r18	; 32
    69b8:	0f b6       	in	r0, 0x3f	; 63
    69ba:	f8 94       	cli
    69bc:	fa 9a       	sbi	0x1f, 2	; 31
    69be:	f9 9a       	sbi	0x1f, 1	; 31
    69c0:	0f be       	out	0x3f, r0	; 63
    69c2:	01 96       	adiw	r24, 0x01	; 1
    69c4:	08 95       	ret

000069c6 <isspace>:
    69c6:	91 11       	cpse	r25, r1
    69c8:	1d c1       	rjmp	.+570    	; 0x6c04 <__ctype_isfalse>
    69ca:	80 32       	cpi	r24, 0x20	; 32
    69cc:	19 f0       	breq	.+6      	; 0x69d4 <isspace+0xe>
    69ce:	89 50       	subi	r24, 0x09	; 9
    69d0:	85 50       	subi	r24, 0x05	; 5
    69d2:	d0 f7       	brcc	.-12     	; 0x69c8 <isspace+0x2>
    69d4:	08 95       	ret

000069d6 <strchr_P>:
    69d6:	fc 01       	movw	r30, r24
    69d8:	05 90       	lpm	r0, Z+
    69da:	06 16       	cp	r0, r22
    69dc:	21 f0       	breq	.+8      	; 0x69e6 <strchr_P+0x10>
    69de:	00 20       	and	r0, r0
    69e0:	d9 f7       	brne	.-10     	; 0x69d8 <strchr_P+0x2>
    69e2:	c0 01       	movw	r24, r0
    69e4:	08 95       	ret
    69e6:	31 97       	sbiw	r30, 0x01	; 1
    69e8:	cf 01       	movw	r24, r30
    69ea:	08 95       	ret

000069ec <strnlen_P>:
    69ec:	fc 01       	movw	r30, r24
    69ee:	05 90       	lpm	r0, Z+
    69f0:	61 50       	subi	r22, 0x01	; 1
    69f2:	70 40       	sbci	r23, 0x00	; 0
    69f4:	01 10       	cpse	r0, r1
    69f6:	d8 f7       	brcc	.-10     	; 0x69ee <strnlen_P+0x2>
    69f8:	80 95       	com	r24
    69fa:	90 95       	com	r25
    69fc:	8e 0f       	add	r24, r30
    69fe:	9f 1f       	adc	r25, r31
    6a00:	08 95       	ret

00006a02 <strnlen>:
    6a02:	fc 01       	movw	r30, r24
    6a04:	61 50       	subi	r22, 0x01	; 1
    6a06:	70 40       	sbci	r23, 0x00	; 0
    6a08:	01 90       	ld	r0, Z+
    6a0a:	01 10       	cpse	r0, r1
    6a0c:	d8 f7       	brcc	.-10     	; 0x6a04 <strnlen+0x2>
    6a0e:	80 95       	com	r24
    6a10:	90 95       	com	r25
    6a12:	8e 0f       	add	r24, r30
    6a14:	9f 1f       	adc	r25, r31
    6a16:	08 95       	ret

00006a18 <strrev>:
    6a18:	dc 01       	movw	r26, r24
    6a1a:	fc 01       	movw	r30, r24
    6a1c:	67 2f       	mov	r22, r23
    6a1e:	71 91       	ld	r23, Z+
    6a20:	77 23       	and	r23, r23
    6a22:	e1 f7       	brne	.-8      	; 0x6a1c <strrev+0x4>
    6a24:	32 97       	sbiw	r30, 0x02	; 2
    6a26:	04 c0       	rjmp	.+8      	; 0x6a30 <strrev+0x18>
    6a28:	7c 91       	ld	r23, X
    6a2a:	6d 93       	st	X+, r22
    6a2c:	70 83       	st	Z, r23
    6a2e:	62 91       	ld	r22, -Z
    6a30:	ae 17       	cp	r26, r30
    6a32:	bf 07       	cpc	r27, r31
    6a34:	c8 f3       	brcs	.-14     	; 0x6a28 <strrev+0x10>
    6a36:	08 95       	ret

00006a38 <fgetc>:
    6a38:	cf 93       	push	r28
    6a3a:	df 93       	push	r29
    6a3c:	ec 01       	movw	r28, r24
    6a3e:	4b 81       	ldd	r20, Y+3	; 0x03
    6a40:	40 ff       	sbrs	r20, 0
    6a42:	1a c0       	rjmp	.+52     	; 0x6a78 <fgetc+0x40>
    6a44:	46 ff       	sbrs	r20, 6
    6a46:	0a c0       	rjmp	.+20     	; 0x6a5c <fgetc+0x24>
    6a48:	4f 7b       	andi	r20, 0xBF	; 191
    6a4a:	4b 83       	std	Y+3, r20	; 0x03
    6a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    6a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    6a50:	01 96       	adiw	r24, 0x01	; 1
    6a52:	9f 83       	std	Y+7, r25	; 0x07
    6a54:	8e 83       	std	Y+6, r24	; 0x06
    6a56:	8a 81       	ldd	r24, Y+2	; 0x02
    6a58:	28 2f       	mov	r18, r24
    6a5a:	2b c0       	rjmp	.+86     	; 0x6ab2 <fgetc+0x7a>
    6a5c:	42 ff       	sbrs	r20, 2
    6a5e:	13 c0       	rjmp	.+38     	; 0x6a86 <fgetc+0x4e>
    6a60:	e8 81       	ld	r30, Y
    6a62:	f9 81       	ldd	r31, Y+1	; 0x01
    6a64:	80 81       	ld	r24, Z
    6a66:	28 2f       	mov	r18, r24
    6a68:	33 27       	eor	r19, r19
    6a6a:	27 fd       	sbrc	r18, 7
    6a6c:	30 95       	com	r19
    6a6e:	21 15       	cp	r18, r1
    6a70:	31 05       	cpc	r19, r1
    6a72:	29 f4       	brne	.+10     	; 0x6a7e <fgetc+0x46>
    6a74:	40 62       	ori	r20, 0x20	; 32
    6a76:	4b 83       	std	Y+3, r20	; 0x03
    6a78:	2f ef       	ldi	r18, 0xFF	; 255
    6a7a:	3f ef       	ldi	r19, 0xFF	; 255
    6a7c:	1b c0       	rjmp	.+54     	; 0x6ab4 <fgetc+0x7c>
    6a7e:	31 96       	adiw	r30, 0x01	; 1
    6a80:	f9 83       	std	Y+1, r31	; 0x01
    6a82:	e8 83       	st	Y, r30
    6a84:	11 c0       	rjmp	.+34     	; 0x6aa8 <fgetc+0x70>
    6a86:	ea 85       	ldd	r30, Y+10	; 0x0a
    6a88:	fb 85       	ldd	r31, Y+11	; 0x0b
    6a8a:	ce 01       	movw	r24, r28
    6a8c:	09 95       	icall
    6a8e:	9c 01       	movw	r18, r24
    6a90:	97 ff       	sbrs	r25, 7
    6a92:	0a c0       	rjmp	.+20     	; 0x6aa8 <fgetc+0x70>
    6a94:	9b 81       	ldd	r25, Y+3	; 0x03
    6a96:	2f 5f       	subi	r18, 0xFF	; 255
    6a98:	3f 4f       	sbci	r19, 0xFF	; 255
    6a9a:	11 f0       	breq	.+4      	; 0x6aa0 <fgetc+0x68>
    6a9c:	80 e2       	ldi	r24, 0x20	; 32
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <fgetc+0x6a>
    6aa0:	80 e1       	ldi	r24, 0x10	; 16
    6aa2:	89 2b       	or	r24, r25
    6aa4:	8b 83       	std	Y+3, r24	; 0x03
    6aa6:	e8 cf       	rjmp	.-48     	; 0x6a78 <fgetc+0x40>
    6aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    6aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    6aac:	01 96       	adiw	r24, 0x01	; 1
    6aae:	9f 83       	std	Y+7, r25	; 0x07
    6ab0:	8e 83       	std	Y+6, r24	; 0x06
    6ab2:	30 e0       	ldi	r19, 0x00	; 0
    6ab4:	c9 01       	movw	r24, r18
    6ab6:	df 91       	pop	r29
    6ab8:	cf 91       	pop	r28
    6aba:	08 95       	ret

00006abc <fputc>:
    6abc:	0f 93       	push	r16
    6abe:	1f 93       	push	r17
    6ac0:	cf 93       	push	r28
    6ac2:	df 93       	push	r29
    6ac4:	8c 01       	movw	r16, r24
    6ac6:	eb 01       	movw	r28, r22
    6ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    6aca:	81 ff       	sbrs	r24, 1
    6acc:	1b c0       	rjmp	.+54     	; 0x6b04 <fputc+0x48>
    6ace:	82 ff       	sbrs	r24, 2
    6ad0:	0d c0       	rjmp	.+26     	; 0x6aec <fputc+0x30>
    6ad2:	2e 81       	ldd	r18, Y+6	; 0x06
    6ad4:	3f 81       	ldd	r19, Y+7	; 0x07
    6ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    6ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    6ada:	28 17       	cp	r18, r24
    6adc:	39 07       	cpc	r19, r25
    6ade:	64 f4       	brge	.+24     	; 0x6af8 <fputc+0x3c>
    6ae0:	e8 81       	ld	r30, Y
    6ae2:	f9 81       	ldd	r31, Y+1	; 0x01
    6ae4:	01 93       	st	Z+, r16
    6ae6:	f9 83       	std	Y+1, r31	; 0x01
    6ae8:	e8 83       	st	Y, r30
    6aea:	06 c0       	rjmp	.+12     	; 0x6af8 <fputc+0x3c>
    6aec:	e8 85       	ldd	r30, Y+8	; 0x08
    6aee:	f9 85       	ldd	r31, Y+9	; 0x09
    6af0:	80 2f       	mov	r24, r16
    6af2:	09 95       	icall
    6af4:	89 2b       	or	r24, r25
    6af6:	31 f4       	brne	.+12     	; 0x6b04 <fputc+0x48>
    6af8:	8e 81       	ldd	r24, Y+6	; 0x06
    6afa:	9f 81       	ldd	r25, Y+7	; 0x07
    6afc:	01 96       	adiw	r24, 0x01	; 1
    6afe:	9f 83       	std	Y+7, r25	; 0x07
    6b00:	8e 83       	std	Y+6, r24	; 0x06
    6b02:	02 c0       	rjmp	.+4      	; 0x6b08 <fputc+0x4c>
    6b04:	0f ef       	ldi	r16, 0xFF	; 255
    6b06:	1f ef       	ldi	r17, 0xFF	; 255
    6b08:	c8 01       	movw	r24, r16
    6b0a:	df 91       	pop	r29
    6b0c:	cf 91       	pop	r28
    6b0e:	1f 91       	pop	r17
    6b10:	0f 91       	pop	r16
    6b12:	08 95       	ret

00006b14 <ungetc>:
    6b14:	9c 01       	movw	r18, r24
    6b16:	fb 01       	movw	r30, r22
    6b18:	83 81       	ldd	r24, Z+3	; 0x03
    6b1a:	80 ff       	sbrs	r24, 0
    6b1c:	11 c0       	rjmp	.+34     	; 0x6b40 <ungetc+0x2c>
    6b1e:	86 fd       	sbrc	r24, 6
    6b20:	0f c0       	rjmp	.+30     	; 0x6b40 <ungetc+0x2c>
    6b22:	9f ef       	ldi	r25, 0xFF	; 255
    6b24:	2f 3f       	cpi	r18, 0xFF	; 255
    6b26:	39 07       	cpc	r19, r25
    6b28:	59 f0       	breq	.+22     	; 0x6b40 <ungetc+0x2c>
    6b2a:	22 83       	std	Z+2, r18	; 0x02
    6b2c:	80 64       	ori	r24, 0x40	; 64
    6b2e:	8f 7d       	andi	r24, 0xDF	; 223
    6b30:	83 83       	std	Z+3, r24	; 0x03
    6b32:	86 81       	ldd	r24, Z+6	; 0x06
    6b34:	97 81       	ldd	r25, Z+7	; 0x07
    6b36:	01 97       	sbiw	r24, 0x01	; 1
    6b38:	97 83       	std	Z+7, r25	; 0x07
    6b3a:	86 83       	std	Z+6, r24	; 0x06
    6b3c:	30 e0       	ldi	r19, 0x00	; 0
    6b3e:	02 c0       	rjmp	.+4      	; 0x6b44 <ungetc+0x30>
    6b40:	2f ef       	ldi	r18, 0xFF	; 255
    6b42:	3f ef       	ldi	r19, 0xFF	; 255
    6b44:	c9 01       	movw	r24, r18
    6b46:	08 95       	ret

00006b48 <__ultoa_invert>:
    6b48:	fa 01       	movw	r30, r20
    6b4a:	aa 27       	eor	r26, r26
    6b4c:	28 30       	cpi	r18, 0x08	; 8
    6b4e:	51 f1       	breq	.+84     	; 0x6ba4 <__ultoa_invert+0x5c>
    6b50:	20 31       	cpi	r18, 0x10	; 16
    6b52:	81 f1       	breq	.+96     	; 0x6bb4 <__ultoa_invert+0x6c>
    6b54:	e8 94       	clt
    6b56:	6f 93       	push	r22
    6b58:	6e 7f       	andi	r22, 0xFE	; 254
    6b5a:	6e 5f       	subi	r22, 0xFE	; 254
    6b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    6b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    6b60:	9f 4f       	sbci	r25, 0xFF	; 255
    6b62:	af 4f       	sbci	r26, 0xFF	; 255
    6b64:	b1 e0       	ldi	r27, 0x01	; 1
    6b66:	3e d0       	rcall	.+124    	; 0x6be4 <__ultoa_invert+0x9c>
    6b68:	b4 e0       	ldi	r27, 0x04	; 4
    6b6a:	3c d0       	rcall	.+120    	; 0x6be4 <__ultoa_invert+0x9c>
    6b6c:	67 0f       	add	r22, r23
    6b6e:	78 1f       	adc	r23, r24
    6b70:	89 1f       	adc	r24, r25
    6b72:	9a 1f       	adc	r25, r26
    6b74:	a1 1d       	adc	r26, r1
    6b76:	68 0f       	add	r22, r24
    6b78:	79 1f       	adc	r23, r25
    6b7a:	8a 1f       	adc	r24, r26
    6b7c:	91 1d       	adc	r25, r1
    6b7e:	a1 1d       	adc	r26, r1
    6b80:	6a 0f       	add	r22, r26
    6b82:	71 1d       	adc	r23, r1
    6b84:	81 1d       	adc	r24, r1
    6b86:	91 1d       	adc	r25, r1
    6b88:	a1 1d       	adc	r26, r1
    6b8a:	20 d0       	rcall	.+64     	; 0x6bcc <__ultoa_invert+0x84>
    6b8c:	09 f4       	brne	.+2      	; 0x6b90 <__ultoa_invert+0x48>
    6b8e:	68 94       	set
    6b90:	3f 91       	pop	r19
    6b92:	2a e0       	ldi	r18, 0x0A	; 10
    6b94:	26 9f       	mul	r18, r22
    6b96:	11 24       	eor	r1, r1
    6b98:	30 19       	sub	r19, r0
    6b9a:	30 5d       	subi	r19, 0xD0	; 208
    6b9c:	31 93       	st	Z+, r19
    6b9e:	de f6       	brtc	.-74     	; 0x6b56 <__ultoa_invert+0xe>
    6ba0:	cf 01       	movw	r24, r30
    6ba2:	08 95       	ret
    6ba4:	46 2f       	mov	r20, r22
    6ba6:	47 70       	andi	r20, 0x07	; 7
    6ba8:	40 5d       	subi	r20, 0xD0	; 208
    6baa:	41 93       	st	Z+, r20
    6bac:	b3 e0       	ldi	r27, 0x03	; 3
    6bae:	0f d0       	rcall	.+30     	; 0x6bce <__ultoa_invert+0x86>
    6bb0:	c9 f7       	brne	.-14     	; 0x6ba4 <__ultoa_invert+0x5c>
    6bb2:	f6 cf       	rjmp	.-20     	; 0x6ba0 <__ultoa_invert+0x58>
    6bb4:	46 2f       	mov	r20, r22
    6bb6:	4f 70       	andi	r20, 0x0F	; 15
    6bb8:	40 5d       	subi	r20, 0xD0	; 208
    6bba:	4a 33       	cpi	r20, 0x3A	; 58
    6bbc:	18 f0       	brcs	.+6      	; 0x6bc4 <__ultoa_invert+0x7c>
    6bbe:	49 5d       	subi	r20, 0xD9	; 217
    6bc0:	31 fd       	sbrc	r19, 1
    6bc2:	40 52       	subi	r20, 0x20	; 32
    6bc4:	41 93       	st	Z+, r20
    6bc6:	02 d0       	rcall	.+4      	; 0x6bcc <__ultoa_invert+0x84>
    6bc8:	a9 f7       	brne	.-22     	; 0x6bb4 <__ultoa_invert+0x6c>
    6bca:	ea cf       	rjmp	.-44     	; 0x6ba0 <__ultoa_invert+0x58>
    6bcc:	b4 e0       	ldi	r27, 0x04	; 4
    6bce:	a6 95       	lsr	r26
    6bd0:	97 95       	ror	r25
    6bd2:	87 95       	ror	r24
    6bd4:	77 95       	ror	r23
    6bd6:	67 95       	ror	r22
    6bd8:	ba 95       	dec	r27
    6bda:	c9 f7       	brne	.-14     	; 0x6bce <__ultoa_invert+0x86>
    6bdc:	00 97       	sbiw	r24, 0x00	; 0
    6bde:	61 05       	cpc	r22, r1
    6be0:	71 05       	cpc	r23, r1
    6be2:	08 95       	ret
    6be4:	9b 01       	movw	r18, r22
    6be6:	ac 01       	movw	r20, r24
    6be8:	0a 2e       	mov	r0, r26
    6bea:	06 94       	lsr	r0
    6bec:	57 95       	ror	r21
    6bee:	47 95       	ror	r20
    6bf0:	37 95       	ror	r19
    6bf2:	27 95       	ror	r18
    6bf4:	ba 95       	dec	r27
    6bf6:	c9 f7       	brne	.-14     	; 0x6bea <__ultoa_invert+0xa2>
    6bf8:	62 0f       	add	r22, r18
    6bfa:	73 1f       	adc	r23, r19
    6bfc:	84 1f       	adc	r24, r20
    6bfe:	95 1f       	adc	r25, r21
    6c00:	a0 1d       	adc	r26, r0
    6c02:	08 95       	ret

00006c04 <__ctype_isfalse>:
    6c04:	99 27       	eor	r25, r25
    6c06:	88 27       	eor	r24, r24

00006c08 <__ctype_istrue>:
    6c08:	08 95       	ret

00006c0a <_exit>:
    6c0a:	f8 94       	cli

00006c0c <__stop_program>:
    6c0c:	ff cf       	rjmp	.-2      	; 0x6c0c <__stop_program>
